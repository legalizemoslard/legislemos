{"version":3,"sources":["webpack:///./app/components/admin/ResolutionControl/messages.ts","webpack:///./app/resources/GetPollQuestions.tsx","webpack:///./app/hooks/usePollResponses.ts","webpack:///./app/services/pollResponses.ts","webpack:///./app/services/pollOptions.ts","webpack:///./app/components/admin/ResolutionControl/index.tsx","webpack:///./app/services/pollQuestions.ts","webpack:///./app/resources/GetIdeas.tsx","webpack:///./app/services/stats.ts","webpack:///./app/hooks/usePollOptions.ts"],"names":["defineMessages","resolutionday","id","defaultMessage","resolutionweek","resolutionmonth","GetPollQuestions","props","state","pollQuestions","undefined","this","participationContextType","participationContextId","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","tap","setState","filter","isString","includes","switchMap","pollQuestionsStream","observable","subscribe","isNilOrError","data","forEach","subscription","unsubscribe","children","React","Component","useState","pollResponses","setPollResponses","useEffect","of","getPollResponses","response","streams","get","apiEndpoint","API_PATH","optionIds","projectId","add","response_options_attributes","map","optionId","option_id","fetchAllWith","dataId","fileName","requestBlob","blob","saveAs","questionId","titleMultiloc","title_multiloc","delete","update","Container","styled","div","ResolutionControl","resolution","onChange","value","className","resOptions","name","label","FormattedMessage","messages","items","selectedValue","find","item","onClick","handleOnResolutionChange","PureComponent","newPosition","ordering","diff","participation_context_id","participation_context_type","capitalizeParticipationContextType","GetIdeas","projects","projectIds","pageNumber","pageSize","phase","phaseId","author","authorId","sort","topics","areas","idea_status","ideaStatusId","publication_status","publicationStatus","project_publication_status","projectPublicationStatus","bounding_box","boundingBox","assignee","feedback_needed","feedbackNeeded","search","queryParamsShaped","propsToQueryParamsShape","Object","keys","key","queryParameters","isNil","isArray","inputPropsQueryParameters","omitBy","loadingMore","queryParameters$","ideaStatus","ideaFilters","paramsToOmit","defaultQueryParameters","getQueryParametersFromProps","length","omit","getQueryParameters","list","hasMore","querying","sortAttribute","getSortAttribute","sortDirection","getSortDirection","currentPage","lastPage","startAccumulatorValue","ideas","isEqual","type","oldPageNumber","newPageNumber","mini","ideasMiniStream","ideasStream","getPageNumberFromUrl","links","self","last","mergeScan","acc","newQueryParameters","oldQueryParamsWithoutPageNumber","cloneDeep","newQueryParamsWithoutPageNumber","isLoadingMore","selfLink","lastLink","unionBy","prevProps","_prevState","prevPropsWithoutChildren","nextPropsWithoutChildren","onLoadMore","loadMore","onChangePage","handleChangePage","onChangeProjects","handleProjectsOnChange","onChangePhase","handlePhaseOnChange","onChangeSearchTerm","handleSearchOnChange","onChangeSorting","handleSortOnChange","onChangeTopics","handleTopicsOnChange","onChangeAreas","handleAreasOnchange","onChangeStatus","handleStatusOnChange","onChangePublicationStatus","handlePublicationStatusOnChange","onChangeProjectPublicationStatus","handleProjectPublicationStatusOnChange","onChangeAssignee","handleAssigneeOnChange","onChangeFeedbackFilter","handleFeedbackFilterOnChange","onIdeaFiltering","handleIdeaFiltering","onResetParams","handleResetParamsToProps","streamParams","userId","ideasByStatusXlsxEndpoint","ideasByTimeXlsxEndpoint","ideasByTimeCumulativeXlsxEndpoint","ideasByTopicXlsxEndpoint","ideasByProjectXlsxEndpoint","userXlsxEndpoint","usersByTimeXlsxEndpoint","usersByTimeCumulativeXlsxEndpoint","activeUsersByTimeXlsxEndpoint","activeUsersByTimeCumulativeXlsxEndpoint","commentsByTimeCumulativeXlsxEndpoint","commentsByTopicXlsxEndpoint","commentsByProjectXlsxEndpoint","votesByTimeXlsxEndpoint","votesByTopicXlsxEndpoint","votesByProjectXlsxEndpoint","pollOptions","setPollOptions","pollOptionsStream"],"mappings":"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","file":"23.1d6b19a03c61d2f714a3.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  resolutionday: {\n    id: 'app.containers.AdminPage.DashboardPage.resolutionday',\n    defaultMessage: 'in Days',\n  },\n  resolutionweek: {\n    id: 'app.containers.AdminPage.DashboardPage.resolutionweek',\n    defaultMessage: 'in Weeks',\n  },\n  resolutionmonth: {\n    id: 'app.containers.AdminPage.DashboardPage.resolutionmonth',\n    defaultMessage: 'in Months',\n  },\n});\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { Subscription, BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap, filter } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\n\nimport { IPollQuestion, pollQuestionsStream } from 'services/pollQuestions';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { IParticipationContextType } from 'typings';\n\ninterface InputProps {\n  participationContextId: string;\n  participationContextType: IParticipationContextType;\n}\n\ntype children = (renderProps: GetPollQuestionsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  pollQuestions: IPollQuestion[] | undefined | null | Error;\n}\n\nexport type GetPollQuestionsChildProps =\n  | IPollQuestion[]\n  | undefined\n  | null\n  | Error;\n\nexport default class GetPollQuestions extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      pollQuestions: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { participationContextType, participationContextId } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({\n      participationContextType,\n      participationContextId,\n    });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          tap(() => this.setState({ pollQuestions: undefined })),\n          filter(\n            ({ participationContextType, participationContextId }) =>\n              isString(participationContextId) &&\n              ['project', 'phase'].includes(participationContextType)\n          ),\n          switchMap(\n            ({\n              participationContextType,\n              participationContextId,\n            }: {\n              participationContextId: string;\n              participationContextType: IParticipationContextType;\n            }) =>\n              pollQuestionsStream(\n                participationContextId,\n                participationContextType\n              ).observable\n          )\n        )\n        .subscribe((pollQuestions) =>\n          this.setState({\n            pollQuestions: !isNilOrError(pollQuestions)\n              ? pollQuestions.data\n              : pollQuestions,\n          })\n        ),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { participationContextId, participationContextType } = this.props;\n    this.inputProps$.next({ participationContextId, participationContextType });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { pollQuestions } = this.state;\n    return (children as children)(pollQuestions);\n  }\n}\n","import { useState, useEffect } from 'react';\nimport { Observable, of } from 'rxjs';\nimport {\n  getPollResponses,\n  IPollResponseAttributes,\n} from 'services/pollResponses';\nimport { IParticipationContextType } from 'typings';\n\ninterface Params {\n  participationContextId: string;\n  participationContextType: IParticipationContextType;\n}\n\nexport default function usePollResponses({\n  participationContextId,\n  participationContextType,\n}: Params) {\n  const [\n    pollResponses,\n    setPollResponses,\n  ] = useState<IPollResponseAttributes | null>(null);\n\n  useEffect(() => {\n    setPollResponses(null);\n\n    let observable: Observable<IPollResponseAttributes | null> = of(null);\n\n    observable = getPollResponses(\n      participationContextId,\n      participationContextType\n    ).observable;\n\n    const subscription = observable.subscribe((response) => {\n      setPollResponses(response);\n    });\n\n    return () => subscription.unsubscribe();\n  }, [participationContextId, participationContextType]);\n\n  return pollResponses;\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams from 'utils/streams';\nimport { requestBlob } from 'utils/request';\nimport { saveAs } from 'file-saver';\nimport { IParticipationContextType } from 'typings';\n\nexport interface IPollResponseAttributes {\n  series: { [key: string]: number };\n}\n\nexport async function addPollResponse(\n  participationContextId: string,\n  participationContextType: IParticipationContextType,\n  optionIds: string[],\n  projectId?: string\n) {\n  const response = await streams.add(\n    `${API_PATH}/${participationContextType}s/${participationContextId}/poll_responses`,\n    {\n      response: {\n        response_options_attributes: optionIds.map((optionId) => ({\n          option_id: optionId,\n        })),\n      },\n    }\n  );\n  projectId && streams.fetchAllWith({ dataId: [projectId] });\n  return response;\n}\n\nexport async function exportPollResponses(\n  participationContextId: string,\n  participationContextType: IParticipationContextType,\n  fileName: string\n) {\n  const blob = await requestBlob(\n    `${API_PATH}/${participationContextType}s/${participationContextId}/poll_responses/as_xlsx`,\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n  );\n  saveAs(blob, fileName);\n}\nexport function getPollResponses(\n  participationContextId: string,\n  participationContextType: IParticipationContextType\n) {\n  const response = streams.get<IPollResponseAttributes>({\n    apiEndpoint: `${API_PATH}/${participationContextType}s/${participationContextId}/poll_responses/responses_count`,\n  });\n  return response;\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams from 'utils/streams';\nimport { Multiloc } from 'typings';\n\nexport interface IPollOption {\n  id: string;\n  type: string;\n  attributes: {\n    title_multiloc: Multiloc;\n    ordering: number;\n  };\n}\n\nexport function pollOptionsStream(questionId: string) {\n  return streams.get<{ data: IPollOption[] }>({\n    apiEndpoint: `${API_PATH}/poll_questions/${questionId}/poll_options`,\n  });\n}\n\nexport function addPollOption(questionId: string, titleMultiloc: Multiloc) {\n  return streams.add<{ data: IPollOption }>(\n    `${API_PATH}/poll_questions/${questionId}/poll_options`,\n    {\n      title_multiloc: titleMultiloc,\n    }\n  );\n}\n\nexport function pollOptionStream(optionId: string) {\n  return streams.get<{ data: IPollOption }>({\n    apiEndpoint: `${API_PATH}/poll_options/${optionId}`,\n  });\n}\n\nexport function deletePollOption(optionId: string) {\n  return streams.delete(`${API_PATH}/poll_options/${optionId}`, optionId);\n}\n\nexport function updatePollOption(optionId: string, titleMultiloc: Multiloc) {\n  return streams.update(`${API_PATH}/poll_options/${optionId}`, optionId, {\n    title_multiloc: titleMultiloc,\n  });\n}\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\nimport Tabs from 'components/UI/Tabs';\n\nexport type IResolution = 'day' | 'week' | 'month';\n\nconst Container = styled.div``;\n\ninterface Props {\n  value: IResolution;\n  onChange: (arg: IResolution) => void;\n  className?: string;\n}\n\nexport default class ResolutionControl extends PureComponent<Props> {\n  handleOnResolutionChange = (resolution: IResolution) => {\n    this.props.onChange(resolution);\n  };\n\n  render() {\n    const { value, className } = this.props;\n    const resOptions = [\n      {\n        name: 'day',\n        label: <FormattedMessage {...messages.resolutionday} />,\n      },\n      {\n        name: 'week',\n        label: <FormattedMessage {...messages.resolutionweek} />,\n      },\n      {\n        name: 'month',\n        label: <FormattedMessage {...messages.resolutionmonth} />,\n      },\n    ];\n\n    return (\n      <Container className={className}>\n        <Tabs\n          items={resOptions}\n          selectedValue={\n            resOptions.find((item) => item.name === value)?.name as string\n          }\n          onClick={this.handleOnResolutionChange}\n        />\n      </Container>\n    );\n  }\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams from 'utils/streams';\nimport { Multiloc, IParticipationContextType } from 'typings';\nimport { capitalizeParticipationContextType } from 'utils/helperUtils';\n\ntype IPollQuestionAttributes = {\n  question_type: 'multiple_options' | 'single_option';\n  max_options: number | null;\n  title_multiloc: Multiloc;\n  ordering: number;\n};\n\nexport interface IPollQuestion {\n  id: string;\n  type: string;\n  attributes: IPollQuestionAttributes;\n  relationships: {\n    options: {\n      data: {\n        id: string;\n      }[];\n    };\n  };\n}\n\nexport function pollQuestionsStream(\n  participationContextId: string,\n  participationContextType: IParticipationContextType\n) {\n  return streams.get<{ data: IPollQuestion[] }>({\n    apiEndpoint: `${API_PATH}/${participationContextType}s/${participationContextId}/poll_questions`,\n  });\n}\n\nexport async function addPollQuestion(\n  participationContextId: string,\n  participationContextType: IParticipationContextType,\n  titleMultiloc: Multiloc\n) {\n  const response = await streams.add<{ data: IPollQuestion }>(\n    `${API_PATH}/poll_questions`,\n    {\n      participation_context_id: participationContextId,\n      participation_context_type: capitalizeParticipationContextType(\n        participationContextType\n      ),\n      title_multiloc: titleMultiloc,\n    }\n  );\n  streams.fetchAllWith({\n    apiEndpoint: [\n      `${API_PATH}/${participationContextType}s/${participationContextId}/poll_questions`,\n    ],\n  });\n  return response;\n}\n\nexport function pollQuestionStream(questionId: string) {\n  return streams.get<IPollQuestion>({\n    apiEndpoint: `${API_PATH}/poll_questions/${questionId}`,\n  });\n}\n\nexport async function deletePollQuestion(\n  questionId: string,\n  participationContextId?: string,\n  participationContextType?: IParticipationContextType\n) {\n  const response = await streams.delete(\n    `${API_PATH}/poll_questions/${questionId}`,\n    questionId\n  );\n  streams.fetchAllWith({\n    apiEndpoint: [\n      `${API_PATH}/${participationContextType}s/${participationContextId}/poll_questions`,\n    ],\n  });\n  return response;\n}\n\nexport function reorderPollQuestion(questionId: string, newPosition: number) {\n  return streams.update(\n    `${API_PATH}/poll_questions/${questionId}/reorder`,\n    questionId,\n    {\n      ordering: newPosition,\n    }\n  );\n}\nexport function updatePollQuestion(\n  questionId: string,\n  diff: Partial<IPollQuestionAttributes>\n) {\n  return streams.update<{ data: IPollQuestion }>(\n    `${API_PATH}/poll_questions/${questionId}`,\n    questionId,\n    diff\n  );\n}\n","import React from 'react';\nimport {\n  get,\n  isString,\n  isEqual,\n  omit,\n  cloneDeep,\n  omitBy,\n  isNil,\n  isArray,\n  unionBy,\n} from 'lodash-es';\nimport { Subscription, BehaviorSubject } from 'rxjs';\nimport {\n  map,\n  distinctUntilChanged,\n  mergeScan,\n  switchMap,\n} from 'rxjs/operators';\nimport {\n  ideasStream,\n  IIdeaData,\n  IdeaPublicationStatus,\n  ideasMiniStream,\n} from 'services/ideas';\nimport { PublicationStatus as ProjectPublicationStatus } from 'services/projects';\nimport {\n  getPageNumberFromUrl,\n  getSortAttribute,\n  getSortDirection,\n  SortDirection,\n} from 'utils/paginationUtils';\n\nexport type SortAttribute =\n  | 'new'\n  | 'trending'\n  | 'popular'\n  | 'author_name'\n  | 'upvotes_count'\n  | 'downvotes_count'\n  | 'baskets_count'\n  | 'status';\nexport type Sort =\n  | 'random'\n  | 'new'\n  | '-new'\n  | 'trending'\n  | '-trending'\n  | 'popular'\n  | '-popular'\n  | 'author_name'\n  | '-author_name'\n  | 'upvotes_count'\n  | '-upvotes_count'\n  | 'downvotes_count'\n  | '-downvotes_count'\n  | 'baskets_count'\n  | '-baskets_count'\n  | 'status'\n  | '-status';\ntype PublicationStatus = IdeaPublicationStatus;\n\nexport interface InputProps {\n  type: 'load-more' | 'paginated';\n  pageNumber?: number;\n  pageSize?: number;\n  projectIds?: string[] | 'all';\n  phaseId?: string;\n  authorId?: string;\n  sort?: Sort;\n  search?: string;\n  topics?: string[];\n  areas?: string[];\n  ideaStatusId?: string;\n  publicationStatus?: PublicationStatus;\n  projectPublicationStatus?: ProjectPublicationStatus;\n  boundingBox?: number[];\n  assignee?: string;\n  feedbackNeeded?: boolean;\n  // prop mini Gets stripped down ideas containing only title, should never be cached,\n  // and is not tested in all scenarios, but improves performance drastically.\n  mini?: boolean;\n}\n\nexport interface IQueryParameters {\n  'page[number]': number;\n  'page[size]': number;\n  projects: string[] | undefined | null;\n  phase: string | undefined | null;\n  author: string | undefined | null;\n  sort: Sort;\n  search: string | undefined | null;\n  topics: string[] | undefined | null;\n  areas: string[] | undefined | null;\n  idea_status: string | undefined | null;\n  publication_status: PublicationStatus | undefined | null;\n  project_publication_status: ProjectPublicationStatus | undefined | null;\n  bounding_box: number[] | undefined | null;\n  assignee: string | undefined | null;\n  feedback_needed: boolean | undefined | null;\n}\n\ninterface IAccumulator {\n  ideas: IIdeaData[] | null;\n  queryParameters: IQueryParameters;\n  hasMore: boolean;\n}\n\ntype children = (renderProps: GetIdeasChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: (obj: GetIdeasChildProps) => JSX.Element | null;\n}\n\nexport type GetIdeasChildProps = State & {\n  onLoadMore: () => void;\n  onChangePage: (pageNumber: number) => void;\n  onChangeProjects: (projectIds: string[]) => void;\n  onChangePhase: (phaseId: string) => void;\n  onChangeSearchTerm: (search: string) => void;\n  onChangeSorting: (sort: Sort) => void;\n  onChangeTopics: (topics: string[]) => void;\n  onChangeAreas: (areas: string[]) => void;\n  onChangeStatus: (ideaStatus: string | null) => void;\n  onChangePublicationStatus: (publicationStatus: PublicationStatus) => void;\n  onChangeProjectPublicationStatus: (\n    ProjectPublicationStatus: ProjectPublicationStatus\n  ) => void;\n  onChangeAssignee: (assignee: string | undefined) => void;\n  onChangeFeedbackFilter: (feedbackNeeded: boolean) => void;\n  onIdeaFiltering: (partialQueryParameters: Partial<IQueryParameters>) => void;\n  onResetParams: (paramsToOmit?: (keyof IQueryParameters)[]) => void;\n  type: 'ideas';\n};\n\ninterface State {\n  queryParameters: IQueryParameters;\n  list: IIdeaData[] | undefined | null;\n  hasMore: boolean;\n  querying: boolean;\n  loadingMore: boolean;\n  sortAttribute: SortAttribute;\n  sortDirection: SortDirection;\n  currentPage: number;\n  lastPage: number;\n}\n\nexport default class GetIdeas extends React.Component<Props, State> {\n  defaultQueryParameters: IQueryParameters;\n  queryParameters$: BehaviorSubject<IQueryParameters>;\n  subscriptions: Subscription[];\n\n  static defaultProps = {\n    pageNumber: 1,\n    pageSize: 12,\n    sort: 'random',\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.defaultQueryParameters = {\n      'page[number]': props.pageNumber as number,\n      'page[size]': props.pageSize as number,\n      sort: props.sort as Sort,\n      projects: undefined,\n      phase: undefined,\n      author: undefined,\n      search: undefined,\n      topics: undefined,\n      areas: undefined,\n      idea_status: undefined,\n      publication_status: undefined,\n      project_publication_status: undefined,\n      bounding_box: undefined,\n      assignee: undefined,\n      feedback_needed: undefined,\n    };\n    const queryParameters = this.getQueryParameters(\n      this.defaultQueryParameters,\n      props\n    );\n    this.state = {\n      // defaults\n      queryParameters,\n      list: undefined,\n      hasMore: false,\n      querying: true,\n      loadingMore: false,\n      sortAttribute: getSortAttribute<Sort, SortAttribute>(props.sort as Sort),\n      sortDirection: getSortDirection<Sort>(props.sort as Sort),\n      currentPage: 1,\n      lastPage: 1,\n    };\n    this.queryParameters$ = new BehaviorSubject(queryParameters);\n    this.subscriptions = [];\n  }\n\n  componentDidMount() {\n    const queryParameters = this.getQueryParameters(\n      this.state.queryParameters,\n      this.props\n    );\n    const startAccumulatorValue: IAccumulator = {\n      queryParameters,\n      ideas: null,\n      hasMore: false,\n    };\n    const queryParameters$ = this.queryParameters$.pipe(\n      distinctUntilChanged((prev, next) => isEqual(prev, next))\n    );\n\n    if (!this.props.type || this.props.type === 'load-more') {\n      this.subscriptions = [\n        queryParameters$\n          .pipe(\n            mergeScan<IQueryParameters, IAccumulator>(\n              (acc, newQueryParameters) => {\n                const oldQueryParamsWithoutPageNumber = omit(\n                  cloneDeep(acc.queryParameters),\n                  'page[number]'\n                );\n                const newQueryParamsWithoutPageNumber = omit(\n                  cloneDeep(newQueryParameters),\n                  'page[number]'\n                );\n                const oldPageNumber = acc.queryParameters['page[number]'];\n                const newPageNumber = newQueryParameters['page[number]'];\n                const isLoadingMore =\n                  isEqual(\n                    oldQueryParamsWithoutPageNumber,\n                    newQueryParamsWithoutPageNumber\n                  ) && oldPageNumber !== newPageNumber;\n                const pageNumber = isLoadingMore\n                  ? newQueryParameters['page[number]']\n                  : 1;\n                const queryParameters: IQueryParameters = {\n                  ...newQueryParameters,\n                  'page[number]': pageNumber,\n                };\n\n                this.setState({\n                  querying: !isLoadingMore,\n                  loadingMore: isLoadingMore,\n                });\n\n                const stream = this.props.mini ? ideasMiniStream : ideasStream;\n\n                return stream({ queryParameters }).observable.pipe(\n                  map((ideas) => {\n                    const selfLink = get(ideas, 'links.self');\n                    const lastLink = get(ideas, 'links.last');\n                    const hasMore =\n                      isString(selfLink) &&\n                      isString(lastLink) &&\n                      selfLink !== lastLink;\n\n                    return {\n                      queryParameters,\n                      hasMore,\n                      ideas: !isLoadingMore\n                        ? ideas.data\n                        : unionBy(acc.ideas || [], ideas.data, 'id'),\n                    };\n                  })\n                );\n              },\n              startAccumulatorValue\n            )\n          )\n          .subscribe(({ ideas, queryParameters, hasMore }) => {\n            this.setState({\n              queryParameters,\n              hasMore,\n              list: ideas,\n              querying: false,\n              loadingMore: false,\n            });\n          }),\n      ];\n    } else {\n      this.subscriptions = [\n        queryParameters$\n          .pipe(\n            switchMap((queryParameters) => {\n              const oldPageNumber = this.state.queryParameters['page[number]'];\n              const newPageNumber = queryParameters['page[number]'];\n              queryParameters['page[number]'] =\n                newPageNumber !== oldPageNumber ? newPageNumber : 1;\n\n              const stream = this.props.mini ? ideasMiniStream : ideasStream;\n\n              return stream({\n                queryParameters,\n              }).observable.pipe(map((ideas) => ({ queryParameters, ideas })));\n            })\n          )\n          .subscribe(({ ideas, queryParameters }) => {\n            this.setState({\n              queryParameters,\n              list: ideas ? ideas.data : null,\n              querying: false,\n              loadingMore: false,\n              sortAttribute: getSortAttribute<Sort, SortAttribute>(\n                queryParameters.sort\n              ),\n              sortDirection: getSortDirection<Sort>(queryParameters.sort),\n              currentPage: getPageNumberFromUrl(ideas.links.self) || 1,\n              lastPage: getPageNumberFromUrl(ideas.links.last) || 1,\n            });\n          }),\n      ];\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, _prevState: State) {\n    const { children: _prevChildren, ...prevPropsWithoutChildren } = prevProps;\n    const { children: _nextChildren, ...nextPropsWithoutChildren } = this.props;\n\n    if (!isEqual(prevPropsWithoutChildren, nextPropsWithoutChildren)) {\n      const queryParameters = this.getQueryParameters(\n        this.state.queryParameters,\n        this.props\n      );\n      this.queryParameters$.next(queryParameters);\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  propsToQueryParamsShape = () => ({\n    projects: this.props.projectIds,\n    'page[number]': this.props.pageNumber as number,\n    'page[size]': this.props.pageSize as number,\n    phase: this.props.phaseId,\n    author: this.props.authorId,\n    sort: this.props.sort as Sort,\n    topics: this.props.topics,\n    areas: this.props.areas,\n    idea_status: this.props.ideaStatusId,\n    publication_status: this.props.publicationStatus,\n    project_publication_status: this.props.projectPublicationStatus,\n    bounding_box: this.props.boundingBox,\n    assignee: this.props.assignee,\n    feedback_needed: this.props.feedbackNeeded,\n    search: undefined,\n  });\n\n  getQueryParametersFromProps = () => {\n    const queryParamsShaped = this.propsToQueryParamsShape();\n    Object.keys(queryParamsShaped)\n      .filter((key) => queryParamsShaped[key] === null)\n      .forEach((key) => (queryParamsShaped[key] = undefined));\n    return queryParamsShaped as IQueryParameters; // legal because last line changes null values to undefined\n  };\n\n  getQueryParameters = (queryParameters: IQueryParameters, props: Props) => {\n    let projects: string[] | undefined | null = undefined;\n\n    if (isNil(props.projectIds)) {\n      projects = queryParameters.projects;\n    } else if (isArray(props.projectIds)) {\n      projects = props.projectIds;\n    }\n\n    const inputPropsQueryParameters: IQueryParameters = {\n      projects,\n      'page[number]': props.pageNumber as number,\n      'page[size]': props.pageSize as number,\n      phase: props.phaseId,\n      author: props.authorId,\n      sort: props.sort as Sort,\n      search: props.search,\n      topics: props.topics,\n      areas: props.areas,\n      idea_status: props.ideaStatusId,\n      publication_status: props.publicationStatus,\n      project_publication_status: props.projectPublicationStatus,\n      bounding_box: props.boundingBox,\n      assignee: props.assignee,\n      feedback_needed: props.feedbackNeeded,\n    };\n\n    // Omit all queryParameters that are nil.\n    // Why do this? Because we assume that an input prop that's nil is an input prop that should be ignored,\n    // and not overwrite a none-nil value that's part of this.state.queryParameters.\n    return {\n      ...queryParameters,\n      ...omitBy(inputPropsQueryParameters, isNil),\n      // Make an exception for 'projects', because when it's undefined we don't want to ignore it but instead pass it along\n      // to let the request know we don't want to apply a projects filter but load the ideas for all projects\n      projects,\n    };\n  };\n\n  loadMore = () => {\n    if (!this.state.loadingMore) {\n      this.queryParameters$.next({\n        ...this.state.queryParameters,\n        'page[number]': this.state.queryParameters['page[number]'] + 1,\n      });\n    }\n  };\n\n  handleChangePage = (pageNumber: number) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      'page[number]': pageNumber,\n    });\n  };\n\n  handlePhaseOnChange = (phaseId: string) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      phase: phaseId,\n      'page[number]': 1,\n    });\n  };\n\n  handleSearchOnChange = (search: string) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      search: search ? search : undefined,\n      'page[number]': 1,\n    });\n  };\n\n  handleSortOnChange = (sort: Sort) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      sort,\n      'page[number]': 1,\n    });\n  };\n\n  handleProjectsOnChange = (projects: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      projects,\n      'page[number]': 1,\n    });\n  };\n\n  handleTopicsOnChange = (topics: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      topics,\n      'page[number]': 1,\n    });\n  };\n\n  handleAreasOnchange = (areas: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      areas,\n      'page[number]': 1,\n    });\n  };\n\n  handleStatusOnChange = (ideaStatus: string | null) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      idea_status: ideaStatus || undefined,\n      'page[number]': 1,\n    });\n  };\n\n  handlePublicationStatusOnChange = (publicationStatus: PublicationStatus) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      publication_status: publicationStatus,\n      'page[number]': 1,\n    });\n  };\n\n  handleProjectPublicationStatusOnChange = (\n    projectPublicationStatus: ProjectPublicationStatus\n  ) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      project_publication_status: projectPublicationStatus,\n      'page[number]': 1,\n    });\n  };\n\n  handleAssigneeOnChange = (assignee: string | undefined) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      assignee,\n      'page[number]': 1,\n    });\n  };\n\n  handleFeedbackFilterOnChange = (feedbackNeeded: boolean) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      feedback_needed: feedbackNeeded || undefined,\n      'page[number]': 1,\n    });\n  };\n\n  handleIdeaFiltering = (ideaFilters: Partial<IQueryParameters>) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      ...ideaFilters,\n      'page[number]': 1,\n    });\n  };\n\n  handleResetParamsToProps = (paramsToOmit?: (keyof IQueryParameters)[]) => {\n    const defaultQueryParameters = this.getQueryParametersFromProps();\n\n    if (paramsToOmit && paramsToOmit.length > 0) {\n      this.queryParameters$.next({\n        ...this.state.queryParameters,\n        ...omit(defaultQueryParameters, paramsToOmit),\n      });\n    } else {\n      this.queryParameters$.next(defaultQueryParameters);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    return (children as children)({\n      ...this.state,\n      onLoadMore: this.loadMore,\n      onChangePage: this.handleChangePage,\n      onChangeProjects: this.handleProjectsOnChange,\n      onChangePhase: this.handlePhaseOnChange,\n      onChangeSearchTerm: this.handleSearchOnChange,\n      onChangeSorting: this.handleSortOnChange,\n      onChangeTopics: this.handleTopicsOnChange,\n      onChangeAreas: this.handleAreasOnchange,\n      onChangeStatus: this.handleStatusOnChange,\n      onChangePublicationStatus: this.handlePublicationStatusOnChange,\n      onChangeProjectPublicationStatus: this\n        .handleProjectPublicationStatusOnChange,\n      onChangeAssignee: this.handleAssigneeOnChange,\n      onChangeFeedbackFilter: this.handleFeedbackFilterOnChange,\n      onIdeaFiltering: this.handleIdeaFiltering,\n      onResetParams: this.handleResetParamsToProps,\n      type: 'ideas',\n    });\n  }\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { Multiloc } from 'typings';\n\nconst apiEndpoint = `${API_PATH}/stats`;\n\nexport type IResourceByTime =\n  | IIdeasByTime\n  | IUsersByTime\n  | ICommentsByTime\n  | IVotesByTime;\n\n// Ideas\nexport interface IIdeasByTime {\n  series: {\n    ideas: {\n      [key: string]: number;\n    };\n  };\n}\nexport interface IIdeasByStatus {\n  series: {\n    ideas: {\n      [key: string]: number;\n    };\n  };\n  idea_status: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n      color: string;\n      ordering: number;\n    };\n  };\n}\n\nexport interface IIdeasByTopic {\n  series: {\n    ideas: {\n      [key: string]: number;\n    };\n  };\n  topics: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport interface IIdeasByProject {\n  series: {\n    ideas: {\n      [key: string]: number;\n    };\n  };\n  projects: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport interface IIdeasCount {\n  count: number;\n}\n\nexport interface ICount {\n  count: number;\n}\n\nexport function ideasByStatusStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IIdeasByStatus>({\n    apiEndpoint: `${apiEndpoint}/ideas_by_status`,\n    ...streamParams,\n  });\n}\nexport const ideasByStatusXlsxEndpoint = `${apiEndpoint}/ideas_by_status_as_xlsx`;\n\nexport const ideasByTimeXlsxEndpoint = `${apiEndpoint}/ideas_by_time_as_xlsx`;\n\nexport function ideasByTimeStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IIdeasByTime>({\n    apiEndpoint: `${apiEndpoint}/ideas_by_time`,\n    ...streamParams,\n  });\n}\n\nexport const ideasByTimeCumulativeXlsxEndpoint = `${apiEndpoint}/ideas_by_time_cumulative_as_xlsx`;\n\nexport function ideasByTimeCumulativeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IIdeasByTime>({\n    apiEndpoint: `${apiEndpoint}/ideas_by_time_cumulative`,\n    ...streamParams,\n  });\n}\n\nexport const ideasByTopicXlsxEndpoint = `${apiEndpoint}/ideas_by_topic_as_xlsx`;\n\nexport function ideasByTopicStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IIdeasByTopic>({\n    apiEndpoint: `${apiEndpoint}/ideas_by_topic`,\n    ...streamParams,\n  });\n}\n\nexport const ideasByProjectXlsxEndpoint = `${apiEndpoint}/ideas_by_project_as_xlsx`;\n\nexport function ideasByProjectStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IIdeasByProject>({\n    apiEndpoint: `${apiEndpoint}/ideas_by_project`,\n    ...streamParams,\n  });\n}\n\nexport function ideasCount(streamParams: IStreamParams | null = null) {\n  return streams.get<IIdeasCount>({\n    apiEndpoint: `${apiEndpoint}/ideas_count`,\n    ...streamParams,\n  });\n}\n\nexport function ideasCountForUser(userId: string) {\n  return streams.get<ICount>({\n    apiEndpoint: `${API_PATH}/users/${userId}/ideas_count`,\n  });\n}\n\n// Users\n\nexport interface IUsersCount {\n  count: number;\n}\n\nexport interface IUsersByTime {\n  series: {\n    users: {\n      [key: string]: number;\n    };\n  };\n}\nexport interface IUserEngagementScores {\n  data: IUserEngagementScore[];\n}\n\nexport interface IUserEngagementScore {\n  id: string;\n  type: string;\n  attributes: {\n    sum_score: number;\n  };\n  relationships: {\n    user: {\n      data: {\n        id: string;\n        type: 'user';\n      };\n    };\n  };\n}\n\nexport const userXlsxEndpoint = `${apiEndpoint}/users_count_as_xlsx`;\n\nexport function usersCount(streamParams: IStreamParams | null = null) {\n  return streams.get<IUsersCount>({\n    apiEndpoint: `${apiEndpoint}/users_count`,\n    ...streamParams,\n  });\n}\n\nexport const usersByTimeXlsxEndpoint = `${apiEndpoint}/users_by_time_as_xlsx`;\n\nexport function usersByTimeStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IUsersByTime>({\n    apiEndpoint: `${apiEndpoint}/users_by_time`,\n    ...streamParams,\n  });\n}\n\nexport function commentsByTimeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICommentsByTime>({\n    apiEndpoint: `${apiEndpoint}/comments_by_time`,\n    ...streamParams,\n  });\n}\n\nexport const usersByTimeCumulativeXlsxEndpoint = `${apiEndpoint}/users_by_time_cumulative_as_xlsx`;\n\nexport function usersByTimeCumulativeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IUsersByTime>({\n    apiEndpoint: `${apiEndpoint}/users_by_time_cumulative`,\n    ...streamParams,\n  });\n}\n\nexport const activeUsersByTimeXlsxEndpoint = `${apiEndpoint}/active_users_by_time_as_xlsx`;\n\nexport function activeUsersByTimeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IUsersByTime>({\n    apiEndpoint: `${apiEndpoint}/active_users_by_time`,\n    ...streamParams,\n  });\n}\n\nexport const activeUsersByTimeCumulativeXlsxEndpoint = `${apiEndpoint}/active_users_by_time_cumulative_as_xlsx`;\n\nexport function activeUsersByTimeCumulativeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IUsersByTime>({\n    apiEndpoint: `${apiEndpoint}/active_users_by_time_cumulative`,\n    ...streamParams,\n  });\n}\n\nexport function userEngagementScoresStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IUserEngagementScores>({\n    apiEndpoint: `${apiEndpoint}/users_engagement_scores`,\n    ...streamParams,\n  });\n}\n\n// Comments\nexport interface ICommentsByTime {\n  series: {\n    comments: {\n      [key: string]: number;\n    };\n  };\n}\n\nexport interface ICommentsByTopic {\n  series: {\n    comments: {\n      [key: string]: number;\n    };\n  };\n  topics: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport interface ICommentsByProject {\n  series: {\n    comments: {\n      [key: string]: number;\n    };\n  };\n  projects: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport const commentsByTimeCumulativeXlsxEndpoint = `${apiEndpoint}/comments_by_time_cumulative_as_xlsx`;\n\nexport function commentsByTimeCumulativeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICommentsByTime>({\n    apiEndpoint: `${apiEndpoint}/comments_by_time_cumulative`,\n    ...streamParams,\n  });\n}\n\nexport const commentsByTopicXlsxEndpoint = `${apiEndpoint}/comments_by_topic_as_xlsx`;\n\nexport function commentsByTopicStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICommentsByTopic>({\n    apiEndpoint: `${apiEndpoint}/comments_by_topic`,\n    ...streamParams,\n  });\n}\n\nexport const commentsByProjectXlsxEndpoint = `${apiEndpoint}/comments_by_project_as_xlsx`;\n\nexport function commentsByProjectStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICommentsByProject>({\n    apiEndpoint: `${apiEndpoint}/comments_by_project`,\n    ...streamParams,\n  });\n}\n\nexport function commentsCountForUser(userId: string) {\n  return streams.get<ICount>({\n    apiEndpoint: `${API_PATH}/users/${userId}/comments_count`,\n  });\n}\n\n// Votes\nexport interface IVotesByTime {\n  series: {\n    up: { [key: string]: number };\n    down: { [key: string]: number };\n    total: { [key: string]: number };\n  };\n}\n\nexport interface IVotesByTopic {\n  series: {\n    votes: {\n      [key: string]: number;\n    };\n  };\n  topics: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport interface IVotesByProject {\n  series: {\n    total: {\n      [key: string]: number;\n    };\n  };\n  projects: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport interface IVotesByTimeCumulative {\n  series: {\n    up: { [key: string]: number };\n    down: { [key: string]: number };\n    total: { [key: string]: number };\n  };\n}\n\nexport function votesByTimeCumulativeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IVotesByTimeCumulative>({\n    apiEndpoint: `${apiEndpoint}/votes_by_time_cumulative`,\n    ...streamParams,\n  });\n}\nexport const votesByTimeXlsxEndpoint = `${apiEndpoint}/votes_by_time_as_xlsx`;\n\nexport function votesByTimeStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IVotesByTime>({\n    apiEndpoint: `${apiEndpoint}/votes_by_time`,\n    ...streamParams,\n  });\n}\n\nexport const votesByTopicXlsxEndpoint = `${apiEndpoint}/votes_by_topic_as_xlsx`;\n\nexport function votesByTopicStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IVotesByTopic>({\n    apiEndpoint: `${apiEndpoint}/votes_by_topic`,\n    ...streamParams,\n  });\n}\n\nexport const votesByProjectXlsxEndpoint = `${apiEndpoint}/votes_by_project_as_xlsx`;\n\nexport function votesByProjectStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IVotesByProject>({\n    apiEndpoint: `${apiEndpoint}/votes_by_project`,\n    ...streamParams,\n  });\n}\n\nexport interface IInitiativesCount {\n  count: number;\n}\n\nexport function initiativesCount(streamParams: IStreamParams | null = null) {\n  return streams.get<IInitiativesCount>({\n    apiEndpoint: `${apiEndpoint}/initiatives_count`,\n    ...streamParams,\n  });\n}\n\n// -----\n","import { useState, useEffect } from 'react';\nimport { Observable, of } from 'rxjs';\nimport { IPollOption, pollOptionsStream } from 'services/pollOptions';\n\nexport default function usePollResponses(questionId: string) {\n  const [pollOptions, setPollOptions] = useState<\n    { data: IPollOption[] } | null | Error\n  >(null);\n  useEffect(() => {\n    setPollOptions(null);\n\n    let observable: Observable<{ data: IPollOption[] } | null> = of(null);\n\n    observable = pollOptionsStream(questionId).observable;\n\n    const subscription = observable.subscribe((response) => {\n      setPollOptions(response);\n    });\n\n    return () => subscription.unsubscribe();\n  }, [questionId]);\n\n  return pollOptions;\n}\n"],"sourceRoot":""}