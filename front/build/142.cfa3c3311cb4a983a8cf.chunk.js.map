{"version":3,"sources":["webpack:///./app/containers/Admin/projects/edit/description/messages.ts","webpack:///./app/containers/Admin/projects/edit/description/index.tsx","webpack:///./app/components/UI/TextAreaMultilocWithLocaleSwitcher/index.tsx"],"names":["defineMessages","save","id","defaultMessage","saved","saveSuccessMessage","errorMessage","descriptionLabel","descriptionTooltip","descriptionPreviewLabel","descriptionPreviewTooltip","titleDescription","subtitleDescription","Container","styled","div","ButtonContainer","ProjectDescription","memo","props","formatMessage","intl","useState","touched","setTouched","processing","setProcessing","success","setSuccess","errors","setErrors","description_preview_multiloc","description_multiloc","formValues","setFormValues","tenantLocales","project","projectId","params","useEffect","isNilOrError","attributes","handleDescriptionPreviewOnChange","useCallback","_locale","prevFormValues","handleDescriptionOnChange","validate","handleOnSubmit","updateProject","then","catch","errorResponse","json","SectionTitle","FormattedMessage","messages","SectionDescription","Section","SectionField","valueMultiloc","onChange","label","labelTooltipText","rows","maxCharCount","fieldName","apiErrors","withCTAButton","buttonStyle","onClick","disabled","Success","text","showBackground","showIcon","isEmpty","withRouter","injectIntl","LabelContainer","StyledLabel","Label","Spacer","StyledLocaleSwitcher","LocaleSwitcher","LabelText","span","colors","className","labelTextElement","textAreaProps","selectedLocale","setSelectedLocale","locale","handleValueOnChange","value","newValueMultiloc","handleOnSelectedLocaleChange","newSelectedLocale","htmlFor","IconTooltip","content","onSelectedLocaleChange","locales","values"],"mappings":"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","file":"142.cfa3c3311cb4a983a8cf.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  save: {\n    id: 'app.containers.AdminPage.ProjectDescription.save',\n    defaultMessage: 'Save',\n  },\n  saved: {\n    id: 'app.containers.AdminPage.ProjectDescription.saved',\n    defaultMessage: 'Saved!',\n  },\n  saveSuccessMessage: {\n    id: 'app.containers.AdminPage.ProjectDescription.saveSuccessMessage',\n    defaultMessage: 'Your changes have been saved successfully.',\n  },\n  errorMessage: {\n    id: 'app.containers.AdminPage.ProjectDescription.errorMessage',\n    defaultMessage: 'Something went wrong, please try again later',\n  },\n  descriptionLabel: {\n    id: 'app.containers.AdminPage.ProjectDescription.descriptionLabel',\n    defaultMessage: 'Description',\n  },\n  descriptionTooltip: {\n    id: 'app.containers.AdminPage.ProjectDescription.descriptionTooltip',\n    defaultMessage:\n      'Shown on the project page. Clearly describe what the project is about, what you expect from your users and what they can expect from you.',\n  },\n  descriptionPreviewLabel: {\n    id: 'app.containers.AdminPage.ProjectDescription.descriptionPreviewLabel',\n    defaultMessage: 'Description Preview',\n  },\n  descriptionPreviewTooltip: {\n    id: 'app.containers.AdminPage.ProjectDescription.descriptionPreviewTooltip',\n    defaultMessage: 'Shown on the project card on the home page.',\n  },\n  titleDescription: {\n    id: 'app.containers.AdminPage.ProjectDescription.titleDescription',\n    defaultMessage: 'Project description',\n  },\n  subtitleDescription: {\n    id: 'app.containers.AdminPage.ProjectDescription.subtitleDescription',\n    defaultMessage:\n      'Decide on which message you want to give to your audience. Edit your project and enrich it with images, videos, file attachments,â€¦ This information helps visitors to understand what your project is about.',\n  },\n});\n","import React, { memo, useEffect, useCallback, useState } from 'react';\nimport { isEmpty } from 'lodash-es';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { withRouter, WithRouterProps } from 'react-router';\n\n// Hooks\nimport useAppConfigurationLocales from 'hooks/useAppConfigurationLocales';\nimport useProject from 'hooks/useProject';\n\n// Services\nimport { updateProject } from 'services/projects';\n\n// Components\nimport {\n  Section,\n  SectionField,\n  SectionTitle,\n  SectionDescription,\n} from 'components/admin/Section';\nimport TextAreaMultilocWithLocaleSwitcher from 'components/UI/TextAreaMultilocWithLocaleSwitcher';\nimport QuillMultilocWithLocaleSwitcher from 'components/UI/QuillEditor/QuillMultilocWithLocaleSwitcher';\nimport Button from 'components/UI/Button';\nimport Error from 'components/UI/Error';\nimport { Success } from 'cl2-component-library';\n\n// i18n\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\nimport { InjectedIntlProps } from 'react-intl';\n\n// Styling\nimport styled from 'styled-components';\n\n// Typing\nimport { Multiloc, Locale } from 'typings';\n\nconst Container = styled.div``;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n`;\n\ninterface Props {\n  className?: string;\n}\n\ninterface IFormValues {\n  description_preview_multiloc: Multiloc | null;\n  description_multiloc: Multiloc | null;\n}\n\nconst ProjectDescription = memo<Props & InjectedIntlProps & WithRouterProps>(\n  (props) => {\n    const {\n      intl: { formatMessage },\n    } = props;\n\n    const [touched, setTouched] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [success, setSuccess] = useState(false);\n    const [errors, setErrors] = useState<{ [key: string]: any }>({});\n    const [formValues, setFormValues] = useState<IFormValues>({\n      description_preview_multiloc: null,\n      description_multiloc: null,\n    });\n\n    const tenantLocales = useAppConfigurationLocales();\n    const project = useProject({ projectId: props.params.projectId });\n\n    useEffect(() => {\n      if (!isNilOrError(project)) {\n        setFormValues({\n          description_preview_multiloc:\n            project.attributes.description_preview_multiloc,\n          description_multiloc: project.attributes.description_multiloc,\n        });\n      }\n    }, [project]);\n\n    const handleDescriptionPreviewOnChange = useCallback(\n      (description_preview_multiloc: Multiloc, _locale: Locale) => {\n        setTouched(true);\n        setSuccess(false);\n        setFormValues((prevFormValues) => ({\n          ...prevFormValues,\n          description_preview_multiloc,\n        }));\n      },\n      []\n    );\n\n    const handleDescriptionOnChange = useCallback(\n      (description_multiloc: Multiloc, _locale: Locale) => {\n        setTouched(true);\n        setSuccess(false);\n        setFormValues((prevFormValues) => ({\n          ...prevFormValues,\n          description_multiloc,\n        }));\n      },\n      []\n    );\n\n    const validate = useCallback(() => {\n      // if (!isNilOrError(tenantLocales)) {\n      //   // check that all fields have content for all tenant locales\n      //   const { description_preview_multiloc, description_multiloc } = formValues;\n      //   return tenantLocales.every(locale => !isEmpty(description_preview_multiloc?.[locale]) && !isEmpty(description_multiloc?.[locale]));\n      // }\n\n      // return false;\n      return true;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [tenantLocales, formValues]);\n\n    const handleOnSubmit = useCallback(() => {\n      const { description_preview_multiloc, description_multiloc } = formValues;\n\n      if (\n        !processing &&\n        validate() &&\n        !isNilOrError(project) &&\n        description_preview_multiloc &&\n        description_multiloc\n      ) {\n        setProcessing(true);\n        setErrors({});\n        setSuccess(false);\n\n        updateProject(project.id, {\n          description_multiloc,\n          description_preview_multiloc,\n        })\n          .then(() => {\n            setProcessing(false);\n            setErrors({});\n            setTouched(false);\n            setSuccess(true);\n          })\n          .catch((errorResponse) => {\n            setProcessing(false);\n            setErrors(errorResponse?.json?.errors || {});\n            setSuccess(false);\n          });\n      }\n    }, [project, formValues, processing, validate]);\n\n    if (!isNilOrError(project)) {\n      return (\n        <Container>\n          <SectionTitle>\n            <FormattedMessage {...messages.titleDescription} />\n          </SectionTitle>\n          <SectionDescription>\n            <FormattedMessage {...messages.subtitleDescription} />\n          </SectionDescription>\n\n          <Section>\n            <SectionField>\n              <TextAreaMultilocWithLocaleSwitcher\n                id=\"project-description-preview\"\n                valueMultiloc={formValues.description_preview_multiloc}\n                onChange={handleDescriptionPreviewOnChange}\n                label={formatMessage(messages.descriptionPreviewLabel)}\n                labelTooltipText={formatMessage(\n                  messages.descriptionPreviewTooltip\n                )}\n                rows={5}\n                maxCharCount={280}\n              />\n              <Error\n                fieldName=\"description_preview_multiloc\"\n                apiErrors={errors?.description_preview_multiloc}\n              />\n            </SectionField>\n\n            <SectionField>\n              <QuillMultilocWithLocaleSwitcher\n                id=\"project-description\"\n                valueMultiloc={formValues.description_multiloc}\n                onChange={handleDescriptionOnChange}\n                label={formatMessage(messages.descriptionLabel)}\n                labelTooltipText={formatMessage(messages.descriptionTooltip)}\n                withCTAButton\n              />\n              <Error\n                fieldName=\"description_multiloc\"\n                apiErrors={errors?.description_multiloc}\n              />\n            </SectionField>\n          </Section>\n\n          <ButtonContainer>\n            <Button\n              buttonStyle=\"admin-dark\"\n              onClick={handleOnSubmit}\n              processing={processing}\n              disabled={!touched}\n            >\n              {success ? (\n                <FormattedMessage {...messages.saved} />\n              ) : (\n                <FormattedMessage {...messages.save} />\n              )}\n            </Button>\n\n            {success && (\n              <Success\n                text={formatMessage(messages.saveSuccessMessage)}\n                showBackground={false}\n                showIcon={false}\n              />\n            )}\n\n            {!isEmpty(errors) && (\n              <Error\n                text={formatMessage(messages.errorMessage)}\n                showBackground={false}\n                showIcon={false}\n              />\n            )}\n          </ButtonContainer>\n        </Container>\n      );\n    }\n\n    return null;\n  }\n);\n\nexport default withRouter(injectIntl(ProjectDescription));\n","import React, { memo, useState, useCallback, useEffect } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport TextArea, { Props as TextAreaProps } from 'components/UI/TextArea';\nimport { IconTooltip, LocaleSwitcher, Label } from 'cl2-component-library';\n\n// hooks\nimport useLocale from 'hooks/useLocale';\nimport useAppConfigurationLocales from 'hooks/useAppConfigurationLocales';\n\n// style\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\n\n// typings\nimport { Locale, Multiloc } from 'typings';\n\nconst Container = styled.div``;\n\nconst LabelContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\n\nconst StyledLabel = styled(Label)`\n  flex: 1;\n  padding: 0;\n  margin: 0;\n`;\n\nconst Spacer = styled.div`\n  flex: 1;\n`;\n\nconst StyledLocaleSwitcher = styled(LocaleSwitcher)`\n  width: auto;\n`;\n\nconst LabelText = styled.span`\n  color: ${colors.label};\n`;\n\nexport interface Props extends Omit<TextAreaProps, 'value' | 'onChange'> {\n  valueMultiloc: Multiloc | null | undefined;\n  onChange: (value: Multiloc, locale: Locale) => void;\n  labelTextElement?: JSX.Element;\n}\n\nconst TextAreaMultilocWithLocaleSwitcher = memo<Props>((props) => {\n  const {\n    valueMultiloc,\n    onChange,\n    className,\n    label,\n    labelTooltipText,\n    labelTextElement,\n    ...textAreaProps\n  } = props;\n\n  const [selectedLocale, setSelectedLocale] = useState<Locale | null>(null);\n\n  const locale = useLocale();\n  const tenantLocales = useAppConfigurationLocales();\n\n  useEffect(() => {\n    !isNilOrError(locale) && setSelectedLocale(locale);\n  }, [locale]);\n\n  const handleValueOnChange = useCallback(\n    (value: string, locale: Locale) => {\n      const newValueMultiloc = {\n        ...(valueMultiloc || {}),\n        [locale]: value,\n      } as Multiloc;\n\n      onChange(newValueMultiloc, locale);\n    },\n    [valueMultiloc, onChange]\n  );\n\n  const handleOnSelectedLocaleChange = useCallback(\n    (newSelectedLocale: Locale) => {\n      setSelectedLocale(newSelectedLocale);\n    },\n    []\n  );\n\n  if (selectedLocale) {\n    const id = `${props.id}-${selectedLocale}`;\n\n    return (\n      <Container className={className}>\n        <LabelContainer>\n          {label || labelTextElement ? (\n            <StyledLabel htmlFor={id}>\n              {labelTextElement || <LabelText>{label}</LabelText>}\n              {labelTooltipText && <IconTooltip content={labelTooltipText} />}\n            </StyledLabel>\n          ) : (\n            <Spacer />\n          )}\n\n          <StyledLocaleSwitcher\n            onSelectedLocaleChange={handleOnSelectedLocaleChange}\n            locales={!isNilOrError(tenantLocales) ? tenantLocales : []}\n            selectedLocale={selectedLocale}\n            values={{ valueMultiloc }}\n          />\n        </LabelContainer>\n\n        <TextArea\n          {...textAreaProps}\n          value={valueMultiloc?.[selectedLocale] || null}\n          locale={selectedLocale}\n          onChange={handleValueOnChange}\n          id={id}\n        />\n      </Container>\n    );\n  }\n\n  return null;\n});\n\nexport default TextAreaMultilocWithLocaleSwitcher;\n"],"sourceRoot":""}