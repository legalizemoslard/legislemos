{"version":3,"sources":["webpack:///./app/resources/GetCampaigns.tsx","webpack:///./app/containers/Admin/emails/custom/All/index.tsx","webpack:///./app/containers/Admin/emails/custom/All/SentCampaignRow.tsx","webpack:///./app/containers/Admin/emails/custom/All/DraftCampaignRow.tsx","webpack:///./app/containers/Admin/emails/messages.ts","webpack:///./app/services/campaigns.ts"],"names":["GetCampaigns","props","pageNumber","pageChanges$","next","state","currentPage","lastPage","campaigns","undefined","this","campaignNames","withoutCampaignNames","pageSize","inputProps$","BehaviorSubject","subscriptions","combineLatest","pipe","map","inputProps","distinctUntilChanged","prev","isEqual","switchMap","listCampaigns","queryParameters","campaign_names","without_campaign_names","observable","subscribe","setState","data","getPageNumberFromUrl","links","self","last","forEach","subscription","unsubscribe","children","onChangePage","handleOnPageChange","React","Component","NoCampaignsWrapper","styled","div","NoCampaignsHeader","h2","fontSizes","xl","NoCampaignsDescription","p","colors","adminSecondaryTextColor","base","Campaigns","isNilOrError","length","Icon","name","FormattedMessage","messages","noCampaignsHeader","noCampaignsDescription","buttonStyle","icon","linkTo","addCampaignButton","ButtonWrapper","List","key","c","id","join","campaign","isDraft","totalPages","loadPage","CampaignsWithInjectedIntl","injectIntl","Row","TextCell","className","value","attributes","subject_multiloc","FormattedDate","updated_at","FormattedTime","StatusLabel","backgroundColor","text","sent","statsButton","draft","manageButtonLabel","defineMessages","titleEmails","defaultMessage","subtitleEmails","helmetTitle","helmetDescription","campaignDeletionConfirmation","deleteButtonLabel","editButtonLabel","fieldSender","fieldSenderTooltip","fieldReplyTo","fieldReplyToTooltip","fieldTo","fieldToTooltip","fieldSubject","fieldSubjectTooltip","fieldBody","addCampaignTitle","editCampaignTitle","sendNowButton","sendTestEmailButton","sendTestEmailTooltip","previewSentConfirmation","formSaveButton","formErrorButton","formSuccessButton","formSuccessMessage","formErrorMessage","formUnexpectedErrorMessage","previewTitle","recipientsTitle","deliveryStatus_sent","deliveryStatus_failed","deliveryStatus_accepted","deliveryStatus_delivered","deliveryStatus_opened","deliveryStatus_clicked","deliveryStatus_clickedTooltip","tabCustom","tabAutomated","campaignFrom","campaignTo","noAccess","deleteCampaignButton","automatedEmailCampaignsInfo","allUsers","groups","nameVariablesInfo","changeRecipientsButton","send","confirmSendHeader","toAllUsers","senderRecipients","streamParams","streams","get","apiEndpoint","campaignData","add","campaignId","update","delete","deliveries_count","API_PATH","stream","fetchAllWith"],"mappings":"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","file":"30.7cdb2b06051c522c7575.chunk.js","sourcesContent":["import React from 'react';\nimport { isEqual } from 'lodash-es';\nimport { Subscription, BehaviorSubject, combineLatest } from 'rxjs';\nimport { distinctUntilChanged, switchMap, map } from 'rxjs/operators';\nimport { ICampaignData, listCampaigns } from 'services/campaigns';\nimport { getPageNumberFromUrl } from 'utils/paginationUtils';\n\ninterface InputProps {\n  campaignNames?: string[];\n  withoutCampaignNames?: string[];\n  pageSize?: number;\n  pageNumber?: number;\n}\n\ntype children = (renderProps: GetCampaignsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  campaigns: ICampaignData[] | undefined | null | Error;\n  currentPage: number;\n  lastPage: number;\n}\n\nexport type GetCampaignsChildProps = State & {\n  onChangePage: (pageNumber: number) => void;\n};\n\nexport default class GetCampaigns extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private pageChanges$: BehaviorSubject<number>;\n  private subscriptions: Subscription[];\n\n  static defaultProps: Partial<Props> = {\n    pageSize: 20,\n    pageNumber: 1,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      currentPage: 1,\n      lastPage: 1,\n      campaigns: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const {\n      campaignNames,\n      withoutCampaignNames,\n      pageSize,\n      pageNumber,\n    } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({\n      campaignNames,\n      withoutCampaignNames,\n      pageSize,\n    });\n    this.pageChanges$ = new BehaviorSubject(pageNumber || 1);\n\n    this.subscriptions = [\n      combineLatest(this.inputProps$, this.pageChanges$)\n        .pipe(\n          map(([inputProps, pageNumber]) => ({ ...inputProps, pageNumber })),\n          distinctUntilChanged((prev, next) => isEqual(prev, next)),\n          switchMap(\n            ({ campaignNames, withoutCampaignNames, pageSize, pageNumber }) => {\n              return listCampaigns({\n                queryParameters: {\n                  campaign_names: campaignNames,\n                  without_campaign_names: withoutCampaignNames,\n                  'page[size]': pageSize,\n                  'page[number]': pageNumber,\n                },\n              }).observable;\n            }\n          )\n        )\n        .subscribe((campaigns) => {\n          this.setState({\n            campaigns: campaigns.data,\n            currentPage: getPageNumberFromUrl(campaigns.links.self) || 1,\n            lastPage: getPageNumberFromUrl(campaigns.links.last) || 1,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    this.inputProps$.next({\n      campaignNames: this.props.campaignNames,\n      withoutCampaignNames: this.props.withoutCampaignNames,\n      pageSize: this.props.pageSize,\n    });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  handleOnPageChange = (pageNumber: number) => {\n    this.pageChanges$.next(pageNumber);\n  };\n\n  render() {\n    const { children } = this.props;\n    return (children as children)({\n      ...this.state,\n      onChangePage: this.handleOnPageChange,\n    });\n  }\n}\n","import React from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport styled from 'styled-components';\n\nimport GetCampaigns, { GetCampaignsChildProps } from 'resources/GetCampaigns';\nimport { isDraft } from 'services/campaigns';\n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\n\nimport { List } from 'components/admin/ResourceList';\nimport Button from 'components/UI/Button';\nimport { Icon } from 'cl2-component-library';\nimport Pagination from 'components/admin/Pagination';\nimport { ButtonWrapper } from 'components/admin/PageWrapper';\nimport DraftCampaignRow from './DraftCampaignRow';\nimport SentCampaignRow from './SentCampaignRow';\n\nimport messages from '../../messages';\n\nimport { fontSizes, colors } from 'utils/styleUtils';\n\nconst NoCampaignsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 80px 0 100px;\n  text-align: center;\n`;\n\nconst NoCampaignsHeader = styled.h2`\n  font-size: ${fontSizes.xl}px;\n  font-weight: 600;\n  margin-bottom: 10px;\n`;\n\nconst NoCampaignsDescription = styled.p`\n  color: ${colors.adminSecondaryTextColor};\n  font-weight: 400;\n  font-size: ${fontSizes.base}px;\n  margin-bottom: 30px;\n  max-width: 450px;\n`;\n\ninterface InputProps {}\n\ninterface DataProps extends GetCampaignsChildProps {}\n\nexport interface Props extends InputProps, DataProps {}\n\ninterface State {}\n\nclass Campaigns extends React.Component<Props & InjectedIntlProps, State> {\n  render() {\n    const { campaigns, currentPage, lastPage } = this.props;\n\n    if (isNilOrError(campaigns)) return null;\n\n    if (campaigns.length === 0) {\n      return (\n        <>\n          <NoCampaignsWrapper>\n            <Icon name=\"mailBig\" />\n            <NoCampaignsHeader>\n              <FormattedMessage {...messages.noCampaignsHeader} />\n            </NoCampaignsHeader>\n            <NoCampaignsDescription>\n              <FormattedMessage {...messages.noCampaignsDescription} />\n            </NoCampaignsDescription>\n            <Button\n              buttonStyle=\"cl-blue\"\n              icon=\"plus-circle\"\n              linkTo=\"/admin/emails/custom/new\"\n            >\n              <FormattedMessage {...messages.addCampaignButton} />\n            </Button>\n          </NoCampaignsWrapper>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <ButtonWrapper>\n            <Button\n              buttonStyle=\"cl-blue\"\n              icon=\"plus-circle\"\n              linkTo=\"/admin/emails/custom/new\"\n            >\n              <FormattedMessage {...messages.addCampaignButton} />\n            </Button>\n          </ButtonWrapper>\n          <List key={campaigns.map((c) => c.id).join()}>\n            {campaigns.map((campaign) =>\n              isDraft(campaign) ? (\n                <DraftCampaignRow key={campaign.id} campaign={campaign} />\n              ) : (\n                <SentCampaignRow key={campaign.id} campaign={campaign} />\n              )\n            )}\n          </List>\n          <Pagination\n            currentPage={currentPage}\n            totalPages={lastPage}\n            loadPage={this.props.onChangePage}\n          />\n        </>\n      );\n    }\n  }\n}\n\nconst CampaignsWithInjectedIntl = injectIntl<Props>(Campaigns);\n\nexport default (inputProps: Props) => (\n  <GetCampaigns campaignNames={['manual']} pageSize={10}>\n    {(campaigns) => (\n      <CampaignsWithInjectedIntl {...inputProps} {...campaigns} />\n    )}\n  </GetCampaigns>\n);\n","import React from 'react';\nimport { Row, TextCell } from 'components/admin/ResourceList';\nimport { ICampaignData } from 'services/campaigns';\nimport T from 'components/T';\nimport Button from 'components/UI/Button';\nimport { StatusLabel } from 'cl2-component-library';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../../messages';\nimport { FormattedDate, FormattedTime } from 'react-intl';\n\ninterface Props {\n  campaign: ICampaignData;\n}\n\nconst SentCampaignRow = ({ campaign }: Props) => (\n  <Row id={campaign.id}>\n    <TextCell className=\"expand\">\n      <T value={campaign.attributes.subject_multiloc} />\n    </TextCell>\n    <div>\n      <FormattedDate value={campaign.attributes.updated_at} />\n      &nbsp;\n      <FormattedTime value={campaign.attributes.updated_at} />\n    </div>\n    <StatusLabel\n      backgroundColor=\"clGreenSuccess\"\n      text={<FormattedMessage {...messages.sent} />}\n    />\n    <Button\n      linkTo={`/admin/emails/custom/${campaign.id}`}\n      icon=\"charts\"\n      buttonStyle=\"text\"\n    >\n      <FormattedMessage {...messages.statsButton} />\n    </Button>\n  </Row>\n);\n\nexport default SentCampaignRow;\n","import React from 'react';\nimport { Row, TextCell } from 'components/admin/ResourceList';\nimport { ICampaignData } from 'services/campaigns';\nimport T from 'components/T';\nimport Button from 'components/UI/Button';\nimport { StatusLabel } from 'cl2-component-library';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../../messages';\n\ninterface Props {\n  campaign: ICampaignData;\n}\n\nconst DraftCampaignRow = ({ campaign }: Props) => (\n  <Row id={campaign.id}>\n    <TextCell className=\"expand\">\n      <T value={campaign.attributes.subject_multiloc} />\n    </TextCell>\n    <StatusLabel\n      backgroundColor=\"draftYellow\"\n      text={<FormattedMessage {...messages.draft} />}\n    />\n    <Button\n      linkTo={`/admin/emails/custom/${campaign.id}`}\n      buttonStyle=\"secondary\"\n      icon=\"edit\"\n    >\n      <FormattedMessage {...messages.manageButtonLabel} />\n    </Button>\n  </Row>\n);\n\nexport default DraftCampaignRow;\n","/*\n * Admin.emails Messages\n *\n * This contains all the text for the admins email.\n */\n\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  titleEmails: {\n    id: 'app.containers.Admin.emails.titleEmails',\n    defaultMessage: 'Email Campaigns',\n  },\n  subtitleEmails: {\n    id: 'app.containers.Admin.emails.subtitleEmails',\n    defaultMessage:\n      'Compose your own emails to be sent out to all users or to particular groups. And control what automated emails your users receive.',\n  },\n  helmetTitle: {\n    id: 'app.containers.Admin.emails.helmetTitle',\n    defaultMessage: 'Email Campaigns',\n  },\n  helmetDescription: {\n    id: 'app.containers.Admin.emails.helmetDescription',\n    defaultMessage:\n      'Send out manual emails to certain citizen group and active automated campaigns',\n  },\n  campaignDeletionConfirmation: {\n    id: 'app.containers.Admin.emails.campaignDeletionConfirmation',\n    defaultMessage: 'Are you sure?',\n  },\n  addCampaignButton: {\n    id: 'app.containers.Admin.emails.addCampaignButton',\n    defaultMessage: 'Create campaign',\n  },\n  deleteButtonLabel: {\n    id: 'app.containers.Admin.emails.deleteButtonLabel',\n    defaultMessage: 'Delete',\n  },\n  statsButton: {\n    id: 'app.containers.Admin.emails.statsButton',\n    defaultMessage: 'Statistics',\n  },\n  editButtonLabel: {\n    id: 'app.containers.Admin.emails.editButtonLabel',\n    defaultMessage: 'Edit',\n  },\n  manageButtonLabel: {\n    id: 'app.containers.Admin.emails.manageButtonLabel',\n    defaultMessage: 'Manage & Edit & Preview & Delete',\n  },\n  fieldSender: {\n    id: 'app.containers.Admin.emails.fieldSender',\n    defaultMessage: 'From',\n  },\n  fieldSenderTooltip: {\n    id: 'app.containers.Admin.emails.fieldSenderTooltip',\n    defaultMessage: 'Choose whom users will see as the sender of the email.',\n  },\n  fieldReplyTo: {\n    id: 'app.containers.Admin.emails.fieldReplyTo',\n    defaultMessage: 'Replies should go to',\n  },\n  fieldReplyToTooltip: {\n    id: 'app.containers.Admin.emails.fieldReplyToTooltip',\n    defaultMessage:\n      'Choose what email address should receive direct replies from users on your email.',\n  },\n  fieldTo: {\n    id: 'app.containers.Admin.emails.fieldTo',\n    defaultMessage: 'To',\n  },\n  fieldToTooltip: {\n    id: 'app.containers.Admin.emails.fieldToTooltip',\n    defaultMessage: 'Choose the group(s) of users who will receive your email.',\n  },\n  fieldSubject: {\n    id: 'app.containers.Admin.emails.fieldSubject',\n    defaultMessage: 'Email Subject',\n  },\n  fieldSubjectTooltip: {\n    id: 'app.containers.Admin.emails.fieldSubjectTooltip',\n    defaultMessage:\n      'This will be shown in the subject line of the email and in the user’s inbox overview. Make it clear and engaging.',\n  },\n  fieldBody: {\n    id: 'app.containers.Admin.emails.fieldBody',\n    defaultMessage: 'Email Message',\n  },\n  addCampaignTitle: {\n    id: 'app.containers.Admin.emails.addCampaignTitle',\n    defaultMessage: 'New campaign',\n  },\n  editCampaignTitle: {\n    id: 'app.containers.Admin.emails.editCampaignTitle',\n    defaultMessage: 'Edit campaign',\n  },\n  draft: {\n    id: 'app.containers.Admin.emails.draft',\n    defaultMessage: 'Draft',\n  },\n  sent: {\n    id: 'app.containers.Admin.emails.sent',\n    defaultMessage: 'Sent',\n  },\n  sendNowButton: {\n    id: 'app.containers.Admin.emails.sendNowButton',\n    defaultMessage: 'Send now',\n  },\n  sendTestEmailButton: {\n    id: 'app.containers.Admin.emails.sendTestEmailButton',\n    defaultMessage: 'Send a preview',\n  },\n  sendTestEmailTooltip: {\n    id: 'app.containers.Admin.emails.sendTestEmailTooltip',\n    defaultMessage:\n      'Send this draft email to the email address with which you are logged in, to check how it looks like in ‘real life’.',\n  },\n  previewSentConfirmation: {\n    id: 'app.containers.Admin.emails.previewSentConfirmation',\n    defaultMessage: 'A preview email has been sent to your email address',\n  },\n  formSaveButton: {\n    id: 'app.containers.Admin.emails.formSaveButton',\n    defaultMessage: 'Continue',\n  },\n  formErrorButton: {\n    id: 'app.containers.Admin.emails.formErrorButton',\n    defaultMessage: 'Continue',\n  },\n  formSuccessButton: {\n    id: 'app.containers.Admin.emails.formSuccessButton',\n    defaultMessage: 'Continue',\n  },\n  formSuccessMessage: {\n    id: 'app.containers.Admin.emails.formSuccessMessage',\n    defaultMessage: 'formSuccessMessage',\n  },\n  formErrorMessage: {\n    id: 'app.containers.Admin.emails.formErrorMessage',\n    defaultMessage: 'Please correct the errors above to continue',\n  },\n  formUnexpectedErrorMessage: {\n    id: 'app.containers.Admin.emails.formUnexpectedErrorMessage',\n    defaultMessage: 'Something went wrong, please try again later',\n  },\n  previewTitle: {\n    id: 'app.containers.Admin.emails.previewTitle',\n    defaultMessage: 'Preview',\n  },\n  recipientsTitle: {\n    id: 'app.containers.Admin.emails.recipientsTitle',\n    defaultMessage: 'Recipients',\n  },\n  deliveryStatus_sent: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_sent',\n    defaultMessage: 'Sent',\n  },\n  deliveryStatus_failed: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_failed',\n    defaultMessage: 'Failed',\n  },\n  deliveryStatus_accepted: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_accepted',\n    defaultMessage: 'Accepted',\n  },\n  deliveryStatus_delivered: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_delivered',\n    defaultMessage: 'Delivered',\n  },\n  deliveryStatus_opened: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_opened',\n    defaultMessage: 'Opened',\n  },\n  deliveryStatus_clicked: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_clicked',\n    defaultMessage: 'Clicked',\n  },\n  deliveryStatus_clickedTooltip: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_clickedTooltip',\n    defaultMessage:\n      'When you added one or more links to your email, the number of users who clicked a link will be shown here.',\n  },\n  tabCustom: {\n    id: 'app.containers.Admin.Campaigns.tabCustom',\n    defaultMessage: 'Custom',\n  },\n  tabAutomated: {\n    id: 'app.containers.Admin.Campaigns.tabAutomated',\n    defaultMessage: 'Automated',\n  },\n  campaignFrom: {\n    id: 'app.containers.Admin.Campaigns.campaignFrom',\n    defaultMessage: 'From:',\n  },\n  campaignTo: {\n    id: 'app.containers.Admin.Campaigns.campaignTo',\n    defaultMessage: 'To:',\n  },\n  noAccess: {\n    id: 'app.containers.Admin.Campaigns.noAccess',\n    defaultMessage:\n      \"We're sorry, but it seems like you don't have access to the emails section\",\n  },\n  deleteCampaignButton: {\n    id: 'app.containers.Admin.emails.deleteCampaignButton',\n    defaultMessage: 'Delete Campaign',\n  },\n  noCampaignsHeader: {\n    id: 'app.containers.Admin.emails.noCampaignsHeader',\n    defaultMessage: 'No custom email campaigns yet',\n  },\n  noCampaignsDescription: {\n    id: 'app.containers.Admin.emails.noCampaignsDescription',\n    defaultMessage:\n      'Custom email campaigns are emails created from scratch. Their content and recipients can be chosen and you can follow up on their results through statistics.',\n  },\n  automatedEmailCampaignsInfo: {\n    id: 'app.containers.Admin.emails.automatedEmailCampaignsInfo',\n    defaultMessage:\n      'Automated email campaigns are sent out by default and are triggered by a user’s actions. Some of them can be turned off. Others are an inherent part of user interactions with the platform and therefore can’t be turned off.',\n  },\n  allUsers: {\n    id: 'app.containers.Admin.emails.allUsers',\n    defaultMessage: 'All users',\n  },\n  groups: {\n    id: 'app.containers.Admin.emails.groups',\n    defaultMessage: 'Groups',\n  },\n  nameVariablesInfo: {\n    id: 'app.containers.Admin.emails.nameVariablesInfo',\n    defaultMessage:\n      'You can speak directly to citizens using the variables \\\\{\\\\{first_name\\\\}\\\\} \\\\{\\\\{last_name\\\\}\\\\}. E.g. \"Dear \\\\{\\\\{first_name\\\\}\\\\} \\\\{\\\\{last_name\\\\}\\\\}, ...\"',\n  },\n  changeRecipientsButton: {\n    id: 'app.containers.Admin.emails.changeRecipientsButton',\n    defaultMessage: 'Change recipients',\n  },\n  send: {\n    id: 'app.containers.Admin.emails.send',\n    defaultMessage: 'Send',\n  },\n  confirmSendHeader: {\n    id: 'app.containers.Admin.emails.confirmSendHeader',\n    defaultMessage: 'Email to all users?',\n  },\n  toAllUsers: {\n    id: 'app.containers.Admin.emails.toAllUsers',\n    defaultMessage: 'Do you want to send this email to all users?',\n  },\n  senderRecipients: {\n    id: 'app.containers.Admin.emails.senderRecipients',\n    defaultMessage: 'Sender and recipients',\n  },\n});\n","import { IRelationship, Multiloc, ILinks } from 'typings';\nimport { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\n\nconst apiEndpoint = `${API_PATH}/campaigns`;\n\nexport interface ICampaignsData {\n  data: ICampaignData[];\n  links: ILinks;\n}\n\nexport interface ICampaignData {\n  id: string;\n  type: string;\n  attributes: {\n    campaign_name: string;\n    admin_campaign_description_multiloc: Multiloc;\n    enabled?: boolean;\n    subject_multiloc: Multiloc;\n    body_multiloc: Multiloc;\n    sender: 'author' | 'organization';\n    reply_to: 'author' | 'organization';\n    created_at: string;\n    updated_at: string;\n    deliveries_count: number;\n    schedule: any;\n    schedule_multiloc: Multiloc;\n  };\n  relationships: {\n    author: {\n      data: IRelationship;\n    };\n    groups: {\n      data: IRelationship[];\n    };\n  };\n}\n\nexport interface CampaignUpdate {\n  campaign_name?: string;\n  subject_multiloc?: Multiloc;\n  body_multiloc?: Multiloc;\n  sender?: string;\n  reply_to?: string;\n  group_ids?: string[];\n  enabled?: boolean;\n}\n\nexport interface CampaignCreation {\n  campaign_name: string;\n  subject_multiloc: Multiloc;\n  body_multiloc: Multiloc;\n  sender: string;\n  reply_to?: string;\n  group_ids?: string[];\n}\n\nexport interface ICampaign {\n  data: ICampaignData;\n}\n\nexport interface IDeliveriesData {\n  data: IDeliveryData[];\n  links: ILinks;\n}\nexport interface IDeliveryData {\n  id: string;\n  type: string;\n  attributes: {\n    delivery_status:\n      | 'sent'\n      | 'bounced'\n      | 'failed'\n      | 'accepted'\n      | 'delivered'\n      | 'opened'\n      | 'clicked';\n    sent_at: string;\n    created_at: string;\n    updated_at: string;\n  };\n  relationships: {\n    user: {\n      data: IRelationship;\n    };\n  };\n}\n\nexport interface IRecipient {\n  data: IDeliveryData[];\n}\n\nexport interface ICampaignStats {\n  sent: number;\n  bounced: number;\n  failed: number;\n  accepted: number;\n  delivered: number;\n  opened: number;\n  clicked: number;\n  all: number;\n}\n\nexport function listCampaigns(streamParams: IStreamParams | null = null) {\n  return streams.get<ICampaignsData>({\n    apiEndpoint: `${apiEndpoint}`,\n    ...streamParams,\n  });\n}\n\nexport function createCampaign(campaignData: CampaignCreation) {\n  return streams.add<ICampaign>(`${apiEndpoint}`, { campaign: campaignData });\n}\n\nexport function updateCampaign(\n  campaignId: string,\n  campaignData: CampaignUpdate\n) {\n  return streams.update<ICampaign>(`${apiEndpoint}/${campaignId}`, campaignId, {\n    campaign: campaignData,\n  });\n}\n\nexport async function sendCampaign(campaignId: string) {\n  const stream = await streams.add<ICampaign>(\n    `${apiEndpoint}/${campaignId}/send`,\n    {}\n  );\n  await streams.fetchAllWith({\n    apiEndpoint: [`${apiEndpoint}/${campaignId}`, `${API_PATH}/campaigns`],\n  });\n  return stream;\n}\n\nexport function sendCampaignPreview(campaignId: string) {\n  return streams.add<ICampaign>(\n    `${apiEndpoint}/${campaignId}/send_preview`,\n    {}\n  );\n}\n\nexport function deleteCampaign(campaignId: string) {\n  return streams.delete(`${apiEndpoint}/${campaignId}`, campaignId);\n}\n\nexport function campaignByIdStream(\n  campaignId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICampaign>({\n    apiEndpoint: `${apiEndpoint}/${campaignId}`,\n    ...streamParams,\n  });\n}\n\nexport function listCampaignDeliveries(\n  campaignId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IDeliveriesData>({\n    apiEndpoint: `${apiEndpoint}/${campaignId}/deliveries`,\n    ...streamParams,\n  });\n}\n\nexport function getCampaignStats(\n  campaignId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICampaignStats>({\n    apiEndpoint: `${apiEndpoint}/${campaignId}/stats`,\n    ...streamParams,\n  });\n}\n\nexport function isDraft(campaign: ICampaignData) {\n  return campaign.attributes.deliveries_count === 0;\n}\n"],"sourceRoot":""}