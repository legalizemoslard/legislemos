{"version":3,"sources":["webpack:///./app/modules/commercial/insights/admin/containers/Reports/charts/BarChartActiveUsersByTime.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Reports/charts/ParticipationPerTopic.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Reports/charts/IdeasByStatusChart.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Reports/PollReport.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Reports/charts/LineBarChartVotesByTime.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Reports/charts/LineBarChart.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Reports/messages.ts","webpack:///./app/modules/commercial/insights/admin/containers/Reports/charts/ResponseGraph.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Reports/QuestionReport.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Reports/ProjectReport.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Reports/charts/HorizontalBarChartWithoutStream.tsx"],"names":["InfoIcon","Icon","StyledResponsiveContainer","ResponsiveContainer","BarChartActiveUsersByTime","props","data","graphUnit","isEmpty","series","map","value","key","name","code","date","resolution","formatDate","intl","day","undefined","month","year","state","serie","currentChart","React","createRef","this","startAt","endAt","currentGroupFilter","currentTopicFilter","currentProjectFilter","resubscribe","prevProps","subscription","unsubscribe","stream","queryParameters","start_at","end_at","interval","project","group","topic","observable","subscribe","convertedSerie","convertToGraphFormat","setState","className","graphTitle","infoMessage","chartLabelSize","chartLabelColor","barHoverColor","animationBegin","animationDuration","newBarFill","noData","every","item","length","GraphCard","GraphCardInner","GraphCardHeader","GraphCardTitle","Popup","basic","trigger","content","position","svgNode","NoDataContainer","FormattedMessage","messages","BarChart","ref","Bar","dataKey","fill","isAnimationActive","XAxis","stroke","fontSize","tick","transform","tickFormatter","formatTick","YAxis","Tooltip","labelFormatter","formatLabel","cursor","PureComponent","injectIntl","withTheme","rowGap","Column","styled","div","Row","TopicName","fontSizes","small","ParticipationType","base","Cell","cellColor","colors","background","Value","p","xs","getCellColor","participationType","saturation","maxParticipationValue","luminosity","topics","mapped","topicId","title_multiloc","nameMultiloc","res","sortBy","Data","adopt","ideasByTopic","projectId","render","ideasByTopicStream","commentsByTopic","commentsByTopicStream","votesByTopic","votesByTopicStream","ParticipationPerTopicWithHOCs","localize","participationPerTopic","isNilOrError","index","inputs","comments","votes","inputProps","IdeasByStatusChart","chartFill","currentGroupFilterLabel","formatMessage","unitName","CustomizedLabel","x","y","dx","dy","fontFamily","textAnchor","inputsByStatusTitle","xlsxEndpoint","ideasByStatusXlsxEndpoint","height","layout","label","barSize","entry","color","opacity","type","width","tickLine","IdeasByStatusChartWithHoCs","ideasByStatusStream","ideas","idea_status","Object","keys","status","id","ordering","PollReport","memo","participationContextId","participationContextType","pollQuestions","participationContextTitle","SubSectionTitle","GraphsContainer","question","PollReportWithHoc","dataProps","LineBarChartVotesByTime","serieChange","toString","combined$","barSerie","lineSerie","up","down","total","cumulatedTotal","barStreamObservable","votesByTimeStream","lineStreamObservable","votesByTimeCumulativeStream","combineLatest","convertedAndMergedSeries","convertAndMergeSeries","firstSerieValue","lastSerieValue","typeOfChange","totalNumber","formattedSerieChange","formatSerieChange","newLineColor","cartesianGridColor","formattedNumbers","getFormattedNumbers","GraphCardFigureContainer","GraphCardFigure","GraphCardFigureChange","votesByTimeXlsxEndpoint","ComposedChart","margin","right","CartesianGrid","strokeWidth","yAxisId","Label","angle","orientation","perPeriod","period","numberOfVotesUp","rgba","stackId","numberOfVotesDown","Line","dot","Legend","wrapperStyle","paddingTop","LineBarChart","barValue","barStream","lineStream","reverseStackOrder","allowDecimals","fillOpacity","totalForPeriod","activeDot","Boolean","defineMessages","selectAProject","defaultMessage","sectionWho","sectionWhatInput","participantsOverTimeTitle","timelineType","continuousType","projectType","fromTo","noPhase","ideationAndFeedback","information","survey","budgeting","poll","volunteering","customFieldTitleExport","commentsByTimeTitle","fiveInputsWithMostVotes","week","seeReportButton","StyledGraphCardInner","ResponseGraph","graphTitleString","theme","useTheme","chartCategorySize","NameLabel","style","pointerEvents","ValueLabel","fontWeight","top","LabelList","offset","hide","QuestionReport","pollOptions","pollResponses","relationships","options","relOption","option","find","fullOption","attributes","getPollResponsesSerie","Section","Phase","isCurrentPhase","border","adminBorder","borderRadius","RowSection","TimelineSection","ProjectReport","phases","mostVotedIdeas","isTimelineProject","process_type","useState","setResolution","setStartAt","setEndAt","useEffect","getResolution","created_at","toISOString","start","end","timeDiff","moment","duration","diff","asMonths","asWeeks","formatDateLabel","mostVotedIdeasSerie","list","idea","upvotes_count","downvotes_count","slug","participationMethods","phase","participation_method","filter","el","i","arr","indexOf","projectTitle","participationMethodMessages","ideation","PageTitle","onChange","current_phase","values","from","to","SectionTitle","activeUsersByTimeStream","graphUnitMessageKey","activeUsersByTimeCumulativeXlsxEndpoint","currentProjectFilterLabel","includes","ideasByTimeCumulativeXlsxEndpoint","ideasByTimeCumulativeStream","ideasByTimeStream","commentsByTimeCumulativeXlsxEndpoint","commentsByTimeCumulativeStream","commentsByTimeStream","ProjectReportWithHoc","params","pageNumber","pageSize","sort","projectIds","withRouter","HorizontalBarChartWithoutStream","onClick","window","open","location","origin","a","b"],"mappings":"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","file":"92.cdb38027032c7061dfce.chunk.js","sourcesContent":["// libraries\nimport React from 'react';\nimport { Subscription } from 'rxjs';\nimport { map, isEmpty } from 'lodash-es';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// typings\nimport { IStreamParams, IStream } from 'utils/streams';\nimport { IResourceByTime, IUsersByTime } from 'services/stats';\nimport { IGraphFormat } from 'typings';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  BarChart,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  IGraphUnit,\n  GraphCard,\n  GraphCardInner,\n  GraphCardHeader,\n  GraphCardTitle,\n  NoDataContainer,\n} from 'components/admin/Chart';\nimport { IResolution } from 'components/admin/ResolutionControl';\nimport { Popup } from 'semantic-ui-react';\nimport { Icon } from 'cl2-component-library';\n\n// styling\nimport styled, { withTheme } from 'styled-components';\n\nconst InfoIcon = styled(Icon)`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  width: 20px;\n  height: 22px;\n  margin-left: 10px;\n`;\n\nconst StyledResponsiveContainer = styled(ResponsiveContainer)`\n  .recharts-wrapper {\n    @media print {\n      margin: 0 auto;\n    }\n  }\n`;\n\ntype State = {\n  serie: IGraphFormat | null;\n};\n\ntype Props = {\n  className?: string;\n  graphUnit: IGraphUnit;\n  graphUnitMessageKey: string;\n  graphTitle: string;\n  startAt: string | null | undefined;\n  endAt: string | null;\n  resolution: IResolution;\n  currentProjectFilter?: string | undefined;\n  currentGroupFilter?: string | undefined;\n  currentTopicFilter?: string | undefined;\n  stream: (streamParams?: IStreamParams | null) => IStream<IUsersByTime>;\n  infoMessage?: string;\n  currentProjectFilterLabel?: string | undefined;\n  currentGroupFilterLabel?: string | undefined;\n  currentTopicFilterLabel?: string | undefined;\n  xlsxEndpoint: string;\n};\n\nclass BarChartActiveUsersByTime extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  subscription: Subscription;\n  currentChart: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      serie: null,\n    };\n\n    this.currentChart = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n    this.resubscribe(\n      startAt,\n      endAt,\n      resolution,\n      currentProjectFilter,\n      currentGroupFilter,\n      currentTopicFilter\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    if (\n      startAt !== prevProps.startAt ||\n      endAt !== prevProps.endAt ||\n      resolution !== prevProps.resolution ||\n      currentGroupFilter !== prevProps.currentGroupFilter ||\n      currentTopicFilter !== prevProps.currentTopicFilter ||\n      currentProjectFilter !== prevProps.currentProjectFilter\n    ) {\n      this.resubscribe(\n        startAt,\n        endAt,\n        resolution,\n        currentProjectFilter,\n        currentGroupFilter,\n        currentTopicFilter\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  convertToGraphFormat = (data: IResourceByTime) => {\n    const { graphUnit } = this.props;\n\n    if (!isEmpty(data.series[graphUnit])) {\n      return map(data.series[graphUnit], (value, key) => ({\n        value,\n        name: key,\n        code: key,\n      }));\n    }\n\n    return null;\n  };\n\n  resubscribe(\n    startAt: string | null | undefined,\n    endAt: string | null,\n    resolution: IResolution,\n    currentProjectFilter: string | undefined,\n    currentGroupFilter: string | undefined,\n    currentTopicFilter: string | undefined\n  ) {\n    const { stream } = this.props;\n\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n\n    this.subscription = stream({\n      queryParameters: {\n        start_at: startAt,\n        end_at: endAt,\n        interval: resolution,\n        project: currentProjectFilter,\n        group: currentGroupFilter,\n        topic: currentTopicFilter,\n      },\n    }).observable.subscribe((serie) => {\n      const convertedSerie = this.convertToGraphFormat(serie);\n      this.setState({ serie: convertedSerie });\n    });\n  }\n\n  formatTick = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'short',\n    });\n  };\n\n  formatLabel = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'long',\n      year: 'numeric',\n    });\n  };\n\n  render() {\n    const { className, graphTitle, infoMessage } = this.props;\n    const { serie } = this.state;\n    const {\n      chartLabelSize,\n      chartLabelColor,\n      barHoverColor,\n      animationBegin,\n      animationDuration,\n      newBarFill,\n    } = this.props['theme'];\n\n    const noData =\n      !serie || serie.every((item) => isEmpty(item)) || serie.length <= 0;\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              {graphTitle}\n              {infoMessage && (\n                <Popup\n                  basic\n                  trigger={\n                    <div>\n                      <InfoIcon name=\"info\" />\n                    </div>\n                  }\n                  content={infoMessage}\n                  position=\"top left\"\n                />\n              )}\n            </GraphCardTitle>\n            {!noData && (\n              <ReportExportMenu\n                svgNode={this.currentChart}\n                name={graphTitle}\n                {...this.props}\n              />\n            )}\n          </GraphCardHeader>\n          {noData ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <StyledResponsiveContainer>\n              <BarChart data={serie ?? undefined} ref={this.currentChart}>\n                <Bar\n                  dataKey=\"value\"\n                  name={graphTitle}\n                  fill={newBarFill}\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                  isAnimationActive={true}\n                />\n                <XAxis\n                  dataKey=\"name\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tick={{ transform: 'translate(0, 7)' }}\n                  tickFormatter={this.formatTick}\n                />\n                <YAxis stroke={chartLabelColor} fontSize={chartLabelSize} />\n                <Tooltip\n                  isAnimationActive={false}\n                  labelFormatter={this.formatLabel}\n                  cursor={{ fill: barHoverColor }}\n                />\n              </BarChart>\n            </StyledResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nexport default injectIntl<Props>(\n  withTheme(BarChartActiveUsersByTime as any) as any\n);\n","import React from 'react';\nimport { adopt } from 'react-adopt';\nimport { map, sortBy } from 'lodash-es';\nimport styled from 'styled-components';\n\n// resources\nimport GetSerieFromStream from 'resources/GetSerieFromStream';\nimport {\n  IIdeasByTopic,\n  ideasByTopicStream,\n  ICommentsByTopic,\n  commentsByTopicStream,\n  IVotesByTopic,\n  votesByTopicStream,\n} from 'services/stats';\nimport { IParticipationByTopic } from 'typings';\nimport { fontSizes, colors } from 'utils/styleUtils';\n\n// i18n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport injectLocalize, { InjectedLocalized } from 'utils/localize';\nimport messages from '../messages';\nimport useLocalize from 'hooks/useLocalize';\nimport {\n  GraphCard,\n  GraphCardInner,\n  GraphCardTitle,\n  GraphCardHeader,\n  NoDataContainer,\n} from 'components/admin/Chart';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  projectId: string | null;\n  startAt: string | null;\n  endAt: string | null;\n  className?: string;\n}\n\ninterface DataProps {\n  ideasByTopic: {\n    serie: IParticipationByTopic;\n  };\n  commentsByTopic: {\n    serie: IParticipationByTopic;\n  };\n  votesByTopic: {\n    serie: IParticipationByTopic;\n  };\n}\n\nconst cellWidth = '100px';\nconst rowGap = '10px';\n\nconst Column = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n`;\nconst Row = styled.div`\n  display: inline-flex;\n  flex-direction: row;\n  margin: auto;\n`;\n\nconst TopicName = styled.div`\n  padding: 1px;\n  font-size: ${fontSizes.small};\n  word-break: break-all;\n  width: auto;\n  height: 20px;\n  margin-right: 10px;\n  margin-bottom: ${rowGap};\n`;\n\nconst ParticipationType = styled.div`\n  padding: 1px;\n  font-size: ${fontSizes.base};\n  width: ${cellWidth};\n  height: 20px;\n  text-align: center;\n  margin-bottom: ${rowGap};\n`;\n\nconst Cell = styled.div<{ cellColor: string }>`\n  background-color: ${(props) => {\n    return props.cellColor;\n  }};\n  height: 20px;\n  width: cellWidth;\n  border: 1px solid #f1f1f1;\n  border-radius: 2px;\n  margin-bottom: ${rowGap};\n  transition: 0.3s;\n  :hover {\n    background-color: ${colors.background};\n  }\n`;\n\nconst Value = styled.p`\n  margin: auto;\n  font-size: ${fontSizes.xs};\n  text-align: center;\n  opacity: 0;\n  :hover {\n    opacity: 1;\n  }\n`;\n\nconst getCellColor = (value, participationType) => {\n  const saturation =\n    (value / maxParticipationValue[participationType]) * 50 + 49;\n  const luminosity =\n    100 - ((value / maxParticipationValue[participationType]) * 60 + 5);\n  return `hsl(185, ${saturation}%, ${luminosity}%)`;\n};\n\ninterface Props extends InputProps, DataProps, InjectedLocalized {}\n\nconst ParticipationPerTopic = (props: Props) => {\n  const { votesByTopic, commentsByTopic, ideasByTopic, className } = props;\n  const localize = useLocalize();\n  return (\n    <>\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              <FormattedMessage {...messages.participationPerTopic} />\n            </GraphCardTitle>\n          </GraphCardHeader>\n          {isNilOrError(votesByTopic) ||\n          isNilOrError(commentsByTopic) ||\n          isNilOrError(ideasByTopic) ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <Row>\n              <Column>\n                <ParticipationType />\n                {ideasByTopic.serie &&\n                  ideasByTopic.serie.map((topic, index) => (\n                    <TopicName key={index}>\n                      {localize(topic.nameMultiloc)}\n                    </TopicName>\n                  ))}\n              </Column>\n              <Column>\n                <ParticipationType>\n                  <FormattedMessage {...messages.inputs} />\n                </ParticipationType>\n                {ideasByTopic.serie &&\n                  ideasByTopic.serie.map((topic, index) => (\n                    <Cell\n                      key={index}\n                      cellColor={getCellColor(topic.value, 'ideas')}\n                    >\n                      <Value>{topic.value}</Value>\n                    </Cell>\n                  ))}\n              </Column>\n              <Column>\n                <ParticipationType>\n                  <FormattedMessage {...messages.comments} />\n                </ParticipationType>\n                {commentsByTopic.serie &&\n                  commentsByTopic.serie.map((topic, index) => (\n                    <Cell\n                      key={index}\n                      cellColor={getCellColor(topic.value, 'comments')}\n                    >\n                      <Value>{topic.value}</Value>\n                    </Cell>\n                  ))}\n              </Column>\n              <Column>\n                <ParticipationType>\n                  <FormattedMessage {...messages.votes} />\n                </ParticipationType>\n                {votesByTopic.serie &&\n                  votesByTopic.serie.map((topic, index) => (\n                    <Cell\n                      key={index}\n                      cellColor={getCellColor(topic.value, 'total')}\n                    >\n                      <Value>{topic.value}</Value>\n                    </Cell>\n                  ))}\n              </Column>\n            </Row>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    </>\n  );\n};\n\nconst maxParticipationValue = {};\n\nconst convertToGraphFormat = (dataKey: string) => (\n  data: IIdeasByTopic | IVotesByTopic | ICommentsByTopic\n) => {\n  const { series, topics } = data;\n  maxParticipationValue[dataKey] = 0;\n  const mapped = map(topics, ({ title_multiloc }, topicId: string) => {\n    if (series[dataKey][topicId] > maxParticipationValue[dataKey]) {\n      maxParticipationValue[dataKey] = series[dataKey][topicId];\n    }\n    return {\n      nameMultiloc: title_multiloc,\n      value: series[dataKey][topicId] || (0 as number),\n      code: topicId,\n    };\n  });\n\n  const res = sortBy(mapped, 'code');\n\n  return res.length > 0 ? res : null;\n};\n\nconst Data = adopt<DataProps, InputProps>({\n  ideasByTopic: ({ projectId, endAt, render }) => (\n    <GetSerieFromStream\n      currentProjectFilter={projectId}\n      stream={ideasByTopicStream}\n      endAt={endAt}\n      convertToGraphFormat={convertToGraphFormat('ideas')}\n    >\n      {render}\n    </GetSerieFromStream>\n  ),\n  commentsByTopic: ({ projectId, endAt, render }) => (\n    <GetSerieFromStream\n      currentProjectFilter={projectId}\n      stream={commentsByTopicStream}\n      endAt={endAt}\n      convertToGraphFormat={convertToGraphFormat('comments')}\n    >\n      {render}\n    </GetSerieFromStream>\n  ),\n  votesByTopic: ({ projectId, endAt, render }) => (\n    <GetSerieFromStream\n      currentProjectFilter={projectId}\n      stream={votesByTopicStream}\n      endAt={endAt}\n      convertToGraphFormat={convertToGraphFormat('total')}\n    >\n      {render}\n    </GetSerieFromStream>\n  ),\n});\n\nconst ParticipationPerTopicWithHOCs = injectIntl(\n  injectLocalize(ParticipationPerTopic)\n);\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(serie) => {\n      return <ParticipationPerTopicWithHOCs {...serie} {...inputProps} />;\n    }}\n  </Data>\n);\n","// libraries\nimport React from 'react';\nimport { isEmpty, map } from 'lodash-es';\n\n// intl\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// styling\nimport { withTheme } from 'styled-components';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  BarChart,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Cell,\n} from 'recharts';\nimport {\n  NoDataContainer,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCard,\n  GraphCardInner,\n} from 'components/admin/Chart';\n\n// resources\nimport GetSerieFromStream from 'resources/GetSerieFromStream';\n\n// types\nimport { ideasByStatusStream, ideasByStatusXlsxEndpoint } from 'services/stats';\nimport { IGraphFormat } from 'typings';\nimport injectLocalize, { InjectedLocalized } from 'utils/localize';\n\ninterface DataProps {\n  serie: IGraphFormat;\n}\n\ninterface InputProps {\n  startAt: string | null | undefined;\n  endAt: string | null;\n  currentProjectFilter?: string | undefined;\n  currentGroupFilter?: string | undefined;\n  currentGroupFilterLabel?: string | undefined;\n  className?: string;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nexport class IdeasByStatusChart extends React.PureComponent<\n  Props & InjectedIntlProps\n> {\n  currentChart: React.RefObject<any>;\n  constructor(props: Props & InjectedIntlProps) {\n    super(props as any);\n    this.currentChart = React.createRef();\n  }\n\n  render() {\n    const {\n      chartFill,\n      chartLabelSize,\n      chartLabelColor,\n      barHoverColor,\n      animationBegin,\n      animationDuration,\n    } = this.props['theme'];\n    const {\n      currentGroupFilterLabel,\n      currentGroupFilter,\n      className,\n      serie,\n      intl: { formatMessage },\n    } = this.props;\n\n    const noData =\n      !serie || serie.every((item) => isEmpty(item)) || serie.length <= 0;\n\n    const unitName = formatMessage(messages.inputs);\n\n    const CustomizedLabel = (props) => {\n      const { x, y, value } = props;\n      return (\n        <text\n          x={x}\n          y={y}\n          dx={20}\n          dy={-6}\n          fontFamily=\"sans-serif\"\n          fill={chartLabelColor}\n          fontSize={chartLabelSize}\n          textAnchor=\"middle\"\n        >\n          {' '}\n          {value}{' '}\n        </text>\n      );\n    };\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              <FormattedMessage {...messages.inputsByStatusTitle} />\n            </GraphCardTitle>\n            {!noData && (\n              <ReportExportMenu\n                name={formatMessage(messages.inputsByStatusTitle)}\n                svgNode={this.currentChart}\n                xlsxEndpoint={ideasByStatusXlsxEndpoint}\n                currentGroupFilterLabel={currentGroupFilterLabel}\n                currentGroupFilter={currentGroupFilter}\n              />\n            )}\n          </GraphCardHeader>\n          {noData ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <ResponsiveContainer\n              height={serie.length > 1 ? serie.length * 50 : 100}\n            >\n              <BarChart data={serie} layout=\"vertical\" ref={this.currentChart}>\n                <Bar\n                  dataKey=\"value\"\n                  name={unitName}\n                  fill={chartFill}\n                  label={<CustomizedLabel />}\n                  barSize={5}\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                >\n                  {serie.map((entry, index) => {\n                    return (\n                      <Cell\n                        key={`cell-${index}`}\n                        fill={(entry.color && entry.color) || chartFill}\n                        opacity={0.8}\n                      />\n                    );\n                  })}\n                </Bar>\n                <YAxis\n                  dataKey=\"name\"\n                  type=\"category\"\n                  width={150}\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tickLine={false}\n                />\n                <XAxis\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  type=\"number\"\n                  tick={{ transform: 'translate(0, 7)' }}\n                />\n                <Tooltip\n                  isAnimationActive={false}\n                  cursor={{ fill: barHoverColor }}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nconst IdeasByStatusChartWithHoCs = injectIntl<Props>(\n  withTheme(IdeasByStatusChart as any) as any\n);\n\nconst WrappedIdeasByStatusChart = (\n  inputProps: InputProps & InjectedLocalized\n) => {\n  const convertToGraphFormat = ({ series: { ideas }, idea_status }) => {\n    if (Object.keys(ideas).length <= 0) {\n      return null;\n    }\n\n    return map(idea_status, (status, id) => ({\n      value: ideas[id] || 0,\n      name: inputProps.localize(status.title_multiloc),\n      code: id,\n      color: status.color,\n      ordering: status.ordering,\n    }));\n  };\n  return (\n    <GetSerieFromStream\n      {...inputProps}\n      stream={ideasByStatusStream}\n      convertToGraphFormat={convertToGraphFormat}\n    >\n      {(serie) => <IdeasByStatusChartWithHoCs {...serie} {...inputProps} />}\n    </GetSerieFromStream>\n  );\n};\n\nexport default injectLocalize(WrappedIdeasByStatusChart);\n","import React, { memo } from 'react';\nimport { adopt } from 'react-adopt';\nimport { InjectedIntlProps } from 'react-intl';\nimport GetPollQuestions, {\n  GetPollQuestionsChildProps,\n} from 'resources/GetPollQuestions';\nimport { isNilOrError } from 'utils/helperUtils';\nimport {\n  GraphCard,\n  GraphCardInner,\n  GraphsContainer,\n  NoDataContainer,\n} from 'components/admin/Chart';\nimport QuestionReport from './QuestionReport';\nimport { SubSectionTitle } from 'components/admin/Section';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport messages from './messages';\n\ninterface InputProps {\n  participationContextId: string;\n  participationContextType: 'phase' | 'project';\n  participationContextTitle: string;\n}\ninterface DataProps {\n  pollQuestions: GetPollQuestionsChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nconst PollReport = memo(\n  ({\n    participationContextId,\n    participationContextType,\n    pollQuestions,\n    participationContextTitle,\n  }: Props & InjectedIntlProps) => {\n    return (\n      <div>\n        {!isNilOrError(participationContextTitle) &&\n          participationContextType === 'phase' && (\n            <SubSectionTitle>{participationContextTitle}</SubSectionTitle>\n          )}\n        <GraphsContainer>\n          {!isNilOrError(pollQuestions) && pollQuestions.length > 0 ? (\n            pollQuestions.map((question) => (\n              <GraphCard\n                className={`dynamicHeight ${\n                  pollQuestions.length === 1 ? 'fullWidth' : ''\n                }`}\n                key={question.id}\n              >\n                <GraphCardInner>\n                  <QuestionReport\n                    question={question}\n                    participationContextId={participationContextId}\n                    participationContextType={participationContextType}\n                  />\n                </GraphCardInner>\n              </GraphCard>\n            ))\n          ) : (\n            <GraphCard className=\"dynamicHeight fullWidth\">\n              <GraphCardInner>\n                <NoDataContainer>\n                  <FormattedMessage {...messages.noData} />\n                </NoDataContainer>\n              </GraphCardInner>\n            </GraphCard>\n          )}\n        </GraphsContainer>\n      </div>\n    );\n  }\n);\n\nconst Data = adopt<DataProps, InputProps>({\n  pollQuestions: ({\n    participationContextId,\n    participationContextType,\n    render,\n  }) => (\n    <GetPollQuestions\n      participationContextId={participationContextId}\n      participationContextType={participationContextType}\n    >\n      {render}\n    </GetPollQuestions>\n  ),\n});\n\nconst PollReportWithHoc = injectIntl(PollReport);\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <PollReportWithHoc {...inputProps} {...dataProps} />}\n  </Data>\n);\n","// libraries\nimport React from 'react';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map, isEmpty } from 'lodash-es';\n\n// styling\nimport { withTheme } from 'styled-components';\nimport { rgba } from 'polished';\n\n// services\nimport {\n  votesByTimeStream,\n  votesByTimeCumulativeStream,\n  votesByTimeXlsxEndpoint,\n  IVotesByTime,\n} from 'services/stats';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  Line,\n  Label,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  CartesianGrid,\n  Legend,\n  ComposedChart,\n} from 'recharts';\nimport {\n  GraphCard,\n  NoDataContainer,\n  GraphCardInner,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCardFigureContainer,\n  GraphCardFigure,\n  GraphCardFigureChange,\n} from 'components/admin/Chart';\nimport { IResolution } from 'components/admin/ResolutionControl';\n\n// i18n\nimport messages from '../messages';\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\n\ntype ISerie = {\n  cumulatedTotal: number;\n  date: string | number;\n  up: number;\n  down: number;\n  total: number;\n  code: string;\n}[];\n\ntype State = {\n  serie: ISerie | null;\n};\n\ntype Props = {\n  className?: string;\n  startAt: string | null | undefined;\n  endAt: string | null;\n  resolution: IResolution;\n  currentProjectFilter?: string;\n  currentGroupFilter?: string;\n  currentTopicFilter?: string;\n  currentProjectFilterLabel?: string;\n  currentGroupFilterLabel?: string;\n  currentTopicFilterLabel?: string;\n};\n\nclass LineBarChartVotesByTime extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  combined$: Subscription;\n  currentChart: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      serie: null,\n    };\n\n    this.currentChart = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    this.resubscribe(\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    if (\n      startAt !== prevProps.startAt ||\n      endAt !== prevProps.endAt ||\n      resolution !== prevProps.resolution ||\n      currentGroupFilter !== prevProps.currentGroupFilter ||\n      currentTopicFilter !== prevProps.currentTopicFilter ||\n      currentProjectFilter !== prevProps.currentProjectFilter\n    ) {\n      this.resubscribe(\n        startAt,\n        endAt,\n        resolution,\n        currentGroupFilter,\n        currentTopicFilter,\n        currentProjectFilter\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.combined$.unsubscribe();\n  }\n\n  convertAndMergeSeries(barSerie: IVotesByTime, lineSerie: IVotesByTime) {\n    const { up, down, total } = barSerie.series;\n    let convertedSerie;\n\n    if (!isEmpty(total) && !isEmpty(lineSerie.series.total)) {\n      convertedSerie = map(total, (value, key) => ({\n        total: value,\n        down: down[key],\n        up: up[key],\n        date: key,\n        code: key,\n        cumulatedTotal: lineSerie.series.total[key],\n      }));\n    } else {\n      return null;\n    }\n\n    return convertedSerie;\n  }\n\n  resubscribe(\n    startAt: string | null | undefined,\n    endAt: string | null,\n    resolution: IResolution,\n    currentGroupFilter: string | undefined,\n    currentTopicFilter: string | undefined,\n    currentProjectFilter: string | undefined\n  ) {\n    if (this.combined$) {\n      this.combined$.unsubscribe();\n    }\n\n    const queryParameters = {\n      queryParameters: {\n        start_at: startAt,\n        end_at: endAt,\n        interval: resolution,\n        project: currentProjectFilter,\n        group: currentGroupFilter,\n        topic: currentTopicFilter,\n      },\n    };\n\n    const barStreamObservable = votesByTimeStream(queryParameters).observable;\n    const lineStreamObservable = votesByTimeCumulativeStream(queryParameters)\n      .observable;\n    this.combined$ = combineLatest(\n      barStreamObservable,\n      lineStreamObservable\n    ).subscribe(([barSerie, lineSerie]) => {\n      const convertedAndMergedSeries = this.convertAndMergeSeries(\n        barSerie,\n        lineSerie\n      );\n      this.setState({ serie: convertedAndMergedSeries });\n    });\n  }\n\n  formatTick = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'short',\n    });\n  };\n\n  formatLabel = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'long',\n      year: 'numeric',\n    });\n  };\n\n  formatSerieChange = (serieChange: number) => {\n    if (serieChange > 0) {\n      return `(+${serieChange.toString()})`;\n    } else if (serieChange < 0) {\n      return `(${serieChange.toString()})`;\n    }\n    return null;\n  };\n\n  getFormattedNumbers(serie: ISerie | null) {\n    if (serie && serie.length > 0) {\n      const firstSerieValue = serie[0].cumulatedTotal;\n      const lastSerieValue = serie[serie.length - 1].cumulatedTotal;\n      const serieChange = lastSerieValue - firstSerieValue;\n      let typeOfChange: 'increase' | 'decrease' | '' = '';\n\n      if (serieChange > 0) {\n        typeOfChange = 'increase';\n      } else if (serieChange < 0) {\n        typeOfChange = 'decrease';\n      }\n\n      return {\n        typeOfChange,\n        totalNumber: lastSerieValue,\n        formattedSerieChange: this.formatSerieChange(serieChange),\n      };\n    }\n\n    return {\n      totalNumber: null,\n      formattedSerieChange: null,\n      typeOfChange: '',\n    };\n  }\n\n  render() {\n    const {\n      chartLabelSize,\n      chartLabelColor,\n      newLineColor,\n      animationBegin,\n      animationDuration,\n      cartesianGridColor,\n      newBarFill,\n    } = this.props['theme'];\n    const { formatMessage } = this.props.intl;\n    const { serie } = this.state;\n    const formattedNumbers = this.getFormattedNumbers(serie);\n    const { className, resolution } = this.props;\n    const {\n      totalNumber,\n      formattedSerieChange,\n      typeOfChange,\n    } = formattedNumbers;\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              <FormattedMessage {...messages.votes} />\n              <GraphCardFigureContainer>\n                <GraphCardFigure>{totalNumber}</GraphCardFigure>\n                <GraphCardFigureChange className={typeOfChange}>\n                  {formattedSerieChange}\n                </GraphCardFigureChange>\n              </GraphCardFigureContainer>\n            </GraphCardTitle>\n\n            {serie && (\n              <ReportExportMenu\n                svgNode={this.currentChart}\n                xlsxEndpoint={votesByTimeXlsxEndpoint}\n                name={formatMessage(messages.votes)}\n                {...this.props}\n              />\n            )}\n          </GraphCardHeader>\n          {!serie ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <ResponsiveContainer>\n              <ComposedChart\n                data={serie}\n                margin={{ right: 40 }}\n                ref={this.currentChart}\n              >\n                <CartesianGrid stroke={cartesianGridColor} strokeWidth={0.5} />\n                <XAxis\n                  dataKey=\"date\"\n                  interval=\"preserveStartEnd\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tick={{ transform: 'translate(0, 7)' }}\n                  tickFormatter={this.formatTick}\n                  tickLine={false}\n                />\n                <YAxis\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  yAxisId=\"cumulatedTotal\"\n                  tickLine={false}\n                >\n                  <Label\n                    value={formatMessage(messages.total)}\n                    angle={-90}\n                    position={'center'}\n                    dx={-15}\n                  />\n                </YAxis>\n                <YAxis yAxisId=\"barValue\" orientation=\"right\" tickLine={false}>\n                  <Label\n                    value={formatMessage(messages.perPeriod, {\n                      period: formatMessage(messages[resolution]),\n                    })}\n                    angle={90}\n                    position={'center'}\n                    dx={15}\n                  />\n                </YAxis>\n                <Tooltip\n                  isAnimationActive={false}\n                  labelFormatter={this.formatLabel}\n                />\n\n                <Bar\n                  dataKey=\"up\"\n                  name={formatMessage(messages.numberOfVotesUp)}\n                  fill={rgba(newBarFill, 1)}\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                  stackId=\"1\"\n                  yAxisId=\"barValue\"\n                  barSize={20}\n                />\n                <Bar\n                  dataKey=\"down\"\n                  name={formatMessage(messages.numberOfVotesDown)}\n                  fill={rgba(newBarFill, 0.7)}\n                  stackId=\"1\"\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                  stroke=\"none\"\n                  yAxisId=\"barValue\"\n                  barSize={20}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"cumulatedTotal\"\n                  name={formatMessage(messages.total)}\n                  dot={serie && serie?.length < 31}\n                  stroke={newLineColor}\n                  fill={newLineColor}\n                  strokeWidth={1}\n                  yAxisId=\"cumulatedTotal\"\n                />\n\n                <Legend\n                  wrapperStyle={{\n                    paddingTop: '20px',\n                  }}\n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nexport default injectIntl<Props>(\n  withTheme(LineBarChartVotesByTime as any) as any\n);\n","// libraries\nimport React from 'react';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map, isEmpty } from 'lodash-es';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// typings\nimport { IStreamParams, IStream } from 'utils/streams';\nimport {\n  IResourceByTime,\n  IVotesByTime,\n  IUsersByTime,\n  IIdeasByTime,\n  ICommentsByTime,\n} from 'services/stats';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  ComposedChart,\n  CartesianGrid,\n  Tooltip,\n  Line,\n  Legend,\n  Bar,\n  XAxis,\n  YAxis,\n  Label,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  IGraphUnit,\n  GraphCard,\n  NoDataContainer,\n  GraphCardInner,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCardFigureContainer,\n  GraphCardFigure,\n  GraphCardFigureChange,\n} from 'components/admin/Chart';\nimport { IResolution } from 'components/admin/ResolutionControl';\nimport { Popup } from 'semantic-ui-react';\nimport { Icon } from 'cl2-component-library';\n\n// styling\nimport styled, { withTheme } from 'styled-components';\n\nconst InfoIcon = styled(Icon)`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  width: 20px;\n  height: 22px;\n  margin-left: 10px;\n`;\n\nconst StyledResponsiveContainer = styled(ResponsiveContainer)`\n  .recharts-wrapper {\n    @media print {\n      margin: 0 auto;\n    }\n  }\n`;\n\ntype IComposedGraphFormat = {\n  total: number | string;\n  name: string;\n  code: string;\n  barValue: number | string;\n}[];\n\ninterface State {\n  serie: IComposedGraphFormat | null;\n}\n\ntype IStreams =\n  | IStream<IUsersByTime>\n  | IStream<IIdeasByTime>\n  | IStream<ICommentsByTime>\n  | IStream<IVotesByTime>;\n\ninterface Props {\n  className?: string;\n  graphUnit: IGraphUnit;\n  graphUnitMessageKey: string;\n  graphTitle: string;\n  startAt: string | null | undefined;\n  endAt: string | null;\n  resolution: IResolution;\n  currentProjectFilter?: string;\n  currentGroupFilter?: string;\n  currentTopicFilter?: string;\n  barStream: (streamParams: IStreamParams | null) => IStreams;\n  lineStream: (streamParams: IStreamParams | null) => IStreams;\n  infoMessage?: string;\n  currentProjectFilterLabel?: string;\n  currentGroupFilterLabel?: string;\n  currentTopicFilterLabel?: string;\n  xlsxEndpoint: string;\n}\n\nclass LineBarChart extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  combined$: Subscription;\n  currentChart: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      serie: null,\n    };\n\n    this.currentChart = React.createRef();\n  }\n\n  componentDidMount() {\n    this.resubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    if (\n      startAt !== prevProps.startAt ||\n      endAt !== prevProps.endAt ||\n      resolution !== prevProps.resolution ||\n      currentGroupFilter !== prevProps.currentGroupFilter ||\n      currentTopicFilter !== prevProps.currentTopicFilter ||\n      currentProjectFilter !== prevProps.currentProjectFilter\n    ) {\n      this.resubscribe();\n    }\n  }\n\n  componentWillUnmount() {\n    this.combined$.unsubscribe();\n  }\n\n  convertAndMergeSeries = (\n    barSerie: IResourceByTime,\n    lineSerie: IResourceByTime\n  ) => {\n    const { graphUnit } = this.props;\n    let convertedSerie;\n\n    if (\n      !isEmpty(lineSerie.series[graphUnit]) &&\n      !isEmpty(barSerie.series[graphUnit])\n    ) {\n      convertedSerie = map(lineSerie.series[graphUnit], (value, key) => ({\n        total: value,\n        barValue: barSerie.series[graphUnit][key],\n        name: key,\n        code: key,\n      }));\n    } else {\n      return null;\n    }\n\n    return convertedSerie;\n  };\n\n  resubscribe() {\n    const {\n      barStream,\n      lineStream,\n      startAt,\n      endAt,\n      resolution,\n      currentProjectFilter,\n      currentGroupFilter,\n      currentTopicFilter,\n    } = this.props;\n\n    if (this.combined$) {\n      this.combined$.unsubscribe();\n    }\n\n    const queryParameters = {\n      queryParameters: {\n        start_at: startAt,\n        end_at: endAt,\n        interval: resolution,\n        project: currentProjectFilter,\n        group: currentGroupFilter,\n        topic: currentTopicFilter,\n      },\n    };\n\n    const barStreamObservable = barStream(queryParameters).observable;\n    const lineStreamObservable = lineStream(queryParameters).observable;\n    this.combined$ = combineLatest(\n      barStreamObservable,\n      lineStreamObservable\n    ).subscribe(([barSerie, lineSerie]) => {\n      const convertedAndMergedSeries = this.convertAndMergeSeries(\n        barSerie,\n        lineSerie\n      );\n      this.setState({ serie: convertedAndMergedSeries });\n    });\n  }\n\n  formatTick = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'short',\n    });\n  };\n\n  formatLabel = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'long',\n      year: 'numeric',\n    });\n  };\n\n  formatSerieChange = (serieChange: number) => {\n    if (serieChange > 0) {\n      return `(+${serieChange.toString()})`;\n    } else if (serieChange < 0) {\n      return `(${serieChange.toString()})`;\n    }\n    return null;\n  };\n\n  getFormattedNumbers(serie) {\n    if (serie) {\n      const firstSerieValue = serie && serie[0].total;\n      const lastSerieValue = serie && serie[serie.length - 1].total;\n      const serieChange = lastSerieValue - firstSerieValue;\n      let typeOfChange: 'increase' | 'decrease' | '' = '';\n\n      if (serieChange > 0) {\n        typeOfChange = 'increase';\n      } else if (serieChange < 0) {\n        typeOfChange = 'decrease';\n      }\n\n      return {\n        typeOfChange,\n        totalNumber: lastSerieValue,\n        formattedSerieChange: this.formatSerieChange(serieChange),\n      };\n    }\n\n    return {\n      totalNumber: null,\n      formattedSerieChange: null,\n      typeOfChange: '',\n    };\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { className, graphTitle, infoMessage, resolution } = this.props;\n    const { serie } = this.state;\n\n    const {\n      chartLabelSize,\n      chartLabelColor,\n      cartesianGridColor,\n      newBarFill,\n      newLineColor,\n    } = this.props['theme'];\n\n    const formattedNumbers = this.getFormattedNumbers(serie);\n    const {\n      totalNumber,\n      formattedSerieChange,\n      typeOfChange,\n    } = formattedNumbers;\n\n    const noData =\n      !serie || serie.every((item) => isEmpty(item)) || serie.length <= 0;\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              {graphTitle}\n              {infoMessage && (\n                <Popup\n                  basic\n                  trigger={\n                    <div>\n                      <InfoIcon name=\"info\" />\n                    </div>\n                  }\n                  content={infoMessage}\n                  position=\"top left\"\n                />\n              )}\n\n              <GraphCardFigureContainer>\n                <GraphCardFigure>{totalNumber}</GraphCardFigure>\n                <GraphCardFigureChange className={typeOfChange}>\n                  {formattedSerieChange}\n                </GraphCardFigureChange>\n              </GraphCardFigureContainer>\n            </GraphCardTitle>\n\n            {!noData && (\n              <ReportExportMenu\n                svgNode={this.currentChart}\n                name={graphTitle}\n                {...this.props}\n              />\n            )}\n          </GraphCardHeader>\n          {noData ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <StyledResponsiveContainer>\n              <ComposedChart\n                data={serie ?? undefined}\n                reverseStackOrder={true}\n                ref={this.currentChart}\n              >\n                <CartesianGrid stroke={cartesianGridColor} strokeWidth={0.5} />\n                <XAxis\n                  dataKey=\"name\"\n                  interval=\"preserveStartEnd\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tick={{ transform: 'translate(0, 7)' }}\n                  tickFormatter={this.formatTick}\n                  tickLine={false}\n                />\n                <YAxis\n                  yAxisId=\"total\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tickLine={false}\n                >\n                  <Label\n                    value={formatMessage(messages.total)}\n                    angle={-90}\n                    position={'center'}\n                    dx={-15}\n                  />\n                </YAxis>\n                <YAxis\n                  yAxisId=\"barValue\"\n                  orientation=\"right\"\n                  allowDecimals={false}\n                  tickLine={false}\n                >\n                  <Label\n                    value={formatMessage(messages.perPeriod, {\n                      period: formatMessage(messages[resolution]),\n                    })}\n                    angle={90}\n                    position={'center'}\n                    dx={15}\n                  />\n                </YAxis>\n                <Tooltip\n                  isAnimationActive={false}\n                  labelFormatter={this.formatLabel}\n                  cursor={{ strokeWidth: 1 }}\n                />\n\n                <Bar\n                  dataKey=\"barValue\"\n                  yAxisId=\"barValue\"\n                  barSize={20}\n                  fill={newBarFill}\n                  fillOpacity={1}\n                  name={formatMessage(messages.totalForPeriod, {\n                    period: formatMessage(messages[resolution]),\n                  })}\n                />\n                <Line\n                  type=\"monotone\"\n                  yAxisId=\"total\"\n                  dataKey=\"total\"\n                  activeDot={Boolean(serie && serie?.length < 31)}\n                  stroke={newLineColor}\n                  fill={newLineColor}\n                  strokeWidth={1}\n                  name={formatMessage(messages.total)}\n                />\n                <Legend\n                  wrapperStyle={{\n                    paddingTop: '20px',\n                  }}\n                />\n              </ComposedChart>\n            </StyledResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nexport default injectIntl<Props>(withTheme(LineBarChart as any) as any);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  selectAProject: {\n    id: 'app.containers.Admin.Insights.Reports.selectAProject',\n    defaultMessage: 'What project are you interested in ?',\n  },\n  sectionWho: {\n    id: 'app.containers.Admin.Insights.Reports.sectionWho',\n    defaultMessage: 'Who participated ?',\n  },\n  sectionWhatInput: {\n    id: 'app.containers.Admin.Insights.Reports.sectionWhatInput',\n    defaultMessage: 'What input did you collect?',\n  },\n  participantsOverTimeTitle: {\n    id: 'app.containers.Admin.Insights.Reports.participantsOverTimeTitle',\n    defaultMessage: 'Participants',\n  },\n  timelineType: {\n    id: 'app.containers.Admin.Insights.Reports.timelineType',\n    defaultMessage: 'Timeline',\n  },\n  continuousType: {\n    id: 'app.containers.Admin.Insights.Reports.continuousType',\n    defaultMessage: 'Continuous',\n  },\n  projectType: {\n    id: 'app.containers.Admin.Insights.Reports.projectType',\n    defaultMessage: 'Project type : {projectType}',\n  },\n  fromTo: {\n    id: 'app.containers.Admin.Insights.Reports.fromTo',\n    defaultMessage: 'from {from} to {to}',\n  },\n  noPhase: {\n    id: 'app.containers.Admin.Insights.Reports.noPhase',\n    defaultMessage: 'No phase created for this project',\n  },\n  ideationAndFeedback: {\n    id: 'app.containers.Admin.Insights.Reports.ideationAndFeedback',\n    defaultMessage: 'ideation and feedback',\n  },\n  information: {\n    id: 'app.containers.Admin.Insights.Reports.information',\n    defaultMessage: 'information',\n  },\n  survey: {\n    id: 'app.containers.Admin.Insights.Reports.survey',\n    defaultMessage: 'survey',\n  },\n  budgeting: {\n    id: 'app.containers.Admin.Insights.Reports.budgeting',\n    defaultMessage: 'budgeting',\n  },\n  poll: {\n    id: 'app.containers.Admin.Insights.Reports.poll',\n    defaultMessage: 'poll',\n  },\n  volunteering: {\n    id: 'app.containers.Admin.Insights.Reports.volunteering',\n    defaultMessage: 'volunteering',\n  },\n  customFieldTitleExport: {\n    id: 'app.containers.Admin.Insights.Reports.customFieldTitleExport',\n    defaultMessage: '{fieldName}_repartition',\n  },\n  participationPerTopic: {\n    id: 'app.containers.Admin.Insights.Reports.participationPerTopic',\n    defaultMessage: 'Participation per topic',\n  },\n  noData: {\n    id: 'app.containers.Admin.Insights.Reports.noData',\n    defaultMessage: 'No data available with the current filters.',\n  },\n  inputs: {\n    id: 'app.containers.Admin.Insights.Reports.inputs',\n    defaultMessage: 'Inputs',\n  },\n  votes: {\n    id: 'app.containers.Admin.Insights.Reports.votes',\n    defaultMessage: 'Votes',\n  },\n  comments: {\n    id: 'app.containers.Admin.Insights.Reports.comments',\n    defaultMessage: 'Comments',\n  },\n  commentsByTimeTitle: {\n    id: 'app.containers.Admin.Insights.Reports.commentsByTimeTitle',\n    defaultMessage: 'Comments',\n  },\n  fiveInputsWithMostVotes: {\n    id: 'app.containers.Admin.Insights.Reports.fiveInputsWithMostVotes',\n    defaultMessage: 'Top 5 inputs by votes',\n  },\n  total: {\n    id: 'app.containers.Admin.Insights.Reports.total',\n    defaultMessage: 'Total',\n  },\n  totalForPeriod: {\n    id: 'app.containers.Admin.Insights.Reports.totalForPeriod',\n    defaultMessage: 'This {period}',\n  },\n  perPeriod: {\n    id: 'app.containers.Admin.Insights.Reports.perPeriod',\n    defaultMessage: 'Per {period}',\n  },\n  numberOfVotesUp: {\n    id: 'app.containers.Admin.Insights.Reports.numberOfVotesUp',\n    defaultMessage: 'Upvotes',\n  },\n  numberOfVotesDown: {\n    id: 'app.containers.Admin.Insights.Reports.numberOfVotesDown',\n    defaultMessage: 'Downvotes',\n  },\n  day: {\n    id: 'app.containers.Admin.Insights.Reports.day',\n    defaultMessage: 'day',\n  },\n  week: {\n    id: 'app.containers.Admin.Insights.Reports.week',\n    defaultMessage: 'week',\n  },\n  month: {\n    id: 'app.containers.Admin.Insights.Reports.month',\n    defaultMessage: 'month',\n  },\n  inputsByStatusTitle: {\n    id: 'app.containers.Admin.Insights.Reports.inputsByStatusTitle',\n    defaultMessage: 'Inputs by status',\n  },\n  seeReportButton: {\n    id: 'app.containers.Admin.Insights.Reports.seeReportButton',\n    defaultMessage: 'Summary',\n  },\n});\n","// libraries\nimport React, { memo } from 'react';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// styling\nimport styled, { useTheme } from 'styled-components';\n\n// resources\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  LabelList,\n} from 'recharts';\nimport {\n  IGraphUnit,\n  NoDataContainer,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCardInner,\n} from 'components/admin/Chart';\n\n// types\nimport { IGraphPoint } from 'typings';\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\n\ninterface Props {\n  serie: IGraphPoint[] | undefined;\n  graphTitleString: string;\n  graphUnit: IGraphUnit;\n  className?: string;\n  customId?: string;\n}\n\nconst StyledResponsiveContainer = styled(ResponsiveContainer)`\n  .recharts-wrapper {\n    @media print {\n      margin: 0 auto;\n    }\n    padding: 20px;\n    padding-top: 0px;\n  }\n`;\n\nconst StyledGraphCardInner = styled(GraphCardInner)`\n  border: none;\n`;\n\nexport const ResponseGraph = memo(\n  ({ graphTitleString, serie }: Props & InjectedIntlProps) => {\n    const theme: any = useTheme();\n\n    const currentChart: React.RefObject<any> = React.createRef();\n\n    const {\n      chartLabelSize,\n      chartCategorySize,\n      chartLabelColor,\n      animationBegin,\n      animationDuration,\n      newBarFill,\n    } = theme;\n\n    const NameLabel = (props) => {\n      const { x, y, value } = props;\n      return (\n        <g style={{ pointerEvents: 'none' }}>\n          <text\n            x={x}\n            y={y}\n            dx={30}\n            dy={-6}\n            fill={chartLabelColor}\n            fontSize={chartCategorySize}\n            textAnchor=\"left\"\n          >\n            {value}\n          </text>\n        </g>\n      );\n    };\n\n    const ValueLabel = (props) => {\n      const { x, y, value } = props;\n      return (\n        <g style={{ pointerEvents: 'none' }}>\n          <text\n            x={x}\n            y={y}\n            dx={5}\n            dy={-6}\n            fill={chartLabelColor}\n            fontSize={chartCategorySize}\n            textAnchor=\"right\"\n            fontWeight={'800'}\n          >\n            {value || '0'}\n          </text>\n        </g>\n      );\n    };\n\n    return (\n      <StyledGraphCardInner>\n        <GraphCardHeader>\n          <GraphCardTitle>{graphTitleString}</GraphCardTitle>\n          {!isNilOrError(serie) && (\n            <ReportExportMenu svgNode={currentChart} name={graphTitleString} />\n          )}\n        </GraphCardHeader>\n        {isNilOrError(serie) ? (\n          <NoDataContainer>\n            <FormattedMessage {...messages.noData} />\n          </NoDataContainer>\n        ) : (\n          <StyledResponsiveContainer\n            height={serie?.length > 1 ? serie.length * 50 : 100}\n          >\n            <BarChart\n              data={serie}\n              layout=\"vertical\"\n              ref={currentChart}\n              margin={{ right: 20, top: 10 }}\n            >\n              <Bar\n                name=\"Count\"\n                dataKey=\"value\"\n                fill={newBarFill}\n                barSize={5}\n                animationDuration={animationDuration}\n                animationBegin={animationBegin}\n              >\n                <LabelList\n                  dataKey=\"name\"\n                  position=\"top\"\n                  content={<NameLabel />}\n                />\n                <LabelList\n                  dataKey=\"value\"\n                  position=\"insideTopRight\"\n                  offset={-20}\n                  content={<ValueLabel />}\n                />\n              </Bar>\n\n              <YAxis\n                dataKey=\"name\"\n                type=\"category\"\n                width={150}\n                stroke={chartLabelColor}\n                fontSize={chartLabelSize}\n                tickLine={false}\n                hide={true}\n              />\n              <XAxis\n                stroke={chartLabelColor}\n                fontSize={chartLabelSize}\n                type=\"number\"\n                tick={{ transform: 'translate(0, 7)' }}\n                hide={true}\n              />\n            </BarChart>\n          </StyledResponsiveContainer>\n        )}\n      </StyledGraphCardInner>\n    );\n  }\n);\n\nconst ResponseGraphWithHoCs = injectIntl(ResponseGraph);\n\nexport default ResponseGraphWithHoCs;\n","import { IGraphPoint } from 'cl2-component-library/dist/utils/typings';\nimport useLocalize from 'hooks/useLocalize';\nimport usePollOptions from 'hooks/usePollOptions';\nimport usePollResponses from 'hooks/usePollResponses';\nimport React, { memo } from 'react';\nimport { InjectedIntlProps } from 'react-intl';\nimport { IPollQuestion } from 'services/pollQuestions';\nimport { injectIntl } from 'utils/cl-intl';\nimport { isNilOrError } from 'utils/helperUtils';\nimport ResponseGraph from './charts/ResponseGraph';\n\ninterface Props {\n  question: IPollQuestion;\n  participationContextId: string;\n  participationContextType: 'phase' | 'project';\n}\n\nconst QuestionReport = memo(\n  ({\n    question,\n    participationContextId,\n    participationContextType,\n  }: Props & InjectedIntlProps) => {\n    const localize = useLocalize();\n\n    const pollOptions = usePollOptions(question.id);\n\n    const getPollResponsesSerie = (question: IPollQuestion) => {\n      const serie: IGraphPoint[] | undefined =\n        isNilOrError(pollResponses) || isNilOrError(pollOptions)\n          ? undefined\n          : question.relationships.options.data.map((relOption) => {\n              const option = pollOptions.data.find(\n                (fullOption) => fullOption && relOption.id === fullOption.id\n              )?.attributes.title_multiloc;\n              return {\n                code: relOption.id,\n                value: pollResponses.series.options[relOption.id],\n                name: option ? localize(option) : 'TODOfallbacksomehow',\n              };\n            });\n      return serie;\n    };\n\n    const pollResponses = usePollResponses({\n      participationContextId,\n      participationContextType,\n    });\n\n    return (\n      <ResponseGraph\n        key={question.id}\n        serie={getPollResponsesSerie(question)}\n        graphTitleString={localize(question.attributes.title_multiloc)}\n        graphUnit=\"responses\"\n        className=\"dynamicHeight\"\n      />\n    );\n  }\n);\n\nexport default injectIntl(QuestionReport);\n","import React, { memo, useState, useEffect } from 'react';\nimport { adopt } from 'react-adopt';\nimport useLocalize from 'hooks/useLocalize';\n\n// resources\nimport { isNilOrError } from 'utils/helperUtils';\nimport moment from 'moment';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport styled from 'styled-components';\nimport messages from './messages';\nimport ResolutionControl, {\n  IResolution,\n} from 'components/admin/ResolutionControl';\nimport { GraphsContainer } from 'components/admin/Chart';\n\nimport GetIdeas, { GetIdeasChildProps } from 'resources/GetIdeas';\nimport GetPhases, { GetPhasesChildProps } from 'resources/GetPhases';\nimport {\n  activeUsersByTimeCumulativeXlsxEndpoint,\n  activeUsersByTimeStream,\n  ideasByTimeCumulativeXlsxEndpoint,\n  ideasByTimeCumulativeStream,\n  ideasByTimeStream,\n  commentsByTimeCumulativeXlsxEndpoint,\n  commentsByTimeCumulativeStream,\n  commentsByTimeStream,\n} from 'services/stats';\nimport { InjectedIntlProps } from 'react-intl';\nimport { colors } from 'utils/styleUtils';\n\n// services\nimport { ParticipationMethod } from 'services/participationContexts';\n\n// components\nimport { SectionTitle, PageTitle } from 'components/admin/Section';\nimport T from 'components/T';\n\nimport HorizontalBarChartWithoutStream from './charts/HorizontalBarChartWithoutStream';\nimport IdeasByStatusChart from './charts/IdeasByStatusChart';\nimport ParticipationPerTopic from './charts/ParticipationPerTopic';\nimport LineBarChart from './charts/LineBarChart';\nimport LineBarChartVotesByTime from './charts/LineBarChartVotesByTime';\nimport BarChartActiveUsersByTime from './charts/BarChartActiveUsersByTime';\nimport PollReport from './PollReport';\n\nimport Outlet from 'components/Outlet';\nimport GetProject, { GetProjectChildProps } from 'resources/GetProject';\nimport { withRouter, WithRouterProps } from 'react-router';\n\nconst Section = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst Phase = styled.div<{ isCurrentPhase: boolean }>`\n  display: flex;\n  margin-bottom: 20px;\n  flex-direction: column;\n  padding: 10px;\n  border: ${(props) =>\n    props.isCurrentPhase\n      ? `solid 3px ${colors.border}`\n      : `solid 1px ${colors.adminBorder}`};\n  border-radius: ${(props: any) => props.theme.borderRadius};\n`;\n\nconst RowSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  margin-bottom: 20px;\n`;\n\nconst TimelineSection = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  margin: -24px 0 20px -24px;\n  width: calc(100% + 24px);\n  > * {\n    margin: 24px 0 0 24px;\n  }\n`;\n\ninterface DataProps {\n  phases: GetPhasesChildProps;\n  mostVotedIdeas: GetIdeasChildProps;\n  project: GetProjectChildProps;\n}\n\ninterface Props extends DataProps {}\n\nconst ProjectReport = memo(\n  ({\n    project,\n    phases,\n    mostVotedIdeas,\n    intl: { formatMessage, formatDate },\n  }: Props & InjectedIntlProps & WithRouterProps) => {\n    if (isNilOrError(project)) return null;\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const localize = useLocalize();\n\n    const isTimelineProject = project.attributes.process_type === 'timeline';\n\n    // set time boundaries\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [resolution, setResolution] = useState<IResolution>('month');\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [startAt, setStartAt] = useState<string | null | undefined>(null);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [endAt, setEndAt] = useState<string | null>(null);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (isTimelineProject) {\n        if (!isNilOrError(phases) && phases.length > 0) {\n          const startAt = phases[0].attributes.start_at;\n          const endAt = phases[phases.length - 1].attributes.end_at;\n          setStartAt(startAt);\n          setEndAt(endAt);\n\n          const resolution = getResolution(moment(startAt), moment(endAt));\n          setResolution(resolution);\n        }\n      } else {\n        const startAt = project.attributes.created_at;\n        setStartAt(startAt);\n        setEndAt(moment().toISOString());\n\n        const resolution = getResolution(moment(startAt), moment());\n        setResolution(resolution);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [project, phases]);\n\n    const getResolution = (start, end) => {\n      const timeDiff = moment.duration(end.diff(start));\n      return timeDiff\n        ? timeDiff.asMonths() > 6\n          ? 'month'\n          : timeDiff.asWeeks() > 4\n          ? 'week'\n          : 'day'\n        : 'month';\n    };\n\n    const formatDateLabel = (date) =>\n      formatDate(date, {\n        day: resolution === 'month' ? undefined : '2-digit',\n        month: 'short',\n      });\n\n    const mostVotedIdeasSerie = mostVotedIdeas?.list?.map((idea) => ({\n      code: idea.id,\n      value: idea.attributes.upvotes_count + idea.attributes.downvotes_count,\n      up: idea.attributes.upvotes_count,\n      down: idea.attributes.downvotes_count,\n      name: localize(idea.attributes.title_multiloc),\n      slug: idea.attributes.slug,\n    }));\n\n    // deduplicated non-null participations methods in this project\n    const participationMethods = (isTimelineProject\n      ? isNilOrError(phases)\n        ? []\n        : phases.map((phase) => phase.attributes.participation_method)\n      : [project.attributes.participation_method]\n    ).filter(\n      (el, i, arr) => el && arr.indexOf(el) === i\n    ) as ParticipationMethod[];\n\n    const projectTitle = localize(project.attributes.title_multiloc);\n    const participationMethodMessages: {\n      [key in ParticipationMethod]: ReactIntl.FormattedMessage.MessageDescriptor;\n    } = {\n      ideation: messages.ideationAndFeedback,\n      information: messages.information,\n      survey: messages.survey,\n      budgeting: messages.budgeting,\n      poll: messages.poll,\n      volunteering: messages.volunteering,\n    };\n\n    return (\n      <>\n        <RowSection>\n          <PageTitle>\n            <T value={project.attributes.title_multiloc} />\n          </PageTitle>\n          <ResolutionControl value={resolution} onChange={setResolution} />\n        </RowSection>\n        {isTimelineProject && (\n          <Section>\n            <TimelineSection>\n              {!isNilOrError(phases) && phases.length > 0 ? (\n                phases.map((phase, index) => {\n                  return (\n                    <Phase\n                      key={index}\n                      isCurrentPhase={\n                        phase.id ===\n                        project?.relationships?.current_phase?.data?.id\n                      }\n                    >\n                      <p>\n                        <FormattedMessage\n                          {...messages.fromTo}\n                          values={{\n                            from: formatDateLabel(phase.attributes.start_at),\n                            to: formatDateLabel(phase.attributes.end_at),\n                          }}\n                        />\n                      </p>\n                      <FormattedMessage\n                        {...participationMethodMessages[\n                          phase.attributes.participation_method\n                        ]}\n                      />\n                      <div>{localize(phase.attributes.title_multiloc)}</div>\n                    </Phase>\n                  );\n                })\n              ) : (\n                <FormattedMessage {...messages.noPhase} />\n              )}\n            </TimelineSection>\n          </Section>\n        )}\n\n        {participationMethods !== ['information'] && startAt && endAt && (\n          <Section>\n            <SectionTitle>\n              <FormattedMessage {...messages.sectionWho} />\n            </SectionTitle>\n            <GraphsContainer>\n              <BarChartActiveUsersByTime\n                startAt={startAt}\n                endAt={endAt}\n                stream={activeUsersByTimeStream}\n                resolution={resolution}\n                graphUnit=\"users\"\n                graphUnitMessageKey=\"users\"\n                graphTitle={formatMessage(messages.participantsOverTimeTitle)}\n                xlsxEndpoint={activeUsersByTimeCumulativeXlsxEndpoint}\n                currentProjectFilter={project.id}\n                currentProjectFilterLabel={projectTitle}\n              />\n              <Outlet\n                id=\"app.containers.Admin.dashboard.reports.ProjectReport.graphs\"\n                startAt={startAt}\n                endAt={endAt}\n                participationMethods={participationMethods}\n                project={project}\n              />\n            </GraphsContainer>\n          </Section>\n        )}\n\n        <Section>\n          {((participationMethods.includes('ideation') && startAt && endAt) ||\n            participationMethods.includes('poll')) && (\n            <SectionTitle>\n              <FormattedMessage {...messages.sectionWhatInput} />\n            </SectionTitle>\n          )}\n          {participationMethods.includes('ideation') && startAt && endAt && (\n            <GraphsContainer>\n              <LineBarChart\n                graphTitle={formatMessage(messages.inputs)}\n                graphUnit=\"ideas\"\n                graphUnitMessageKey=\"ideas\"\n                startAt={startAt}\n                endAt={endAt}\n                resolution={resolution}\n                currentProjectFilter={project.id}\n                currentProjectFilterLabel={projectTitle}\n                xlsxEndpoint={ideasByTimeCumulativeXlsxEndpoint}\n                className=\"e2e-ideas-chart\"\n                lineStream={ideasByTimeCumulativeStream}\n                barStream={ideasByTimeStream}\n              />\n              <LineBarChart\n                graphTitle={formatMessage(messages.commentsByTimeTitle)}\n                graphUnit=\"comments\"\n                graphUnitMessageKey=\"comments\"\n                startAt={startAt}\n                endAt={endAt}\n                resolution={resolution}\n                currentProjectFilter={project.id}\n                currentProjectFilterLabel={projectTitle}\n                xlsxEndpoint={commentsByTimeCumulativeXlsxEndpoint}\n                className=\"e2e-comments-chart\"\n                lineStream={commentsByTimeCumulativeStream}\n                barStream={commentsByTimeStream}\n              />\n\n              <LineBarChartVotesByTime\n                className=\"e2e-votes-chart\"\n                startAt={startAt}\n                endAt={endAt}\n                resolution={resolution}\n                currentProjectFilter={project.id}\n                currentProjectFilterLabel={projectTitle}\n              />\n\n              <IdeasByStatusChart\n                className=\"dynamicHeight\"\n                startAt={startAt}\n                endAt={endAt}\n                currentProjectFilter={project.id}\n              />\n\n              <HorizontalBarChartWithoutStream\n                serie={mostVotedIdeasSerie}\n                graphTitleString={formatMessage(\n                  messages.fiveInputsWithMostVotes\n                )}\n                graphUnit=\"votes\"\n                className=\"dynamicHeight\"\n              />\n              <ParticipationPerTopic\n                startAt={startAt}\n                endAt={endAt}\n                projectId={project.id}\n                className=\"dynamicHeight\"\n              />\n            </GraphsContainer>\n          )}\n          {participationMethods.includes('poll') ? (\n            isTimelineProject ? (\n              !isNilOrError(phases) &&\n              phases.map(\n                (phase) =>\n                  phase.attributes.participation_method === 'poll' && (\n                    <PollReport\n                      participationContextType=\"phase\"\n                      participationContextId={phase.id}\n                      participationContextTitle={localize(\n                        phase.attributes.title_multiloc\n                      )}\n                    />\n                  )\n              )\n            ) : (\n              <PollReport\n                participationContextType=\"project\"\n                participationContextId={project.id}\n                participationContextTitle={localize(\n                  project.attributes.title_multiloc\n                )}\n              />\n            )\n          ) : null}\n        </Section>\n      </>\n    );\n  }\n);\n\nconst ProjectReportWithHoc = injectIntl(ProjectReport);\n\nconst Data = adopt<DataProps, WithRouterProps>({\n  phases: ({ params, render }) => (\n    <GetPhases projectId={params.projectId}>{render}</GetPhases>\n  ),\n  mostVotedIdeas: ({ params, render }) => (\n    <GetIdeas\n      pageNumber={1}\n      pageSize={5}\n      sort=\"popular\"\n      type=\"paginated\"\n      projectIds={[params.projectId]}\n    >\n      {render}\n    </GetIdeas>\n  ),\n  project: ({ params, render }) => (\n    <GetProject projectId={params.projectId}>{render}</GetProject>\n  ),\n});\n\nexport default withRouter((inputProps: WithRouterProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <ProjectReportWithHoc {...inputProps} {...dataProps} />}\n  </Data>\n));\n","// libraries\nimport React, { memo } from 'react';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// styling\nimport styled, { useTheme } from 'styled-components';\n\n// resources\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Cell,\n  LabelList,\n} from 'recharts';\nimport {\n  IGraphUnit,\n  NoDataContainer,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCard,\n  GraphCardInner,\n} from 'components/admin/Chart';\n\n// types\nimport { IGraphPoint } from 'typings';\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\n\ninterface VoteGraphPoint extends IGraphPoint {\n  up: number;\n  down: number;\n  slug: string;\n  ordering?: number;\n  color?: string;\n}\n\ninterface Props {\n  serie: VoteGraphPoint[] | undefined;\n  graphTitleString: string;\n  graphUnit: IGraphUnit;\n  className?: string;\n  customId?: string;\n}\n\nconst StyledResponsiveContainer = styled(ResponsiveContainer)`\n  .recharts-wrapper {\n    @media print {\n      margin: 0 auto;\n    }\n    padding: 20px;\n    padding-top: 0px;\n  }\n`;\n\nexport const HorizontalBarChartWithoutStream: React.SFC<\n  Props & InjectedIntlProps\n> = memo(({ className, graphTitleString, serie, graphUnit }) => {\n  const theme: any = useTheme();\n\n  const currentChart: React.RefObject<any> = React.createRef();\n\n  const {\n    chartLabelSize,\n    chartCategorySize,\n    chartLabelColor,\n    animationBegin,\n    animationDuration,\n    newBarFill,\n  } = theme;\n\n  const openIdeaInANewTab = ({ slug }: { slug: string }) => {\n    if (!isNilOrError(slug)) {\n      window.open(`${window.location.origin}/ideas/${slug}`);\n    }\n  };\n\n  const NameLabel = (props) => {\n    const { x, y, value } = props;\n    return (\n      <g style={{ pointerEvents: 'none' }}>\n        <text\n          x={x}\n          y={y}\n          dx={30}\n          dy={-6}\n          fill={chartLabelColor}\n          fontSize={chartCategorySize}\n          textAnchor=\"left\"\n        >\n          {value}\n        </text>\n      </g>\n    );\n  };\n\n  const ValueLabel = (props) => {\n    const { x, y, value } = props;\n    return (\n      <g style={{ pointerEvents: 'none' }}>\n        <text\n          x={x}\n          y={y}\n          dx={5}\n          dy={-6}\n          fill={chartLabelColor}\n          fontSize={chartCategorySize}\n          textAnchor=\"right\"\n          fontWeight={'800'}\n        >\n          {value}\n        </text>\n      </g>\n    );\n  };\n\n  return (\n    <GraphCard className={className}>\n      <GraphCardInner>\n        <GraphCardHeader>\n          <GraphCardTitle>{graphTitleString}</GraphCardTitle>\n          {!isNilOrError(serie) && (\n            <ReportExportMenu svgNode={currentChart} name={graphTitleString} />\n          )}\n        </GraphCardHeader>\n        {isNilOrError(serie) ? (\n          <NoDataContainer>\n            <FormattedMessage {...messages.noData} />\n          </NoDataContainer>\n        ) : (\n          <StyledResponsiveContainer\n            height={serie?.length > 1 ? serie.length * 50 : 100}\n          >\n            <BarChart\n              data={serie}\n              layout=\"vertical\"\n              ref={currentChart}\n              margin={{ right: 20, top: 10 }}\n            >\n              <Bar\n                dataKey=\"value\"\n                name=\"Total\"\n                opacity={0}\n                barSize={['ideas', 'votes'].includes(graphUnit) ? 30 : 20}\n                animationDuration={animationDuration}\n                animationBegin={animationBegin}\n                onClick={openIdeaInANewTab}\n                cursor=\"pointer\"\n              />\n              <Bar\n                name=\"Downvotes\"\n                stackId={'votes'}\n                dataKey=\"down\"\n                fill={newBarFill}\n                barSize={['ideas', 'votes'].includes(graphUnit) ? 5 : 20}\n                animationDuration={animationDuration}\n                animationBegin={animationBegin}\n              >\n                {graphUnit === 'ideas' &&\n                  serie\n                    .sort((a, b) =>\n                      a.ordering && b.ordering ? a.ordering - b.ordering : -1\n                    )\n                    .map((entry, index) => {\n                      return (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={(entry.color && entry.color) || newBarFill}\n                          opacity={0.8}\n                        />\n                      );\n                    })}\n                <LabelList\n                  dataKey=\"name\"\n                  position=\"top\"\n                  content={<NameLabel />}\n                />\n                <LabelList\n                  dataKey=\"value\"\n                  position=\"insideTopRight\"\n                  offset={-20}\n                  content={<ValueLabel />}\n                />\n              </Bar>\n\n              <Bar\n                name=\"Upvotes\"\n                stackId={'votes'}\n                dataKey=\"up\"\n                fill={newBarFill}\n                opacity={0.7}\n                barSize={['ideas', 'votes'].includes(graphUnit) ? 5 : 20}\n                animationDuration={animationDuration}\n                animationBegin={animationBegin}\n              >\n                {graphUnit === 'ideas' &&\n                  serie.map((entry, index) => {\n                    return (\n                      <Cell\n                        key={`cell-${index}`}\n                        fill={(entry.color && entry.color) || newBarFill}\n                        opacity={0.4}\n                      />\n                    );\n                  })}\n              </Bar>\n\n              <YAxis\n                dataKey=\"name\"\n                type=\"category\"\n                width={150}\n                stroke={chartLabelColor}\n                fontSize={chartLabelSize}\n                tickLine={false}\n                hide={true}\n              />\n              <XAxis\n                stroke={chartLabelColor}\n                fontSize={chartLabelSize}\n                type=\"number\"\n                tick={{ transform: 'translate(0, 7)' }}\n                hide={true}\n              />\n            </BarChart>\n          </StyledResponsiveContainer>\n        )}\n      </GraphCardInner>\n    </GraphCard>\n  );\n});\n\nconst HorizontalBarChartWithoutStreamWithHoCs = injectIntl<Props>(\n  HorizontalBarChartWithoutStream as any\n);\n\nexport default HorizontalBarChartWithoutStreamWithHoCs;\n"],"sourceRoot":""}