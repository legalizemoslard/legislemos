{"version":3,"sources":["webpack:///./app/resources/GetCampaign.tsx","webpack:///./app/containers/Admin/emails/custom/Edit/index.tsx"],"names":["GetCampaign","props","state","campaign","undefined","id","this","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","filter","isString","switchMap","campaignByIdStream","observable","subscribe","setState","isNilOrError","data","forEach","subscription","unsubscribe","children","React","Component","Edit","values","setErrors","setSubmitting","setStatus","updateCampaign","then","clHistory","push","catch","errorResponse","isCLErrorJSON","apiErrors","json","errors","sender","attributes","reply_to","subject_multiloc","body_multiloc","group_ids","relationships","groups","map","d","mode","onClick","goBack","PageTitle","FormattedMessage","messages","editCampaignTitle","Formik","initialValues","onSubmit","handleSubmit","render","renderFn","validate","validateCampaignForm","EditWithHOCs","withRouter","inputProps","params","campaignId"],"mappings":"4TAAA,eACA,YACA,YACA,YACA,eACA,YACA,Y,8cAkBqBA,E,0CAInB,WAAYC,GAAc,kCACxB,cAAMA,IADkB,2GAExB,EAAKC,MAAQ,CACXC,cAAUC,GAHY,E,sDAO1B,WAAoB,WACVC,EAAOC,KAAKL,MAAZI,GAERC,KAAKC,YAAc,IAAIC,kBAAgB,CAAEH,OAEzCC,KAAKG,cAAgB,CACnBH,KAAKC,YACFG,MACC,IAAAC,uBAAqB,SAACC,EAAMC,GAAP,OAAgB,aAAeD,EAAMC,OAC1D,IAAAC,SAAO,gBAAGT,EAAH,EAAGA,GAAH,OAAY,IAAAU,UAASV,OAC5B,IAAAW,YAAU,gBAAGX,EAAH,EAAGA,GAAH,OAAY,IAAAY,oBAAmBZ,GAAIa,eAE9CC,WAAU,SAAChB,GAAD,OACT,EAAKiB,SAAS,CACZjB,UAAW,IAAAkB,cAAalB,GAA4BA,EAAhBA,EAASmB,a,gCAMvD,WACE,IAAQjB,EAAOC,KAAKL,MAAZI,GACRC,KAAKC,YAAYM,KAAK,CAAER,S,kCAG1B,WACEC,KAAKG,cAAcc,SAAQ,SAACC,GAAD,OAAkBA,EAAaC,mB,oBAG5D,WAGE,OAAQC,EAFapB,KAAKL,MAAlByB,UACapB,KAAKJ,MAAlBC,c,GA1C6BwB,UAAMC,W,qZCxB/C,eACA,YACA,eAEA,eACA,eAKA,YAEA,YACA,eACA,YACA,eACA,YACA,Y,mlDAUMC,E,oPACW,SACbC,EADa,GAGV,IADDC,EACC,EADDA,UAAWC,EACV,EADUA,cAAeC,EACzB,EADyBA,WAE5B,IAAAC,gBAAe,EAAKjC,MAAME,SAASE,GAAnC,KACKyB,IAEFK,MAAK,WACJC,UAAUC,KAAV,+BAAuC,EAAKpC,MAAME,SAASE,QAE5DiC,OAAM,SAACC,GACN,IAAI,IAAAC,eAAcD,GAAgB,CAChC,IAAME,EAAYF,EAAcG,KAAKC,OACrCZ,EAAUU,QAEVR,EAAU,SAEZD,GAAc,U,+CAIJ,WACd,IAAQ7B,EAAa,EAAKF,MAAlBE,SACR,MAAO,CACLyC,OAAQzC,EAAS0C,WAAWD,OAC5BE,SAAU3C,EAAS0C,WAAWC,SAC9BC,iBAAkB5C,EAAS0C,WAAWE,iBACtCC,cAAe7C,EAAS0C,WAAWG,cACnCC,UAAW9C,EAAS+C,cAAcC,OAAO7B,KAAK8B,KAAI,SAACC,GAAD,OAAOA,EAAEhD,W,0CAIpD,SAACJ,GACV,OAAO,gBAAC,WAAD,gBAAkBA,EAAlB,CAAyBqD,KAAK,c,wCAG9B,WACP,IAAQjD,EAAO,EAAKJ,MAAME,SAAlBE,GACR+B,UAAUC,KAAV,+BAAuChC,O,6CAGzC,WACE,OACE,2BACE,gBAAC,UAAD,CAAckD,QAASjD,KAAKkD,SAC5B,gBAAC,EAAAC,UAAD,KACE,gBAAC,EAAAC,iBAAqBC,UAASC,oBAEjC,gBAAC,EAAAC,OAAD,CACEC,cAAexD,KAAKwD,gBACpBC,SAAUzD,KAAK0D,aACfC,OAAQ3D,KAAK4D,SACbC,SAAUC,8B,GArDDzC,EAAMC,WA4DnByC,GAAe,IAAAC,YAAWzC,G,UAEjB,SAAC0C,GAAD,OACb,gBAAC,UAAD,CAAalE,GAAIkE,EAAWC,OAAOC,aAChC,SAACtE,GAAD,OACC,IAAAkB,cAAalB,GAAY,KACvB,gBAACkE,GAAD,gBAAkBE,EAAlB,CAA8BpE,SAAUA","file":"155.d37ec61e250a0270b979.chunk.js","sourcesContent":["import React from 'react';\nimport { isString } from 'lodash-es';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, switchMap, filter } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport { ICampaignData, campaignByIdStream } from 'services/campaigns';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  id: string;\n}\n\ntype children = (renderProps: GetCampaignChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  campaign: ICampaignData | undefined | null | Error;\n}\n\nexport type GetCampaignChildProps = ICampaignData | undefined | null | Error;\n\nexport default class GetCampaign extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      campaign: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { id } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ id });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          filter(({ id }) => isString(id)),\n          switchMap(({ id }) => campaignByIdStream(id).observable)\n        )\n        .subscribe((campaign) =>\n          this.setState({\n            campaign: !isNilOrError(campaign) ? campaign.data : campaign,\n          })\n        ),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { id } = this.props;\n    this.inputProps$.next({ id });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { campaign } = this.state;\n    return (children as children)(campaign);\n  }\n}\n","import * as React from 'react';\nimport { updateCampaign, ICampaignData } from 'services/campaigns';\nimport clHistory from 'utils/cl-router/history';\n\nimport GoBackButton from 'components/UI/GoBackButton';\nimport CampaignForm, {\n  FormValues,\n  validateCampaignForm,\n  PageTitle,\n} from '../CampaignForm';\nimport { Formik } from 'formik';\n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../../messages';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport GetCampaign from 'resources/GetCampaign';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { isCLErrorJSON } from 'utils/errorUtils';\n\ninterface InputProps {}\n\ninterface DataProps {\n  campaign: ICampaignData;\n}\n\ninterface Props extends InputProps, DataProps, WithRouterProps {}\n\nclass Edit extends React.Component<Props> {\n  handleSubmit = (\n    values: FormValues,\n    { setErrors, setSubmitting, setStatus }\n  ) => {\n    updateCampaign(this.props.campaign.id, {\n      ...values,\n    })\n      .then(() => {\n        clHistory.push(`/admin/emails/custom/${this.props.campaign.id}`);\n      })\n      .catch((errorResponse) => {\n        if (isCLErrorJSON(errorResponse)) {\n          const apiErrors = errorResponse.json.errors;\n          setErrors(apiErrors);\n        } else {\n          setStatus('error');\n        }\n        setSubmitting(false);\n      });\n  };\n\n  initialValues = (): FormValues => {\n    const { campaign } = this.props;\n    return {\n      sender: campaign.attributes.sender,\n      reply_to: campaign.attributes.reply_to,\n      subject_multiloc: campaign.attributes.subject_multiloc,\n      body_multiloc: campaign.attributes.body_multiloc,\n      group_ids: campaign.relationships.groups.data.map((d) => d.id),\n    };\n  };\n\n  renderFn = (props) => {\n    return <CampaignForm {...props} mode=\"edit\" />;\n  };\n\n  goBack = () => {\n    const { id } = this.props.campaign;\n    clHistory.push(`/admin/emails/custom/${id}`);\n  };\n\n  render() {\n    return (\n      <div>\n        <GoBackButton onClick={this.goBack} />\n        <PageTitle>\n          <FormattedMessage {...messages.editCampaignTitle} />\n        </PageTitle>\n        <Formik\n          initialValues={this.initialValues()}\n          onSubmit={this.handleSubmit}\n          render={this.renderFn}\n          validate={validateCampaignForm}\n        />\n      </div>\n    );\n  }\n}\n\nconst EditWithHOCs = withRouter(Edit);\n\nexport default (inputProps: InputProps & WithRouterProps) => (\n  <GetCampaign id={inputProps.params.campaignId}>\n    {(campaign) =>\n      isNilOrError(campaign) ? null : (\n        <EditWithHOCs {...inputProps} campaign={campaign} />\n      )\n    }\n  </GetCampaign>\n);\n"],"sourceRoot":""}