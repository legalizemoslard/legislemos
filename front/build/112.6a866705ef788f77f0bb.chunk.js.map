{"version":3,"sources":["webpack:///./app/containers/Admin/projects/edit/volunteering/ExportVolunteersButton.tsx","webpack:///./app/containers/Admin/projects/edit/volunteering/index.tsx","webpack:///./app/containers/Admin/projects/edit/volunteering/messages.ts","webpack:///./app/hooks/useCauses.ts","webpack:///./app/services/causes.ts","webpack:///./app/services/volunteers.ts","webpack:///./app/containers/Admin/projects/edit/volunteering/AllCauses.tsx"],"names":["ExportVolunteersButton","props","setState","exporting","exportVolunteers","participationContextId","participationContextType","state","className","this","buttonStyle","icon","onClick","handleExportVolunteers","processing","FormattedMessage","messages","React","PureComponent","Container","styled","div","PhaseContainer","HeaderContainer","Left","AdminProjectVolunteering","project","phases","isNilOrError","attributes","process_type","participation_method","SectionTitle","titleVolunteeringTab","SectionDescription","subtitleVolunteeringTab","id","projectId","volunteeringPhases","filter","phase","length","map","key","value","title_multiloc","Data","adopt","params","render","withRouter","inputProps","dataProps","defineMessages","defaultMessage","addCauseButton","editButtonLabel","deleteButtonLabel","xVolunteers","causeDeletionConfirmation","newCauseTitle","newCauseSubtitle","editCauseTitle","editCauseSubtitle","causeTitleLabel","causeDescriptionLabel","causeDescriptionTooltip","causeImageLabel","saveCause","causeErrorMessage","input","useState","undefined","causes","setCauses","useEffect","subscription","phaseId","causesStream","observable","subscribe","unsubscribe","causeId","streams","get","apiEndpoint","streamParams","API_PATH","delete","ordering","update","cause","object","add","stream","fetchAllWith","regexApiEndpoint","dataId","volunteerId","requestBlob","blob","saveAs","Buttons","DragDropContext","HTML5Backend","injectIntl","intl","itemsWhileDragging","setItemsWhileDragging","isProcessing","setIsProcessing","items","data","handleDragRow","useCallback","fromIndex","toIndex","clone","splice","handleDropRow","find","item","reorderCause","finally","handleOnClickDelete","event","deleteMessage","formatMessage","preventDefault","window","confirm","deleteCause","newCauseLink","ButtonWrapper","linkTo","List","index","lastItem","SortableRow","moveRow","dropRow","TextCell","values","x","volunteers_count"],"mappings":"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","file":"112.6a866705ef788f77f0bb.chunk.js","sourcesContent":["// Libraries\nimport React from 'react';\n\n// typings\nimport { IParticipationContextType } from 'typings';\n\n// components\nimport Button from 'components/UI/Button';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\nimport { exportVolunteers } from 'services/volunteers';\n\ninterface Props {\n  participationContextType: IParticipationContextType;\n  participationContextId: string;\n  className?: string;\n}\n\ninterface State {\n  exporting: boolean;\n}\n\nexport default class ExportVolunteersButton extends React.PureComponent<\n  Props,\n  State\n> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      exporting: false,\n    };\n  }\n\n  handleExportVolunteers = async () => {\n    this.setState({ exporting: true });\n    await exportVolunteers(\n      this.props.participationContextId,\n      this.props.participationContextType\n    );\n    this.setState({ exporting: false });\n  };\n\n  render() {\n    const { className } = this.props;\n    const { exporting } = this.state;\n    return (\n      <Button\n        buttonStyle=\"secondary\"\n        icon=\"download\"\n        onClick={this.handleExportVolunteers}\n        processing={exporting}\n        className={className}\n      >\n        <FormattedMessage {...messages.exportVolunteers} />\n      </Button>\n    );\n  }\n}\n","// Libraries\nimport React from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport { adopt } from 'react-adopt';\nimport styled from 'styled-components';\n\n// Services / Data loading\nimport GetProject, { GetProjectChildProps } from 'resources/GetProject';\nimport GetPhases, { GetPhasesChildProps } from 'resources/GetPhases';\n\n// Components\nimport ExportVolunteersButton from './ExportVolunteersButton';\nimport AllCauses from './AllCauses';\nimport T from 'components/T';\nimport { SectionTitle, SectionDescription } from 'components/admin/Section';\n\n// i18n\nimport messages from './messages';\nimport { FormattedMessage } from 'utils/cl-intl';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst PhaseContainer = styled.div`\n  &:not(:last-child) {\n    margin-bottom: 50px;\n  }\n`;\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  padding: 0;\n  margin: 0;\n  margin-bottom: 30px;\n`;\n\nconst Left = styled.div`\n  margin-right: 80px;\n`;\n\ninterface InputProps {}\n\ninterface DataProps {\n  project: GetProjectChildProps;\n  phases: GetPhasesChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nexport class AdminProjectVolunteering extends React.PureComponent<Props> {\n  render() {\n    const { project, phases } = this.props;\n    if (isNilOrError(project)) return null;\n\n    if (\n      project.attributes.process_type === 'continuous' &&\n      project.attributes.participation_method === 'volunteering'\n    ) {\n      return (\n        <Container>\n          <HeaderContainer>\n            <Left>\n              <SectionTitle>\n                <FormattedMessage {...messages.titleVolunteeringTab} />\n              </SectionTitle>\n              <SectionDescription>\n                <FormattedMessage {...messages.subtitleVolunteeringTab} />\n              </SectionDescription>\n            </Left>\n            <ExportVolunteersButton\n              participationContextType=\"project\"\n              participationContextId={project.id}\n            />\n          </HeaderContainer>\n          <AllCauses\n            projectId={project.id}\n            participationContextType=\"project\"\n            participationContextId={project.id}\n          />\n        </Container>\n      );\n    }\n\n    if (\n      project.attributes.process_type === 'timeline' &&\n      !isNilOrError(phases)\n    ) {\n      const volunteeringPhases = phases.filter(\n        (phase) => phase.attributes.participation_method === 'volunteering'\n      );\n      if (volunteeringPhases.length === 0) return null;\n      return (\n        <Container>\n          <SectionTitle>\n            <FormattedMessage {...messages.titleVolunteeringTab} />\n          </SectionTitle>\n          <SectionDescription>\n            <FormattedMessage {...messages.subtitleVolunteeringTab} />\n          </SectionDescription>\n          {volunteeringPhases.map((phase) => (\n            <PhaseContainer key={phase.id}>\n              <HeaderContainer>\n                <Left>\n                  <h3>\n                    <T value={phase.attributes.title_multiloc} />\n                  </h3>\n                </Left>\n                <ExportVolunteersButton\n                  participationContextId={phase.id}\n                  participationContextType=\"phase\"\n                />\n              </HeaderContainer>\n              <AllCauses\n                projectId={project.id}\n                participationContextType=\"phase\"\n                participationContextId={phase.id}\n              />\n            </PhaseContainer>\n          ))}\n        </Container>\n      );\n    }\n    return null;\n  }\n}\n\nconst Data = adopt<DataProps, InputProps & WithRouterProps>({\n  phases: ({ params, render }) => (\n    <GetPhases projectId={params.projectId}>{render}</GetPhases>\n  ),\n  project: ({ params, render }) => (\n    <GetProject projectId={params.projectId}>{render}</GetProject>\n  ),\n});\n\nexport default withRouter<InputProps>(\n  (inputProps: InputProps & WithRouterProps) => (\n    <Data {...inputProps}>\n      {(dataProps) => (\n        <AdminProjectVolunteering {...inputProps} {...dataProps} />\n      )}\n    </Data>\n  )\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  titleVolunteeringTab: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.titleVolunteeringTab',\n    defaultMessage: 'Volunteering',\n  },\n  subtitleVolunteeringTab: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.subtitleVolunteeringTab',\n    defaultMessage:\n      'Here, you can set up the causes users can volunteer for and download the volunteers.',\n  },\n  exportVolunteers: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.exportVolunteers',\n    defaultMessage: 'Export volunteers',\n  },\n  addCauseButton: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.addCauseButton',\n    defaultMessage: 'Add cause',\n  },\n  editButtonLabel: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.editButtonLabel',\n    defaultMessage: 'Edit',\n  },\n  deleteButtonLabel: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.deleteButtonLabel',\n    defaultMessage: 'Delete',\n  },\n  xVolunteers: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.xVolunteers',\n    defaultMessage:\n      '{x, plural, =0 {no volunteers} one {# volunteer} other {# volunteers}}',\n  },\n  causeDeletionConfirmation: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeDeletionConfirmation',\n    defaultMessage: 'Are you sure?',\n  },\n  newCauseTitle: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.newCauseTitle',\n    defaultMessage: 'New cause',\n  },\n  newCauseSubtitle: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.newCauseSubtitle',\n    defaultMessage:\n      'A cause is an action or activity that citizens can volunteer to.',\n  },\n  editCauseTitle: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.editCauseTitle',\n    defaultMessage: 'Edit cause',\n  },\n  editCauseSubtitle: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.editCauseSubtitle',\n    defaultMessage:\n      'A cause is an action or activity that citizens can volunteer to.',\n  },\n  causeTitleLabel: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeTitleLabel',\n    defaultMessage: 'Title',\n  },\n  causeDescriptionLabel: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeDescriptionLabel',\n    defaultMessage: 'Description',\n  },\n  causeDescriptionTooltip: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeDescriptionTooltip',\n    defaultMessage:\n      'Use this explain what is required from volunteers and what they can expect.',\n  },\n  causeImageLabel: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeImageLabel',\n    defaultMessage: 'Image',\n  },\n  saveCause: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.saveCause',\n    defaultMessage: 'Save',\n  },\n  causeErrorMessage: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeErrorMessage',\n    defaultMessage: \"Couldn't save because the form contains errors.\",\n  },\n});\n","import { useState, useEffect } from 'react';\nimport { causesStream, ICauses } from 'services/causes';\n\ninterface Input {\n  projectId: string | null;\n  phaseId: string | null;\n}\n\nexport default function useCauses(input: Input) {\n  const [causes, setCauses] = useState<ICauses | undefined | null | Error>(\n    undefined\n  );\n\n  useEffect(() => {\n    let subscription;\n    if (input.phaseId) {\n      subscription = causesStream('phase', input.phaseId);\n    } else if (input.projectId) {\n      subscription = causesStream('project', input.projectId);\n    }\n\n    subscription = subscription.observable.subscribe((causes) => {\n      setCauses(causes);\n    });\n\n    return () => subscription.unsubscribe();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return causes;\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { Multiloc, ImageSizes } from 'typings';\n\nconst apiEndpoint = `${API_PATH}/causes`;\n\nexport interface ICauseData {\n  id: string;\n  type: string;\n  attributes: {\n    title_multiloc: Multiloc;\n    description_multiloc: Multiloc;\n    image: ImageSizes;\n    volunteers_count: number;\n    ordering: number;\n  };\n  relationships: {\n    participation_context: {\n      data: {\n        type: 'project' | 'phase';\n        id: string;\n      };\n    };\n    user_volunteer?: {\n      data: null | {\n        id: string;\n      };\n    };\n  };\n}\n\nexport interface ICauseLinks {\n  self: string;\n  first: string;\n  prev: string;\n  next: string;\n  last: string;\n}\n\nexport interface ICauses {\n  data: ICauseData[];\n  links: ICauseLinks;\n}\n\nexport interface ICause {\n  data: ICauseData;\n}\n\nexport function causeByIdStream(causeId: string) {\n  return streams.get<ICause>({ apiEndpoint: `${apiEndpoint}/${causeId}` });\n}\n\nexport function causesStream(\n  participationContextType: 'project' | 'phase',\n  participationContextId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICauses>({\n    apiEndpoint: `${API_PATH}/${participationContextType}s/${participationContextId}/causes`,\n    ...streamParams,\n  });\n}\n\nexport async function addCause(object) {\n  const stream = await streams.add<ICause>(apiEndpoint, { cause: object });\n  await streams.fetchAllWith({ regexApiEndpoint: [/^.*causes$/] });\n  return stream;\n}\n\nexport async function updateCause(causeId: string, object) {\n  const stream = streams.update<ICause>(`${apiEndpoint}/${causeId}`, causeId, {\n    cause: object,\n  });\n  await streams.fetchAllWith({ dataId: [causeId] });\n  return stream;\n}\n\nexport function deleteCause(causeId: string) {\n  return streams.delete(`${apiEndpoint}/${causeId}`, causeId);\n}\n\nexport function reorderCause(causeId: string, ordering: number) {\n  return streams.update<ICause>(`${apiEndpoint}/${causeId}/reorder`, causeId, {\n    cause: { ordering },\n  });\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { Multiloc, ImageSizes, IParticipationContextType } from 'typings';\nimport { requestBlob } from 'utils/request';\nimport { saveAs } from 'file-saver';\n\nexport interface IVolunteerData {\n  id: string;\n  type: string;\n  attributes: {\n    title_multiloc: Multiloc;\n    description_multiloc: Multiloc;\n    image: ImageSizes;\n    volunteers_count: number;\n  };\n}\n\nexport interface IVolunteerLinks {\n  self: string;\n  first: string;\n  prev: string;\n  next: string;\n  last: string;\n}\n\nexport interface IVolunteers {\n  data: IVolunteerData[];\n  links: IVolunteerLinks;\n}\n\nexport interface IVolunteer {\n  data: IVolunteerData;\n}\n\nexport function volunteersStream(\n  causeId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IVolunteers>({\n    apiEndpoint: `${API_PATH}/causes/${causeId}/volunteers`,\n    ...streamParams,\n  });\n}\n\nexport async function addVolunteer(causeId: string) {\n  const stream = await streams.add<IVolunteer>(\n    `${API_PATH}/causes/${causeId}/volunteers`,\n    null\n  );\n  await streams.fetchAllWith({ dataId: [causeId] });\n  return stream;\n}\n\nexport async function deleteVolunteer(causeId: string, volunteerId: string) {\n  const stream = await streams.delete(\n    `${API_PATH}/causes/${causeId}/volunteers`,\n    volunteerId\n  );\n  await streams.fetchAllWith({ dataId: [causeId] });\n  return stream;\n}\n\nexport async function exportVolunteers(\n  participationContextId: string,\n  participationContextType: IParticipationContextType\n) {\n  const blob = await requestBlob(\n    `${API_PATH}/${participationContextType}s/${participationContextId}/volunteers/as_xlsx`,\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n  );\n  saveAs(blob, 'volunteers-export.xlsx');\n}\n","import React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { clone } from 'lodash-es';\nimport { DragDropContext } from 'react-dnd-cjs';\nimport HTML5Backend from 'react-dnd-html5-backend-cjs';\nimport { isNilOrError } from 'utils/helperUtils';\n\nimport useCauses from 'hooks/useCauses';\nimport { ICauseData, reorderCause, deleteCause } from 'services/causes';\n\nimport { List, SortableRow, TextCell } from 'components/admin/ResourceList';\nimport { ButtonWrapper } from 'components/admin/PageWrapper';\nimport Button from 'components/UI/Button';\n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport messages from './messages';\nimport T from 'components/T';\nimport { InjectedIntlProps } from 'react-intl';\n\nconst Container = styled.div``;\n\nconst Buttons = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\ninterface InputProps {\n  participationContextType: 'project' | 'phase';\n  participationContextId: string;\n  projectId: string;\n}\n\ninterface Props extends InputProps, InjectedIntlProps {}\n\nconst AllCauses = ({\n  participationContextType,\n  participationContextId,\n  projectId,\n  intl,\n}: Props) => {\n  const phaseId =\n    participationContextType === 'phase' ? participationContextId : null;\n  const causes = useCauses({ projectId, phaseId });\n  const [itemsWhileDragging, setItemsWhileDragging] = useState<\n    ICauseData[] | null\n  >(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const items = itemsWhileDragging || (isNilOrError(causes) ? [] : causes.data);\n\n  const handleDragRow = useCallback(\n    (fromIndex, toIndex) => {\n      if (!isProcessing) {\n        if (!items) return;\n        const itemsWhileDragging = clone(items);\n        itemsWhileDragging.splice(fromIndex, 1);\n        itemsWhileDragging.splice(toIndex, 0, items[fromIndex]);\n        setItemsWhileDragging(itemsWhileDragging);\n      }\n    },\n    [isProcessing, items]\n  );\n\n  const handleDropRow = useCallback(\n    (causeId: string, toIndex: number) => {\n      if (!items) return;\n\n      const cause = items.find((item) => item.id === causeId);\n\n      if (cause && cause.attributes.ordering !== toIndex) {\n        setIsProcessing(true);\n        reorderCause(causeId, toIndex).finally(() => setIsProcessing(false));\n      } else {\n        setItemsWhileDragging(null);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [isProcessing, items]\n  );\n\n  const handleOnClickDelete = (cause) => (event) => {\n    if (!isProcessing) {\n      const deleteMessage = intl.formatMessage(\n        messages.causeDeletionConfirmation\n      );\n      event.preventDefault();\n\n      if (window.confirm(deleteMessage)) {\n        setItemsWhileDragging(null);\n        setIsProcessing(true);\n        deleteCause(cause.id).finally(() => {\n          setIsProcessing(false);\n        });\n      }\n    }\n  };\n\n  const newCauseLink = phaseId\n    ? `/admin/projects/${projectId}/volunteering/phases/${phaseId}/causes/new`\n    : `/admin/projects/${projectId}/volunteering/causes/new`;\n\n  if (isNilOrError(causes)) return null;\n\n  return (\n    <Container>\n      <ButtonWrapper>\n        <Button buttonStyle=\"cl-blue\" icon=\"plus-circle\" linkTo={newCauseLink}>\n          <FormattedMessage {...messages.addCauseButton} />\n        </Button>\n      </ButtonWrapper>\n      <List key={causes.data.length}>\n        {items.map((cause, index) => {\n          let lastItem = false;\n          if (index === items.length - 1) lastItem = true;\n          return (\n            <SortableRow\n              key={cause.id}\n              id={cause.id}\n              index={index}\n              lastItem={lastItem}\n              moveRow={handleDragRow}\n              dropRow={handleDropRow}\n            >\n              <TextCell className=\"expand\">\n                <T value={cause.attributes.title_multiloc} />\n              </TextCell>\n              <div>\n                <FormattedMessage\n                  {...messages.xVolunteers}\n                  values={{ x: cause.attributes.volunteers_count }}\n                />\n              </div>\n              <Buttons>\n                <Button\n                  onClick={handleOnClickDelete(cause)}\n                  icon=\"delete\"\n                  buttonStyle=\"text\"\n                >\n                  <FormattedMessage {...messages.deleteButtonLabel} />\n                </Button>\n                <Button\n                  linkTo={`/admin/projects/${projectId}/volunteering/causes/${cause.id}`}\n                  icon=\"edit\"\n                  buttonStyle=\"secondary\"\n                >\n                  <FormattedMessage {...messages.editButtonLabel} />\n                </Button>\n              </Buttons>\n            </SortableRow>\n          );\n        })}\n      </List>\n    </Container>\n  );\n};\n\nexport default DragDropContext(HTML5Backend)(injectIntl<Props>(AllCauses));\n"],"sourceRoot":""}