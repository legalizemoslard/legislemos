{"version":3,"sources":["webpack:///./node_modules/d3-hierarchy/src/cluster.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/count.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/index.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/each.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/find.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/sum.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/sort.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/path.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/ancestors.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/descendants.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/leaves.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/links.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/iterator.js","webpack:///./node_modules/d3-hierarchy/src/pack/enclose.js","webpack:///./node_modules/d3-hierarchy/src/array.js","webpack:///./node_modules/d3-hierarchy/src/pack/siblings.js","webpack:///./node_modules/d3-hierarchy/src/accessors.js","webpack:///./node_modules/d3-hierarchy/src/constant.js","webpack:///./node_modules/d3-hierarchy/src/pack/index.js","webpack:///./node_modules/d3-hierarchy/src/treemap/round.js","webpack:///./node_modules/d3-hierarchy/src/treemap/dice.js","webpack:///./node_modules/d3-hierarchy/src/partition.js","webpack:///./node_modules/d3-hierarchy/src/stratify.js","webpack:///./node_modules/d3-hierarchy/src/tree.js","webpack:///./node_modules/d3-hierarchy/src/treemap/slice.js","webpack:///./node_modules/d3-hierarchy/src/treemap/squarify.js","webpack:///./node_modules/d3-hierarchy/src/treemap/index.js","webpack:///./node_modules/d3-hierarchy/src/treemap/binary.js","webpack:///./node_modules/d3-hierarchy/src/treemap/sliceDice.js","webpack:///./node_modules/d3-hierarchy/src/treemap/resquarify.js"],"names":["defaultSeparation","a","b","parent","meanXReduce","x","c","maxYReduce","y","Math","max","separation","dx","dy","nodeSize","cluster","root","previousNode","eachAfter","node","children","reduce","length","meanX","maxY","left","leafLeft","right","leafRight","x0","x1","arguments","size","count","sum","i","value","hierarchy","data","Map","undefined","mapChildren","objectChildren","child","childs","n","Node","nodes","pop","Array","from","push","depth","eachBefore","computeHeight","d","isArray","copyData","height","this","prototype","constructor","each","index","callback","call","that","next","find","sort","compare","path","start","ancestor","aNodes","ancestors","bNodes","leastCommonAncestor","end","k","splice","descendants","leaves","links","source","target","copy","Symbol","iterator","current","reverse","p","e","circles","array","t","m","random","shuffle","B","enclosesWeak","encloseBasis","extendBasis","j","enclosesWeakAll","enclosesNot","encloseBasis2","encloseBasis3","Error","dr","r","y1","r1","x2","y2","r2","x21","y21","r21","l","sqrt","x3","y3","r3","a2","a3","b2","b3","c2","c3","d1","d2","d3","ab","xa","xb","ya","yb","A","C","place","intersects","score","_","circle","previous","packEnclose","aa","ca","sj","sk","pack","enclose","optional","f","required","constantZero","defaultRadius","radius","padding","radiusLeaf","packChildren","translateChild","min","constant","round","y0","partition","positionNode","preroot","ambiguous","defaultId","id","defaultParentId","parentId","stratify","nodeId","nodeKey","nodeByKey","set","has","get","nextLeft","v","nextRight","moveSubtree","wm","wp","shift","change","s","z","nextAncestor","vim","TreeNode","Object","create","tree","treeRoot","firstWalk","secondWalk","sizeNode","bottom","tx","kx","ky","siblings","w","executeShifts","midpoint","vip","vop","vom","sip","sop","sim","som","apportion","phi","squarifyRatio","ratio","row","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","rows","i0","i1","dice","slice","squarify","custom","tile","paddingStack","paddingInner","paddingTop","paddingRight","paddingBottom","paddingLeft","treemap","paddingOuter","sums","valueOffset","valueTarget","hi","mid","valueLeft","valueRight","xk","yk","resquarify","_squarify"],"mappings":"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","file":"62.1d264a05cf696f2deac7.chunk.js","sourcesContent":["function defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\nfunction meanX(children) {\n  return children.reduce(meanXReduce, 0) / children.length;\n}\n\nfunction meanXReduce(x, c) {\n  return x + c.x;\n}\n\nfunction maxY(children) {\n  return 1 + children.reduce(maxYReduce, 0);\n}\n\nfunction maxYReduce(y, c) {\n  return Math.max(y, c.y);\n}\n\nfunction leafLeft(node) {\n  var children;\n  while (children = node.children) node = children[0];\n  return node;\n}\n\nfunction leafRight(node) {\n  var children;\n  while (children = node.children) node = children[children.length - 1];\n  return node;\n}\n\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = false;\n\n  function cluster(root) {\n    var previousNode,\n        x = 0;\n\n    // First walk, computing the initial x & y values.\n    root.eachAfter(function(node) {\n      var children = node.children;\n      if (children) {\n        node.x = meanX(children);\n        node.y = maxY(children);\n      } else {\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\n        node.y = 0;\n        previousNode = node;\n      }\n    });\n\n    var left = leafLeft(root),\n        right = leafRight(root),\n        x0 = left.x - separation(left, right) / 2,\n        x1 = right.x + separation(right, left) / 2;\n\n    // Second walk, normalizing x & y to the desired size.\n    return root.eachAfter(nodeSize ? function(node) {\n      node.x = (node.x - root.x) * dx;\n      node.y = (root.y - node.y) * dy;\n    } : function(node) {\n      node.x = (node.x - x0) / (x1 - x0) * dx;\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n    });\n  }\n\n  cluster.separation = function(x) {\n    return arguments.length ? (separation = x, cluster) : separation;\n  };\n\n  cluster.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n  };\n\n  cluster.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return cluster;\n}\n","function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nexport default function() {\n  return this.eachAfter(count);\n}\n","import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_find from \"./find.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\nimport node_iterator from \"./iterator.js\";\n\nexport default function hierarchy(data, children) {\n  if (data instanceof Map) {\n    data = [undefined, data];\n    if (children === undefined) children = mapChildren;\n  } else if (children === undefined) {\n    children = objectChildren;\n  }\n\n  var root = new Node(data),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n      node.children = childs;\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = childs[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction objectChildren(d) {\n  return d.children;\n}\n\nfunction mapChildren(d) {\n  return Array.isArray(d) ? d[1] : null;\n}\n\nfunction copyData(node) {\n  if (node.data.value !== undefined) node.value = node.data.value;\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  find: node_find,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy,\n  [Symbol.iterator]: node_iterator\n};\n","export default function(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n","export default function(callback, that) {\n  var node = this, nodes = [node], next = [], children, i, n, index = -1;\n  while (node = nodes.pop()) {\n    next.push(node);\n    if (children = node.children) {\n      for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  while (node = next.pop()) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n","export default function(callback, that) {\n  var node = this, nodes = [node], children, i, index = -1;\n  while (node = nodes.pop()) {\n    callback.call(that, node, ++index, this);\n    if (children = node.children) {\n      for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  return this;\n}\n","export default function(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    if (callback.call(that, node, ++index, this)) {\n      return node;\n    }\n  }\n}\n","export default function(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n","export default function(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n","export default function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n","export default function() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n","export default function() {\n  return Array.from(this);\n}\n","export default function() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n","export default function() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don’t include the root’s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n","export default function*() {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      yield node;\n      if (children = node.children) {\n        for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    }\n  } while (next.length);\n}\n","import {shuffle} from \"../array.js\";\n\nexport default function(circles) {\n  var i = 0, n = (circles = shuffle(Array.from(circles))).length, B = [], p, e;\n\n  while (i < n) {\n    p = circles[i];\n    if (e && enclosesWeak(e, p)) ++i;\n    else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n  }\n\n  return e;\n}\n\nfunction extendBasis(B, p) {\n  var i, j;\n\n  if (enclosesWeakAll(p, B)) return [p];\n\n  // If we get here then B must have at least one element.\n  for (i = 0; i < B.length; ++i) {\n    if (enclosesNot(p, B[i])\n        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n      return [B[i], p];\n    }\n  }\n\n  // If we get here then B must have at least two elements.\n  for (i = 0; i < B.length - 1; ++i) {\n    for (j = i + 1; j < B.length; ++j) {\n      if (enclosesNot(encloseBasis2(B[i], B[j]), p)\n          && enclosesNot(encloseBasis2(B[i], p), B[j])\n          && enclosesNot(encloseBasis2(B[j], p), B[i])\n          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n        return [B[i], B[j], p];\n      }\n    }\n  }\n\n  // If we get here then something is very wrong.\n  throw new Error;\n}\n\nfunction enclosesNot(a, b) {\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\n}\n\nfunction enclosesWeak(a, b) {\n  var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction enclosesWeakAll(a, B) {\n  for (var i = 0; i < B.length; ++i) {\n    if (!enclosesWeak(a, B[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction encloseBasis(B) {\n  switch (B.length) {\n    case 1: return encloseBasis1(B[0]);\n    case 2: return encloseBasis2(B[0], B[1]);\n    case 3: return encloseBasis3(B[0], B[1], B[2]);\n  }\n}\n\nfunction encloseBasis1(a) {\n  return {\n    x: a.x,\n    y: a.y,\n    r: a.r\n  };\n}\n\nfunction encloseBasis2(a, b) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n      l = Math.sqrt(x21 * x21 + y21 * y21);\n  return {\n    x: (x1 + x2 + x21 / l * r21) / 2,\n    y: (y1 + y2 + y21 / l * r21) / 2,\n    r: (l + r1 + r2) / 2\n  };\n}\n\nfunction encloseBasis3(a, b, c) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x3 = c.x, y3 = c.y, r3 = c.r,\n      a2 = x1 - x2,\n      a3 = x1 - x3,\n      b2 = y1 - y2,\n      b3 = y1 - y3,\n      c2 = r2 - r1,\n      c3 = r3 - r1,\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n      ab = a3 * b2 - a2 * b3,\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n      xb = (b3 * c2 - b2 * c3) / ab,\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n      yb = (a2 * c3 - a3 * c2) / ab,\n      A = xb * xb + yb * yb - 1,\n      B = 2 * (r1 + xa * xb + ya * yb),\n      C = xa * xa + ya * ya - r1 * r1,\n      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n  return {\n    x: x1 + xa + xb * r,\n    y: y1 + ya + yb * r,\n    r: r\n  };\n}\n","export default function(x) {\n  return typeof x === \"object\" && \"length\" in x\n    ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n}\n\nexport function shuffle(array) {\n  var m = array.length,\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n","import array from \"../array.js\";\nimport enclose from \"./enclose.js\";\n\nfunction place(b, a, c) {\n  var dx = b.x - a.x, x, a2,\n      dy = b.y - a.y, y, b2,\n      d2 = dx * dx + dy * dy;\n  if (d2) {\n    a2 = a.r + c.r, a2 *= a2;\n    b2 = b.r + c.r, b2 *= b2;\n    if (a2 > b2) {\n      x = (d2 + b2 - a2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n      c.x = b.x - x * dx - y * dy;\n      c.y = b.y - x * dy + y * dx;\n    } else {\n      x = (d2 + a2 - b2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n      c.x = a.x + x * dx - y * dy;\n      c.y = a.y + x * dy + y * dx;\n    }\n  } else {\n    c.x = a.x + c.r;\n    c.y = a.y;\n  }\n}\n\nfunction intersects(a, b) {\n  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction score(node) {\n  var a = node._,\n      b = node.next._,\n      ab = a.r + b.r,\n      dx = (a.x * b.r + b.x * a.r) / ab,\n      dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\n\nfunction Node(circle) {\n  this._ = circle;\n  this.next = null;\n  this.previous = null;\n}\n\nexport function packEnclose(circles) {\n  if (!(n = (circles = array(circles)).length)) return 0;\n\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0], a.x = 0, a.y = 0;\n  if (!(n > 1)) return a.r;\n\n  // Place the second circle.\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n  if (!(n > 2)) return a.r + b.r;\n\n  // Place the third circle.\n  place(b, a, c = circles[2]);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new Node(a), b = new Node(b), c = new Node(c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle…\n  pack: for (i = 3; i < n; ++i) {\n    place(a._, b._, c = circles[i]), c = new Node(c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // “Closeness” is determined by linear distance along the front-chain.\n    // “Ahead” or “behind” is likewise determined by linear distance.\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j._, c._)) {\n          b = j, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sj += j._.r, j = j.next;\n      } else {\n        if (intersects(k._, c._)) {\n          a = k, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sk += k._.r, k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c, aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n  return c.r;\n}\n\nexport default function(circles) {\n  packEnclose(circles);\n  return circles;\n}\n","export function optional(f) {\n  return f == null ? null : required(f);\n}\n\nexport function required(f) {\n  if (typeof f !== \"function\") throw new Error;\n  return f;\n}\n","export function constantZero() {\n  return 0;\n}\n\nexport default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {packEnclose} from \"./siblings.js\";\nimport {optional} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\n\nfunction defaultRadius(d) {\n  return Math.sqrt(d.value);\n}\n\nexport default function() {\n  var radius = null,\n      dx = 1,\n      dy = 1,\n      padding = constantZero;\n\n  function pack(root) {\n    root.x = dx / 2, root.y = dy / 2;\n    if (radius) {\n      root.eachBefore(radiusLeaf(radius))\n          .eachAfter(packChildren(padding, 0.5))\n          .eachBefore(translateChild(1));\n    } else {\n      root.eachBefore(radiusLeaf(defaultRadius))\n          .eachAfter(packChildren(constantZero, 1))\n          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n    }\n    return root;\n  }\n\n  pack.radius = function(x) {\n    return arguments.length ? (radius = optional(x), pack) : radius;\n  };\n\n  pack.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n  };\n\n  pack.padding = function(x) {\n    return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n  };\n\n  return pack;\n}\n\nfunction radiusLeaf(radius) {\n  return function(node) {\n    if (!node.children) {\n      node.r = Math.max(0, +radius(node) || 0);\n    }\n  };\n}\n\nfunction packChildren(padding, k) {\n  return function(node) {\n    if (children = node.children) {\n      var children,\n          i,\n          n = children.length,\n          r = padding(node) * k || 0,\n          e;\n\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\n      e = packEnclose(children);\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n      node.r = e + r;\n    }\n  };\n}\n\nfunction translateChild(k) {\n  return function(node) {\n    var parent = node.parent;\n    node.r *= k;\n    if (parent) {\n      node.x = parent.x + k * node.x;\n      node.y = parent.y + k * node.y;\n    }\n  };\n}\n","export default function(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}\n","import roundNode from \"./treemap/round.js\";\nimport treemapDice from \"./treemap/dice.js\";\n\nexport default function() {\n  var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 =\n    root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(dy, n) {\n    return function(node) {\n      if (node.children) {\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n      var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n\n  partition.round = function(x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n\n  partition.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n\n  partition.padding = function(x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n\n  return partition;\n}\n","import {required} from \"./accessors.js\";\nimport {Node, computeHeight} from \"./hierarchy/index.js\";\n\nvar preroot = {depth: -1},\n    ambiguous = {};\n\nfunction defaultId(d) {\n  return d.id;\n}\n\nfunction defaultParentId(d) {\n  return d.parentId;\n}\n\nexport default function() {\n  var id = defaultId,\n      parentId = defaultParentId;\n\n  function stratify(data) {\n    var nodes = Array.from(data),\n        n = nodes.length,\n        d,\n        i,\n        root,\n        parent,\n        node,\n        nodeId,\n        nodeKey,\n        nodeByKey = new Map;\n\n    for (i = 0; i < n; ++i) {\n      d = nodes[i], node = nodes[i] = new Node(d);\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n        nodeKey = node.id = nodeId;\n        nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);\n      }\n      if ((nodeId = parentId(d, i, data)) != null && (nodeId += \"\")) {\n        node.parent = nodeId;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i];\n      if (nodeId = node.parent) {\n        parent = nodeByKey.get(nodeId);\n        if (!parent) throw new Error(\"missing: \" + nodeId);\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n        if (parent.children) parent.children.push(node);\n        else parent.children = [node];\n        node.parent = parent;\n      } else {\n        if (root) throw new Error(\"multiple roots\");\n        root = node;\n      }\n    }\n\n    if (!root) throw new Error(\"no root\");\n    root.parent = preroot;\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n    root.parent = null;\n    if (n > 0) throw new Error(\"cycle\");\n\n    return root;\n  }\n\n  stratify.id = function(x) {\n    return arguments.length ? (id = required(x), stratify) : id;\n  };\n\n  stratify.parentId = function(x) {\n    return arguments.length ? (parentId = required(x), stratify) : parentId;\n  };\n\n  return stratify;\n}\n","import {Node} from \"./hierarchy/index.js\";\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.’s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}\n","import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\n\nexport var phi = (1 + Math.sqrt(5)) / 2;\n\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx, dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\n\nexport default (function custom(ratio) {\n\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);\n","import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport {required} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\n\nexport default function() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i, n = nodes.length,\n      sum, sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = (value / 2) + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;\n      else hi = mid;\n    }\n\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if ((x1 - x0) > (y1 - y0)) {\n      var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}\n","import dice from \"./dice.js\";\nimport slice from \"./slice.js\";\n\nexport default function(parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? slice : dice)(parent, x0, y0, x1, y1);\n}\n","import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\nimport {phi, squarifyRatio} from \"./squarify.js\";\n\nexport default (function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);\n        else treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);\n"],"sourceRoot":""}