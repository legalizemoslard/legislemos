{"version":3,"sources":["webpack:///./app/containers/Navbar/components/LanguageSelector/index.tsx"],"names":["DropdownButtonText","styled","div","theme","navbarTextColor","colorText","fontSizes","base","DropdownButtonIcon","Icon","isRtl","DropdownButton","button","Container","ListItemText","colors","label","ListItem","props","borderRadius","clDropdownHoverBackground","LanguageSelector","event","preventDefault","setState","dropdownOpened","selectedLocale","updateLocale","state","this","tenant","locale","className","isNilOrError","tenantLocales","attributes","settings","core","locales","currentlySelectedLocale","startsWith","onMouseDown","removeFocus","onClick","toggleDropdown","substr","toUpperCase","name","Dropdown","width","top","right","undefined","left","mobileRight","mobileLeft","opened","onClickOutside","content","map","tenantLocale","index","last","length","key","handleLanguageSelect","lang","shortenedAppLocalePairs","PureComponent","Data","adopt","authUser","inputProps","dataProps"],"mappings":"8aAAA,E,ybAAA,YACA,YACA,YAGA,YAGA,YAGA,eACA,eAGA,eAGA,eACA,YAGA,Y,ykBAKA,IAAMA,EAAqBC,UAAOC,IAAV,uFAAGD,CAAH,gGACb,gBAAGE,EAAH,EAAGA,MAAH,OAAeA,EAAMC,iBAAmBD,EAAME,YAC1CC,YAAUC,KAERD,YAAUC,MAIrBC,GAAqB,aAAOC,QAAV,uFAAG,CAAH,sGAGb,gBAAGN,EAAH,EAAGA,MAAH,OAAeA,EAAMC,iBAAmBD,EAAME,aAHjC,EAOpBK,SAPoB,8EAalBC,EAAiBV,UAAOW,OAAV,mFAAGX,CAAH,6EAOhBS,SAPgB,mEAYdG,EAAYZ,UAAOC,IAAV,8EAAGD,CAAH,kIASTD,GAMAc,EAAeb,UAAOC,IAAV,iFAAGD,CAAH,gFACPc,SAAOC,MACHV,YAAUC,MAMnBU,EAAWhB,UAAOW,OAAV,6EAAGX,CAAH,6PASK,SAACiB,GAAD,OAAgBA,EAAMf,MAAMgB,eAU7BJ,SAAOK,0BACnBN,GAsBAO,E,0CACJ,WAAYH,GAAO,kCACjB,cAAMA,IADW,6CAOL,SAACI,GACbA,EAAMC,qBARW,gDAWF,SAACD,GAChBA,EAAMC,iBACN,EAAKC,UAAS,kBAAyB,CACrCC,gBADY,EAAGA,uBAbA,sDAkBI,SAACC,GAAD,OAA4B,YACjD,IAAAC,cAAaD,GACb,EAAKF,SAAS,CAAEC,gBAAgB,QAlBhC,EAAKG,MAAQ,CACXH,gBAAgB,GAHD,E,2CAuBnB,WAAS,WACP,EAAsCI,KAAKX,MAAnCY,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,UAChBP,EAAmBI,KAAKD,MAAxBH,eAER,KAAK,IAAAQ,cAAaH,MAAY,IAAAG,cAAaF,GAAS,CAClD,IAAMG,EAAgBJ,EAAOK,WAAWC,SAASC,KAAKC,QAChDC,EAA0BR,EAC1BrB,IAAUqB,EAAOS,WAAW,MAElC,OACE,wBAAC3B,EAAD,CACEmB,UAAWA,EACXS,YAAaZ,KAAKa,YAClBC,QAASd,KAAKe,gBAEd,wBAACjC,EAAD,CACEqB,UAAU,8BACV,gBAAeP,GAEf,wBAACzB,EAAD,KACGuC,EAAwBM,OAAO,EAAG,GAAGC,eAExC,wBAACtC,EAAD,CAAoBuC,KAAK,cAG3B,wBAAC,EAAAC,SAAD,CACEC,MAAM,QACNC,IAAI,OACJC,MAAQzC,OAAgB0C,EAAR,MAChBC,KAAM3C,EAAQ,WAAQ0C,EACtBE,YAAc5C,OAAgB0C,EAAR,MACtBG,WAAY7C,EAAQ,WAAQ0C,EAC5BI,OAAQ/B,EACRgC,eAAgB5B,KAAKe,eACrBc,QACE,gDACGxB,EAAcyB,KAAI,SAACC,EAAcC,GAChC,IAAMC,EAAOD,IAAU3B,EAAc6B,OAAS,EAE9C,OACE,wBAAC9C,EAAD,CACE+C,IAAKJ,EACLjB,QAAS,EAAKsB,qBAAqBL,GACnC5B,UAAS,sBAAiB4B,EAAjB,YACPA,IAAiBrB,EAA0B,SAAW,GAD/C,YAELuB,EAAO,OAAS,IACpBI,KAAMN,GAEN,wBAAC9C,EAAD,KACGqD,0BAAwBP,YAW7C,OAAO,S,GApFoBQ,iBAwFzBC,GAAO,IAAAC,OAA6B,CACxCxC,OAAQ,wBAAC,UAAD,MACRyC,SAAU,wBAAC,UAAD,MACVxC,OAAQ,wBAAC,UAAD,Q,UAGK,SAACyC,GAAD,OACb,wBAACH,EAAD,MACG,SAACI,GAAD,OAAe,wBAACpD,GAAD,gBAAsBmD,EAAgBC","file":"183.24b008eb2afbc9db5b69.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport { Icon, Dropdown } from 'cl2-component-library';\n\n// services\nimport { updateLocale } from 'services/locale';\n\n// resources\nimport GetAuthUser, { GetAuthUserChildProps } from 'resources/GetAuthUser';\nimport GetAppConfiguration, {\n  GetAppConfigurationChildProps,\n} from 'resources/GetAppConfiguration';\nimport GetLocale, { GetLocaleChildProps } from 'resources/GetLocale';\n\n// style\nimport styled from 'styled-components';\nimport { colors, fontSizes, isRtl } from 'utils/styleUtils';\n\n// i18n\nimport { shortenedAppLocalePairs } from 'containers/App/constants';\n\n// typings\nimport { Locale } from 'typings';\n\nconst DropdownButtonText = styled.div`\n  color: ${({ theme }) => theme.navbarTextColor || theme.colorText};\n  font-size: ${fontSizes.base}px;\n  font-weight: 500;\n  line-height: ${fontSizes.base}px;\n  transition: all 100ms ease-out;\n`;\n\nconst DropdownButtonIcon = styled(Icon)`\n  width: 11px;\n  height: 6px;\n  color: ${({ theme }) => theme.navbarTextColor || theme.colorText};\n  margin-top: 1px;\n  margin-left: 4px;\n  transition: all 100ms ease-out;\n  ${isRtl`\n    margin-left: 0;\n    margin-right: 4px;\n  `}\n`;\n\nconst DropdownButton = styled.button`\n  cursor: pointer;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n\n  ${isRtl`\n    flex-direction: row-reverse;\n  `}\n`;\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  position: relative;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    ${DropdownButtonText} {\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst ListItemText = styled.div`\n  color: ${colors.label};\n  font-size: ${fontSizes.base}px;\n  font-weight: 400;\n  line-height: 21px;\n  text-align: left;\n`;\n\nconst ListItem = styled.button`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 0px;\n  margin-bottom: 4px;\n  padding: 10px;\n  background: #fff;\n  border-radius: ${(props: any) => props.theme.borderRadius};\n  cursor: pointer;\n\n  &.last {\n    margin-bottom: 0px;\n  }\n\n  &:hover,\n  &:focus,\n  &.active {\n    background: ${colors.clDropdownHoverBackground};\n    ${ListItemText} {\n      color: #000;\n    }\n  }\n`;\n\ninterface InputProps {\n  className?: string;\n}\n\ninterface DataProps {\n  tenant: GetAppConfigurationChildProps;\n  authUser: GetAuthUserChildProps;\n  locale: GetLocaleChildProps;\n}\n\ninterface Props extends DataProps, InputProps {}\n\ntype State = {\n  dropdownOpened: boolean;\n};\n\nclass LanguageSelector extends PureComponent<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownOpened: false,\n    };\n  }\n\n  removeFocus = (event: React.MouseEvent) => {\n    event.preventDefault();\n  };\n\n  toggleDropdown = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    this.setState(({ dropdownOpened }) => ({\n      dropdownOpened: !dropdownOpened,\n    }));\n  };\n\n  handleLanguageSelect = (selectedLocale: Locale) => () => {\n    updateLocale(selectedLocale);\n    this.setState({ dropdownOpened: false });\n  };\n\n  render() {\n    const { tenant, locale, className } = this.props;\n    const { dropdownOpened } = this.state;\n\n    if (!isNilOrError(tenant) && !isNilOrError(locale)) {\n      const tenantLocales = tenant.attributes.settings.core.locales;\n      const currentlySelectedLocale = locale;\n      const isRtl = !!locale.startsWith('ar');\n\n      return (\n        <Container\n          className={className}\n          onMouseDown={this.removeFocus}\n          onClick={this.toggleDropdown}\n        >\n          <DropdownButton\n            className=\"e2e-langage-dropdown-toggle\"\n            aria-expanded={dropdownOpened}\n          >\n            <DropdownButtonText>\n              {currentlySelectedLocale.substr(0, 2).toUpperCase()}\n            </DropdownButtonText>\n            <DropdownButtonIcon name=\"dropdown\" />\n          </DropdownButton>\n\n          <Dropdown\n            width=\"180px\"\n            top=\"68px\"\n            right={!isRtl ? '0px' : undefined}\n            left={isRtl ? '0px' : undefined}\n            mobileRight={!isRtl ? '5px' : undefined}\n            mobileLeft={isRtl ? '5px' : undefined}\n            opened={dropdownOpened}\n            onClickOutside={this.toggleDropdown}\n            content={\n              <>\n                {tenantLocales.map((tenantLocale, index) => {\n                  const last = index === tenantLocales.length - 1;\n\n                  return (\n                    <ListItem\n                      key={tenantLocale}\n                      onClick={this.handleLanguageSelect(tenantLocale)}\n                      className={`e2e-langage-${tenantLocale} ${\n                        tenantLocale === currentlySelectedLocale ? 'active' : ''\n                      } ${last ? 'last' : ''}`}\n                      lang={tenantLocale}\n                    >\n                      <ListItemText>\n                        {shortenedAppLocalePairs[tenantLocale]}\n                      </ListItemText>\n                    </ListItem>\n                  );\n                })}\n              </>\n            }\n          />\n        </Container>\n      );\n    }\n    return null;\n  }\n}\n\nconst Data = adopt<DataProps, InputProps>({\n  tenant: <GetAppConfiguration />,\n  authUser: <GetAuthUser />,\n  locale: <GetLocale />,\n});\n\nexport default (inputProps: InputProps) => (\n  <Data>\n    {(dataProps) => <LanguageSelector {...inputProps} {...dataProps} />}\n  </Data>\n);\n"],"sourceRoot":""}