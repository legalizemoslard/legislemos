{"version":3,"sources":["webpack:///./app/containers/PasswordRecovery/index.tsx","webpack:///./app/containers/PasswordRecovery/messages.ts"],"names":["Container","styled","div","props","theme","menuHeight","footerHeight","colors","background","StyledContentContainer","ContentContainer","Title","h1","fontSizes","xxxxl","Subtitle","p","StyledInput","Input","StyledButton","Button","Form","form","PasswordRecovery","email","emailError","isValidEmail","emailInputElement","focus","setState","value","submitError","element","event","state","preventDefault","validate","processing","success","sendPasswordResetMail","successEmail","this","formatMessage","intl","helmetTitle","messages","helmetDescription","title","subtitle","emailPlaceholder","resetPassword","successMessage","errorMessage","Helmet","meta","name","content","onSubmit","handleOnSubmit","FormLabel","htmlFor","labelMessage","emailLabel","id","type","error","placeholder","onChange","handleEmailOnChange","setRef","handleEmailInputSetRef","size","width","text","onClick","className","Success","React","PureComponent","injectIntl","defineMessages","defaultMessage"],"mappings":"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","file":"163.fb543db59d34e6d9f4d7.chunk.js","sourcesContent":["import React from 'react';\n\n// components\nimport { Input, Success } from 'cl2-component-library';\nimport Button from 'components/UI/Button';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from 'components/ContentContainer';\nimport { FormLabel } from 'components/UI/FormComponents';\n\n// services\nimport { sendPasswordResetMail } from 'services/auth';\n\n// utils\nimport { isValidEmail } from 'utils/validate';\n\n// i18n\nimport { InjectedIntlProps } from 'react-intl';\nimport { injectIntl } from 'utils/cl-intl';\n\n// style\nimport styled from 'styled-components';\nimport messages from './messages';\nimport { fontSizes, colors } from 'utils/styleUtils';\n\nconst Container = styled.div`\n  width: 100%;\n  min-height: calc(\n    100vh - ${(props) => props.theme.menuHeight + props.theme.footerHeight}px\n  );\n  background: ${colors.background};\n`;\n\nconst StyledContentContainer = styled(ContentContainer)`\n  padding-bottom: 100px;\n`;\n\nconst Title = styled.h1`\n  width: 100%;\n  color: #333;\n  font-size: ${fontSizes.xxxxl}px;\n  line-height: 40px;\n  font-weight: 500;\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  padding-top: 60px;\n  margin-bottom: 15px;\n`;\n\nconst Subtitle = styled.p`\n  color: #444;\n  font-size: 18px;\n  line-height: 22px;\n  font-weight: 300;\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  margin-bottom: 50px;\n`;\n\nconst StyledInput = styled(Input)``;\n\nconst StyledButton = styled(Button)`\n  margin-top: 20px;\n  margin-bottom: 10px;\n`;\n\nconst Form = styled.form`\n  width: 100%;\n  max-width: 380px;\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\ninterface Props {}\n\ntype State = {\n  email: string | null;\n  emailError: boolean;\n  submitError: boolean;\n  processing: boolean;\n  success: boolean;\n  successEmail: string | null;\n};\n\nclass PasswordRecovery extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  emailInputElement: HTMLInputElement | null;\n\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      email: null,\n      emailError: false,\n      submitError: false,\n      processing: false,\n      success: false,\n      successEmail: null,\n    };\n    this.emailInputElement = null;\n  }\n\n  componentDidMount() {\n    if (this.emailInputElement) {\n      this.emailInputElement.focus();\n    }\n  }\n\n  validate = (email: string | null) => {\n    const emailError = !email || !isValidEmail(email);\n\n    if (emailError && this.emailInputElement) {\n      this.emailInputElement.focus();\n    }\n\n    this.setState({ emailError });\n\n    return !emailError;\n  };\n\n  handleEmailOnChange = (value) => {\n    this.setState({\n      emailError: false,\n      submitError: false,\n      email: value,\n    });\n  };\n\n  handleEmailInputSetRef = (element: HTMLInputElement) => {\n    this.emailInputElement = element;\n  };\n\n  handleOnSubmit = async (event) => {\n    const { email } = this.state;\n\n    event.preventDefault();\n\n    if (this.validate(email) && email) {\n      try {\n        this.setState({ processing: true, success: false });\n        await sendPasswordResetMail(email);\n        this.setState({\n          email: null,\n          processing: false,\n          success: true,\n          successEmail: email,\n        });\n        /* setTimeout(() => this.setState({ success: false }), 8000); */\n      } catch {\n        this.setState({ processing: false, success: false, submitError: true });\n      }\n    } else {\n      this.setState({ emailError: true });\n    }\n  };\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const {\n      email,\n      emailError,\n      submitError,\n      processing,\n      success,\n      successEmail,\n    } = this.state;\n    const helmetTitle = formatMessage(messages.helmetTitle);\n    const helmetDescription = formatMessage(messages.helmetDescription);\n    const title = formatMessage(messages.title);\n    const subtitle = formatMessage(messages.subtitle);\n    const emailPlaceholder = formatMessage(messages.emailPlaceholder);\n    const resetPassword = formatMessage(messages.resetPassword);\n    const successMessage = success\n      ? formatMessage(messages.successMessage, { email: `${successEmail}` })\n      : null;\n    let errorMessage: string | null = null;\n\n    if (emailError) {\n      errorMessage = formatMessage(messages.emailError);\n    } else if (submitError) {\n      errorMessage = formatMessage(messages.submitError);\n    }\n\n    return (\n      <Container>\n        <Helmet\n          title={helmetTitle}\n          meta={[{ name: 'description', content: helmetDescription }]}\n        />\n        <main>\n          <StyledContentContainer>\n            <Title>{title}</Title>\n\n            <Subtitle>{subtitle}</Subtitle>\n\n            <Form onSubmit={this.handleOnSubmit}>\n              <FormLabel htmlFor=\"email\" labelMessage={messages.emailLabel} />\n              <StyledInput\n                id=\"email\"\n                type=\"text\"\n                value={email}\n                error={errorMessage}\n                placeholder={emailPlaceholder}\n                onChange={this.handleEmailOnChange}\n                setRef={this.handleEmailInputSetRef}\n              />\n\n              {/* <Error fieldName=\"title_multiloc\" apiErrors={this.state.errors.title_multiloc} /> */}\n\n              <StyledButton\n                size=\"2\"\n                width=\"100%\"\n                processing={processing}\n                text={resetPassword}\n                onClick={this.handleOnSubmit}\n                className=\"e2e-submit-reset\"\n              />\n\n              {successMessage && (\n                <Success text={successMessage} className=\"e2e-success-reset\" />\n              )}\n            </Form>\n          </StyledContentContainer>\n        </main>\n      </Container>\n    );\n  }\n}\n\nexport default injectIntl<Props>(PasswordRecovery);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  helmetTitle: {\n    id: 'app.containers.PasswordRecovery.helmetTitle',\n    defaultMessage: 'Forgot your password',\n  },\n  helmetDescription: {\n    id: 'app.containers.PasswordRecovery.helmetDescription',\n    defaultMessage: 'Forgot your password page',\n  },\n  title: {\n    id: 'app.containers.PasswordRecovery.title',\n    defaultMessage: 'Forgot your password?',\n  },\n  subtitle: {\n    id: 'app.containers.PasswordRecovery.subtitle',\n    defaultMessage: 'Enter your email below to receive a password reset link.',\n  },\n  emailPlaceholder: {\n    id: 'app.containers.PasswordRecovery.emailPlaceholder',\n    defaultMessage: 'My email address',\n  },\n  emailLabel: {\n    id: 'app.containers.PasswordRecovery.emailLabel',\n    defaultMessage: 'Email',\n  },\n  resetPassword: {\n    id: 'app.containers.PasswordRecovery.resetPassword',\n    defaultMessage: 'Send password reset link',\n  },\n  successMessage: {\n    id: 'app.containers.PasswordRecovery.successMessage',\n    defaultMessage: 'Password reset email successfully send to {email}',\n  },\n  emailError: {\n    id: 'app.containers.PasswordRecovery.emailError',\n    defaultMessage: 'Please enter a valid e-mail address',\n  },\n  submitError: {\n    id: 'app.containers.PasswordRecovery.submitError',\n    defaultMessage: 'Something went wrong. Please try again later.',\n  },\n});\n"],"sourceRoot":""}