{"version":3,"sources":["webpack:///./app/services/surveyResults.ts","webpack:///./app/containers/Admin/projects/edit/surveyResults/index.tsx","webpack:///./app/containers/Admin/projects/edit/surveyResults/tracks.ts","webpack:///./app/containers/Admin/projects/edit/surveyResults/ExportSurveyButton.tsx"],"names":["exportSurveyResults","queryParameter","requestBlob","API_PATH","type","id","blob","saveAs","Container","styled","div","SurveyResults","props","project","surveys_enabled","typeform_enabled","phases","isNilOrError","attributes","process_type","participation_method","survey_service","filter","phase","map","Fragment","key","value","title_multiloc","SectionTitle","FormattedMessage","messages","titleSurveyResults","SectionDescription","subtitleSurveyResults","this","renderButtons","React","PureComponent","Data","adopt","name","params","render","projectId","withRouter","inputProps","dataProps","clickExportSurvey","ExportSurveyButton","trackEventByName","tracks","extra","trackExportSurvey","setState","exporting","state","buttonStyle","icon","onClick","handleExportSurveyResults","processing"],"mappings":"6OAAA,YACA,YACA,YAGaA,EAAmB,+CAAG,WAAOC,GAAP,8FAId,IAAAC,aAAA,UACdC,WADc,YACFF,EAAeG,KADb,aACsBH,EAAeI,GADrC,6BAEjB,qEAN+B,OAI3BC,EAJ2B,QASjC,IAAAC,QAAOD,EAAM,8BAToB,2CAAH,sD,2XCJhC,E,ybAAA,YACA,YACA,YACA,YACA,eAGA,eACA,eACA,eAGA,eACA,eACA,YAGA,eACA,Y,ykBAEA,IAAME,EAAYC,UAAOC,IAAV,+EAAGD,CAAH,yDAiBTE,E,qPACY,WACd,MAA+D,EAAKC,MAA5DC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,iBAAkBC,EAApD,EAAoDA,OACpD,QAAK,IAAAC,cAAaJ,IAAYC,GAAmBC,EAET,eAApCF,EAAQK,WAAWC,cACyB,WAA5CN,EAAQK,WAAWE,sBACmB,aAAtCP,EAAQK,WAAWG,eAEZ,wBAAC,UAAD,CAAoBjB,KAAK,UAAUC,GAAIQ,EAAQR,KAIlB,aAApCQ,EAAQK,WAAWC,eAClB,IAAAF,cAAaD,GAmBT,KAjBEA,EACJM,QACC,SAACC,GAAD,MAC4C,WAA1CA,EAAML,WAAWE,sBACmB,aAApCG,EAAML,WAAWG,kBAEpBG,KAAI,SAACD,GACJ,OACE,wBAAC,EAAAE,SAAD,CAAUC,IAAKH,EAAMlB,IACnB,kCACE,wBAAC,UAAD,CAAGsB,MAAOJ,EAAML,WAAWU,kBAE7B,wBAAC,UAAD,CAAoBvB,GAAIkB,EAAMlB,GAAID,KAAK,cAO5C,Q,6CAGT,WACE,OACE,gDACE,wBAAC,EAAAyB,aAAD,KACE,wBAAC,EAAAC,iBAAqBC,UAASC,qBAEjC,wBAAC,EAAAC,mBAAD,KACE,wBAAC,EAAAH,iBAAqBC,UAASG,wBAEjC,wBAAC1B,EAAD,KAAY2B,KAAKC,sB,GA/CGC,UAAMC,eAqD5BC,GAAO,IAAAC,OAA+C,CAC1D1B,gBAAiB,wBAAC,UAAD,CAAgB2B,KAAK,YACtC1B,iBAAkB,wBAAC,UAAD,CAAgB0B,KAAK,qBACvCzB,OAAQ,gBAAG0B,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAX,OACN,wBAAC,UAAD,CAAWC,UAAWF,EAAOE,WAAYD,IAE3C9B,QAAS,gBAAG6B,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAX,OACP,wBAAC,UAAD,CAAYC,UAAWF,EAAOE,WAAYD,M,GAI/B,IAAAE,aACb,SAACC,GAAD,OACE,wBAACP,EAASO,GACP,SAACC,GAAD,OAAe,wBAACpC,GAAD,gBAAmBmC,EAAgBC,U,2HCzG1C,CACbC,kBAAmB,CACjBP,KAAM,mC,iTCDV,eAMA,YACA,eAGA,eACA,YAGA,YACA,e,yhCAWqBQ,E,0CAInB,WAAYrC,GAAc,kCACxB,cAAMA,IADkB,mDAON,YAClB,IAAAsC,kBAAiBC,UAAOH,kBAAkBP,KAAM,CAC9CW,MAAO,EAAF,GAAO,EAAKxC,aATK,2DAaE,WAC1B,EAAKyC,oBAEL,EAAKC,SAAS,CAAEC,WAAW,KAC3B,IAAAvD,qBAAoB,EAAKY,OACzB,EAAK0C,SAAS,CAAEC,WAAW,OAhB3B,EAAKC,MAAQ,CACXD,WAAW,GAHW,E,2CAqB1B,WACE,IAAQA,EAAcpB,KAAKqB,MAAnBD,UACR,OACE,wBAAC,UAAD,CACEE,YAAY,YACZC,KAAK,WACLC,QAASxB,KAAKyB,0BACdC,WAAYN,GAEZ,wBAAC,EAAAzB,iBAAqBC,UAAS/B,0B,GAlCSqC,UAAMC,e","file":"138.d9058d3f6af725c3bd82.chunk.js","sourcesContent":["import { API_PATH } from 'containers/App/constants';\nimport { requestBlob } from 'utils/request';\nimport { saveAs } from 'file-saver';\nimport { IParticipationContextType } from 'typings';\n\nexport const exportSurveyResults = async (queryParameter: {\n  type: IParticipationContextType;\n  id: string;\n}) => {\n  const blob = await requestBlob(\n    `${API_PATH}/${queryParameter.type}s/${queryParameter.id}/survey_responses/as_xlsx`,\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n  );\n\n  saveAs(blob, 'survey-results-export.xlsx');\n};\n","// Libraries\nimport React, { Fragment } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport { adopt } from 'react-adopt';\nimport styled from 'styled-components';\n\n// Services / Data loading\nimport GetProject, { GetProjectChildProps } from 'resources/GetProject';\nimport GetFeatureFlag from 'resources/GetFeatureFlag';\nimport GetPhases, { GetPhasesChildProps } from 'resources/GetPhases';\n\n// Components\nimport ExportSurveyButton from './ExportSurveyButton';\nimport T from 'components/T';\nimport { SectionTitle, SectionDescription } from 'components/admin/Section';\n\n// i18n\nimport messages from '../messages';\nimport { FormattedMessage } from 'utils/cl-intl';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 500px;\n`;\n\ninterface InputProps {}\n\ninterface DataProps {\n  project: GetProjectChildProps;\n  surveys_enabled: boolean | null;\n  typeform_enabled: boolean | null;\n  phases: GetPhasesChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nclass SurveyResults extends React.PureComponent<Props> {\n  renderButtons = () => {\n    const { project, surveys_enabled, typeform_enabled, phases } = this.props;\n    if (!isNilOrError(project) && surveys_enabled && typeform_enabled) {\n      if (\n        project.attributes.process_type === 'continuous' &&\n        project.attributes.participation_method === 'survey' &&\n        project.attributes.survey_service === 'typeform'\n      ) {\n        return <ExportSurveyButton type=\"project\" id={project.id} />;\n      }\n\n      if (\n        project.attributes.process_type === 'timeline' &&\n        !isNilOrError(phases)\n      ) {\n        return phases\n          .filter(\n            (phase) =>\n              phase.attributes.participation_method === 'survey' &&\n              phase.attributes.survey_service === 'typeform'\n          )\n          .map((phase) => {\n            return (\n              <Fragment key={phase.id}>\n                <h3>\n                  <T value={phase.attributes.title_multiloc} />\n                </h3>\n                <ExportSurveyButton id={phase.id} type=\"phase\" />\n              </Fragment>\n            );\n          });\n      }\n      return null;\n    }\n    return null;\n  };\n\n  render() {\n    return (\n      <>\n        <SectionTitle>\n          <FormattedMessage {...messages.titleSurveyResults} />\n        </SectionTitle>\n        <SectionDescription>\n          <FormattedMessage {...messages.subtitleSurveyResults} />\n        </SectionDescription>\n        <Container>{this.renderButtons()}</Container>\n      </>\n    );\n  }\n}\n\nconst Data = adopt<DataProps, InputProps & WithRouterProps>({\n  surveys_enabled: <GetFeatureFlag name=\"surveys\" />,\n  typeform_enabled: <GetFeatureFlag name=\"typeform_surveys\" />,\n  phases: ({ params, render }) => (\n    <GetPhases projectId={params.projectId}>{render}</GetPhases>\n  ),\n  project: ({ params, render }) => (\n    <GetProject projectId={params.projectId}>{render}</GetProject>\n  ),\n});\n\nexport default withRouter<InputProps>(\n  (inputProps: InputProps & WithRouterProps) => (\n    <Data {...inputProps}>\n      {(dataProps) => <SurveyResults {...inputProps} {...dataProps} />}\n    </Data>\n  )\n);\n","export default {\n  clickExportSurvey: {\n    name: 'Export Survey results clicked',\n  },\n};\n","// Libraries\nimport React from 'react';\n\n// typings\nimport { IParticipationContextType } from 'typings';\n\n// analytics\nimport { trackEventByName } from 'utils/analytics';\nimport tracks from './tracks';\n\n// components\nimport Button from 'components/UI/Button';\nimport { exportSurveyResults } from 'services/surveyResults';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\n\ninterface Props {\n  type: IParticipationContextType;\n  id: string;\n}\n\ninterface State {\n  exporting: boolean;\n}\n\nexport default class ExportSurveyButton extends React.PureComponent<\n  Props,\n  State\n> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      exporting: false,\n    };\n  }\n\n  trackExportSurvey = () => {\n    trackEventByName(tracks.clickExportSurvey.name, {\n      extra: { ...this.props },\n    });\n  };\n\n  handleExportSurveyResults = () => {\n    this.trackExportSurvey();\n\n    this.setState({ exporting: true });\n    exportSurveyResults(this.props);\n    this.setState({ exporting: false });\n  };\n\n  render() {\n    const { exporting } = this.state;\n    return (\n      <Button\n        buttonStyle=\"secondary\"\n        icon=\"download\"\n        onClick={this.handleExportSurveyResults}\n        processing={exporting}\n      >\n        <FormattedMessage {...messages.exportSurveyResults} />\n      </Button>\n    );\n  }\n}\n"],"sourceRoot":""}