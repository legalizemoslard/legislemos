{"version":3,"sources":["webpack:///./app/containers/Admin/pages/messages.js","webpack:///./app/containers/Admin/pages/All/index.tsx","webpack:///./app/resources/GetPages.tsx"],"names":["defineMessages","listTitle","id","defaultMessage","pageDeletionConfirmation","showButtonLabel","deleteButtonLabel","editButtonLabel","addPageButton","PageTitle","styled","h1","PagesWithInjectedIntl","injectIntl","formatMessage","intl","pages","isNilOrError","FormattedMessage","messages","name","ButtonWrapper","buttonStyle","icon","linkTo","List","key","length","filter","page","attributes","slug","map","Row","TextCell","className","value","title_multiloc","onClick","pageId","event","deleteMessage","preventDefault","window","confirm","deletePage","inputProps","GetPages","props","state","undefined","ids","this","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","isEqual","switchMap","combineLatest","pageByIdStream","observable","topic","data","of","listPages","subscribe","setState","forEach","subscription","unsubscribe","children","React","Component"],"mappings":"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","file":"144.2cce90501e06ae1cb5ef.chunk.js","sourcesContent":["/*\n * AdminPage.PagesPage Messages\n *\n * This contains all the text for the AdminPage.SettingsPage component.\n */\n\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  listTitle: {\n    id: 'app.containers.AdminPage.PagesPage.listTitle',\n    defaultMessage: 'Pages',\n  },\n  pageDeletionConfirmation: {\n    id: 'app.containers.AdminPage.PagesPage.pageDeletionConfirmation',\n    defaultMessage: 'Are you sure you want to delete this page?',\n  },\n  showButtonLabel: {\n    id: 'app.containers.AdminPage.PagesPage.showButtonLabel',\n    defaultMessage: 'View',\n  },\n  deleteButtonLabel: {\n    id: 'app.containers.AdminPage.PagesPage.deleteButtonLabel',\n    defaultMessage: 'Delete',\n  },\n  editButtonLabel: {\n    id: 'app.containers.AdminPage.PagesPage.editButtonLabel',\n    defaultMessage: 'Edit',\n  },\n  addPageButton: {\n    id: 'app.containers.AdminPage.PagesPage.addPageButton',\n    defaultMessage: 'Add page',\n  },\n});\n","import React from 'react';\nimport styled from 'styled-components';\nimport { isNilOrError } from 'utils/helperUtils';\n\nimport { deletePage } from 'services/pages';\n\nimport GetPages, { GetPagesChildProps } from 'resources/GetPages';\n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport T from 'components/T';\n\nimport { List, Row, TextCell } from 'components/admin/ResourceList';\nimport Button from 'components/UI/Button';\n\nimport messages from '../messages';\nimport FeatureFlag from 'components/FeatureFlag';\nimport PageWrapper, { ButtonWrapper } from 'components/admin/PageWrapper';\n\nconst PageTitle = styled.h1`\n  font-size: 2.5rem;\n  margin-bottom: 3rem;\n`;\n\nexport interface InputProps {}\n\ninterface DataProps {\n  pages: GetPagesChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nconst Pages = ({\n  intl: { formatMessage },\n  pages,\n}: Props & InjectedIntlProps) => {\n  const handleOnDeleteClick = (pageId: string) => (event) => {\n    const deleteMessage = formatMessage(messages.pageDeletionConfirmation);\n    event.preventDefault();\n    if (window.confirm(deleteMessage)) {\n      deletePage(pageId);\n    }\n  };\n\n  if (!isNilOrError(pages)) {\n    return (\n      <>\n        <PageTitle>\n          <FormattedMessage {...messages.listTitle} />\n        </PageTitle>\n\n        <PageWrapper>\n          <FeatureFlag name=\"pages\">\n            <ButtonWrapper>\n              <Button\n                buttonStyle=\"cl-blue\"\n                icon=\"plus-circle\"\n                linkTo=\"/admin/pages/new\"\n              >\n                <FormattedMessage {...messages.addPageButton} />\n              </Button>\n            </ButtonWrapper>\n          </FeatureFlag>\n          <List key={pages.length}>\n            {pages\n              .filter((page) => {\n                // These pages are only changeable in Crowdin.\n                // Changing them here wouldn't have any effect.\n                // So to avoid confusion, they're not shown.\n                return (\n                  page.attributes.slug !== 'homepage_info' &&\n                  page.attributes.slug !== 'cookie-policy' &&\n                  page.attributes.slug !== 'accessibility-statement'\n                );\n              })\n              .map((page) => (\n                <Row key={page.id} id={page.id}>\n                  <TextCell className=\"expand\">\n                    <T value={page.attributes.title_multiloc} />\n                  </TextCell>\n                  <Button\n                    onClick={handleOnDeleteClick(page.id)}\n                    buttonStyle=\"text\"\n                    icon=\"delete\"\n                  >\n                    <FormattedMessage {...messages.deleteButtonLabel} />\n                  </Button>\n                  <Button\n                    linkTo={`/pages/${page.attributes.slug}`}\n                    buttonStyle=\"text\"\n                    icon=\"search\"\n                  >\n                    <FormattedMessage {...messages.showButtonLabel} />\n                  </Button>\n                  <Button\n                    linkTo={`/admin/pages/${page.id}`}\n                    buttonStyle=\"secondary\"\n                    icon=\"edit\"\n                  >\n                    <FormattedMessage {...messages.editButtonLabel} />\n                  </Button>\n                </Row>\n              ))}\n          </List>\n        </PageWrapper>\n      </>\n    );\n  }\n\n  return null;\n};\n\nconst PagesWithInjectedIntl = injectIntl(Pages);\n\nexport default (inputProps: InputProps) => (\n  <GetPages>\n    {(pages) => <PagesWithInjectedIntl {...inputProps} pages={pages} />}\n  </GetPages>\n);\n","import React from 'react';\nimport { isEqual } from 'lodash-es';\nimport { Subscription, BehaviorSubject, of, combineLatest } from 'rxjs';\nimport { map, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { IPageData, listPages, pageByIdStream } from 'services/pages';\n\ninterface InputProps {\n  ids?: string[];\n}\n\ntype children = (renderProps: GetPagesChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  pages: IPageData[] | undefined | null | Error;\n}\n\nexport type GetPagesChildProps = IPageData[] | undefined | null | Error;\n\nexport default class GetPages extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      pages: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { ids } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ ids });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => isEqual(prev, next)),\n          switchMap(({ ids }) => {\n            if (ids) {\n              if (ids.length > 0) {\n                return combineLatest(\n                  ids.map((id) =>\n                    pageByIdStream(id).observable.pipe(\n                      map((topic) => topic.data)\n                    )\n                  )\n                );\n              }\n\n              return of(null);\n            }\n\n            return listPages().observable.pipe(map((pages) => pages.data));\n          })\n        )\n        .subscribe((pages) => {\n          this.setState({ pages });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    this.inputProps$.next({ ids: this.props.ids });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { pages } = this.state;\n    return (children as children)(pages);\n  }\n}\n"],"sourceRoot":""}