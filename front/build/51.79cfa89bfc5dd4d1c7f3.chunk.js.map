{"version":3,"sources":["webpack:///./app/components/admin/DateRangePicker/index.tsx","webpack:///./app/containers/Admin/projects/edit/timeline/messages.ts","webpack:///./app/containers/Admin/projects/edit/timeline/edit.tsx","webpack:///./app/components/admin/DateRangePicker/messages.ts"],"names":["StylingWrapper","styled","div","props","theme","borderRadius","colors","border","hoveredBorder","text","fontSizes","base","OurDateRangePicker","focusedInput","setState","state","className","this","DateRangePicker","omit","startDateId","endDateId","onFocusChange","handleFocusChange","startDatePlaceholderText","intl","formatMessage","messages","startDatePlaceholder","endDatePlaceholderText","endDatePlaceholder","isOutsideRange","handleIsOutsideRange","PureComponent","injectIntl","defineMessages","editPhaseTitle","id","defaultMessage","newPhaseTitle","titleLabel","descriptionLabel","datesLabel","saveLabel","saveSuccessLabel","saveErrorMessage","saveSuccessMessage","orderColumnTitle","nameColumnTitle","addPhaseButton","editPhaseButton","deletePhaseButton","deletePhaseConfirmation","fileUploadLabel","titleTimeline","subtitleTimeline","PhaseForm","form","AdminProjectTimelineEdit","title_multiloc","submitState","attributeDiff","description_multiloc","presentationMode","presentation_mode","startDate","endDate","start_at","locale","format","end_at","newFile","prevState","isDuplicate","phaseFiles","some","file","base64","fileToRemove","filter","phaseFilesToRemove","event","preventDefault","eventEmitter","emit","participationContextConfig","getAttributeDiff","phase","projectId","params","save","isEmpty","processing","phaseResponse","redirect","updatePhase","data","addPhase","phaseId","filesToAddPromises","remote","map","addPhaseFile","name","filesToRemovePromises","deletePhaseFile","Promise","all","saved","errors","clHistory","push","get","FormattedMessage","phases","phaseAttrs","attributes","previousPhase","length","previousPhaseEndDate","add","loaded","subscriptions","params$","BehaviorSubject","next","pipe","distinctUntilChanged","shallowCompare","switchMap","locale$","localeStream","observable","phase$","phaseStream","of","combineLatest","subscribe","phaseFilesStream","phaseFile","url","filename","convertUrlToUploadFileObservable","isNilOrError","forEach","subscription","unsubscribe","getStartDate","SectionTitle","onSubmit","handleOnSubmit","Section","SectionField","label","type","valueMultiloc","onChange","handleTitleMultilocOnChange","apiErrors","handleParcticipationContextOnSubmit","handleParticipationContextOnChange","Label","onDatesChange","handleDateUpdate","quillMultilocLabel","handleEditorOnChange","withCTAButton","onFileAdd","handlePhaseFileOnAdd","onFileRemove","handlePhaseFileOnRemove","files","project","loading","status","buttonSave","buttonSuccess","messageError","messageSuccess","AdminProjectTimelineEditWithHOCs","Data","adopt","render","withRouter","inputProps","dataProps"],"mappings":"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","file":"51.79cfa89bfc5dd4d1c7f3.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Omit } from 'typings';\n\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport { DateRangePicker, DateRangePickerShape } from 'react-dates';\n\n// styles\nimport styled from 'styled-components';\nimport { fontSizes, colors } from 'utils/styleUtils';\n\n// i18n\nimport messages from './messages';\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport { omit } from 'lodash-es';\n\ninterface Props\n  extends Omit<\n    DateRangePickerShape,\n    'focusedInput' | 'onFocusChange' | 'renderMonthText'\n  > {\n  className?: string;\n}\n\ninterface State {\n  focusedInput: 'startDate' | 'endDate' | null;\n}\n\nconst StylingWrapper = styled.div`\n  .DateRangePickerInput {\n    border-radius: ${(props: any) => props.theme.borderRadius};\n    border: solid 1px ${colors.border};\n\n    &:hover {\n      border-color: ${colors.hoveredBorder};\n    }\n\n    .DateInput,\n    .DateInput_input {\n      color: ${colors.text};\n      font-size: ${fontSizes.base}px;\n      line-height: normal;\n      font-weight: 400;\n      background: transparent;\n    }\n  }\n`;\n\n/** Light wrapper around react-dates DateRangePicker that autonomously deals with focusing and styling */\nclass OurDateRangePicker extends PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      focusedInput: null,\n    };\n  }\n\n  handleFocusChange = (focusedInput: 'startDate' | 'endDate') => {\n    this.setState({ focusedInput });\n  };\n\n  handleIsOutsideRange = () => {\n    return false;\n  };\n\n  render() {\n    return (\n      <StylingWrapper className={this.props.className}>\n        <DateRangePicker\n          {...omit(this.props, 'intl')}\n          startDateId=\"startAt\"\n          endDateId=\"endAt\"\n          focusedInput={this.state.focusedInput}\n          onFocusChange={this.handleFocusChange}\n          startDatePlaceholderText={this.props.intl.formatMessage(\n            messages.startDatePlaceholder\n          )}\n          endDatePlaceholderText={this.props.intl.formatMessage(\n            messages.endDatePlaceholder\n          )}\n          isOutsideRange={this.handleIsOutsideRange}\n        />\n      </StylingWrapper>\n    );\n  }\n}\n\nexport default injectIntl(OurDateRangePicker);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  editPhaseTitle: {\n    id: 'app.containers.AdminPage.ProjectTimeline.editPhaseTitle',\n    defaultMessage: 'Edit Phase',\n  },\n  newPhaseTitle: {\n    id: 'app.containers.AdminPage.ProjectTimeline.newPhaseTitle',\n    defaultMessage: 'New Phase',\n  },\n  titleLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.titleLabel',\n    defaultMessage: 'Title',\n  },\n  descriptionLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.descriptionLabel',\n    defaultMessage: 'Description',\n  },\n  datesLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.datesLabel',\n    defaultMessage: 'Dates',\n  },\n  saveLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.saveLabel',\n    defaultMessage: 'Save',\n  },\n  saveSuccessLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.saveSuccessLabel',\n    defaultMessage: 'Success',\n  },\n  saveErrorMessage: {\n    id: 'app.containers.AdminPage.ProjectTimeline.saveErrorMessage',\n    defaultMessage: 'There was an error submitting the form, please try again.',\n  },\n  saveSuccessMessage: {\n    id: 'app.containers.AdminPage.ProjectTimeline.saveSuccessMessage',\n    defaultMessage: 'Your changes have been saved successfully.',\n  },\n  orderColumnTitle: {\n    id: 'app.containers.AdminPage.ProjectTimeline.orderColumnTitle',\n    defaultMessage: 'Order',\n  },\n  nameColumnTitle: {\n    id: 'app.containers.AdminPage.ProjectTimeline.nameColumnTitle',\n    defaultMessage: 'Name & Dates',\n  },\n  addPhaseButton: {\n    id: 'app.containers.AdminPage.ProjectTimeline.addPhaseButton',\n    defaultMessage: 'Add a phase',\n  },\n  editPhaseButton: {\n    id: 'app.containers.AdminPage.ProjectTimeline.editPhaseButton',\n    defaultMessage: 'Edit',\n  },\n  deletePhaseButton: {\n    id: 'app.containers.AdminPage.ProjectTimeline.deletePhaseButton',\n    defaultMessage: 'Delete',\n  },\n  deletePhaseConfirmation: {\n    id: 'app.containers.AdminPage.ProjectTimeline.deletePhaseConfirmation',\n    defaultMessage: 'Are you sure you wannna delete this phase?',\n  },\n  startDatePlaceholder: {\n    id: 'app.containers.AdminPage.ProjectTimeline.startDatePlaceholder',\n    defaultMessage: 'Start Date',\n  },\n  endDatePlaceholder: {\n    id: 'app.containers.AdminPage.ProjectTimeline.endDatePlaceholder',\n    defaultMessage: 'End Date',\n  },\n  fileUploadLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.fileUploadLabel',\n    defaultMessage: 'Attach files to this phase',\n  },\n  titleTimeline: {\n    id: 'app.containers.AdminPage.ProjectTimeline.titleTimeline',\n    defaultMessage: 'Manage timeline phases',\n  },\n  subtitleTimeline: {\n    id: 'app.containers.AdminPage.ProjectTimeline.subtitleTimeline',\n    defaultMessage:\n      'Define the different timeline phases for your project and describe what each phase is about. In every phase you can pick a different participation method: idea gathering, surveys, information, voting, commenting or participatory budgeting.',\n  },\n});\n","// Libraries\nimport React, { PureComponent, FormEvent } from 'react';\nimport { Subscription, BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport moment, { Moment } from 'moment';\nimport { get, isEmpty } from 'lodash-es';\nimport clHistory from 'utils/cl-router/history';\nimport { adopt } from 'react-adopt';\nimport { withRouter, WithRouterProps } from 'react-router';\n\n// Services\nimport { localeStream } from 'services/locale';\nimport {\n  phaseFilesStream,\n  addPhaseFile,\n  deletePhaseFile,\n} from 'services/phaseFiles';\nimport {\n  phaseStream,\n  updatePhase,\n  addPhase,\n  IPhase,\n  IUpdatedPhaseProperties,\n} from 'services/phases';\nimport eventEmitter from 'utils/eventEmitter';\n\n// Utils\nimport shallowCompare from 'utils/shallowCompare';\nimport { convertUrlToUploadFileObservable } from 'utils/fileTools';\n\n// Components\nimport { Label } from 'cl2-component-library';\nimport InputMultilocWithLocaleSwitcher from 'components/UI/InputMultilocWithLocaleSwitcher';\nimport QuillMultilocWithLocaleSwitcher from 'components/UI/QuillEditor/QuillMultilocWithLocaleSwitcher';\nimport Error from 'components/UI/Error';\nimport DateRangePicker from 'components/admin/DateRangePicker';\nimport SubmitWrapper from 'components/admin/SubmitWrapper';\nimport { Section, SectionTitle, SectionField } from 'components/admin/Section';\nimport ParticipationContext, {\n  IParticipationContextConfig,\n} from '../participationContext';\nimport FileUploader from 'components/UI/FileUploader';\n\n// i18n\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from './messages';\n\n// Styling\nimport styled from 'styled-components';\n\n// Typings\nimport { CLError, Locale, UploadFile, Multiloc } from 'typings';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// Resources\nimport GetPhases, { GetPhasesChildProps } from 'resources/GetPhases';\n\nconst PhaseForm = styled.form``;\n\ninterface IParams {\n  projectId: string | null;\n  id: string | null;\n}\n\ninterface DataProps {\n  phases: GetPhasesChildProps;\n}\n\ninterface InputProps {}\n\ninterface Props extends DataProps, InputProps {}\n\ninterface State {\n  locale: Locale | null;\n  phase: IPhase | null;\n  presentationMode: 'map' | 'card';\n  attributeDiff: IUpdatedPhaseProperties;\n  errors: { [fieldName: string]: CLError[] } | null;\n  processing: boolean;\n  saved: boolean;\n  loaded: boolean;\n  phaseFiles: UploadFile[];\n  phaseFilesToRemove: UploadFile[];\n  submitState: 'disabled' | 'enabled' | 'error' | 'success';\n}\n\nclass AdminProjectTimelineEdit extends PureComponent<\n  Props & InjectedIntlProps & WithRouterProps,\n  State\n> {\n  params$: BehaviorSubject<IParams | null>;\n  subscriptions: Subscription[];\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      locale: null,\n      phase: null,\n      presentationMode: 'card',\n      attributeDiff: {},\n      errors: null,\n      processing: false,\n      saved: false,\n      loaded: false,\n      phaseFiles: [],\n      phaseFilesToRemove: [],\n      submitState: 'disabled',\n    };\n    this.subscriptions = [];\n    this.params$ = new BehaviorSubject(null);\n  }\n\n  componentDidMount() {\n    const { projectId, id } = this.props.params;\n\n    this.params$.next({ projectId, id });\n\n    this.subscriptions = [\n      this.params$\n        .pipe(\n          distinctUntilChanged(shallowCompare),\n          switchMap((params: IParams) => {\n            const { id } = params;\n            const locale$ = localeStream().observable;\n            const phase$ = id ? phaseStream(id).observable : of(null);\n            return combineLatest(locale$, phase$);\n          })\n        )\n        .subscribe(([locale, phase]) => {\n          this.setState({\n            locale,\n            phase,\n            loaded: true,\n          });\n        }),\n\n      this.params$\n        .pipe(\n          distinctUntilChanged(shallowCompare),\n          switchMap((params: IParams) => {\n            return params.id\n              ? phaseFilesStream(params.id).observable.pipe(\n                  switchMap((phaseFiles) => {\n                    if (\n                      phaseFiles &&\n                      phaseFiles.data &&\n                      phaseFiles.data.length > 0\n                    ) {\n                      return combineLatest(\n                        phaseFiles.data.map((phaseFile) => {\n                          const url = phaseFile.attributes.file.url;\n                          const filename = phaseFile.attributes.name;\n                          const id = phaseFile.id;\n                          return convertUrlToUploadFileObservable(\n                            url,\n                            id,\n                            filename\n                          );\n                        })\n                      );\n                    }\n\n                    return of([]);\n                  })\n                )\n              : of([]);\n          })\n        )\n        .subscribe((phaseFiles) => {\n          this.setState({\n            phaseFiles: phaseFiles.filter(\n              (file) => !isNilOrError(file)\n            ) as UploadFile[],\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { projectId, id } = this.props.params;\n    this.params$.next({ projectId, id });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  handleTitleMultilocOnChange = (title_multiloc: Multiloc) => {\n    this.setState(({ attributeDiff }) => ({\n      submitState: 'enabled',\n      attributeDiff: {\n        ...attributeDiff,\n        title_multiloc,\n      },\n    }));\n  };\n\n  handleEditorOnChange = (description_multiloc: Multiloc) => {\n    this.setState(({ attributeDiff }) => ({\n      submitState: 'enabled',\n      attributeDiff: {\n        ...attributeDiff,\n        description_multiloc,\n      },\n    }));\n  };\n\n  handleIdeasDisplayChange = (presentationMode: 'map' | 'card') => {\n    this.setState(({ attributeDiff }) => ({\n      presentationMode,\n      submitState: 'enabled',\n      attributeDiff: {\n        ...attributeDiff,\n        presentation_mode: presentationMode,\n      },\n    }));\n  };\n\n  handleDateUpdate = ({\n    startDate,\n    endDate,\n  }: {\n    startDate: Moment;\n    endDate: Moment;\n  }) => {\n    this.setState(({ attributeDiff }) => ({\n      submitState: 'enabled',\n      attributeDiff: {\n        ...attributeDiff,\n        start_at: startDate ? startDate.locale('en').format('YYYY-MM-DD') : '',\n        end_at: endDate ? endDate.locale('en').format('YYYY-MM-DD') : '',\n      },\n    }));\n  };\n\n  handlePhaseFileOnAdd = (newFile: UploadFile) => {\n    this.setState((prevState) => {\n      const isDuplicate = prevState.phaseFiles.some(\n        (file) => file.base64 === newFile.base64\n      );\n      const phaseFiles = isDuplicate\n        ? prevState.phaseFiles\n        : [...(prevState.phaseFiles || []), newFile];\n      const submitState = isDuplicate ? prevState.submitState : 'enabled';\n\n      return {\n        phaseFiles,\n        submitState,\n      };\n    });\n  };\n\n  handlePhaseFileOnRemove = (fileToRemove: UploadFile) => {\n    this.setState((prevState) => {\n      const phaseFiles = prevState.phaseFiles.filter(\n        (file) => file.base64 !== fileToRemove.base64\n      );\n      const phaseFilesToRemove = [\n        ...(prevState.phaseFilesToRemove || []),\n        fileToRemove,\n      ];\n\n      return {\n        phaseFiles,\n        phaseFilesToRemove,\n        submitState: 'enabled',\n      };\n    });\n  };\n\n  handleOnSubmit = async (event: FormEvent<any>) => {\n    event.preventDefault();\n    eventEmitter.emit('getParticipationContext');\n  };\n\n  getAttributeDiff = (\n    participationContextConfig: IParticipationContextConfig\n  ) => {\n    const attributeDiff: IUpdatedPhaseProperties = {\n      ...this.state.attributeDiff,\n      ...participationContextConfig,\n    };\n\n    return attributeDiff;\n  };\n\n  handleParticipationContextOnChange = (\n    participationContextConfig: IParticipationContextConfig\n  ) => {\n    this.setState({\n      submitState: 'enabled',\n      attributeDiff: this.getAttributeDiff(participationContextConfig),\n    });\n  };\n\n  handleParcticipationContextOnSubmit = (\n    participationContextConfig: IParticipationContextConfig\n  ) => {\n    const { phase } = this.state;\n    const { projectId } = this.props.params;\n    const attributeDiff = this.getAttributeDiff(participationContextConfig);\n    this.save(projectId, phase, attributeDiff);\n  };\n\n  save = async (\n    projectId: string | null,\n    phase: IPhase | null,\n    attributeDiff: IUpdatedPhaseProperties\n  ) => {\n    if (!isEmpty(attributeDiff) && !this.state.processing) {\n      try {\n        const { phaseFiles, phaseFilesToRemove } = this.state;\n        let phaseResponse = phase;\n        let redirect = false;\n\n        this.setState({ processing: true });\n\n        if (!isEmpty(attributeDiff)) {\n          if (phase) {\n            phaseResponse = await updatePhase(phase.data.id, attributeDiff);\n            this.setState({ attributeDiff: {} });\n          } else if (projectId) {\n            phaseResponse = await addPhase(projectId, attributeDiff);\n            redirect = true;\n          }\n        }\n\n        if (phaseResponse) {\n          const phaseId = phaseResponse.data.id;\n          const filesToAddPromises = phaseFiles\n            .filter((file) => !file.remote)\n            .map((file) => addPhaseFile(phaseId, file.base64, file.name));\n          const filesToRemovePromises = phaseFilesToRemove\n            .filter((file) => file.remote)\n            .map((file) => deletePhaseFile(phaseId, file.id as string));\n\n          await Promise.all([\n            ...filesToAddPromises,\n            ...filesToRemovePromises,\n          ] as Promise<any>[]);\n        }\n\n        this.setState({\n          phaseFilesToRemove: [],\n          processing: false,\n          saved: true,\n          errors: null,\n          submitState: 'success',\n        });\n\n        if (redirect) {\n          clHistory.push(`/admin/projects/${projectId}/timeline/`);\n        }\n      } catch (errors) {\n        this.setState({\n          errors: get(errors, 'json.errors', null),\n          processing: false,\n          saved: false,\n          submitState: 'error',\n        });\n      }\n    }\n  };\n\n  quillMultilocLabel = (<FormattedMessage {...messages.descriptionLabel} />);\n\n  getStartDate = () => {\n    const { phase, attributeDiff } = this.state;\n    const { phases } = this.props;\n    const phaseAttrs = phase\n      ? { ...phase.data.attributes, ...attributeDiff }\n      : { ...attributeDiff };\n    let startDate: Moment | null = null;\n\n    // If this is a new phase\n    if (!phase) {\n      const previousPhase = phases && phases[phases.length - 1];\n      const previousPhaseEndDate = previousPhase\n        ? moment(previousPhase.attributes.end_at)\n        : null;\n\n      // And there's a previous phase (end date) and the phase hasn't been picked/changed\n      if (previousPhaseEndDate && !phaseAttrs.start_at) {\n        // Make startDate the previousEndDate + 1 day\n        startDate = previousPhaseEndDate.add(1, 'day');\n        // However, if there's been a manual change to this start date\n      } else if (phaseAttrs.start_at) {\n        // Take this date as the start date\n        startDate = moment(phaseAttrs.start_at);\n      }\n      // Otherwise, there is no date yet and it should remain 'null'\n\n      // else there is already a phase (which means we're in the edit form)\n      // and we take it from the attrs\n    } else {\n      if (phaseAttrs.start_at) {\n        startDate = moment(phaseAttrs.start_at);\n      }\n    }\n\n    return startDate;\n  };\n\n  render() {\n    const { loaded } = this.state;\n\n    if (loaded) {\n      const {\n        errors,\n        phase,\n        attributeDiff,\n        processing,\n        phaseFiles,\n        submitState,\n      } = this.state;\n      const phaseAttrs = phase\n        ? { ...phase.data.attributes, ...attributeDiff }\n        : { ...attributeDiff };\n      const startDate = this.getStartDate();\n      const endDate = phaseAttrs.end_at ? moment(phaseAttrs.end_at) : null;\n\n      return (\n        <>\n          <SectionTitle>\n            {phase && <FormattedMessage {...messages.editPhaseTitle} />}\n            {!phase && <FormattedMessage {...messages.newPhaseTitle} />}\n          </SectionTitle>\n\n          <PhaseForm onSubmit={this.handleOnSubmit}>\n            <Section>\n              <SectionField>\n                <InputMultilocWithLocaleSwitcher\n                  id=\"title\"\n                  label={<FormattedMessage {...messages.titleLabel} />}\n                  type=\"text\"\n                  valueMultiloc={phaseAttrs.title_multiloc}\n                  onChange={this.handleTitleMultilocOnChange}\n                />\n                <Error apiErrors={errors && errors.title_multiloc} />\n              </SectionField>\n\n              <SectionField>\n                <ParticipationContext\n                  phaseId={phase ? phase.data.id : null}\n                  onSubmit={this.handleParcticipationContextOnSubmit}\n                  onChange={this.handleParticipationContextOnChange}\n                  apiErrors={errors}\n                />\n              </SectionField>\n\n              <SectionField>\n                <Label>\n                  <FormattedMessage {...messages.datesLabel} />\n                </Label>\n                <DateRangePicker\n                  startDateId={'startDate'}\n                  endDateId={'endDate'}\n                  startDate={startDate}\n                  endDate={endDate}\n                  onDatesChange={this.handleDateUpdate}\n                />\n                <Error apiErrors={errors && errors.start_at} />\n                <Error apiErrors={errors && errors.end_at} />\n              </SectionField>\n\n              <SectionField className=\"fullWidth\">\n                <QuillMultilocWithLocaleSwitcher\n                  id=\"description\"\n                  label={this.quillMultilocLabel}\n                  valueMultiloc={phaseAttrs.description_multiloc}\n                  onChange={this.handleEditorOnChange}\n                  withCTAButton\n                />\n                <Error apiErrors={errors && errors.description_multiloc} />\n              </SectionField>\n\n              <SectionField>\n                <FileUploader\n                  onFileAdd={this.handlePhaseFileOnAdd}\n                  onFileRemove={this.handlePhaseFileOnRemove}\n                  files={phaseFiles}\n                  errors={errors}\n                />\n              </SectionField>\n\n              {errors && errors.project && (\n                <SectionField>\n                  <Error apiErrors={errors.project} />\n                </SectionField>\n              )}\n              {errors && errors.base && (\n                <SectionField>\n                  <Error apiErrors={errors.base} />\n                </SectionField>\n              )}\n            </Section>\n\n            <SubmitWrapper\n              loading={processing}\n              status={submitState}\n              messages={{\n                buttonSave: messages.saveLabel,\n                buttonSuccess: messages.saveSuccessLabel,\n                messageError: messages.saveErrorMessage,\n                messageSuccess: messages.saveSuccessMessage,\n              }}\n            />\n          </PhaseForm>\n        </>\n      );\n    }\n\n    return null;\n  }\n}\n\nconst AdminProjectTimelineEditWithHOCs = injectIntl<Props>(\n  AdminProjectTimelineEdit\n);\n\nconst Data = adopt<DataProps, InputProps & WithRouterProps>({\n  phases: ({ params, render }) => (\n    <GetPhases projectId={params.projectId}>{render}</GetPhases>\n  ),\n});\n\nexport default withRouter((inputProps: InputProps & WithRouterProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => (\n      <AdminProjectTimelineEditWithHOCs {...dataProps} {...inputProps} />\n    )}\n  </Data>\n));\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  startDatePlaceholder: {\n    id: 'app.components.admin.DateRangePicker.startDatePlaceholder',\n    defaultMessage: 'Start Date',\n  },\n  endDatePlaceholder: {\n    id: 'app.components.admin.DateRangePicker.endDatePlaceholder',\n    defaultMessage: 'End Date',\n  },\n});\n"],"sourceRoot":""}