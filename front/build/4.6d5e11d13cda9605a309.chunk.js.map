{"version":3,"sources":["webpack:///./app/components/PostShowComponents/OfficialFeedback/index.tsx","webpack:///./app/containers/SpamReport/messages.ts","webpack:///./app/components/PostShowComponents/Body.tsx","webpack:///./app/resources/GetUser.tsx","webpack:///./app/services/spamReports.ts","webpack:///./app/containers/SpamReport/index.tsx","webpack:///./app/containers/SpamReport/SpamReportForm.tsx","webpack:///./app/components/PostShowComponents/OfficialFeedback/OfficialFeedbackFeed.tsx"],"names":["Container","styled","div","memo","postId","postType","permissionToPost","a11y_pronounceLatestOfficialFeedbackPost","className","locale","tenantLocales","isBoolean","isNilOrError","formType","editingAllowed","defineMessages","wrong_content","id","defaultMessage","inappropriate","other","otherReasonPlaceholder","buttonSave","buttonSuccess","messageSuccess","messageError","body","translateButtonClicked","color","windowSize","theme","useTheme","smallerThanSmallTablet","windowWidth","viewportWidths","smallTablet","textColor","colorText","fontSize","fontWeight","outletComponents","length","dangerouslySetInnerHTML","__html","GetUser","props","state","user","undefined","this","slug","resetOnChange","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","tap","setState","switchMap","isString","userByIdStream","observable","userBySlugStream","of","subscribe","data","forEach","subscription","unsubscribe","children","React","Component","targetType","targetId","spamReport","streams","add","API_PATH","spam_report","response","fetchAllWith","apiEndpoint","reason_code","diff","other_reason","errors","event","preventDefault","loading","sendSpamReport","resourceType","resourceId","then","saved","catch","e","isCLErrorJSON","json","ModalContentContainer","reasonCodes","onReasonChange","handleSelectionChange","onTextChange","handleReasonTextUpdate","onSubmit","handleSubmit","PureComponent","StyledRadio","Radio","fontSizes","base","ReportReason","SpamReportForm","formatMessage","intl","submitStatus","SectionField","map","reasonCode","onChange","currentValue","name","label","messages","value","key","classNames","timeout","enter","exit","placeholder","buttonStyle","status","injectIntl","FeedbackHeader","isRtl","media","smallerThanMinTablet","FeedbackTitle","h2","colors","clRedError","large","FeedbackSubtitle","StyledOfficialFeedbackPost","OfficialFeedbackPost","StyledSpan","span","LoadMoreButton","Button","OfficialFeedbackFeed","officialFeedbacks","officialFeedbacksList","querying","hasMore","loadingMore","onLoadMore","updateDate","attributes","updated_at","created_at","formattedDate","FormattedDate","year","month","day","FormattedMessage","officialUpdates","lastUpdate","values","lastUpdateDate","officialFeedbackPost","i","icon","onClick","text","showPreviousUpdates","processing","Data","adopt","render","OfficialFeedbackFeedWithIntl","inputProps","dataProps"],"mappings":"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","file":"4.6d5e11d13cda9605a309.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { isBoolean } from 'lodash-es';\n\n// resource hooks\nimport useLocale from 'hooks/useLocale';\nimport useAppConfigurationLocales from 'hooks/useAppConfigurationLocales';\n\n// components\nimport OfficialFeedbackForm from './OfficialFeedbackForm';\nimport OfficialFeedbackFeed from './OfficialFeedbackFeed';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\n\n// stylings\nimport styled from 'styled-components';\n\ninterface Props {\n  postId: string;\n  postType: 'idea' | 'initiative';\n  permissionToPost: boolean | undefined;\n  a11y_pronounceLatestOfficialFeedbackPost?: boolean;\n  className?: string;\n}\n\nconst Container = styled.div``;\n\nconst OfficialFeedback = memo<Props>(\n  ({\n    postId,\n    postType,\n    permissionToPost,\n    a11y_pronounceLatestOfficialFeedbackPost,\n    className,\n  }) => {\n    const locale = useLocale();\n    const tenantLocales = useAppConfigurationLocales();\n\n    if (\n      isBoolean(permissionToPost) &&\n      !isNilOrError(locale) &&\n      !isNilOrError(tenantLocales)\n    ) {\n      return (\n        <Container className={className || ''}>\n          {permissionToPost && (\n            <OfficialFeedbackForm\n              locale={locale}\n              tenantLocales={tenantLocales}\n              formType=\"new\"\n              postId={postId}\n              postType={postType}\n            />\n          )}\n\n          <OfficialFeedbackFeed\n            postId={postId}\n            postType={postType}\n            editingAllowed={permissionToPost}\n            a11y_pronounceLatestOfficialFeedbackPost={\n              a11y_pronounceLatestOfficialFeedbackPost\n            }\n          />\n        </Container>\n      );\n    }\n\n    return null;\n  }\n);\n\nexport default OfficialFeedback;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  wrong_content: {\n    id: 'app.containers.SpamReport.wrong_content',\n    defaultMessage: 'This content does not belong here',\n  },\n  inappropriate: {\n    id: 'app.containers.SpamReport.inappropriate',\n    defaultMessage: 'I find this content inappropriate or offensive',\n  },\n  other: {\n    id: 'app.containers.SpamReport.other',\n    defaultMessage: 'Other reason',\n  },\n  otherReasonPlaceholder: {\n    id: 'app.containers.SpamReport.otherReasonPlaceholder',\n    defaultMessage: 'Description',\n  },\n  buttonSave: {\n    id: 'app.containers.SpamReport.buttonSave',\n    defaultMessage: 'Report',\n  },\n  buttonSuccess: {\n    id: 'app.containers.SpamReport.buttonSuccess',\n    defaultMessage: 'Success',\n  },\n  messageSuccess: {\n    id: 'app.containers.SpamReport.messageSuccess',\n    defaultMessage: 'Your report has been sent',\n  },\n  messageError: {\n    id: 'app.containers.SpamReport.messageError',\n    defaultMessage: 'There was an error sending your report, please try again.',\n  },\n});\n","import React, { memo } from 'react';\nimport useWindowSize from 'hooks/useWindowSize';\n\n// components\nimport QuillEditedContent from 'components/UI/QuillEditedContent';\n\n// typings\nimport { Locale } from 'typings';\n\n// styling\nimport styled, { useTheme } from 'styled-components';\nimport { viewportWidths } from 'utils/styleUtils';\nimport Outlet from 'components/Outlet';\n\nconst Container = styled.div``;\n\ninterface Props {\n  postId: string;\n  body: string;\n  locale: Locale;\n  translateButtonClicked?: boolean;\n  className?: string;\n  postType: 'idea' | 'initiative';\n  color?: string;\n}\n\nconst Body = memo<Props>(\n  ({\n    postId,\n    body,\n    locale,\n    translateButtonClicked,\n    className,\n    postType,\n    color,\n  }) => {\n    const windowSize = useWindowSize();\n    const theme: any = useTheme();\n    const smallerThanSmallTablet = windowSize\n      ? windowSize.windowWidth <= viewportWidths.smallTablet\n      : false;\n\n    return (\n      <Container id={`e2e-${postType}-description`} className={className}>\n        <QuillEditedContent\n          textColor={color || theme.colorText}\n          fontSize={smallerThanSmallTablet ? 'base' : 'large'}\n          fontWeight={400}\n        >\n          <div aria-live=\"polite\">\n            <Outlet\n              id=\"app.components.PostShowComponents.Body.translation\"\n              postId={postId}\n              locale={locale}\n              postType={postType}\n              body={body}\n              translateButtonClicked={translateButtonClicked}\n            >\n              {(outletComponents) =>\n                outletComponents.length > 0 ? (\n                  <>{outletComponents}</>\n                ) : (\n                  <span dangerouslySetInnerHTML={{ __html: body }} />\n                )\n              }\n            </Outlet>\n          </div>\n        </QuillEditedContent>\n      </Container>\n    );\n  }\n);\n\nexport default Body;\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { Subscription, BehaviorSubject, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport { IUserData, userBySlugStream, userByIdStream } from 'services/users';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  id?: string | null;\n  slug?: string | null;\n  resetOnChange?: boolean;\n}\n\ntype children = (renderProps: GetUserChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  user: IUserData | undefined | null | Error;\n}\n\nexport type GetUserChildProps = IUserData | undefined | null | Error;\n\nexport default class GetUser extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  static defaultProps = {\n    resetOnChange: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      user: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { id, slug, resetOnChange } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ id, slug });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          tap(() => resetOnChange && this.setState({ user: undefined })),\n          switchMap(({ id, slug }) => {\n            if (isString(id)) {\n              return userByIdStream(id).observable;\n            } else if (isString(slug)) {\n              return userBySlugStream(slug).observable;\n            }\n\n            return of(null);\n          })\n        )\n        .subscribe((user) => {\n          this.setState({ user: !isNilOrError(user) ? user.data : user });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { id, slug } = this.props;\n    this.inputProps$.next({ id, slug });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { user } = this.state;\n    return (children as children)(user);\n  }\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams from 'utils/streams';\nimport { IRelationship } from 'typings';\n\nexport interface Report {\n  user_id?: string;\n  reason_code: 'wrong_content' | 'inappropriate' | 'other';\n  other_reason?: string;\n}\n\ninterface ILinks {\n  self: string;\n  first: string;\n  prev: string;\n  next: string;\n  last: string;\n}\n\nexport interface SpamReportResponse {\n  data: {\n    id: string;\n    type: 'spam_report';\n    attributes: Report;\n  };\n  relationships: {\n    [key: string]: IRelationship[];\n  };\n  links: ILinks;\n}\n\nexport async function sendSpamReport(\n  targetType: 'comments' | 'ideas' | 'initiatives',\n  targetId: string,\n  spamReport: Report\n) {\n  const response = await streams.add<SpamReportResponse>(\n    `${API_PATH}/${targetType}/${targetId}/spam_reports`,\n    { spam_report: spamReport }\n  );\n\n  await streams.fetchAllWith({\n    apiEndpoint: [\n      `${API_PATH}/inappropriate_content_flags`,\n      `${API_PATH}/moderations`,\n    ],\n  });\n\n  return response;\n}\n","// libraries\nimport React, { PureComponent } from 'react';\n\n// Services\nimport { sendSpamReport, Report } from 'services/spamReports';\n\n// Components\nimport ReportForm from './SpamReportForm';\nimport { ModalContentContainer } from 'components/UI/Modal';\n\n// Typings\nimport { CRUDParams, CLErrorsJSON } from 'typings';\n\n// Utils\nimport { isCLErrorJSON } from 'utils/errorUtils';\n\ninterface Props {\n  resourceType: 'comments' | 'ideas' | 'initiatives';\n  resourceId: string;\n  className?: string;\n}\n\ninterface State {\n  diff: Report | null;\n  loading: boolean;\n  errors: CLErrorsJSON | Error | null;\n  saved: boolean;\n}\n\nclass SpamReportForm extends PureComponent<Props, State & CRUDParams> {\n  reasonCodes: Report['reason_code'][] = [\n    'wrong_content',\n    'inappropriate',\n    'other',\n  ];\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      diff: null,\n      loading: false,\n      errors: null,\n      saved: false,\n    };\n  }\n\n  handleSelectionChange = (reason_code) => {\n    const diff = {\n      ...this.state.diff,\n      reason_code,\n    } as Report;\n\n    // Clear the \"other reason\" text when it's not necessary\n    if (reason_code !== 'other') {\n      delete diff.other_reason;\n    }\n\n    this.setState({ diff, errors: null });\n  };\n\n  handleReasonTextUpdate = (other_reason) => {\n    this.setState({\n      diff: { ...this.state.diff, other_reason } as Report,\n      errors: null,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!this.state.diff) {\n      return;\n    }\n\n    this.setState({ loading: true });\n\n    sendSpamReport(\n      this.props.resourceType,\n      this.props.resourceId,\n      this.state.diff\n    )\n      .then(() => {\n        this.setState({\n          loading: false,\n          saved: true,\n          errors: null,\n          diff: null,\n        });\n      })\n      .catch((e) => {\n        if (isCLErrorJSON(e)) {\n          this.setState({ errors: e.json.errors, loading: false });\n        } else {\n          this.setState({ errors: e, loading: false });\n        }\n      });\n  };\n\n  render() {\n    return (\n      <ModalContentContainer>\n        <ReportForm\n          reasonCodes={this.reasonCodes}\n          diff={this.state.diff}\n          onReasonChange={this.handleSelectionChange}\n          onTextChange={this.handleReasonTextUpdate}\n          onSubmit={this.handleSubmit}\n          loading={this.state.loading}\n          saved={this.state.saved}\n          errors={this.state.errors}\n        />\n      </ModalContentContainer>\n    );\n  }\n}\n\nexport default SpamReportForm;\n","// libraries\nimport React from 'react';\n\n// Services\nimport { Report } from 'services/spamReports';\n\n// Utils\nimport getSubmitState from 'utils/getSubmitState';\n\n// Components\nimport { SectionField } from 'components/admin/Section';\nimport { Radio } from 'cl2-component-library';\nimport TextArea from 'components/UI/TextArea';\nimport SubmitWrapper from 'components/admin/SubmitWrapper';\n\n// i18n\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from './messages';\n\n// animation\nimport CSSTransition from 'react-transition-group/CSSTransition';\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\n\n// Style\nimport styled from 'styled-components';\nimport { fontSizes } from 'utils/styleUtils';\n\nconst timeout = 300;\n\nconst StyledRadio = styled(Radio)`\n  margin-bottom: 10px;\n  cursor: pointer;\n\n  .text {\n    color: #333;\n    font-size: ${fontSizes.base}px;\n    font-weight: 400;\n    line-height: 22px;\n  }\n`;\n\nconst ReportReason = styled.div`\n  transition: all ${timeout}ms cubic-bezier(0.165, 0.84, 0.44, 1);\n  overflow: hidden;\n\n  &.reason-enter {\n    max-height: 0px;\n    opacity: 0;\n\n    &.reason-enter-active {\n      max-height: 180px;\n      opacity: 1;\n    }\n  }\n\n  &.reason-exit {\n    max-height: 180px;\n    opacity: 1;\n\n    &.reason-exit-active {\n      max-height: 0px;\n      opacity: 0;\n    }\n  }\n`;\n\n// Typings\nimport { CRUDParams } from 'typings';\n\ninterface Props extends CRUDParams {\n  reasonCodes: Report['reason_code'][];\n  diff: Report | null;\n  onReasonChange: { (value: Report['reason_code']): void };\n  onTextChange: { (value: string): void };\n  onSubmit: { (event): void };\n}\n\ninterface State {}\n\nclass SpamReportForm extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const submitStatus = getSubmitState({\n      errors: this.props.errors,\n      saved: this.props.saved,\n      diff: this.props.diff,\n    });\n\n    return (\n      <form onSubmit={this.props.onSubmit}>\n        <SectionField>\n          {this.props.reasonCodes.map((reasonCode) => (\n            <StyledRadio\n              onChange={this.props.onReasonChange}\n              currentValue={this.props.diff ? this.props.diff.reason_code : ''}\n              name=\"reasonCode\"\n              label={formatMessage(messages[reasonCode])}\n              value={reasonCode}\n              id={`reason-${reasonCode}`}\n              key={reasonCode}\n            />\n          ))}\n        </SectionField>\n\n        <TransitionGroup>\n          {this.props.diff && this.props.diff.reason_code === 'other' ? (\n            <CSSTransition\n              classNames=\"reason\"\n              timeout={timeout}\n              enter={true}\n              exit={true}\n            >\n              <ReportReason>\n                <SectionField>\n                  <TextArea\n                    name=\"reasonText\"\n                    value={\n                      this.props.diff ? this.props.diff.other_reason || '' : ''\n                    }\n                    onChange={this.props.onTextChange}\n                    placeholder={formatMessage(messages.otherReasonPlaceholder)}\n                  />\n                </SectionField>\n              </ReportReason>\n            </CSSTransition>\n          ) : null}\n        </TransitionGroup>\n\n        <SubmitWrapper\n          buttonStyle=\"primary\"\n          status={submitStatus}\n          loading={this.props.loading}\n          messages={messages}\n        />\n      </form>\n    );\n  }\n}\n\nexport default injectIntl<Props>(SpamReportForm);\n","import React, { PureComponent } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { adopt } from 'react-adopt';\n\n// components\nimport Button from 'components/UI/Button';\nimport OfficialFeedbackPost from './OfficialFeedbackPost';\n\n// resources\nimport GetOfficialFeedbacks, {\n  GetOfficialFeedbacksChildProps,\n} from 'resources/GetOfficialFeedbacks';\n\n// styles\nimport styled from 'styled-components';\nimport { colors, fontSizes, media, isRtl } from 'utils/styleUtils';\n\n// i18n\nimport messages from './messages';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps, FormattedDate } from 'react-intl';\n\nconst Container = styled.div`\n  &.hasTopMargin {\n    margin-top: 60px;\n  }\n`;\n\nconst FeedbackHeader = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n\n  ${isRtl`\n    flex-direction: row-reverse;\n  `}\n\n  ${media.smallerThanMinTablet`\n    flex-direction: column;\n    align-items: stretch;\n    justify-content: left;\n  `}\n`;\n\nconst FeedbackTitle = styled.h2`\n  color: ${colors.clRedError};\n  font-size: ${fontSizes.large}px;\n  line-height: normal;\n  font-weight: 600;\n  padding: 0;\n  margin: 0;\n`;\n\nconst FeedbackSubtitle = styled.div`\n  color: ${colors.clRedError};\n  font-size: ${fontSizes.base}px;\n  line-height: normal;\n  font-weight: 400;\n\n  ${isRtl`\n    & span {\n        display: flex;\n        flex-direction: row-reverse;\n    }\n  `}\n`;\n\nconst StyledOfficialFeedbackPost = styled(OfficialFeedbackPost)`\n  margin-bottom: 15px;\n\n  &:last {\n    margin-bottom: 0;\n  }\n`;\n\nconst StyledSpan = styled.span`\n  font-weight: 400;\n`;\n\nconst LoadMoreButton = styled(Button)`\n  margin-top: 10px;\n`;\n\ninterface InputProps {\n  postId: string;\n  postType: 'idea' | 'initiative';\n  editingAllowed: boolean | undefined;\n  className?: string;\n  a11y_pronounceLatestOfficialFeedbackPost?: boolean;\n}\n\ninterface DataProps {\n  officialFeedbacks: GetOfficialFeedbacksChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface State {}\n\nclass OfficialFeedbackFeed extends PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  render() {\n    const {\n      officialFeedbacks,\n      editingAllowed,\n      className,\n      a11y_pronounceLatestOfficialFeedbackPost,\n    } = this.props;\n\n    if (officialFeedbacks) {\n      const {\n        officialFeedbacksList,\n        querying,\n        hasMore,\n        loadingMore,\n        onLoadMore,\n      } = officialFeedbacks;\n\n      if (\n        !isNilOrError(officialFeedbacksList) &&\n        officialFeedbacksList.data &&\n        officialFeedbacksList.data.length > 0\n      ) {\n        const updateDate =\n          officialFeedbacksList.data[0].attributes.updated_at ||\n          officialFeedbacksList.data[0].attributes.created_at;\n        const formattedDate = (\n          <FormattedDate\n            value={updateDate}\n            year=\"numeric\"\n            month=\"long\"\n            day=\"numeric\"\n          />\n        );\n\n        return (\n          <Container\n            aria-live=\"polite\"\n            className={`${className} ${editingAllowed ? 'hasTopMargin' : ''}`}\n          >\n            <FeedbackHeader>\n              <FeedbackTitle>\n                <FormattedMessage {...messages.officialUpdates} />\n              </FeedbackTitle>\n              <FeedbackSubtitle>\n                <FormattedMessage\n                  {...messages.lastUpdate}\n                  values={{\n                    lastUpdateDate: <StyledSpan>{formattedDate}</StyledSpan>,\n                  }}\n                />\n              </FeedbackSubtitle>\n            </FeedbackHeader>\n\n            {officialFeedbacksList.data.map((officialFeedbackPost, i) => {\n              return (\n                <StyledOfficialFeedbackPost\n                  key={officialFeedbackPost.id}\n                  editingAllowed={editingAllowed}\n                  officialFeedbackPost={officialFeedbackPost}\n                  postType=\"initiative\"\n                  a11y_pronounceLatestOfficialFeedbackPost={\n                    i === 0 && a11y_pronounceLatestOfficialFeedbackPost\n                  }\n                />\n              );\n            })}\n\n            {!querying && hasMore && (\n              <LoadMoreButton\n                buttonStyle=\"secondary-outlined\"\n                icon=\"showMore\"\n                onClick={onLoadMore}\n                text={<FormattedMessage {...messages.showPreviousUpdates} />}\n                processing={loadingMore}\n              />\n            )}\n          </Container>\n        );\n      }\n    }\n\n    return null;\n  }\n}\n\nconst Data = adopt<DataProps, InputProps>({\n  officialFeedbacks: ({ postId, postType, render }) => (\n    <GetOfficialFeedbacks postId={postId} postType={postType}>\n      {render}\n    </GetOfficialFeedbacks>\n  ),\n});\n\nconst OfficialFeedbackFeedWithIntl = injectIntl<Props>(OfficialFeedbackFeed);\n\nconst WrappedOfficialFeedback = (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => (\n      <OfficialFeedbackFeedWithIntl {...inputProps} {...dataProps} />\n    )}\n  </Data>\n);\n\nexport default WrappedOfficialFeedback;\n"],"sourceRoot":""}