{"version":3,"sources":["webpack:///./app/modules/commercial/user_custom_fields/admin/containers/CustomFields/RegistrationCustomFieldEdit/RegistrationCustomFieldOptions.tsx","webpack:///./app/modules/commercial/user_custom_fields/hooks/useUserCustomFieldOptions.ts"],"names":["RegistrationCustomFieldOptions","memo","customField","formatMessage","intl","userCustomFieldOptions","id","localize","userCustomFieldId","handleDeleteClick","userCustomFieldOptionId","event","deleteMessage","messages","customFieldOptionDeletionConfirmation","preventDefault","window","confirm","deleteUserCustomFieldOption","isNilOrError","ButtonWrapper","buttonStyle","icon","linkTo","addOption","SortableList","items","onReorder","customFieldOptionId","ordering","reorderUserCustomFieldOption","className","key","length","itemsList","handleDragRow","handleDropRow","map","userCustomFieldOption","index","SortableRow","moveRow","dropRow","lastItem","TextCell","attributes","title_multiloc","editButtonLabel","onClick","deleteButtonLabel","injectIntl","customFieldId","useState","undefined","setUserCustomFieldOptions","useEffect","subscription","userCustomFieldOptionsStream","observable","subscribe","data","unsubscribe"],"mappings":"2QAAA,M,ybAAA,YACA,YAIA,YAOA,eACA,eAGA,YAKA,eACA,YAGA,eACA,Y,+HAOA,IAAMA,GAAiC,IAAAC,OACrC,YAAyE,IAAtEC,EAAsE,EAAtEA,YAAqBC,EAAiD,EAAzDC,KAAQD,cAChBE,GAAyB,aAA0BH,EAAYI,IAC/DC,GAAW,eACXC,EAAoBN,EAAYI,GAWhCG,EAAoB,SAACC,GAAD,OAAqC,SAC7DC,GAEA,IAAMC,EAAgBT,EACpBU,UAASC,uCAEXH,EAAMI,iBAEFC,OAAOC,QAAQL,KACjB,IAAAM,6BAA4BV,EAAmBE,KAInD,OAAK,IAAAS,cAAad,GAkEX,KAhEH,gDACE,wBAAC,EAAAe,cAAD,KACE,wBAAC,UAAD,CACEC,YAAY,UACZC,KAAK,cACLC,OAAM,qDAAgDf,EAAhD,iBAELL,EAAcU,UAASW,aAG5B,wBAAC,EAAAC,aAAD,CACEC,MAAOrB,EACPsB,UApC+B,SACrCC,EACAC,IAEA,IAAAC,8BAA6BtB,EAAmBoB,EAAqB,CACnEC,cAgCIE,UAAU,kCACVzB,GAAG,uBACH0B,IAAK3B,EAAuB4B,SAE3B,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,cAAeC,EAA7B,EAA6BA,cAA7B,OACC,gDACGF,EAAUG,KACT,SACEC,EACAC,GAEA,IAAM7B,EAA0B4B,EAAsBhC,GACtD,OACE,wBAAC,EAAAkC,YAAD,CACER,IAAKtB,EACLJ,GAAII,EACJ6B,MAAOA,EACPE,QAASN,EACTO,QAASN,EACTO,SAAUJ,IAAUlC,EAAuB4B,OAAS,GAEpD,wBAAC,EAAAW,SAAD,CAAUb,UAAU,UACjBxB,EACC+B,EAAsBO,WAAWC,iBAGrC,wBAAC,UAAD,CACEvB,OAAM,qDAAgDf,EAAhD,oBAA6EE,GACnFW,YAAY,YACZC,KAAK,QAEJnB,EAAcU,UAASkC,kBAE1B,wBAAC,UAAD,CACEC,QAASvC,EAAkBC,GAC3BW,YAAY,OACZC,KAAK,UAEJnB,EAAcU,UAASoC,gC,GAiBnC,IAAAC,YAAWlD,G,4HC7HX,SAAmCmD,GAChD,OAA4D,IAAAC,eAE1DC,GAFF,qBAAOhD,EAAP,KAA+BiD,EAA/B,KAcA,OAVA,IAAAC,YAAU,WACR,IAAMC,GAAe,IAAAC,8BACnBN,GACAO,WAAWC,WAAU,SAACtD,GACtBiD,EAA0BjD,EAAuBuD,SAGnD,OAAO,kBAAMJ,EAAaK,iBACzB,CAACV,IAEG9C,G,mBArBT,YACA","file":"171.def170b88858dd1a4d2a.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// services\nimport { IUserCustomFieldData } from '../../../../services/userCustomFields';\nimport {\n  IUserCustomFieldOptionData,\n  reorderUserCustomFieldOption,\n  deleteUserCustomFieldOption,\n} from '../../../../services/userCustomFieldOptions';\n\n// hooks\nimport useUserCustomFieldOptions from '../../../../hooks/useUserCustomFieldOptions';\nimport useLocalize from 'hooks/useLocalize';\n\n// components\nimport {\n  SortableList,\n  SortableRow,\n  TextCell,\n} from 'components/admin/ResourceList';\nimport Button from 'components/UI/Button';\nimport { ButtonWrapper } from 'components/admin/PageWrapper';\n\n// i18n\nimport messages from '../messages';\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\n\nexport interface Props {\n  customField: IUserCustomFieldData;\n}\n\nconst RegistrationCustomFieldOptions = memo(\n  ({ customField, intl: { formatMessage } }: Props & InjectedIntlProps) => {\n    const userCustomFieldOptions = useUserCustomFieldOptions(customField.id);\n    const localize = useLocalize();\n    const userCustomFieldId = customField.id;\n\n    const handleReorderCustomFieldOption = (\n      customFieldOptionId: string,\n      ordering: number\n    ) => {\n      reorderUserCustomFieldOption(userCustomFieldId, customFieldOptionId, {\n        ordering,\n      });\n    };\n\n    const handleDeleteClick = (userCustomFieldOptionId: string) => (\n      event: React.FormEvent<any>\n    ) => {\n      const deleteMessage = formatMessage(\n        messages.customFieldOptionDeletionConfirmation\n      );\n      event.preventDefault();\n\n      if (window.confirm(deleteMessage)) {\n        deleteUserCustomFieldOption(userCustomFieldId, userCustomFieldOptionId);\n      }\n    };\n\n    if (!isNilOrError(userCustomFieldOptions)) {\n      return (\n        <>\n          <ButtonWrapper>\n            <Button\n              buttonStyle=\"cl-blue\"\n              icon=\"plus-circle\"\n              linkTo={`/admin/settings/registration/custom-fields/${userCustomFieldId}/options/new`}\n            >\n              {formatMessage(messages.addOption)}\n            </Button>\n          </ButtonWrapper>\n          <SortableList\n            items={userCustomFieldOptions}\n            onReorder={handleReorderCustomFieldOption}\n            className=\"areas-list e2e-admin-areas-list\"\n            id=\"e2e-admin-areas-list\"\n            key={userCustomFieldOptions.length}\n          >\n            {({ itemsList, handleDragRow, handleDropRow }) => (\n              <>\n                {itemsList.map(\n                  (\n                    userCustomFieldOption: IUserCustomFieldOptionData,\n                    index: number\n                  ) => {\n                    const userCustomFieldOptionId = userCustomFieldOption.id;\n                    return (\n                      <SortableRow\n                        key={userCustomFieldOptionId}\n                        id={userCustomFieldOptionId}\n                        index={index}\n                        moveRow={handleDragRow}\n                        dropRow={handleDropRow}\n                        lastItem={index === userCustomFieldOptions.length - 1}\n                      >\n                        <TextCell className=\"expand\">\n                          {localize(\n                            userCustomFieldOption.attributes.title_multiloc\n                          )}\n                        </TextCell>\n                        <Button\n                          linkTo={`/admin/settings/registration/custom-fields/${userCustomFieldId}/options/${userCustomFieldOptionId}`}\n                          buttonStyle=\"secondary\"\n                          icon=\"edit\"\n                        >\n                          {formatMessage(messages.editButtonLabel)}\n                        </Button>\n                        <Button\n                          onClick={handleDeleteClick(userCustomFieldOptionId)}\n                          buttonStyle=\"text\"\n                          icon=\"delete\"\n                        >\n                          {formatMessage(messages.deleteButtonLabel)}\n                        </Button>\n                      </SortableRow>\n                    );\n                  }\n                )}\n              </>\n            )}\n          </SortableList>\n        </>\n      );\n    }\n\n    return null;\n  }\n);\n\nexport default injectIntl(RegistrationCustomFieldOptions);\n","import { useState, useEffect } from 'react';\nimport {\n  userCustomFieldOptionsStream,\n  IUserCustomFieldOptionData,\n} from '../services/userCustomFieldOptions';\n\nexport default function useUserCustomFieldOptions(customFieldId: string) {\n  const [userCustomFieldOptions, setUserCustomFieldOptions] = useState<\n    IUserCustomFieldOptionData[] | undefined | null | Error\n  >(undefined);\n\n  useEffect(() => {\n    const subscription = userCustomFieldOptionsStream(\n      customFieldId\n    ).observable.subscribe((userCustomFieldOptions) => {\n      setUserCustomFieldOptions(userCustomFieldOptions.data);\n    });\n\n    return () => subscription.unsubscribe();\n  }, [customFieldId]);\n\n  return userCustomFieldOptions;\n}\n"],"sourceRoot":""}