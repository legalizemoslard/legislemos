{"version":3,"sources":["webpack:///./app/resources/GetInitiatives.tsx","webpack:///./app/services/initiativeStatuses.ts","webpack:///./app/resources/GetInitiativeStatuses.tsx","webpack:///./app/services/initiatives.ts","webpack:///./app/resources/GetTopics.tsx"],"names":["GetInitiatives","props","pageNumber","pageSize","author","authorId","sort","topics","areas","initiative_status","initiativeStatusId","publication_status","publicationStatus","bounding_box","boundingBox","assignee","feedback_needed","feedbackNeeded","search","undefined","queryParamsShaped","propsToQueryParamsShape","Object","keys","filter","key","forEach","queryParameters","inputPropsQueryParameters","omitBy","isNil","state","loadingMore","queryParameters$","next","initiativeStatus","initiativeFilters","paramsToOmit","defaultQueryParameters","getQueryParametersFromProps","length","omit","getQueryParameters","list","hasMore","querying","sortAttribute","getSortAttribute","sortDirection","getSortDirection","currentPage","lastPage","BehaviorSubject","subscriptions","startAccumulatorValue","this","initiatives","pipe","distinctUntilChanged","prev","isEqual","type","switchMap","oldPageNumber","newPageNumber","initiativesStream","observable","map","subscribe","setState","data","getPageNumberFromUrl","links","self","last","mergeScan","acc","newQueryParameters","oldQueryParamsWithoutPageNumber","cloneDeep","newQueryParamsWithoutPageNumber","isLoadingMore","selfLink","get","lastLink","isString","unionBy","prevProps","_prevState","children","prevPropsWithoutChildren","nextPropsWithoutChildren","subscription","unsubscribe","onLoadMore","loadMore","onChangePage","handleChangePage","onChangeSearchTerm","handleSearchOnChange","onChangeSorting","handleSortOnChange","onChangeTopics","handleTopicsOnChange","onChangeAreas","handleAreasOnchange","onChangeStatus","handleStatusOnChange","onChangePublicationStatus","handlePublicationStatusOnChange","onChangeAssignee","handleAssigneeOnChange","onChangeFeedbackFilter","handleFeedbackFilterOnChange","onInitiativeFiltering","handleInitiativeFiltering","onResetParams","handleResetParamsToProps","React","Component","initiativeId","streams","apiEndpoint","API_PATH","GetInitiativeStatuses","initiativeStatuses","initiativeStatusesStream","isNilOrError","initiativeSlug","streamParams","cacheStream","initiativeByIdStream","object","add","initiative","response","update","fetchAllWith","Promise","all","first","toPromise","delete","GetTopics","topicIds","code","exclude_code","projectId","inputProps$","projectTopicsStream","topic","relationships","id","combineLatest","topicId","topicByIdStream","of","topicsStream"],"mappings":"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","file":"10.27f4ed5439de9be50248.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  get,\n  isString,\n  isEqual,\n  omit,\n  cloneDeep,\n  omitBy,\n  isNil,\n  unionBy,\n} from 'lodash-es';\nimport { Subscription, BehaviorSubject } from 'rxjs';\nimport {\n  map,\n  distinctUntilChanged,\n  mergeScan,\n  switchMap,\n} from 'rxjs/operators';\nimport {\n  initiativesStream,\n  IInitiativeData,\n  InitiativePublicationStatus,\n} from 'services/initiatives';\nimport {\n  getPageNumberFromUrl,\n  getSortAttribute,\n  getSortDirection,\n  SortDirection,\n} from 'utils/paginationUtils';\n\nexport type SortAttribute = 'new' | 'author_name' | 'upvotes_count' | 'status';\nexport type Sort =\n  | 'new'\n  | '-new'\n  | 'author_name'\n  | '-author_name'\n  | 'upvotes_count'\n  | '-upvotes_count'\n  | 'status'\n  | '-status'\n  | 'random';\nexport type PublicationStatus = InitiativePublicationStatus;\n\nexport interface InputProps {\n  type: 'load-more' | 'paginated';\n  pageNumber?: number;\n  pageSize?: number;\n  authorId?: string;\n  sort?: Sort;\n  search?: string;\n  topics?: string[];\n  areas?: string[];\n  initiativeStatusId?: string;\n  publicationStatus?: PublicationStatus;\n  boundingBox?: number[];\n  assignee?: string;\n  feedbackNeeded?: boolean;\n}\n\nexport interface IQueryParameters {\n  'page[number]': number;\n  'page[size]': number;\n  author: string | undefined | null;\n  sort: Sort;\n  search: string | undefined | null;\n  topics: string[] | undefined | null;\n  areas: string[] | undefined | null;\n  initiative_status: string | undefined | null;\n  publication_status: PublicationStatus | undefined | null;\n  bounding_box: number[] | undefined | null;\n  assignee: string | undefined | null;\n  feedback_needed: boolean | undefined | null;\n}\n\ninterface IAccumulator {\n  initiatives: IInitiativeData[] | null;\n  queryParameters: IQueryParameters;\n  hasMore: boolean;\n}\n\ntype children = (renderProps: GetInitiativesChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: (obj: GetInitiativesChildProps) => JSX.Element | null;\n}\n\nexport type GetInitiativesChildProps = State & {\n  onLoadMore: () => void;\n  onChangePage: (pageNumber: number) => void;\n  onChangeSearchTerm: (search: string) => void;\n  onChangeSorting: (sort: Sort) => void;\n  onChangeTopics: (topics: string[]) => void;\n  onChangeAreas: (areas: string[]) => void;\n  onChangeStatus: (initiativeStatus: string | null) => void;\n  onChangePublicationStatus: (publicationStatus: PublicationStatus) => void;\n  onChangeAssignee: (assignee: string | undefined) => void;\n  onChangeFeedbackFilter: (feedbackNeeded: boolean) => void;\n  onInitiativeFiltering: (\n    partialQueryParameters: Partial<IQueryParameters>\n  ) => void;\n  onResetParams: (paramsToOmit?: (keyof IQueryParameters)[]) => void;\n};\n\ninterface State {\n  queryParameters: IQueryParameters;\n  list: IInitiativeData[] | undefined | null;\n  hasMore: boolean;\n  querying: boolean;\n  loadingMore: boolean;\n  sortAttribute: SortAttribute;\n  sortDirection: SortDirection;\n  currentPage: number;\n  lastPage: number;\n}\n\nexport default class GetInitiatives extends React.Component<Props, State> {\n  defaultQueryParameters: IQueryParameters;\n  queryParameters$: BehaviorSubject<IQueryParameters>;\n  subscriptions: Subscription[];\n\n  static defaultProps = {\n    pageNumber: 1,\n    pageSize: 12,\n    sort: 'new',\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.defaultQueryParameters = {\n      'page[number]': props.pageNumber as number,\n      'page[size]': props.pageSize as number,\n      sort: props.sort as Sort,\n      author: undefined,\n      search: undefined,\n      topics: undefined,\n      areas: undefined,\n      initiative_status: undefined,\n      publication_status: undefined,\n      bounding_box: undefined,\n      assignee: undefined,\n      feedback_needed: undefined,\n    };\n    const queryParameters = this.getQueryParameters(\n      this.defaultQueryParameters,\n      props\n    );\n    this.state = {\n      // defaults\n      queryParameters,\n      list: undefined,\n      hasMore: false,\n      querying: true,\n      loadingMore: false,\n      sortAttribute: getSortAttribute<Sort, SortAttribute>(props.sort as Sort),\n      sortDirection: getSortDirection<Sort>(props.sort as Sort),\n      currentPage: 1,\n      lastPage: 1,\n    };\n    this.queryParameters$ = new BehaviorSubject(queryParameters);\n    this.subscriptions = [];\n  }\n\n  componentDidMount() {\n    const queryParameters = this.getQueryParameters(\n      this.state.queryParameters,\n      this.props\n    );\n    const startAccumulatorValue: IAccumulator = {\n      queryParameters,\n      initiatives: null,\n      hasMore: false,\n    };\n    const queryParameters$ = this.queryParameters$.pipe(\n      distinctUntilChanged((prev, next) => isEqual(prev, next))\n    );\n\n    if (!this.props.type || this.props.type === 'load-more') {\n      this.subscriptions = [\n        queryParameters$\n          .pipe(\n            mergeScan<IQueryParameters, IAccumulator>(\n              (acc, newQueryParameters) => {\n                const oldQueryParamsWithoutPageNumber = omit(\n                  cloneDeep(acc.queryParameters),\n                  'page[number]'\n                );\n                const newQueryParamsWithoutPageNumber = omit(\n                  cloneDeep(newQueryParameters),\n                  'page[number]'\n                );\n                const oldPageNumber = acc.queryParameters['page[number]'];\n                const newPageNumber = newQueryParameters['page[number]'];\n                const isLoadingMore =\n                  isEqual(\n                    oldQueryParamsWithoutPageNumber,\n                    newQueryParamsWithoutPageNumber\n                  ) && oldPageNumber !== newPageNumber;\n                const pageNumber = isLoadingMore\n                  ? newQueryParameters['page[number]']\n                  : 1;\n                const queryParameters: IQueryParameters = {\n                  ...newQueryParameters,\n                  'page[number]': pageNumber,\n                };\n\n                this.setState({\n                  querying: !isLoadingMore,\n                  loadingMore: isLoadingMore,\n                });\n\n                return initiativesStream({ queryParameters }).observable.pipe(\n                  map((initiatives) => {\n                    const selfLink = get(initiatives, 'links.self');\n                    const lastLink = get(initiatives, 'links.last');\n                    const hasMore =\n                      isString(selfLink) &&\n                      isString(lastLink) &&\n                      selfLink !== lastLink;\n\n                    return {\n                      queryParameters,\n                      hasMore,\n                      initiatives: !isLoadingMore\n                        ? initiatives.data\n                        : unionBy(\n                            acc.initiatives || [],\n                            initiatives.data,\n                            'id'\n                          ),\n                    };\n                  })\n                );\n              },\n              startAccumulatorValue\n            )\n          )\n          .subscribe(({ initiatives, queryParameters, hasMore }) => {\n            this.setState({\n              queryParameters,\n              hasMore,\n              list: initiatives,\n              querying: false,\n              loadingMore: false,\n            });\n          }),\n      ];\n    } else {\n      this.subscriptions = [\n        queryParameters$\n          .pipe(\n            switchMap((queryParameters) => {\n              const oldPageNumber = this.state.queryParameters['page[number]'];\n              const newPageNumber = queryParameters['page[number]'];\n              queryParameters['page[number]'] =\n                newPageNumber !== oldPageNumber ? newPageNumber : 1;\n\n              return initiativesStream({\n                queryParameters,\n              }).observable.pipe(\n                map((initiatives) => ({ queryParameters, initiatives }))\n              );\n            })\n          )\n          .subscribe(({ initiatives, queryParameters }) => {\n            this.setState({\n              queryParameters,\n              list: initiatives ? initiatives.data : null,\n              querying: false,\n              loadingMore: false,\n              sortAttribute: getSortAttribute<Sort, SortAttribute>(\n                queryParameters.sort\n              ),\n              sortDirection: getSortDirection<Sort>(queryParameters.sort),\n              currentPage: getPageNumberFromUrl(initiatives.links.self) || 1,\n              lastPage: getPageNumberFromUrl(initiatives.links.last) || 1,\n            });\n          }),\n      ];\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, _prevState: State) {\n    const { children: _prevChildren, ...prevPropsWithoutChildren } = prevProps;\n    const { children: _nextChildren, ...nextPropsWithoutChildren } = this.props;\n\n    if (!isEqual(prevPropsWithoutChildren, nextPropsWithoutChildren)) {\n      const queryParameters = this.getQueryParameters(\n        this.state.queryParameters,\n        this.props\n      );\n      this.queryParameters$.next(queryParameters);\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  propsToQueryParamsShape = () => ({\n    'page[number]': this.props.pageNumber as number,\n    'page[size]': this.props.pageSize as number,\n    author: this.props.authorId,\n    sort: this.props.sort as Sort,\n    topics: this.props.topics,\n    areas: this.props.areas,\n    initiative_status: this.props.initiativeStatusId,\n    publication_status: this.props.publicationStatus,\n    bounding_box: this.props.boundingBox,\n    assignee: this.props.assignee,\n    feedback_needed: this.props.feedbackNeeded,\n    search: undefined,\n  });\n\n  getQueryParametersFromProps = () => {\n    const queryParamsShaped = this.propsToQueryParamsShape();\n    Object.keys(queryParamsShaped)\n      .filter((key) => queryParamsShaped[key] === null)\n      .forEach((key) => (queryParamsShaped[key] = undefined));\n    return queryParamsShaped as IQueryParameters; // legal because last line changes null values to undefined\n  };\n\n  getQueryParameters = (queryParameters: IQueryParameters, props: Props) => {\n    const inputPropsQueryParameters: IQueryParameters = {\n      'page[number]': props.pageNumber as number,\n      'page[size]': props.pageSize as number,\n      author: props.authorId,\n      sort: props.sort as Sort,\n      search: props.search,\n      topics: props.topics,\n      areas: props.areas,\n      initiative_status: props.initiativeStatusId,\n      publication_status: props.publicationStatus,\n      bounding_box: props.boundingBox,\n      assignee: props.assignee,\n      feedback_needed: props.feedbackNeeded,\n    };\n\n    // Omit all queryParameters that are nil.\n    // Why do this? Because we assume that an input prop that's nil is an input prop that should be ignored,\n    // and not overwrite a none-nil value that's part of this.state.queryParameters.\n    return {\n      ...queryParameters,\n      ...omitBy(inputPropsQueryParameters, isNil),\n      // Make an exception for 'projects', because when it's undefined we don't want to ignore it but instead pass it along\n      // to let the request know we don't want to apply a projects filter but load the initiatives for all projects\n    };\n  };\n\n  loadMore = () => {\n    if (!this.state.loadingMore) {\n      this.queryParameters$.next({\n        ...this.state.queryParameters,\n        'page[number]': this.state.queryParameters['page[number]'] + 1,\n      });\n    }\n  };\n\n  handleChangePage = (pageNumber: number) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      'page[number]': pageNumber,\n    });\n  };\n\n  handleSearchOnChange = (search: string) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      search: search || undefined,\n      'page[number]': 1,\n    });\n  };\n\n  handleSortOnChange = (sort: Sort) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      sort,\n      'page[number]': 1,\n    });\n  };\n\n  handleTopicsOnChange = (topics: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      topics,\n      'page[number]': 1,\n    });\n  };\n\n  handleAreasOnchange = (areas: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      areas,\n      'page[number]': 1,\n    });\n  };\n\n  handleStatusOnChange = (initiativeStatus: string | null) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      initiative_status: initiativeStatus || undefined,\n      'page[number]': 1,\n    });\n  };\n\n  handlePublicationStatusOnChange = (publicationStatus: PublicationStatus) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      publication_status: publicationStatus,\n      'page[number]': 1,\n    });\n  };\n\n  handleAssigneeOnChange = (assignee: string | undefined) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      assignee,\n      'page[number]': 1,\n    });\n  };\n\n  handleFeedbackFilterOnChange = (feedbackNeeded: boolean) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      feedback_needed: feedbackNeeded || undefined,\n      'page[number]': 1,\n    });\n  };\n\n  handleInitiativeFiltering = (\n    initiativeFilters: Partial<IQueryParameters>\n  ) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      ...initiativeFilters,\n      'page[number]': 1,\n    });\n  };\n\n  handleResetParamsToProps = (paramsToOmit?: (keyof IQueryParameters)[]) => {\n    const defaultQueryParameters = this.getQueryParametersFromProps();\n\n    if (paramsToOmit && paramsToOmit.length > 0) {\n      this.queryParameters$.next({\n        ...this.state.queryParameters,\n        ...omit(defaultQueryParameters, paramsToOmit),\n      });\n    } else {\n      this.queryParameters$.next(defaultQueryParameters);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    return (children as children)({\n      ...this.state,\n      onLoadMore: this.loadMore,\n      onChangePage: this.handleChangePage,\n      onChangeSearchTerm: this.handleSearchOnChange,\n      onChangeSorting: this.handleSortOnChange,\n      onChangeTopics: this.handleTopicsOnChange,\n      onChangeAreas: this.handleAreasOnchange,\n      onChangeStatus: this.handleStatusOnChange,\n      onChangePublicationStatus: this.handlePublicationStatusOnChange,\n      onChangeAssignee: this.handleAssigneeOnChange,\n      onChangeFeedbackFilter: this.handleFeedbackFilterOnChange,\n      onInitiativeFiltering: this.handleInitiativeFiltering,\n      onResetParams: this.handleResetParamsToProps,\n    });\n  }\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams from 'utils/streams';\nimport { Multiloc } from 'typings';\n\nexport type InitiativeStatusCode =\n  | 'proposed'\n  | 'expired'\n  | 'threshold_reached'\n  | 'answered'\n  | 'ineligible'\n  | 'custom';\n\nexport interface IInitiativeStatusData {\n  id: string;\n  type: string;\n  attributes: {\n    title_multiloc: Multiloc;\n    color: string;\n    code: InitiativeStatusCode;\n    ordering: number;\n    description_multiloc: Multiloc;\n    transition_type: 'manual' | 'automatic';\n  };\n}\n\nexport interface IInitiativeStatuses {\n  data: IInitiativeStatusData[];\n}\n\nexport interface IInitiativeStatus {\n  data: IInitiativeStatusData;\n}\n\nexport function initiativeStatusStream(initiativeId: string) {\n  return streams.get<IInitiativeStatus>({\n    apiEndpoint: `${API_PATH}/initiative_statuses/${initiativeId}`,\n  });\n}\n\nexport function initiativeStatusesStream() {\n  return streams.get<IInitiativeStatuses>({\n    apiEndpoint: `${API_PATH}/initiative_statuses`,\n  });\n}\n","import React from 'react';\nimport { Subscription } from 'rxjs';\nimport {\n  IInitiativeStatusData,\n  initiativeStatusesStream,\n} from 'services/initiativeStatuses';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {}\n\ntype children = (\n  renderProps: GetInitiativeStatusesChildProps\n) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  initiativeStatuses: IInitiativeStatusData[] | undefined | null;\n}\n\nexport type GetInitiativeStatusesChildProps =\n  | IInitiativeStatusData[]\n  | undefined\n  | null;\n\nexport default class GetInitiativeStatuses extends React.Component<\n  Props,\n  State\n> {\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      initiativeStatuses: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.subscriptions = [\n      initiativeStatusesStream().observable.subscribe((initiativeStatuses) => {\n        this.setState({\n          initiativeStatuses: !isNilOrError(initiativeStatuses)\n            ? initiativeStatuses.data\n            : null,\n        });\n      }),\n    ];\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { initiativeStatuses } = this.state;\n    return (children as children)(initiativeStatuses);\n  }\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { IRelationship, Multiloc, ImageSizes, ILinks } from 'typings';\nimport { first } from 'rxjs/operators';\nimport { get } from 'lodash-es';\n\nexport type InitiativePublicationStatus =\n  | 'draft'\n  | 'published'\n  | 'archived'\n  | 'spam';\n\nexport type IInitiativeAction =\n  | 'posting_initiative'\n  | 'commenting_initiative'\n  | 'voting_initiative'\n  | 'comment_voting_initiative';\n\nexport interface IInitiativeData {\n  id: string;\n  type: 'initiatives';\n  attributes: {\n    title_multiloc: Multiloc;\n    body_multiloc: Multiloc;\n    author_name: string;\n    slug: string;\n    publication_status: InitiativePublicationStatus;\n    upvotes_count: number;\n    comments_count: number;\n    location_point_geojson: GeoJSON.Point;\n    location_description: string;\n    budget: number | null;\n    created_at: string;\n    updated_at: string;\n    published_at: string;\n    header_bg: ImageSizes;\n    expires_at: string;\n  };\n  relationships: {\n    topics: {\n      data: IRelationship[];\n    };\n    initiative_images: {\n      data: IRelationship[];\n    };\n    author: {\n      data: IRelationship | null;\n    };\n    assignee: {\n      data: IRelationship | null;\n    };\n    initiative_status?: {\n      data: IRelationship | null;\n    };\n    user_vote?: {\n      data: IRelationship | null;\n    };\n  };\n}\n\nexport interface IInitiative {\n  data: IInitiativeData;\n}\n\nexport interface IInitiatives {\n  data: IInitiativeData[];\n  links: ILinks;\n}\n\nexport interface IInitiativeAdd {\n  author_id?: string | null;\n  assignee_id?: string | null;\n  initiative_status_id?: string | null;\n  publication_status?: InitiativePublicationStatus;\n  title_multiloc?: Multiloc;\n  body_multiloc?: Multiloc;\n  topic_ids?: string[] | null;\n  area_ids?: string[] | null;\n  phase_ids?: string[] | null;\n  location_point_geojson?: GeoJSON.Point | null;\n  location_description?: string | null;\n}\nexport interface IInitiativesCount {\n  count: number;\n}\n\nexport interface IInitiativesFilterCounts {\n  initiative_status_id: {\n    [key: string]: number;\n  };\n  area_id: {\n    [key: string]: number;\n  };\n  topic_id: {\n    [key: string]: number;\n  };\n  total: number;\n}\n\nexport interface IGeotaggedInitiativeData {\n  id: string;\n  type: string;\n  attributes: {\n    title_multiloc: Multiloc;\n    location_point_geojson: GeoJSON.Point;\n    location_description: string;\n  };\n}\n\nexport interface IInitiativeLinks {\n  self: string;\n  first: string;\n  prev: string;\n  next: string;\n  last: string;\n}\n\nexport interface InitiativeActivity {\n  id: string;\n  type: 'activity';\n  attributes: {\n    action: string;\n    acted_at: string;\n    change: string[] | { [key: string]: string }[] | null;\n  };\n  relationships: {\n    user: { data: IRelationship };\n  };\n}\n\nexport type InitiativeDisabledReason =\n  | 'not_permitted'\n  | 'not_verified'\n  | 'not_signed_in';\n\nexport function initiativeByIdStream(initiativeId: string) {\n  return streams.get<IInitiative>({\n    apiEndpoint: `${API_PATH}/initiatives/${initiativeId}`,\n  });\n}\n\nexport function initiativeBySlugStream(initiativeSlug: string) {\n  return streams.get<IInitiative>({\n    apiEndpoint: `${API_PATH}/initiatives/by_slug/${initiativeSlug}`,\n  });\n}\n\nexport function initiativesStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IInitiatives>({\n    apiEndpoint: `${API_PATH}/initiatives`,\n    ...streamParams,\n  });\n}\n\nexport function initiativesFilterCountsStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IInitiativesFilterCounts>({\n    apiEndpoint: `${API_PATH}/initiatives/filter_counts`,\n    ...streamParams,\n    cacheStream: false,\n  });\n}\n\nexport function initiativesMarkersStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<{\n    data: IGeotaggedInitiativeData[];\n    links: IInitiativeLinks;\n  }>({\n    apiEndpoint: `${API_PATH}/initiatives/as_markers`,\n    ...streamParams,\n    cacheStream: false,\n  });\n}\n\nexport async function addInitiative(object: IInitiativeAdd) {\n  const response = await streams.add<IInitiative>(`${API_PATH}/initiatives`, {\n    initiative: object,\n  });\n  return response;\n}\n\nexport async function updateInitiative(\n  initiativeId: string,\n  object: Partial<IInitiativeAdd>\n) {\n  const response = await streams.update<IInitiative>(\n    `${API_PATH}/initiatives/${initiativeId}`,\n    initiativeId,\n    { initiative: object }\n  );\n  streams.fetchAllWith({\n    apiEndpoint: [\n      `${API_PATH}/stats/initiatives_count`,\n      `${API_PATH}/initiatives`,\n      `${API_PATH}/initiatives/${initiativeId}/activities`,\n    ],\n  });\n  return response;\n}\n\nexport async function deleteInitiative(initiativeId: string) {\n  const [initiative, response] = await Promise.all([\n    initiativeByIdStream(initiativeId).observable.pipe(first()).toPromise(),\n    streams.delete(`${API_PATH}/initiatives/${initiativeId}`, initiativeId),\n  ]);\n\n  const authorId = get(initiative, 'relationships.author.data.id', false);\n\n  streams.fetchAllWith({\n    apiEndpoint: authorId\n      ? [`${API_PATH}/users/${authorId}/initiatives_count`]\n      : [],\n  });\n\n  return response;\n}\n\nexport interface IInitiativeAllowedTransitions {\n  [key: string]: {\n    feedback_needed: boolean;\n  };\n}\n\nexport function initiativeAllowedTransitionsStream(initiativeId: string) {\n  return streams.get<IInitiativeAllowedTransitions>({\n    apiEndpoint: `${API_PATH}/initiatives/${initiativeId}/allowed_transitions`,\n  });\n}\n\nexport interface IInitiativesFilterCounts {\n  initiative_status_id: {\n    [key: string]: number;\n  };\n  area_id: {\n    [key: string]: number;\n  };\n  topic_id: {\n    [key: string]: number;\n  };\n  total: number;\n}\n\nexport function initiativeActivities(initiativeId: string) {\n  return streams.get<{ data: InitiativeActivity[] }>({\n    apiEndpoint: `${API_PATH}/initiatives/${initiativeId}/activities`,\n  });\n}\n\nexport type IInitiativeActionDescriptors = {\n  [key in IInitiativeAction]: {\n    enabled: boolean;\n    disabled_reason: InitiativeDisabledReason | null;\n  };\n};\n\nexport function getInitiativeActionDescriptors() {\n  return streams.get<IInitiativeActionDescriptors>({\n    apiEndpoint: `${API_PATH}/action_descriptors/initiatives`,\n  });\n}\n","import React from 'react';\nimport { isEqual } from 'lodash-es';\nimport { Subscription, BehaviorSubject, of, combineLatest } from 'rxjs';\nimport { distinctUntilChanged, switchMap, map } from 'rxjs/operators';\nimport {\n  ITopicData,\n  topicByIdStream,\n  topicsStream,\n  Code,\n} from 'services/topics';\nimport { projectTopicsStream } from 'services/projectTopics';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  // Don't use projectId, ids or the query parameters (code, exclude_code, sort) together\n  // Only one of the three at a time.\n  projectId?: string;\n  topicIds?: string[];\n  code?: Code;\n  exclude_code?: Code;\n  sort?: 'new' | 'custom';\n}\n\ntype children = (renderProps: GetTopicsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  topics: (ITopicData | Error)[] | undefined | null | Error;\n}\n\nexport type GetTopicsChildProps =\n  | (ITopicData | Error)[]\n  | undefined\n  | null\n  | Error;\n\nexport default class GetTopics extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      topics: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { topicIds, code, exclude_code, sort, projectId } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({\n      topicIds,\n      code,\n      exclude_code,\n      sort,\n      projectId,\n    });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => isEqual(prev, next)),\n          switchMap(({ topicIds, code, exclude_code, sort, projectId }) => {\n            const queryParameters = { code, exclude_code, sort };\n\n            if (projectId) {\n              return projectTopicsStream(projectId).observable.pipe(\n                map((topics) =>\n                  topics.data\n                    .filter((topic) => topic)\n                    .map((topic) => topic.relationships.topic.data.id)\n                ),\n                switchMap((topicIds) => {\n                  return combineLatest(\n                    topicIds.map((topicId) =>\n                      topicByIdStream(topicId).observable.pipe(\n                        map((topic) =>\n                          !isNilOrError(topic) ? topic.data : topic\n                        )\n                      )\n                    )\n                  );\n                })\n              );\n            } else if (topicIds) {\n              if (topicIds.length > 0) {\n                return combineLatest(\n                  topicIds.map((id) => {\n                    return topicByIdStream(id).observable.pipe(\n                      map((topic) =>\n                        !isNilOrError(topic) ? topic.data : topic\n                      )\n                    );\n                  })\n                );\n              }\n\n              return of(null);\n            } else {\n              return topicsStream({ queryParameters }).observable.pipe(\n                map((topics) => topics.data)\n              );\n            }\n          })\n        )\n        .subscribe((topics) => {\n          this.setState({ topics });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { topicIds, code, exclude_code, sort, projectId } = this.props;\n    this.inputProps$.next({\n      topicIds,\n      code,\n      exclude_code,\n      sort,\n      projectId,\n    });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { topics } = this.state;\n    return (children as children)(topics);\n  }\n}\n"],"sourceRoot":""}