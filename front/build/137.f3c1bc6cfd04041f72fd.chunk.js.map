{"version":3,"sources":["webpack:///./app/resources/GetCampaigns.tsx","webpack:///./app/containers/Admin/emails/automated/index.tsx","webpack:///./app/containers/Admin/emails/messages.ts","webpack:///./app/services/campaigns.ts"],"names":["GetCampaigns","props","pageNumber","pageChanges$","next","state","currentPage","lastPage","campaigns","undefined","this","campaignNames","withoutCampaignNames","pageSize","inputProps$","BehaviorSubject","subscriptions","combineLatest","pipe","map","inputProps","distinctUntilChanged","prev","isEqual","switchMap","listCampaigns","queryParameters","campaign_names","without_campaign_names","observable","subscribe","setState","data","getPageNumberFromUrl","links","self","last","forEach","subscription","unsubscribe","children","onChangePage","handleOnPageChange","React","Component","StyledWarning","Warning","AutomatedCampaigns","campaign","updateCampaign","id","enabled","attributes","isNilOrError","text","FormattedMessage","messages","automatedEmailCampaignsInfo","Row","key","Toggle","disabled","isUndefined","checked","onChange","handleOnEnabledToggle","TextCell","className","value","admin_campaign_description_multiloc","PureComponent","AutomatedCampaignsWithIntl","injectIntl","defineMessages","titleEmails","defaultMessage","subtitleEmails","helmetTitle","helmetDescription","campaignDeletionConfirmation","addCampaignButton","deleteButtonLabel","statsButton","editButtonLabel","manageButtonLabel","fieldSender","fieldSenderTooltip","fieldReplyTo","fieldReplyToTooltip","fieldTo","fieldToTooltip","fieldSubject","fieldSubjectTooltip","fieldBody","addCampaignTitle","editCampaignTitle","draft","sent","sendNowButton","sendTestEmailButton","sendTestEmailTooltip","previewSentConfirmation","formSaveButton","formErrorButton","formSuccessButton","formSuccessMessage","formErrorMessage","formUnexpectedErrorMessage","previewTitle","recipientsTitle","deliveryStatus_sent","deliveryStatus_failed","deliveryStatus_accepted","deliveryStatus_delivered","deliveryStatus_opened","deliveryStatus_clicked","deliveryStatus_clickedTooltip","tabCustom","tabAutomated","campaignFrom","campaignTo","noAccess","deleteCampaignButton","noCampaignsHeader","noCampaignsDescription","allUsers","groups","nameVariablesInfo","changeRecipientsButton","send","confirmSendHeader","toAllUsers","senderRecipients","streamParams","streams","get","apiEndpoint","campaignData","add","campaignId","update","delete","deliveries_count","API_PATH","stream","fetchAllWith"],"mappings":"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","file":"137.f3c1bc6cfd04041f72fd.chunk.js","sourcesContent":["import React from 'react';\nimport { isEqual } from 'lodash-es';\nimport { Subscription, BehaviorSubject, combineLatest } from 'rxjs';\nimport { distinctUntilChanged, switchMap, map } from 'rxjs/operators';\nimport { ICampaignData, listCampaigns } from 'services/campaigns';\nimport { getPageNumberFromUrl } from 'utils/paginationUtils';\n\ninterface InputProps {\n  campaignNames?: string[];\n  withoutCampaignNames?: string[];\n  pageSize?: number;\n  pageNumber?: number;\n}\n\ntype children = (renderProps: GetCampaignsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  campaigns: ICampaignData[] | undefined | null | Error;\n  currentPage: number;\n  lastPage: number;\n}\n\nexport type GetCampaignsChildProps = State & {\n  onChangePage: (pageNumber: number) => void;\n};\n\nexport default class GetCampaigns extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private pageChanges$: BehaviorSubject<number>;\n  private subscriptions: Subscription[];\n\n  static defaultProps: Partial<Props> = {\n    pageSize: 20,\n    pageNumber: 1,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      currentPage: 1,\n      lastPage: 1,\n      campaigns: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const {\n      campaignNames,\n      withoutCampaignNames,\n      pageSize,\n      pageNumber,\n    } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({\n      campaignNames,\n      withoutCampaignNames,\n      pageSize,\n    });\n    this.pageChanges$ = new BehaviorSubject(pageNumber || 1);\n\n    this.subscriptions = [\n      combineLatest(this.inputProps$, this.pageChanges$)\n        .pipe(\n          map(([inputProps, pageNumber]) => ({ ...inputProps, pageNumber })),\n          distinctUntilChanged((prev, next) => isEqual(prev, next)),\n          switchMap(\n            ({ campaignNames, withoutCampaignNames, pageSize, pageNumber }) => {\n              return listCampaigns({\n                queryParameters: {\n                  campaign_names: campaignNames,\n                  without_campaign_names: withoutCampaignNames,\n                  'page[size]': pageSize,\n                  'page[number]': pageNumber,\n                },\n              }).observable;\n            }\n          )\n        )\n        .subscribe((campaigns) => {\n          this.setState({\n            campaigns: campaigns.data,\n            currentPage: getPageNumberFromUrl(campaigns.links.self) || 1,\n            lastPage: getPageNumberFromUrl(campaigns.links.last) || 1,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    this.inputProps$.next({\n      campaignNames: this.props.campaignNames,\n      withoutCampaignNames: this.props.withoutCampaignNames,\n      pageSize: this.props.pageSize,\n    });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  handleOnPageChange = (pageNumber: number) => {\n    this.pageChanges$.next(pageNumber);\n  };\n\n  render() {\n    const { children } = this.props;\n    return (children as children)({\n      ...this.state,\n      onChangePage: this.handleOnPageChange,\n    });\n  }\n}\n","import React from 'react';\nimport { isUndefined } from 'lodash-es';\nimport GetCampaigns, { GetCampaignsChildProps } from 'resources/GetCampaigns';\nimport { ICampaignData, updateCampaign } from 'services/campaigns';\nimport { isNilOrError } from 'utils/helperUtils';\nimport T from 'components/T';\nimport { Toggle } from 'cl2-component-library';\nimport {\n  List as AutomatedEmailsList,\n  Row,\n  TextCell,\n} from 'components/admin/ResourceList';\nimport Warning from 'components/UI/Warning';\nimport styled from 'styled-components';\n// i18n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\nconst StyledWarning = styled(Warning)`\n  max-width: 600px;\n  margin-bottom: 30px;\n`;\n\ntype DataProps = GetCampaignsChildProps;\n\ntype Props = DataProps;\n\nclass AutomatedCampaigns extends React.PureComponent<\n  Props & InjectedIntlProps\n> {\n  handleOnEnabledToggle = (campaign: ICampaignData) => () => {\n    updateCampaign(campaign.id, {\n      enabled: !campaign.attributes.enabled,\n    });\n  };\n\n  render() {\n    const { campaigns } = this.props;\n\n    if (isNilOrError(campaigns)) return null;\n\n    return (\n      <>\n        <StyledWarning\n          text={<FormattedMessage {...messages.automatedEmailCampaignsInfo} />}\n        />\n        <AutomatedEmailsList>\n          {campaigns.map((campaign) => (\n            <Row key={campaign.id}>\n              <Toggle\n                disabled={isUndefined(campaign.attributes.enabled)}\n                checked={\n                  isUndefined(campaign.attributes.enabled) ||\n                  campaign.attributes.enabled\n                }\n                onChange={this.handleOnEnabledToggle(campaign)}\n              />\n              <TextCell className=\"expand\">\n                <T\n                  value={\n                    campaign.attributes.admin_campaign_description_multiloc\n                  }\n                />\n              </TextCell>\n              {/* <div>\n                <T value={campaign.attributes.schedule_multiloc} />\n              </div> */}\n            </Row>\n          ))}\n        </AutomatedEmailsList>\n      </>\n    );\n  }\n}\n\nconst AutomatedCampaignsWithIntl = injectIntl<Props>(AutomatedCampaigns);\n\nexport default (inputProps: Props) => (\n  <GetCampaigns withoutCampaignNames={['manual']} pageSize={250}>\n    {(campaigns) => (\n      <AutomatedCampaignsWithIntl {...inputProps} {...campaigns} />\n    )}\n  </GetCampaigns>\n);\n","/*\n * Admin.emails Messages\n *\n * This contains all the text for the admins email.\n */\n\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  titleEmails: {\n    id: 'app.containers.Admin.emails.titleEmails',\n    defaultMessage: 'Email Campaigns',\n  },\n  subtitleEmails: {\n    id: 'app.containers.Admin.emails.subtitleEmails',\n    defaultMessage:\n      'Compose your own emails to be sent out to all users or to particular groups. And control what automated emails your users receive.',\n  },\n  helmetTitle: {\n    id: 'app.containers.Admin.emails.helmetTitle',\n    defaultMessage: 'Email Campaigns',\n  },\n  helmetDescription: {\n    id: 'app.containers.Admin.emails.helmetDescription',\n    defaultMessage:\n      'Send out manual emails to certain citizen group and active automated campaigns',\n  },\n  campaignDeletionConfirmation: {\n    id: 'app.containers.Admin.emails.campaignDeletionConfirmation',\n    defaultMessage: 'Are you sure?',\n  },\n  addCampaignButton: {\n    id: 'app.containers.Admin.emails.addCampaignButton',\n    defaultMessage: 'Create campaign',\n  },\n  deleteButtonLabel: {\n    id: 'app.containers.Admin.emails.deleteButtonLabel',\n    defaultMessage: 'Delete',\n  },\n  statsButton: {\n    id: 'app.containers.Admin.emails.statsButton',\n    defaultMessage: 'Statistics',\n  },\n  editButtonLabel: {\n    id: 'app.containers.Admin.emails.editButtonLabel',\n    defaultMessage: 'Edit',\n  },\n  manageButtonLabel: {\n    id: 'app.containers.Admin.emails.manageButtonLabel',\n    defaultMessage: 'Manage & Edit & Preview & Delete',\n  },\n  fieldSender: {\n    id: 'app.containers.Admin.emails.fieldSender',\n    defaultMessage: 'From',\n  },\n  fieldSenderTooltip: {\n    id: 'app.containers.Admin.emails.fieldSenderTooltip',\n    defaultMessage: 'Choose whom users will see as the sender of the email.',\n  },\n  fieldReplyTo: {\n    id: 'app.containers.Admin.emails.fieldReplyTo',\n    defaultMessage: 'Replies should go to',\n  },\n  fieldReplyToTooltip: {\n    id: 'app.containers.Admin.emails.fieldReplyToTooltip',\n    defaultMessage:\n      'Choose what email address should receive direct replies from users on your email.',\n  },\n  fieldTo: {\n    id: 'app.containers.Admin.emails.fieldTo',\n    defaultMessage: 'To',\n  },\n  fieldToTooltip: {\n    id: 'app.containers.Admin.emails.fieldToTooltip',\n    defaultMessage: 'Choose the group(s) of users who will receive your email.',\n  },\n  fieldSubject: {\n    id: 'app.containers.Admin.emails.fieldSubject',\n    defaultMessage: 'Email Subject',\n  },\n  fieldSubjectTooltip: {\n    id: 'app.containers.Admin.emails.fieldSubjectTooltip',\n    defaultMessage:\n      'This will be shown in the subject line of the email and in the user’s inbox overview. Make it clear and engaging.',\n  },\n  fieldBody: {\n    id: 'app.containers.Admin.emails.fieldBody',\n    defaultMessage: 'Email Message',\n  },\n  addCampaignTitle: {\n    id: 'app.containers.Admin.emails.addCampaignTitle',\n    defaultMessage: 'New campaign',\n  },\n  editCampaignTitle: {\n    id: 'app.containers.Admin.emails.editCampaignTitle',\n    defaultMessage: 'Edit campaign',\n  },\n  draft: {\n    id: 'app.containers.Admin.emails.draft',\n    defaultMessage: 'Draft',\n  },\n  sent: {\n    id: 'app.containers.Admin.emails.sent',\n    defaultMessage: 'Sent',\n  },\n  sendNowButton: {\n    id: 'app.containers.Admin.emails.sendNowButton',\n    defaultMessage: 'Send now',\n  },\n  sendTestEmailButton: {\n    id: 'app.containers.Admin.emails.sendTestEmailButton',\n    defaultMessage: 'Send a preview',\n  },\n  sendTestEmailTooltip: {\n    id: 'app.containers.Admin.emails.sendTestEmailTooltip',\n    defaultMessage:\n      'Send this draft email to the email address with which you are logged in, to check how it looks like in ‘real life’.',\n  },\n  previewSentConfirmation: {\n    id: 'app.containers.Admin.emails.previewSentConfirmation',\n    defaultMessage: 'A preview email has been sent to your email address',\n  },\n  formSaveButton: {\n    id: 'app.containers.Admin.emails.formSaveButton',\n    defaultMessage: 'Continue',\n  },\n  formErrorButton: {\n    id: 'app.containers.Admin.emails.formErrorButton',\n    defaultMessage: 'Continue',\n  },\n  formSuccessButton: {\n    id: 'app.containers.Admin.emails.formSuccessButton',\n    defaultMessage: 'Continue',\n  },\n  formSuccessMessage: {\n    id: 'app.containers.Admin.emails.formSuccessMessage',\n    defaultMessage: 'formSuccessMessage',\n  },\n  formErrorMessage: {\n    id: 'app.containers.Admin.emails.formErrorMessage',\n    defaultMessage: 'Please correct the errors above to continue',\n  },\n  formUnexpectedErrorMessage: {\n    id: 'app.containers.Admin.emails.formUnexpectedErrorMessage',\n    defaultMessage: 'Something went wrong, please try again later',\n  },\n  previewTitle: {\n    id: 'app.containers.Admin.emails.previewTitle',\n    defaultMessage: 'Preview',\n  },\n  recipientsTitle: {\n    id: 'app.containers.Admin.emails.recipientsTitle',\n    defaultMessage: 'Recipients',\n  },\n  deliveryStatus_sent: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_sent',\n    defaultMessage: 'Sent',\n  },\n  deliveryStatus_failed: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_failed',\n    defaultMessage: 'Failed',\n  },\n  deliveryStatus_accepted: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_accepted',\n    defaultMessage: 'Accepted',\n  },\n  deliveryStatus_delivered: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_delivered',\n    defaultMessage: 'Delivered',\n  },\n  deliveryStatus_opened: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_opened',\n    defaultMessage: 'Opened',\n  },\n  deliveryStatus_clicked: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_clicked',\n    defaultMessage: 'Clicked',\n  },\n  deliveryStatus_clickedTooltip: {\n    id: 'app.containers.Admin.Campaigns.deliveryStatus_clickedTooltip',\n    defaultMessage:\n      'When you added one or more links to your email, the number of users who clicked a link will be shown here.',\n  },\n  tabCustom: {\n    id: 'app.containers.Admin.Campaigns.tabCustom',\n    defaultMessage: 'Custom',\n  },\n  tabAutomated: {\n    id: 'app.containers.Admin.Campaigns.tabAutomated',\n    defaultMessage: 'Automated',\n  },\n  campaignFrom: {\n    id: 'app.containers.Admin.Campaigns.campaignFrom',\n    defaultMessage: 'From:',\n  },\n  campaignTo: {\n    id: 'app.containers.Admin.Campaigns.campaignTo',\n    defaultMessage: 'To:',\n  },\n  noAccess: {\n    id: 'app.containers.Admin.Campaigns.noAccess',\n    defaultMessage:\n      \"We're sorry, but it seems like you don't have access to the emails section\",\n  },\n  deleteCampaignButton: {\n    id: 'app.containers.Admin.emails.deleteCampaignButton',\n    defaultMessage: 'Delete Campaign',\n  },\n  noCampaignsHeader: {\n    id: 'app.containers.Admin.emails.noCampaignsHeader',\n    defaultMessage: 'No custom email campaigns yet',\n  },\n  noCampaignsDescription: {\n    id: 'app.containers.Admin.emails.noCampaignsDescription',\n    defaultMessage:\n      'Custom email campaigns are emails created from scratch. Their content and recipients can be chosen and you can follow up on their results through statistics.',\n  },\n  automatedEmailCampaignsInfo: {\n    id: 'app.containers.Admin.emails.automatedEmailCampaignsInfo',\n    defaultMessage:\n      'Automated email campaigns are sent out by default and are triggered by a user’s actions. Some of them can be turned off. Others are an inherent part of user interactions with the platform and therefore can’t be turned off.',\n  },\n  allUsers: {\n    id: 'app.containers.Admin.emails.allUsers',\n    defaultMessage: 'All users',\n  },\n  groups: {\n    id: 'app.containers.Admin.emails.groups',\n    defaultMessage: 'Groups',\n  },\n  nameVariablesInfo: {\n    id: 'app.containers.Admin.emails.nameVariablesInfo',\n    defaultMessage:\n      'You can speak directly to citizens using the variables \\\\{\\\\{first_name\\\\}\\\\} \\\\{\\\\{last_name\\\\}\\\\}. E.g. \"Dear \\\\{\\\\{first_name\\\\}\\\\} \\\\{\\\\{last_name\\\\}\\\\}, ...\"',\n  },\n  changeRecipientsButton: {\n    id: 'app.containers.Admin.emails.changeRecipientsButton',\n    defaultMessage: 'Change recipients',\n  },\n  send: {\n    id: 'app.containers.Admin.emails.send',\n    defaultMessage: 'Send',\n  },\n  confirmSendHeader: {\n    id: 'app.containers.Admin.emails.confirmSendHeader',\n    defaultMessage: 'Email to all users?',\n  },\n  toAllUsers: {\n    id: 'app.containers.Admin.emails.toAllUsers',\n    defaultMessage: 'Do you want to send this email to all users?',\n  },\n  senderRecipients: {\n    id: 'app.containers.Admin.emails.senderRecipients',\n    defaultMessage: 'Sender and recipients',\n  },\n});\n","import { IRelationship, Multiloc, ILinks } from 'typings';\nimport { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\n\nconst apiEndpoint = `${API_PATH}/campaigns`;\n\nexport interface ICampaignsData {\n  data: ICampaignData[];\n  links: ILinks;\n}\n\nexport interface ICampaignData {\n  id: string;\n  type: string;\n  attributes: {\n    campaign_name: string;\n    admin_campaign_description_multiloc: Multiloc;\n    enabled?: boolean;\n    subject_multiloc: Multiloc;\n    body_multiloc: Multiloc;\n    sender: 'author' | 'organization';\n    reply_to: 'author' | 'organization';\n    created_at: string;\n    updated_at: string;\n    deliveries_count: number;\n    schedule: any;\n    schedule_multiloc: Multiloc;\n  };\n  relationships: {\n    author: {\n      data: IRelationship;\n    };\n    groups: {\n      data: IRelationship[];\n    };\n  };\n}\n\nexport interface CampaignUpdate {\n  campaign_name?: string;\n  subject_multiloc?: Multiloc;\n  body_multiloc?: Multiloc;\n  sender?: string;\n  reply_to?: string;\n  group_ids?: string[];\n  enabled?: boolean;\n}\n\nexport interface CampaignCreation {\n  campaign_name: string;\n  subject_multiloc: Multiloc;\n  body_multiloc: Multiloc;\n  sender: string;\n  reply_to?: string;\n  group_ids?: string[];\n}\n\nexport interface ICampaign {\n  data: ICampaignData;\n}\n\nexport interface IDeliveriesData {\n  data: IDeliveryData[];\n  links: ILinks;\n}\nexport interface IDeliveryData {\n  id: string;\n  type: string;\n  attributes: {\n    delivery_status:\n      | 'sent'\n      | 'bounced'\n      | 'failed'\n      | 'accepted'\n      | 'delivered'\n      | 'opened'\n      | 'clicked';\n    sent_at: string;\n    created_at: string;\n    updated_at: string;\n  };\n  relationships: {\n    user: {\n      data: IRelationship;\n    };\n  };\n}\n\nexport interface IRecipient {\n  data: IDeliveryData[];\n}\n\nexport interface ICampaignStats {\n  sent: number;\n  bounced: number;\n  failed: number;\n  accepted: number;\n  delivered: number;\n  opened: number;\n  clicked: number;\n  all: number;\n}\n\nexport function listCampaigns(streamParams: IStreamParams | null = null) {\n  return streams.get<ICampaignsData>({\n    apiEndpoint: `${apiEndpoint}`,\n    ...streamParams,\n  });\n}\n\nexport function createCampaign(campaignData: CampaignCreation) {\n  return streams.add<ICampaign>(`${apiEndpoint}`, { campaign: campaignData });\n}\n\nexport function updateCampaign(\n  campaignId: string,\n  campaignData: CampaignUpdate\n) {\n  return streams.update<ICampaign>(`${apiEndpoint}/${campaignId}`, campaignId, {\n    campaign: campaignData,\n  });\n}\n\nexport async function sendCampaign(campaignId: string) {\n  const stream = await streams.add<ICampaign>(\n    `${apiEndpoint}/${campaignId}/send`,\n    {}\n  );\n  await streams.fetchAllWith({\n    apiEndpoint: [`${apiEndpoint}/${campaignId}`, `${API_PATH}/campaigns`],\n  });\n  return stream;\n}\n\nexport function sendCampaignPreview(campaignId: string) {\n  return streams.add<ICampaign>(\n    `${apiEndpoint}/${campaignId}/send_preview`,\n    {}\n  );\n}\n\nexport function deleteCampaign(campaignId: string) {\n  return streams.delete(`${apiEndpoint}/${campaignId}`, campaignId);\n}\n\nexport function campaignByIdStream(\n  campaignId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICampaign>({\n    apiEndpoint: `${apiEndpoint}/${campaignId}`,\n    ...streamParams,\n  });\n}\n\nexport function listCampaignDeliveries(\n  campaignId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IDeliveriesData>({\n    apiEndpoint: `${apiEndpoint}/${campaignId}/deliveries`,\n    ...streamParams,\n  });\n}\n\nexport function getCampaignStats(\n  campaignId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICampaignStats>({\n    apiEndpoint: `${apiEndpoint}/${campaignId}/stats`,\n    ...streamParams,\n  });\n}\n\nexport function isDraft(campaign: ICampaignData) {\n  return campaign.attributes.deliveries_count === 0;\n}\n"],"sourceRoot":""}