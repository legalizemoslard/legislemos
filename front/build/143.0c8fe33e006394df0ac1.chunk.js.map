{"version":3,"sources":["webpack:///./app/containers/Admin/dashboard/users/charts/MostActiveUsersList.tsx","webpack:///./app/containers/Admin/dashboard/users/index.tsx","webpack:///./app/resources/GetUser.tsx"],"names":["InfoIcon","Icon","UserList","styled","ul","UserListItem","li","User","div","media","smallerThan1280px","UserImage","Avatar","colors","label","UserName","Link","DeletedUserName","span","UserScore","props","theme","newBarFill","value","hoverColor","MostActiveUsersList","firstName","lastName","fullName","length","slice","engagementScoreList","state","max","map","item","attributes","sum_score","this","resubscribe","prevProps","startAt","endAt","currentGroupFilter","subscription","unsubscribe","userEngagementScoresStream","queryParameters","start_at","end_at","group","observable","subscribe","response","data","setState","className","infoMessage","barHoverColor","rgba","maxScore","GraphCard","GraphCardInner","GraphCardHeader","GraphCardTitle","FormattedMessage","messages","mostActiveUsers","Popup","basic","trigger","name","content","position","itemId","id","userId","relationships","user","userScore","key","size","get","formatName","isNilOrError","deletedUser","to","slug","NoDataContainer","noData","PureComponent","injectIntl","withTheme","UsersDashboard","startAtMoment","endAtMoment","filter","trackFilterOnGroup","extra","currentGroupFilterLabel","groups","groupsList","localize","formatMessage","intl","filterOptions","title_multiloc","allGroups","undefined","toISOString","mostActiveUsersRankingDescription","ControlBar","onChange","handleChangeTimeRange","currentProjectFilter","currentTopicFilter","projectFilterOptions","groupFilterOptions","generateGroupFilterOptions","topicFilterOptions","onProjectFilter","onGroupFilter","handleOnGroupFilter","onTopicFilter","GraphsContainer","Data","adopt","UsersDashBoardWithHOCs","injectTracks","tracks","filteredOnGroup","dataProps","GetUser","resetOnChange","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","tap","switchMap","isString","userByIdStream","userBySlugStream","of","forEach","children","React","Component"],"mappings":"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","file":"143.0c8fe33e006394df0ac1.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Subscription } from 'rxjs';\nimport { get, max } from 'lodash-es';\nimport { isNilOrError } from 'utils/helperUtils';\nimport Link from 'utils/cl-router/Link';\n\n// components\nimport {\n  NoDataContainer,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCard,\n  GraphCardInner,\n} from 'components/admin/Chart';\nimport { Popup } from 'semantic-ui-react';\nimport { Icon } from 'cl2-component-library';\nimport Avatar from 'components/Avatar';\n\n// i18n\nimport { InjectedIntlProps } from 'react-intl';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport messages from '../../messages';\n\n// styles\nimport styled, { withTheme } from 'styled-components';\nimport { rgba } from 'polished';\nimport { media, colors } from 'utils/styleUtils';\n\n// services\nimport {\n  userEngagementScoresStream,\n  IUserEngagementScore,\n} from 'services/stats';\n\n// resources\nimport GetUser from 'resources/GetUser';\n\nconst InfoIcon = styled(Icon)`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  width: 20px;\n  height: 22px;\n  margin-left: 10px;\n`;\n\nconst UserList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0 20px;\n`;\n\nconst UserListItem = styled.li`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nconst User = styled.div`\n  display: flex;\n  flex-basis: 100%;\n  max-width: 50%;\n  min-width: 50%;\n  align-items: center;\n\n  ${media.smallerThan1280px`\n    max-width: 70%;\n    min-width: 70%;\n  `}\n`;\n\nconst UserImage = styled(Avatar)`\n  margin-right: 10px;\n\n  svg {\n    fill: ${colors.label};\n  }\n`;\n\nconst UserName = styled(Link)`\n  color: ${colors.label};\n  margin-right: 10px;\n`;\n\nconst DeletedUserName = styled.span`\n  font-style: italic;\n`;\n\ninterface IUserScoreComponent {\n  hoverColor: string;\n  value: number;\n}\n\nconst UserScore = styled.div<IUserScoreComponent>`\n  background-color: ${(props) => props.theme.newBarFill};\n  width: ${(props) => props.value * 50}%;\n  color: #fff;\n  padding: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    background-color: ${(props: any) => props.hoverColor};\n    color: ${(props) => props.theme.newBarFill};\n  }\n\n  ${media.smallerThan1280px`\n    width: ${(props) => props.value * 4}px;\n  `}\n`;\n\ninterface Props {\n  className?: string;\n  infoMessage?: string;\n  startAt: string | null | undefined;\n  endAt: string | null;\n  currentGroupFilter: string | undefined;\n}\n\ninterface State {\n  engagementScoreList: IUserEngagementScore[] | null;\n}\n\nclass MostActiveUsersList extends PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  subscription: Subscription;\n\n  constructor(props: Props & InjectedIntlProps) {\n    super(props);\n    this.state = {\n      engagementScoreList: null,\n    };\n  }\n\n  componentDidMount() {\n    this.resubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.startAt !== prevProps.startAt ||\n      this.props.endAt !== prevProps.endAt ||\n      this.props.currentGroupFilter !== prevProps.currentGroupFilter\n    ) {\n      this.resubscribe(\n        this.props.startAt,\n        this.props.endAt,\n        this.props.currentGroupFilter\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  resubscribe(\n    startAt = this.props.startAt,\n    endAt = this.props.endAt,\n    currentGroupFilter = this.props.currentGroupFilter\n  ) {\n    if (this.subscription) this.subscription.unsubscribe();\n\n    this.subscription = userEngagementScoresStream({\n      queryParameters: {\n        start_at: startAt,\n        end_at: endAt,\n        group: currentGroupFilter,\n      },\n    }).observable.subscribe((response) => {\n      const engagementScoreList = response.data;\n      this.setState({ engagementScoreList });\n    });\n  }\n\n  formatName = (firstName: string, lastName: string) => {\n    let fullName = `${firstName} ${lastName}`;\n\n    // Add ellipsis to name if it's too long\n    if (fullName.length > 20) {\n      fullName = `${fullName.slice(0, 22)}...`;\n    }\n\n    return fullName;\n  };\n\n  maxScore = () => {\n    const { engagementScoreList } = this.state;\n    if (engagementScoreList) {\n      return max(engagementScoreList.map((item) => item.attributes.sum_score));\n    } else {\n      return undefined;\n    }\n  };\n\n  render() {\n    const { className, infoMessage } = this.props;\n    const { engagementScoreList } = this.state;\n    const theme = this.props['theme'];\n    const { newBarFill } = theme;\n    const barHoverColor = rgba(newBarFill, 0.25);\n    const maxScore = this.maxScore() || 0;\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              <FormattedMessage {...messages.mostActiveUsers} />\n              {infoMessage && (\n                <Popup\n                  basic\n                  trigger={\n                    <div>\n                      <InfoIcon name=\"info\" />\n                    </div>\n                  }\n                  content={infoMessage}\n                  position=\"top left\"\n                />\n              )}\n            </GraphCardTitle>\n          </GraphCardHeader>\n          {!engagementScoreList || engagementScoreList.length === 0 ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <UserList>\n              {engagementScoreList.map((item) => {\n                const itemId = item.id;\n                const userId = item.relationships.user.data.id;\n                const userScore = item.attributes.sum_score;\n\n                return (\n                  <UserListItem key={itemId}>\n                    <User>\n                      <UserImage size={28} userId={userId} />\n                      <GetUser id={userId}>\n                        {(user) => {\n                          const firstName: string = get(\n                            user,\n                            'attributes.first_name',\n                            ''\n                          );\n                          const lastName: string = get(\n                            user,\n                            'attributes.last_name',\n                            ''\n                          );\n                          const fullName = this.formatName(firstName, lastName);\n\n                          return !isNilOrError(user) ? (\n                            <UserName to={`/profile/${user.attributes.slug}`}>\n                              {fullName}\n                            </UserName>\n                          ) : (\n                            <DeletedUserName>\n                              <FormattedMessage {...messages.deletedUser} />\n                            </DeletedUserName>\n                          );\n                        }}\n                      </GetUser>\n                    </User>\n                    <UserScore\n                      hoverColor={barHoverColor}\n                      value={userScore / maxScore}\n                    >\n                      {userScore}\n                    </UserScore>\n                  </UserListItem>\n                );\n              })}\n            </UserList>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nexport default injectIntl<Props>(withTheme(MostActiveUsersList as any) as any);\n","// libraries\nimport React, { PureComponent } from 'react';\nimport moment, { Moment } from 'moment';\nimport { adopt } from 'react-adopt';\nimport localize, { InjectedLocalized } from 'utils/localize';\n\n// resources\nimport GetGroups, { GetGroupsChildProps } from 'resources/GetGroups';\n\n// components\nimport ChartFilters from '../components/ChartFilters';\nimport { GraphsContainer, ControlBar } from 'components/admin/Chart';\nimport TimeControl from '../components/TimeControl';\nimport MostActiveUsersList from './charts/MostActiveUsersList';\nimport Outlet from 'components/Outlet';\n\n// i18n\nimport { injectIntl } from 'utils/cl-intl';\nimport messages from '../messages';\nimport { InjectedIntlProps } from 'react-intl';\n\n// tracking\nimport { injectTracks } from 'utils/analytics';\nimport tracks from '../tracks';\n\n// typings\nimport { IOption } from 'typings';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface State {\n  startAtMoment?: Moment | null;\n  endAtMoment: Moment | null;\n  currentGroupFilter: string | undefined;\n  currentGroupFilterLabel: string | undefined;\n}\n\ninterface DataProps {\n  groups: GetGroupsChildProps;\n}\n\ninterface Props extends DataProps {}\n\ninterface Tracks {\n  trackFilterOnGroup: (args: { extra: Record<string, string> }) => void;\n}\n\nexport class UsersDashboard extends PureComponent<\n  Props & InjectedIntlProps & InjectedLocalized & Tracks,\n  State\n> {\n  constructor(props: Props & InjectedIntlProps & InjectedLocalized & Tracks) {\n    super(props as any);\n    this.state = {\n      startAtMoment: undefined,\n      endAtMoment: moment(),\n      currentGroupFilter: undefined,\n      currentGroupFilterLabel: undefined,\n    };\n  }\n\n  handleChangeTimeRange = (\n    startAtMoment: Moment | null | undefined,\n    endAtMoment: Moment | null\n  ) => {\n    this.setState({ startAtMoment, endAtMoment });\n  };\n\n  handleOnGroupFilter = (filter) => {\n    this.props.trackFilterOnGroup({ extra: { group: filter } });\n    this.setState({\n      currentGroupFilter: filter.value,\n      currentGroupFilterLabel: filter.label,\n    });\n  };\n\n  generateGroupFilterOptions = () => {\n    const {\n      groups,\n      groups: { groupsList },\n      localize,\n      intl: { formatMessage },\n    } = this.props;\n    let filterOptions: IOption[] = [];\n\n    if (!isNilOrError(groups) && !isNilOrError(groupsList)) {\n      filterOptions = groupsList.map((group) => ({\n        value: group.id,\n        label: localize(group.attributes.title_multiloc),\n      }));\n    }\n\n    return [\n      { value: '', label: formatMessage(messages.allGroups) },\n      ...filterOptions,\n    ];\n  };\n\n  render() {\n    const {\n      currentGroupFilter,\n      endAtMoment,\n      startAtMoment,\n      currentGroupFilterLabel,\n    } = this.state;\n    const startAt = startAtMoment && startAtMoment.toISOString();\n    const endAt = endAtMoment && endAtMoment.toISOString();\n    const infoMessage = this.props.intl.formatMessage(\n      messages.mostActiveUsersRankingDescription\n    );\n\n    return (\n      <>\n        <ControlBar>\n          <TimeControl\n            startAtMoment={startAtMoment}\n            endAtMoment={endAtMoment}\n            onChange={this.handleChangeTimeRange}\n          />\n        </ControlBar>\n\n        <ChartFilters\n          currentProjectFilter={undefined}\n          currentGroupFilter={currentGroupFilter}\n          currentTopicFilter={undefined}\n          projectFilterOptions={null}\n          groupFilterOptions={this.generateGroupFilterOptions()}\n          topicFilterOptions={null}\n          onProjectFilter={null}\n          onGroupFilter={this.handleOnGroupFilter}\n          onTopicFilter={null}\n        />\n\n        <GraphsContainer>\n          <Outlet\n            id=\"app.containers.Admin.dashboard.users.graphs\"\n            startAt={startAt}\n            endAt={endAt}\n            currentGroupFilter={currentGroupFilter}\n            currentGroupFilterLabel={currentGroupFilterLabel}\n          />\n          <MostActiveUsersList\n            currentGroupFilter={currentGroupFilter}\n            startAt={startAt}\n            endAt={endAt}\n            infoMessage={infoMessage}\n            className=\"dynamicHeight\"\n          />\n        </GraphsContainer>\n      </>\n    );\n  }\n}\n\nconst Data = adopt<DataProps>({\n  groups: <GetGroups />,\n});\n\nconst UsersDashBoardWithHOCs = injectIntl(\n  injectTracks<Props>({\n    trackFilterOnGroup: tracks.filteredOnGroup,\n  })(localize<Props & Tracks>(UsersDashboard))\n);\n\nexport default () => (\n  <Data>{(dataProps) => <UsersDashBoardWithHOCs {...dataProps} />}</Data>\n);\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { Subscription, BehaviorSubject, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport { IUserData, userBySlugStream, userByIdStream } from 'services/users';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  id?: string | null;\n  slug?: string | null;\n  resetOnChange?: boolean;\n}\n\ntype children = (renderProps: GetUserChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  user: IUserData | undefined | null | Error;\n}\n\nexport type GetUserChildProps = IUserData | undefined | null | Error;\n\nexport default class GetUser extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  static defaultProps = {\n    resetOnChange: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      user: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { id, slug, resetOnChange } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ id, slug });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          tap(() => resetOnChange && this.setState({ user: undefined })),\n          switchMap(({ id, slug }) => {\n            if (isString(id)) {\n              return userByIdStream(id).observable;\n            } else if (isString(slug)) {\n              return userBySlugStream(slug).observable;\n            }\n\n            return of(null);\n          })\n        )\n        .subscribe((user) => {\n          this.setState({ user: !isNilOrError(user) ? user.data : user });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { id, slug } = this.props;\n    this.inputProps$.next({ id, slug });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { user } = this.state;\n    return (children as children)(user);\n  }\n}\n"],"sourceRoot":""}