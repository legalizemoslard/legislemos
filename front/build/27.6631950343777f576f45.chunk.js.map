{"version":3,"sources":["webpack:///./app/components/UI/FormikTextAreaMultilocWithLocaleSwitcher/index.tsx","webpack:///./app/components/UI/FormikRadio/index.tsx","webpack:///./app/components/UI/FormikColorPickerInput/index.tsx","webpack:///./app/components/UI/GoBackButton/messages.ts","webpack:///./app/modules/commercial/custom_idea_statuses/admin/containers/messages.ts","webpack:///./app/components/UI/TextAreaMultilocWithLocaleSwitcher/index.tsx","webpack:///./app/modules/commercial/custom_idea_statuses/admin/components/IdeaStatusForm.tsx","webpack:///./app/components/UI/GoBackButton/index.tsx"],"names":["newValue","props","form","setFieldTouched","field","name","setFieldValue","value","this","valueMultiloc","onChange","handleOnChange","React","Component","formikContext","FormikConsumer","Radio","currentValue","values","PureComponent","ColorPickerInput","defineMessages","goBack","id","defaultMessage","deleteButtonLabel","editButtonLabel","addIdeaStatus","editIdeaStatus","titleIdeaStatuses","subtitleInputStatuses","manage","inputStatusDeleteButtonTooltip","defaultStatusDeleteButtonTooltip","lockedStatusTooltip","Container","styled","div","LabelContainer","StyledLabel","Label","Spacer","StyledLocaleSwitcher","LocaleSwitcher","LabelText","span","colors","label","memo","className","labelTooltipText","labelTextElement","textAreaProps","useState","selectedLocale","setSelectedLocale","locale","tenantLocales","useEffect","isNilOrError","handleValueOnChange","useCallback","newValueMultiloc","handleOnSelectedLocaleChange","newSelectedLocale","htmlFor","IconTooltip","content","onSelectedLocaleChange","locales","errors","tenantLocalesTitleMultiloc","forEach","title_multiloc","every","isEmpty","error","StyledSection","Section","StyledFormikRadio","FormikRadio","fontSizes","base","adminSecondaryTextColor","injectIntl","isSubmitting","isValid","touched","status","formatMessage","intl","Form","SectionField","FormattedMessage","messages","fieldColor","Field","component","FormikColorPickerInput","FormikInputMultilocWithLocaleSwitcher","fieldTitle","fieldName","apiErrors","FormikTextAreaMultilocWithLocaleSwitcher","fieldDescription","description_multiloc","category","categoryDescription","ideaStatusCodes","map","code","i","key","proposed","proposedFieldCodeTitle","viewed","viewedFieldCodeTitle","under_consideration","under_considerationFieldCodeTitle","accepted","acceptedFieldCodeTitle","implemented","implementedFieldCodeTitle","rejected","rejectedFieldCodeTitle","custom","customFieldCodeTitle","proposedFieldCodeDescription","viewedFieldCodeDescription","under_considerationFieldCodeDescription","acceptedFieldCodeDescription","implementedFieldCodeDescription","rejectedFieldCodeDescription","GoBackButton","onClick","buttonStyle","icon","size","padding","text"],"mappings":"0UAAA,eACA,e,ssBAQmB,SAACA,GAChB,EAAKC,MAAMC,KAAKC,gBAAgB,EAAKF,MAAMG,MAAMC,MACjD,EAAKJ,MAAMC,KAAKI,cAAc,EAAKL,MAAMG,MAAMC,KAAML,M,6CAGvD,WACE,IAAQO,EAAUC,KAAKP,MAAMG,MAArBG,MACR,OACE,wBAAC,WAAD,gBACMC,KAAKP,MADX,CAEEQ,cAAeF,EACfG,SAAUF,KAAKG,sB,GAdgCC,UAAMC,W,qWCL7D,E,ybAAA,YACA,YACA,Y,q0BAQmB,SAACC,GAAD,OAAuC,SAACP,GACvDO,EAAcR,cAAc,EAAKL,MAAMI,KAAME,O,6CAG/C,WAAS,WACP,OACE,wBAAC,EAAAQ,eAAD,MACG,SAACD,GACA,OACE,wBAAC,EAAAE,OAAD,gBACM,EAAKf,MADX,CAEEgB,aAAcH,EAAcI,OAAO,EAAKjB,MAAMI,MAC9CK,SAAU,EAAKC,eAAeG,a,GAblBK,iB,2RCV1B,eACA,Y,ssBAYmB,SAACnB,GAChB,EAAKC,MAAMC,KAAKI,cAAc,EAAKL,MAAMG,MAAMC,KAAML,M,6CAGvD,WACE,IAAQO,EAAUC,KAAKP,MAAMG,MAArBG,MACR,OACE,wBAAC,EAAAa,kBAAD,gBACMZ,KAAKP,MADX,CAEEM,MAAOA,EACPG,SAAUF,KAAKG,sB,GAdcC,UAAMC,W,iHCT3C,I,GAEe,EAFf,UAEeQ,gBAAe,CAC5BC,OAAQ,CACNC,GAAI,gDACJC,eAAgB,a,iHCLpB,I,GAEe,EAFf,UAEeH,gBAAe,CAC5BI,kBAAmB,CACjBF,GAAI,0DACJC,eAAgB,UAElBE,gBAAiB,CACfH,GAAI,wDACJC,eAAgB,QAElBG,cAAe,CACbJ,GAAI,sDACJC,eAAgB,cAElBI,eAAgB,CACdL,GAAI,uDACJC,eAAgB,eAElBK,kBAAmB,CACjBN,GAAI,0DACJC,eAAgB,YAElBM,sBAAuB,CACrBP,GAAI,8DACJC,eACE,6OAEJO,OAAQ,CACNR,GAAI,+CACJC,eAAgB,UAElBQ,+BAAgC,CAC9BT,GAAI,uEACJC,eACE,4IAEJS,iCAAkC,CAChCV,GACE,yEACFC,eAAgB,0CAElBU,oBAAqB,CACnBX,GAAI,4DACJC,eAAgB,6C,uUC5CpB,E,ybAAA,YACA,YAGA,eACA,YAGA,eACA,eAGA,eACA,Y,myBAKA,IAAMW,EAAYC,UAAOC,IAAV,oGAAGD,CAAH,MAETE,EAAiBF,UAAOC,IAAV,yGAAGD,CAAH,uFAOdG,GAAc,aAAOC,SAAV,sGAAG,CAAH,gCAMXC,EAASL,UAAOC,IAAV,iGAAGD,CAAH,aAINM,GAAuB,aAAOC,kBAAV,+GAAG,CAAH,iBAIpBC,EAAYR,UAAOS,KAAV,oGAAGT,CAAH,eACJU,SAAOC,O,GASyB,IAAAC,OAAY,SAAC/C,GACtD,IACEQ,EAOER,EAPFQ,cACAC,EAMET,EANFS,SACAuC,EAKEhD,EALFgD,UACAF,EAIE9C,EAJF8C,MACAG,EAGEjD,EAHFiD,iBACAC,EAEElD,EAFFkD,iBACGC,GAPL,aAQInD,EARJ,GAUA,GAA4C,IAAAoD,UAAwB,MAApE,qBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,GAAS,eACTC,GAAgB,gBAEtB,IAAAC,YAAU,aACP,IAAAC,cAAaH,IAAWD,EAAkBC,KAC1C,CAACA,IAEJ,IAAMI,GAAsB,IAAAC,cAC1B,SAACtD,EAAeiD,GACd,IAAMM,EAAmB,EAAH,KAChBrD,GAAiB,IADD,oBAEnB+C,EAASjD,IAGZG,EAASoD,EAAkBN,KAE7B,CAAC/C,EAAeC,IAGZqD,GAA+B,IAAAF,cACnC,SAACG,GACCT,EAAkBS,KAEpB,IAGF,GAAIV,EAAgB,CAClB,IAAM/B,EAAK,GAAH,OAAMtB,EAAMsB,GAAZ,YAAkB+B,GAE1B,OACE,wBAACnB,EAAD,CAAWc,UAAWA,GACpB,wBAACX,EAAD,KACGS,GAASI,EACR,wBAACZ,EAAD,CAAa0B,QAAS1C,GACnB4B,GAAoB,wBAACP,EAAD,KAAYG,GAChCG,GAAoB,wBAAC,EAAAgB,YAAD,CAAaC,QAASjB,KAG7C,wBAACT,EAAD,MAGF,wBAACC,EAAD,CACE0B,uBAAwBL,EACxBM,SAAU,IAAAV,cAAaF,GAAiC,GAAhBA,EACxCH,eAAgBA,EAChBpC,OAAQ,CAAET,oBAId,wBAAC,WAAD,gBACM2C,EADN,CAEE7C,OAAOE,aAAA,EAAAA,EAAgB6C,KAAmB,KAC1CE,OAAQF,EACR5C,SAAUkD,EACVrC,GAAIA,MAMZ,OAAO,Q,yJCtDF,SAAkBkC,GACvB,OAAO,SAAUvC,GACf,IAAMoD,EAAmC,GAKnCC,EAA6B,GAUnC,OARAd,EAAce,SAAQ,SAAChB,GACrBe,EAA2Bf,GAAUtC,EAAOuD,eAAejB,OAGzD,IAAAkB,QAAM,YAAUH,GAA6BI,aAC/CL,EAAOG,eAAiB,CAAC,CAAEG,MAAO,WAG7BN,I,qCAvFX,mBACA,YACA,eACA,YAEA,YAGA,eACA,eACA,eACA,YACA,YACA,YACA,eACA,eAEA,eAGA,YAEA,eAaMO,GAAgB,aAAOC,WAAV,mFAAG,CAAH,yBAIbC,GAAoB,aAAOC,WAAV,uFAAG,CAAH,yBAIjBpC,EAAYR,UAAOC,IAAV,+EAAGD,CAAH,yMAeE6C,YAAUC,KAIdpC,SAAOqC,yBAId5C,GAAc,aAAOC,SAAV,iFAAG,CAAH,yBAyBjB,I,GA4Ge,IAAA4C,aA5GQ,SAAC,GAO0C,IANhEC,EAMgE,EANhEA,aACAf,EAKgE,EALhEA,OACAgB,EAIgE,EAJhEA,QACAC,EAGgE,EAHhEA,QACAC,EAEgE,EAFhEA,OACQC,EACwD,EADhEC,KAAQD,cAER,OACE,wBAAC,EAAAE,KAAD,KACE,wBAACd,EAAD,KACE,wBAAC,EAAAe,aAAD,KACE,wBAAC,EAAApD,MAAD,KACE,wBAAC,EAAAqD,iBAAqBC,UAASC,aAEjC,wBAAC,EAAAC,MAAD,CAAO3F,KAAK,QAAQ4F,UAAWC,cAGnC,wBAACrB,EAAD,KACE,wBAAC,EAAAe,aAAD,KACE,wBAAC,EAAAI,MAAD,CACE3F,KAAK,iBACL4F,UAAWE,UACXpD,MAAO0C,EAAcK,UAASM,cAE/Bb,EAAQd,gBACP,wBAAC,UAAD,CACE4B,UAAU,iBACVC,UAAWhC,EAAOG,mBAM1B,wBAACI,EAAD,KACE,wBAAC,EAAAe,aAAD,KACE,wBAAC,EAAAI,MAAD,CACE3F,KAAK,uBACL4F,UAAWM,UACXxD,MAAO0C,EAAcK,UAASU,oBAE/BjB,EAAQkB,sBACP,wBAAC,UAAD,CACEJ,UAAU,uBACVC,UAAWhC,EAAOmC,yBAM1B,wBAAC5B,EAAD,KACE,wBAAC,EAAAe,aAAD,KACE,wBAACrD,EAAD,KACE,wBAAC,EAAAsD,iBAAqBC,UAASY,UAC/B,wBAAC,EAAAxC,YAAD,CACEC,QAAS,wBAAC,EAAA0B,iBAAqBC,UAASa,wBAG3CC,kBAAgBC,KAAI,SAACC,EAAuBC,GAAxB,OACnB,wBAAChC,EAAD,CACEiC,IAAG,qBAAgBD,GACnBhE,MACE,wBAACH,EAAD,KACE,gCAAMK,UAAU,UACbwC,EACC,CACEwB,SAAUnB,UAASoB,uBACnBC,OAAQrB,UAASsB,qBACjBC,oBACEvB,UAASwB,kCACXC,SAAUzB,UAAS0B,uBACnBC,YAAa3B,UAAS4B,0BACtBC,SAAU7B,UAAS8B,uBACnBC,OAAQ/B,UAASgC,sBACjBhB,KAGI,WAATA,GACC,gCAAM7D,UAAU,eACbwC,EACC,CACEwB,SAAUnB,UAASiC,6BACnBZ,OAAQrB,UAASkC,2BACjBX,oBACEvB,UAASmC,wCACXV,SAAUzB,UAASoC,6BACnBT,YAAa3B,UAASqC,gCACtBR,SAAU7B,UAASsC,8BACnBtB,MAMZvF,GAAE,UAAKuF,EAAL,UACFzG,KAAK,OACLE,MAAOuG,OAGVvB,EAAQuB,MAAQ,wBAAC,UAAD,CAAOR,UAAWhC,EAAOwC,SAI9C,wBAAC,UAAD,CAA2BxB,UAASD,eAAcG,SAAQD,gB,kSClMhE,E,ybAAA,YACA,eACA,eACA,YACA,e,ykBAEA,IAAMpD,EAAYC,UAAOC,IAAV,0EAAGD,CAAH,2BAWMiG,E,sJACnB,WACE,MAA+B7H,KAAKP,MAA5BqI,EAAR,EAAQA,QAASrF,EAAjB,EAAiBA,UAEjB,OACE,wBAACd,EAAD,CAAWc,UAAWA,GAAa,IACjC,wBAAC,UAAD,CACEqF,QAASA,EACTC,YAAY,OACZC,KAAK,aACLC,KAAK,IACLC,QAAQ,MACRC,KAAM,wBAAC,EAAA9C,iBAAqBC,UAASxE,e,GAZLH,iB","file":"27.6631950343777f576f45.chunk.js","sourcesContent":["import React from 'react';\nimport TextAreaMultilocWithLocaleSwitcher, {\n  Props,\n} from 'components/UI/TextAreaMultilocWithLocaleSwitcher';\nimport { FieldProps } from 'formik';\n\nclass FormikTextAreaMultilocWithLocaleSwitcher extends React.Component<\n  FieldProps & Props\n> {\n  handleOnChange = (newValue) => {\n    this.props.form.setFieldTouched(this.props.field.name);\n    this.props.form.setFieldValue(this.props.field.name, newValue);\n  };\n\n  render() {\n    const { value } = this.props.field;\n    return (\n      <TextAreaMultilocWithLocaleSwitcher\n        {...this.props}\n        valueMultiloc={value}\n        onChange={this.handleOnChange}\n      />\n    );\n  }\n}\n\nexport default FormikTextAreaMultilocWithLocaleSwitcher;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { FormikConsumer, FormikContext } from 'formik';\nimport { Radio, RadioProps } from 'cl2-component-library';\n\n// Typings\ntype Props = RadioProps & {\n  name: string;\n};\n\nclass FormikRadio extends PureComponent<Props> {\n  handleOnChange = (formikContext: FormikContext<any>) => (value: string) => {\n    formikContext.setFieldValue(this.props.name, value);\n  };\n\n  render() {\n    return (\n      <FormikConsumer>\n        {(formikContext) => {\n          return (\n            <Radio\n              {...this.props}\n              currentValue={formikContext.values[this.props.name]}\n              onChange={this.handleOnChange(formikContext)}\n            />\n          );\n        }}\n      </FormikConsumer>\n    );\n  }\n}\n\nexport default FormikRadio;\n","import React from 'react';\nimport {\n  ColorPickerInput,\n  ColorPickerInputProps as VanillaInputProps,\n} from 'cl2-component-library';\nimport { FieldProps } from 'formik';\n\ninterface State {}\n\nclass FormikColorPickerInput extends React.Component<\n  FieldProps & VanillaInputProps,\n  State\n> {\n  handleOnChange = (newValue) => {\n    this.props.form.setFieldValue(this.props.field.name, newValue);\n  };\n\n  render() {\n    const { value } = this.props.field;\n    return (\n      <ColorPickerInput\n        {...this.props}\n        value={value}\n        onChange={this.handleOnChange}\n      />\n    );\n  }\n}\n\nexport default FormikColorPickerInput;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  goBack: {\n    id: 'app.components.GoBackButton.group.edit.goBack',\n    defaultMessage: 'Go back',\n  },\n});\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  deleteButtonLabel: {\n    id: 'app.containers.admin.ideaStatuses.all.deleteButtonLabel',\n    defaultMessage: 'Delete',\n  },\n  editButtonLabel: {\n    id: 'app.containers.admin.ideaStatuses.all.editButtonLabel',\n    defaultMessage: 'Edit',\n  },\n  addIdeaStatus: {\n    id: 'app.containers.admin.ideaStatuses.all.addIdeaStatus',\n    defaultMessage: 'Add status',\n  },\n  editIdeaStatus: {\n    id: 'app.containers.admin.ideaStatuses.all.editIdeaStatus',\n    defaultMessage: 'Edit status',\n  },\n  titleIdeaStatuses: {\n    id: 'app.containers.admin.ideaStatuses.all.titleIdeaStatuses',\n    defaultMessage: 'Statuses',\n  },\n  subtitleInputStatuses: {\n    id: 'app.containers.admin.ideaStatuses.all.subtitleInputStatuses',\n    defaultMessage:\n      \"Here you can add, edit and delete the statuses that can be assigned to inputs. The status is publicly visible and helps participants know what's happening with their input. You can add a status to inputs in the {linkToManageTab} tab.\",\n  },\n  manage: {\n    id: 'app.containers.admin.ideaStatuses.all.manage',\n    defaultMessage: 'Manage',\n  },\n  inputStatusDeleteButtonTooltip: {\n    id: 'app.containers.admin.ideaStatuses.all.inputStatusDeleteButtonTooltip',\n    defaultMessage:\n      'Statuses currently assigned to an input cannot be deleted. You can remove/change the status from existing inputs in the {manageTab} tab.',\n  },\n  defaultStatusDeleteButtonTooltip: {\n    id:\n      'app.containers.admin.ideaStatuses.all.defaultStatusDeleteButtonTooltip',\n    defaultMessage: 'The default status can not be deleted.',\n  },\n  lockedStatusTooltip: {\n    id: 'app.containers.admin.ideaStatuses.all.lockedStatusTooltip',\n    defaultMessage: 'This status cannot be deleted or moved.',\n  },\n});\n","import React, { memo, useState, useCallback, useEffect } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport TextArea, { Props as TextAreaProps } from 'components/UI/TextArea';\nimport { IconTooltip, LocaleSwitcher, Label } from 'cl2-component-library';\n\n// hooks\nimport useLocale from 'hooks/useLocale';\nimport useAppConfigurationLocales from 'hooks/useAppConfigurationLocales';\n\n// style\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\n\n// typings\nimport { Locale, Multiloc } from 'typings';\n\nconst Container = styled.div``;\n\nconst LabelContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\n\nconst StyledLabel = styled(Label)`\n  flex: 1;\n  padding: 0;\n  margin: 0;\n`;\n\nconst Spacer = styled.div`\n  flex: 1;\n`;\n\nconst StyledLocaleSwitcher = styled(LocaleSwitcher)`\n  width: auto;\n`;\n\nconst LabelText = styled.span`\n  color: ${colors.label};\n`;\n\nexport interface Props extends Omit<TextAreaProps, 'value' | 'onChange'> {\n  valueMultiloc: Multiloc | null | undefined;\n  onChange: (value: Multiloc, locale: Locale) => void;\n  labelTextElement?: JSX.Element;\n}\n\nconst TextAreaMultilocWithLocaleSwitcher = memo<Props>((props) => {\n  const {\n    valueMultiloc,\n    onChange,\n    className,\n    label,\n    labelTooltipText,\n    labelTextElement,\n    ...textAreaProps\n  } = props;\n\n  const [selectedLocale, setSelectedLocale] = useState<Locale | null>(null);\n\n  const locale = useLocale();\n  const tenantLocales = useAppConfigurationLocales();\n\n  useEffect(() => {\n    !isNilOrError(locale) && setSelectedLocale(locale);\n  }, [locale]);\n\n  const handleValueOnChange = useCallback(\n    (value: string, locale: Locale) => {\n      const newValueMultiloc = {\n        ...(valueMultiloc || {}),\n        [locale]: value,\n      } as Multiloc;\n\n      onChange(newValueMultiloc, locale);\n    },\n    [valueMultiloc, onChange]\n  );\n\n  const handleOnSelectedLocaleChange = useCallback(\n    (newSelectedLocale: Locale) => {\n      setSelectedLocale(newSelectedLocale);\n    },\n    []\n  );\n\n  if (selectedLocale) {\n    const id = `${props.id}-${selectedLocale}`;\n\n    return (\n      <Container className={className}>\n        <LabelContainer>\n          {label || labelTextElement ? (\n            <StyledLabel htmlFor={id}>\n              {labelTextElement || <LabelText>{label}</LabelText>}\n              {labelTooltipText && <IconTooltip content={labelTooltipText} />}\n            </StyledLabel>\n          ) : (\n            <Spacer />\n          )}\n\n          <StyledLocaleSwitcher\n            onSelectedLocaleChange={handleOnSelectedLocaleChange}\n            locales={!isNilOrError(tenantLocales) ? tenantLocales : []}\n            selectedLocale={selectedLocale}\n            values={{ valueMultiloc }}\n          />\n        </LabelContainer>\n\n        <TextArea\n          {...textAreaProps}\n          value={valueMultiloc?.[selectedLocale] || null}\n          locale={selectedLocale}\n          onChange={handleValueOnChange}\n          id={id}\n        />\n      </Container>\n    );\n  }\n\n  return null;\n});\n\nexport default TextAreaMultilocWithLocaleSwitcher;\n","import React from 'react';\nimport { isEmpty, values as getValues, every } from 'lodash-es';\nimport styled from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\nimport { Multiloc, Locale } from 'typings';\nimport { ideaStatusCodes, TIdeaStatusCode } from 'services/ideaStatuses';\n\n// components\nimport FormikColorPickerInput from 'components/UI/FormikColorPickerInput';\nimport FormikRadio from 'components/UI/FormikRadio';\nimport Error from 'components/UI/Error';\nimport { Section, SectionField } from 'components/admin/Section';\nimport { Form, Field, InjectedFormikProps, FormikErrors } from 'formik';\nimport { Label, IconTooltip } from 'cl2-component-library';\nimport FormikTextAreaMultilocWithLocaleSwitcher from 'components/UI/FormikTextAreaMultilocWithLocaleSwitcher';\nimport FormikInputMultilocWithLocaleSwitcher from 'components/UI/FormikInputMultilocWithLocaleSwitcher';\n\nimport FormikSubmitWrapper from 'components/admin/FormikSubmitWrapper';\n\n// i18n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from './messages';\n\nexport interface FormValues {\n  color: string;\n  code: TIdeaStatusCode;\n  title_multiloc: Multiloc;\n  description_multiloc: Multiloc;\n}\n\nexport interface Props {\n  ideaStatusId: string;\n}\n\nconst StyledSection = styled(Section)`\n  margin-bottom: 40px;\n`;\n\nconst StyledFormikRadio = styled(FormikRadio)`\n  margin-bottom: 25px;\n`;\n\nconst LabelText = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: -2px;\n\n  &.disabled {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  .header {\n    padding: 0;\n    margin: 0;\n    margin-bottom: 3px;\n    font-weight: 600;\n    font-size: ${fontSizes.base}px;\n  }\n\n  .description {\n    color: ${colors.adminSecondaryTextColor};\n  }\n`;\n\nconst StyledLabel = styled(Label)`\n  margin-bottom: 32px;\n`;\n\nexport function validate(tenantLocales: Locale[]) {\n  return function (values: FormValues) {\n    const errors: FormikErrors<FormValues> = {};\n    // the default idea statuses have titles for every possible locale,\n    // not just the tenant locale, so without filtering our the\n    // irrelevant languages, the edit form could be submitted\n    // with all titles empty for the tenant locales\n    const tenantLocalesTitleMultiloc = {};\n\n    tenantLocales.forEach((locale) => {\n      tenantLocalesTitleMultiloc[locale] = values.title_multiloc[locale];\n    });\n\n    if (every(getValues(tenantLocalesTitleMultiloc), isEmpty)) {\n      errors.title_multiloc = [{ error: 'blank' }] as any;\n    }\n\n    return errors;\n  };\n}\n\nconst IdeaStatusForm = ({\n  isSubmitting,\n  errors,\n  isValid,\n  touched,\n  status,\n  intl: { formatMessage },\n}: InjectedFormikProps<Props & InjectedIntlProps, FormValues>) => {\n  return (\n    <Form>\n      <StyledSection>\n        <SectionField>\n          <Label>\n            <FormattedMessage {...messages.fieldColor} />\n          </Label>\n          <Field name=\"color\" component={FormikColorPickerInput} />\n        </SectionField>\n      </StyledSection>\n      <StyledSection>\n        <SectionField>\n          <Field\n            name=\"title_multiloc\"\n            component={FormikInputMultilocWithLocaleSwitcher}\n            label={formatMessage(messages.fieldTitle)}\n          />\n          {touched.title_multiloc && (\n            <Error\n              fieldName=\"title_multiloc\"\n              apiErrors={errors.title_multiloc as any}\n            />\n          )}\n        </SectionField>\n      </StyledSection>\n\n      <StyledSection>\n        <SectionField>\n          <Field\n            name=\"description_multiloc\"\n            component={FormikTextAreaMultilocWithLocaleSwitcher}\n            label={formatMessage(messages.fieldDescription)}\n          />\n          {touched.description_multiloc && (\n            <Error\n              fieldName=\"description_multiloc\"\n              apiErrors={errors.description_multiloc as any}\n            />\n          )}\n        </SectionField>\n      </StyledSection>\n\n      <StyledSection>\n        <SectionField>\n          <StyledLabel>\n            <FormattedMessage {...messages.category} />\n            <IconTooltip\n              content={<FormattedMessage {...messages.categoryDescription} />}\n            />\n          </StyledLabel>\n          {ideaStatusCodes.map((code: TIdeaStatusCode, i) => (\n            <StyledFormikRadio\n              key={`code-input-${i}`}\n              label={\n                <LabelText>\n                  <span className=\"header\">\n                    {formatMessage(\n                      {\n                        proposed: messages.proposedFieldCodeTitle,\n                        viewed: messages.viewedFieldCodeTitle,\n                        under_consideration:\n                          messages.under_considerationFieldCodeTitle,\n                        accepted: messages.acceptedFieldCodeTitle,\n                        implemented: messages.implementedFieldCodeTitle,\n                        rejected: messages.rejectedFieldCodeTitle,\n                        custom: messages.customFieldCodeTitle,\n                      }[code]\n                    )}\n                  </span>\n                  {code !== 'custom' && (\n                    <span className=\"description\">\n                      {formatMessage(\n                        {\n                          proposed: messages.proposedFieldCodeDescription,\n                          viewed: messages.viewedFieldCodeDescription,\n                          under_consideration:\n                            messages.under_considerationFieldCodeDescription,\n                          accepted: messages.acceptedFieldCodeDescription,\n                          implemented: messages.implementedFieldCodeDescription,\n                          rejected: messages.rejectedFieldCodeDescription,\n                        }[code]\n                      )}\n                    </span>\n                  )}\n                </LabelText>\n              }\n              id={`${code}-input`}\n              name=\"code\"\n              value={code}\n            />\n          ))}\n          {touched.code && <Error apiErrors={errors.code as any} />}\n        </SectionField>\n      </StyledSection>\n\n      <FormikSubmitWrapper {...{ isValid, isSubmitting, status, touched }} />\n    </Form>\n  );\n};\n\nexport default injectIntl(IdeaStatusForm);\n","import React, { PureComponent, FormEvent } from 'react';\nimport styled from 'styled-components';\nimport Button from 'components/UI/Button';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\nconst Container = styled.div`\n  display: inline-block;\n`;\n\ntype Props = {\n  onClick: (arg: FormEvent) => void;\n  className?: string;\n};\n\ninterface State {}\n\nexport default class GoBackButton extends PureComponent<Props, State> {\n  render() {\n    const { onClick, className } = this.props;\n\n    return (\n      <Container className={className || ''}>\n        <Button\n          onClick={onClick}\n          buttonStyle=\"text\"\n          icon=\"arrow-back\"\n          size=\"2\"\n          padding=\"0px\"\n          text={<FormattedMessage {...messages.goBack} />}\n        />\n      </Container>\n    );\n  }\n}\n"],"sourceRoot":""}