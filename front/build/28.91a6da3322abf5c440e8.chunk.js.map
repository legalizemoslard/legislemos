{"version":3,"sources":["webpack:///./app/modules/commercial/project_folders/admin/containers/settings/ProjectFolderForm.tsx","webpack:///./app/modules/commercial/project_folders/resources/GetProjectFolder.tsx","webpack:///./app/hooks/useAdminPublication.ts","webpack:///./app/components/UI/GoBackButton/messages.ts","webpack:///./app/components/UI/TextAreaMultilocWithLocaleSwitcher/index.tsx","webpack:///./app/modules/commercial/project_folders/admin/containers/messages.ts","webpack:///./app/components/UI/GoBackButton/index.tsx","webpack:///./app/modules/commercial/project_folders/admin/containers/settings/index.tsx"],"names":["injectIntl","mode","projectFolderId","projectFolder","projectFolderFilesRemote","projectFolderImagesRemote","adminPublication","isNilOrError","relationships","admin_publication","data","id","useEffect","setTitleMultiloc","attributes","title_multiloc","setDescriptionMultiloc","description_multiloc","setShortDescriptionMultiloc","description_preview_multiloc","header_bg","large","convertUrlToUploadFile","headerFile","setHeaderBg","setPublicationStatus","publication_status","imagePromises","map","img","versions","Promise","resolve","all","images","filter","setProjectFolderImages","filePromises","file","url","name","files","setProjectFolderFiles","useState","titleMultiloc","shortDescriptionMultiloc","descriptionMultiloc","headerBg","publicationStatus","changedHeaderBg","setChangedHeaderBg","projectFolderImages","projectFolderImagesToRemove","setProjectFolderImagesToRemove","projectFolderFiles","projectFolderFilesToRemove","setProjectFolderFilesToRemove","getHandler","useCallback","setter","value","setStatus","handleHeaderBgOnAdd","newImage","handleHeaderBgOnRemove","handleProjectFolderImageOnRemove","imageToRemove","remote","previous","image","base64","handleProjectFolderFileOnAdd","fileToAdd","some","handleProjectFolderFileOnRemove","fileToRemove","item","status","tenantLocales","validate","valid","every","locale","isEmpty","onSubmit","addProjectFolder","admin_publication_attributes","res","imagesToAddPromises","addProjectFolderImage","filesToAddPromises","addProjectFolderFile","clHistory","push","imagesToRemovePromises","deleteProjectFolderImage","filesToRemovePromises","deleteProjectFolderFile","changedTitleMultiloc","isEqual","changedDescriptionMultiloc","changedShortDescriptionMultiloc","changedPublicationStatus","updateProjectFolder","undefined","Section","SectionField","SubSectionTitle","FormattedMessage","messages","statusLabel","IconTooltip","content","publicationStatusTooltip","Radio","onChange","currentValue","className","label","draftStatus","publishedStatus","archivedStatus","valueMultiloc","type","titleInputLabel","shortDescriptionInputLabel","labelTooltipText","shortDescriptionInputLabelTooltip","descriptionInputLabel","withCTAButton","key","headerImageInputLabel","projectFolderHeaderImageLabelTooltip","acceptedFileTypes","imagePreviewRatio","onAdd","onRemove","projectFolderCardImageLabel","projectFolderCardImageTooltip","maxImagePreviewWidth","fileUploadLabel","fileUploadLabelTooltip","onFileAdd","onFileRemove","loading","onClick","buttonSave","save","buttonSuccess","saveSuccess","messageError","saveErrorMessage","multilocError","messageSuccess","saveSuccessMessage","GetProjectFolder","props","state","this","projectFolderSlug","resetOnChange","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","tap","setState","switchMap","isString","projectFolderByIdStream","observable","projectFolderBySlugStream","of","subscribe","forEach","subscription","unsubscribe","children","React","Component","adminPublicationId","setAdminPublication","adminPublicationByIdStream","response","defineMessages","goBack","defaultMessage","Container","styled","div","LabelContainer","StyledLabel","Label","Spacer","StyledLocaleSwitcher","LocaleSwitcher","LabelText","span","colors","memo","labelTextElement","textAreaProps","selectedLocale","setSelectedLocale","handleValueOnChange","newValueMultiloc","handleOnSelectedLocaleChange","newSelectedLocale","htmlFor","onSelectedLocaleChange","locales","values","titleSettingsTab","subtitleSettingsTab","viewPublicProjectFolder","projectFolderSettingsTab","projectFolderPermissionsTab","projectFolderProjectsTab","titleNewFolder","subtitleNewFolder","projectsAlreadyAdded","projectsYouCanAdd","folderEmptyGoBackToAdd","addToFolder","removeFromFolder","deleteFolderLabel","noProjectsToAdd","GoBackButton","buttonStyle","icon","size","padding","text","PureComponent","Header","StyledGoBackButton","FolderSettingsWithHoCs","withRouter","params","SectionTitle","SectionDescription","Data","adopt","render","inputProps","dataProps"],"mappings":"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","file":"28.91a6da3322abf5c440e8.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport clHistory from 'utils/cl-router/history';\nimport { isEmpty, isEqual } from 'lodash-es';\n\nimport { Multiloc, UploadFile } from 'typings';\n\nimport { isNilOrError } from 'utils/helperUtils';\nimport {\n  addProjectFolder,\n  updateProjectFolder,\n} from '../../../services/projectFolders';\nimport {\n  addProjectFolderImage,\n  deleteProjectFolderImage,\n} from '../../../services/projectFolderImages';\nimport { convertUrlToUploadFile } from 'utils/fileTools';\nimport useProjectFolderImages from '../../../hooks/useProjectFolderImages';\nimport useProjectFolder from '../../../hooks/useProjectFolder';\nimport useAppConfigurationLocales from 'hooks/useAppConfigurationLocales';\n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport messages from '../messages';\n\nimport {\n  SectionField,\n  Section,\n  SubSectionTitle,\n} from 'components/admin/Section';\nimport ImagesDropzone from 'components/UI/ImagesDropzone';\nimport SubmitWrapper from 'components/admin/SubmitWrapper';\nimport TextAreaMultilocWithLocaleSwitcher from 'components/UI/TextAreaMultilocWithLocaleSwitcher';\nimport InputMultilocWithLocaleSwitcher from 'components/UI/InputMultilocWithLocaleSwitcher';\nimport QuillMutilocWithLocaleSwitcher from 'components/UI/QuillEditor/QuillMultilocWithLocaleSwitcher';\nimport { IconTooltip, Radio } from 'cl2-component-library';\nimport FileUploader from 'components/UI/FileUploader';\nimport {\n  addProjectFolderFile,\n  deleteProjectFolderFile,\n} from '../../../services/projectFolderFiles';\nimport useProjectFolderFiles from '../../../hooks/useProjectFolderFiles';\nimport useAdminPublication from 'hooks/useAdminPublication';\n\ninterface Props {\n  mode: 'edit' | 'new';\n  projectFolderId: string;\n}\n\nconst ProjectFolderForm = ({ mode, projectFolderId }: Props) => {\n  const projectFolder = useProjectFolder({ projectFolderId });\n  const projectFolderFilesRemote = useProjectFolderFiles(projectFolderId);\n  const projectFolderImagesRemote = useProjectFolderImages(projectFolderId);\n  const adminPublication = useAdminPublication(\n    !isNilOrError(projectFolder)\n      ? projectFolder.relationships.admin_publication.data?.id || null\n      : null\n  );\n\n  useEffect(() => {\n    (async () => {\n      if (mode === 'edit' && !isNilOrError(projectFolder)) {\n        setTitleMultiloc(projectFolder.attributes.title_multiloc);\n        setDescriptionMultiloc(projectFolder.attributes.description_multiloc);\n        setShortDescriptionMultiloc(\n          projectFolder.attributes.description_preview_multiloc\n        );\n\n        if (projectFolder.attributes?.header_bg?.large) {\n          const headerFile = await convertUrlToUploadFile(\n            projectFolder.attributes?.header_bg?.large,\n            null,\n            null\n          );\n          setHeaderBg(headerFile);\n        }\n      }\n    })();\n  }, [mode, projectFolder]);\n\n  useEffect(() => {\n    if (mode === 'edit' && !isNilOrError(adminPublication)) {\n      setPublicationStatus(adminPublication.attributes.publication_status);\n    }\n  }, [mode, adminPublication]);\n\n  useEffect(() => {\n    (async () => {\n      if (mode === 'edit' && !isNilOrError(projectFolderImagesRemote)) {\n        const imagePromises = projectFolderImagesRemote.data.map((img) =>\n          img.attributes.versions.large\n            ? convertUrlToUploadFile(\n                img.attributes.versions.large,\n                img.id,\n                null\n              )\n            : new Promise<null>((resolve) => resolve(null))\n        );\n        const images = await Promise.all(imagePromises);\n        images.filter((img) => img);\n        setProjectFolderImages(images as UploadFile[]);\n      }\n    })();\n  }, [mode, projectFolderImagesRemote]);\n\n  useEffect(() => {\n    (async () => {\n      if (mode === 'edit' && !isNilOrError(projectFolderFilesRemote)) {\n        const filePromises = projectFolderFilesRemote.data.map((file) =>\n          convertUrlToUploadFile(\n            file.attributes.file.url,\n            file.id,\n            file.attributes.name\n          )\n        );\n        const files = await Promise.all(filePromises);\n        files.filter((file) => file);\n        setProjectFolderFiles(files as UploadFile[]);\n      }\n    })();\n  }, [mode, projectFolderFilesRemote]);\n\n  // input handling\n  const [titleMultiloc, setTitleMultiloc] = useState<Multiloc | null>(null);\n  const [\n    shortDescriptionMultiloc,\n    setShortDescriptionMultiloc,\n  ] = useState<Multiloc | null>(null);\n  const [\n    descriptionMultiloc,\n    setDescriptionMultiloc,\n  ] = useState<Multiloc | null>(null);\n  const [headerBg, setHeaderBg] = useState<UploadFile | null>(null);\n  const [publicationStatus, setPublicationStatus] = useState<\n    'published' | 'draft' | 'archived'\n  >('published');\n  const [changedHeaderBg, setChangedHeaderBg] = useState(false);\n  const [projectFolderImages, setProjectFolderImages] = useState<UploadFile[]>(\n    []\n  );\n  const [\n    projectFolderImagesToRemove,\n    setProjectFolderImagesToRemove,\n  ] = useState<string[]>([]);\n  const [projectFolderFiles, setProjectFolderFiles] = useState<UploadFile[]>(\n    []\n  );\n  const [projectFolderFilesToRemove, setProjectFolderFilesToRemove] = useState<\n    string[]\n  >([]);\n\n  const getHandler = useCallback(\n    (setter: (value: any) => void) => (value: any) => {\n      setStatus('enabled');\n      setter(value);\n    },\n    []\n  );\n\n  const handleHeaderBgOnAdd = useCallback((newImage: UploadFile[]) => {\n    setStatus('enabled');\n\n    setChangedHeaderBg(true);\n    setHeaderBg(newImage[0]);\n  }, []);\n\n  const handleHeaderBgOnRemove = useCallback(() => {\n    setStatus('enabled');\n\n    setChangedHeaderBg(true);\n    setHeaderBg(null);\n  }, []);\n\n  const handleProjectFolderImageOnRemove = useCallback(\n    (imageToRemove: UploadFile) => {\n      setStatus('enabled');\n\n      if (imageToRemove.remote && imageToRemove.id) {\n        setProjectFolderImagesToRemove((previous) => {\n          return [...previous, imageToRemove.id as string];\n        });\n      }\n\n      setProjectFolderImages((previous) => {\n        return previous.filter(\n          (image) => image.base64 !== imageToRemove.base64\n        );\n      });\n    },\n    []\n  );\n\n  const handleProjectFolderFileOnAdd = useCallback((fileToAdd: UploadFile) => {\n    setStatus('enabled');\n\n    setProjectFolderFiles((previous) => {\n      const isDuplicate = previous.some(\n        (file) => file.base64 === fileToAdd.base64\n      );\n\n      return isDuplicate ? previous : [...previous, fileToAdd];\n    });\n  }, []);\n\n  const handleProjectFolderFileOnRemove = useCallback(\n    (fileToRemove: UploadFile) => {\n      setStatus('enabled');\n      if (fileToRemove.remote && fileToRemove.id) {\n        setProjectFolderFilesToRemove((previous) => [\n          ...previous,\n          fileToRemove.id as string,\n        ]);\n      }\n      setProjectFolderFiles((previous) =>\n        previous.filter((item) => item.id !== fileToRemove.id)\n      );\n    },\n    []\n  );\n\n  // form status\n  const [status, setStatus] = useState<\n    'enabled' | 'error' | 'apiError' | 'success' | 'disabled' | 'loading'\n  >('disabled');\n\n  // validation\n  const tenantLocales = useAppConfigurationLocales();\n\n  const validate = useCallback(() => {\n    let valid = false;\n    if (!isNilOrError(tenantLocales)) {\n      // check that all fields have content for all tenant locales\n      valid = tenantLocales.every(\n        (locale) =>\n          !isEmpty(titleMultiloc?.[locale]) &&\n          !isEmpty(descriptionMultiloc?.[locale]) &&\n          !isEmpty(shortDescriptionMultiloc?.[locale])\n      );\n    }\n    if (!valid) {\n      setStatus('error');\n    }\n\n    return valid;\n  }, [\n    tenantLocales,\n    titleMultiloc,\n    descriptionMultiloc,\n    shortDescriptionMultiloc,\n  ]);\n\n  // form submission\n  const onSubmit = async () => {\n    if (validate()) {\n      setStatus('loading');\n      if (mode === 'new') {\n        try {\n          if (\n            titleMultiloc &&\n            descriptionMultiloc &&\n            shortDescriptionMultiloc\n          ) {\n            const res = await addProjectFolder({\n              title_multiloc: titleMultiloc,\n              description_multiloc: descriptionMultiloc,\n              description_preview_multiloc: shortDescriptionMultiloc,\n              header_bg: headerBg?.base64,\n              admin_publication_attributes: {\n                publication_status: publicationStatus,\n              },\n            });\n            if (!isNilOrError(res)) {\n              const imagesToAddPromises = projectFolderImages.map((file) =>\n                addProjectFolderImage(res.id, file.base64)\n              );\n              const filesToAddPromises = projectFolderFiles.map((file) =>\n                addProjectFolderFile(res.id, file.base64, file.name)\n              );\n\n              (imagesToAddPromises || filesToAddPromises) &&\n                (await Promise.all<any>([\n                  ...imagesToAddPromises,\n                  ...filesToAddPromises,\n                ]));\n\n              clHistory.push(`/admin/projects/folders/${res.id}`);\n            }\n          }\n        } finally {\n          setStatus('apiError');\n        }\n      } else {\n        try {\n          if (\n            titleMultiloc &&\n            descriptionMultiloc &&\n            shortDescriptionMultiloc &&\n            !isNilOrError(projectFolder)\n          ) {\n            const imagesToAddPromises = projectFolderImages\n              .filter((file) => !file.remote)\n              .map((file) =>\n                addProjectFolderImage(projectFolderId as string, file.base64)\n              );\n            const imagesToRemovePromises = projectFolderImagesToRemove.map(\n              (id) => deleteProjectFolderImage(projectFolderId as string, id)\n            );\n            const filesToAddPromises = projectFolderFiles\n              .filter((file) => !file.remote)\n              .map((file) =>\n                addProjectFolderFile(\n                  projectFolderId as string,\n                  file.base64,\n                  file.name\n                )\n              );\n            const filesToRemovePromises = projectFolderFilesToRemove.map((id) =>\n              deleteProjectFolderFile(projectFolderId as string, id)\n            );\n\n            imagesToAddPromises &&\n              (await Promise.all<any>([\n                ...imagesToAddPromises,\n                ...imagesToRemovePromises,\n                ...filesToAddPromises,\n                ...filesToRemovePromises,\n              ]));\n\n            const changedTitleMultiloc = !isEqual(\n              titleMultiloc,\n              projectFolder.attributes.title_multiloc\n            );\n            const changedDescriptionMultiloc = !isEqual(\n              descriptionMultiloc,\n              projectFolder.attributes.description_multiloc\n            );\n            const changedShortDescriptionMultiloc = !isEqual(\n              shortDescriptionMultiloc,\n              projectFolder.attributes.description_preview_multiloc\n            );\n            const changedPublicationStatus =\n              isNilOrError(adminPublication) ||\n              !isEqual(\n                publicationStatus,\n                adminPublication.attributes.publication_status\n              );\n\n            if (\n              changedTitleMultiloc ||\n              changedDescriptionMultiloc ||\n              changedShortDescriptionMultiloc ||\n              changedHeaderBg ||\n              changedPublicationStatus\n            ) {\n              const res = await updateProjectFolder(\n                projectFolderId,\n                {\n                  title_multiloc: changedTitleMultiloc\n                    ? titleMultiloc\n                    : undefined,\n                  description_multiloc: changedDescriptionMultiloc\n                    ? descriptionMultiloc\n                    : undefined,\n                  description_preview_multiloc: changedShortDescriptionMultiloc\n                    ? shortDescriptionMultiloc\n                    : undefined,\n                  header_bg: changedHeaderBg ? headerBg?.base64 : undefined,\n                  admin_publication_attributes: {\n                    publication_status: publicationStatus,\n                  },\n                },\n                !isNilOrError(projectFolder)\n                  ? projectFolder.relationships.admin_publication.data?.id\n                  : undefined\n              );\n\n              if (isNilOrError(res)) {\n                setStatus('apiError');\n              }\n            }\n            setStatus('success');\n          } else {\n            setStatus('apiError');\n          }\n        } catch {\n          setStatus('apiError');\n        }\n      }\n    }\n  };\n\n  // ---- Rendering\n  if (mode === 'edit' && isNilOrError(projectFolder)) return null;\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Section>\n        <SectionField>\n          <SubSectionTitle>\n            <FormattedMessage {...messages.statusLabel} />\n            <IconTooltip\n              content={\n                <FormattedMessage {...messages.publicationStatusTooltip} />\n              }\n            />\n          </SubSectionTitle>\n          <Radio\n            onChange={getHandler(setPublicationStatus)}\n            currentValue={publicationStatus}\n            value=\"draft\"\n            name=\"projectstatus\"\n            id=\"projecstatus-draft\"\n            className=\"e2e-projecstatus-draft\"\n            label={<FormattedMessage {...messages.draftStatus} />}\n          />\n          <Radio\n            onChange={getHandler(setPublicationStatus)}\n            currentValue={publicationStatus}\n            value=\"published\"\n            name=\"projectstatus\"\n            id=\"projecstatus-published\"\n            className=\"e2e-projecstatus-published\"\n            label={<FormattedMessage {...messages.publishedStatus} />}\n          />\n          <Radio\n            onChange={getHandler(setPublicationStatus)}\n            currentValue={publicationStatus}\n            value=\"archived\"\n            name=\"projectstatus\"\n            id=\"projecstatus-archived\"\n            className=\"e2e-projecstatus-archived\"\n            label={<FormattedMessage {...messages.archivedStatus} />}\n          />\n        </SectionField>\n        <SectionField>\n          <InputMultilocWithLocaleSwitcher\n            valueMultiloc={titleMultiloc}\n            type=\"text\"\n            onChange={getHandler(setTitleMultiloc)}\n            label={<FormattedMessage {...messages.titleInputLabel} />}\n          />\n        </SectionField>\n        <SectionField>\n          <TextAreaMultilocWithLocaleSwitcher\n            valueMultiloc={shortDescriptionMultiloc}\n            name=\"textAreaMultiloc\"\n            onChange={getHandler(setShortDescriptionMultiloc)}\n            label={\n              <FormattedMessage {...messages.shortDescriptionInputLabel} />\n            }\n            labelTooltipText={\n              <FormattedMessage\n                {...messages.shortDescriptionInputLabelTooltip}\n              />\n            }\n          />\n        </SectionField>\n        <SectionField>\n          <QuillMutilocWithLocaleSwitcher\n            id=\"description\"\n            valueMultiloc={descriptionMultiloc}\n            onChange={getHandler(setDescriptionMultiloc)}\n            label={<FormattedMessage {...messages.descriptionInputLabel} />}\n            withCTAButton\n          />\n        </SectionField>\n\n        <SectionField key={'header_bg'}>\n          <SubSectionTitle>\n            <FormattedMessage {...messages.headerImageInputLabel} />\n            <IconTooltip\n              content={\n                <FormattedMessage\n                  {...messages.projectFolderHeaderImageLabelTooltip}\n                />\n              }\n            />\n          </SubSectionTitle>\n          <ImagesDropzone\n            acceptedFileTypes=\"image/jpg, image/jpeg, image/png, image/gif\"\n            images={headerBg ? [headerBg] : null}\n            imagePreviewRatio={250 / 1380}\n            onAdd={handleHeaderBgOnAdd}\n            onRemove={handleHeaderBgOnRemove}\n          />\n        </SectionField>\n\n        <SectionField>\n          <SubSectionTitle>\n            <FormattedMessage {...messages.projectFolderCardImageLabel} />\n            <IconTooltip\n              content={\n                <FormattedMessage {...messages.projectFolderCardImageTooltip} />\n              }\n            />\n          </SubSectionTitle>\n          <ImagesDropzone\n            images={projectFolderImages}\n            imagePreviewRatio={960 / 1440}\n            maxImagePreviewWidth=\"240px\"\n            acceptedFileTypes=\"image/jpg, image/jpeg, image/png, image/gif\"\n            onAdd={getHandler(setProjectFolderImages)}\n            onRemove={handleProjectFolderImageOnRemove}\n          />\n        </SectionField>\n        <SectionField>\n          <SubSectionTitle>\n            <FormattedMessage {...messages.fileUploadLabel} />\n            <IconTooltip\n              content={\n                <FormattedMessage {...messages.fileUploadLabelTooltip} />\n              }\n            />\n          </SubSectionTitle>\n          <FileUploader\n            onFileAdd={handleProjectFolderFileOnAdd}\n            onFileRemove={handleProjectFolderFileOnRemove}\n            files={projectFolderFiles}\n          />\n        </SectionField>\n        <SubmitWrapper\n          loading={status === 'loading'}\n          status={\n            status === 'loading'\n              ? 'disabled'\n              : status === 'apiError'\n              ? 'error'\n              : status\n          }\n          onClick={onSubmit}\n          messages={{\n            buttonSave: messages.save,\n            buttonSuccess: messages.saveSuccess,\n            messageError:\n              status === 'apiError'\n                ? messages.saveErrorMessage\n                : messages.multilocError,\n            messageSuccess: messages.saveSuccessMessage,\n          }}\n        />\n      </Section>\n    </form>\n  );\n};\n\nexport default injectIntl(ProjectFolderForm);\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { Subscription, BehaviorSubject, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { isNilOrError } from 'utils/helperUtils';\nimport shallowCompare from 'utils/shallowCompare';\nimport {\n  projectFolderByIdStream,\n  projectFolderBySlugStream,\n  IProjectFolderData,\n} from '../services/projectFolders';\n\ninterface InputProps {\n  projectFolderId?: string | null;\n  projectFolderSlug?: string | null;\n  resetOnChange?: boolean;\n}\n\ntype children = (renderProps: GetProjectFolderChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  projectFolder: IProjectFolderData | undefined | null | Error;\n}\n\nexport type GetProjectFolderChildProps =\n  | IProjectFolderData\n  | undefined\n  | null\n  | Error;\n\nexport default class GetProjectFolder extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  static defaultProps = {\n    resetOnChange: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      projectFolder: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { projectFolderId, projectFolderSlug, resetOnChange } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({\n      projectFolderId,\n      projectFolderSlug,\n    });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          tap(\n            () => resetOnChange && this.setState({ projectFolder: undefined })\n          ),\n          switchMap(({ projectFolderId, projectFolderSlug }) => {\n            if (isString(projectFolderId)) {\n              return projectFolderByIdStream(projectFolderId).observable;\n            } else if (isString(projectFolderSlug)) {\n              return projectFolderBySlugStream(projectFolderSlug).observable;\n            }\n\n            return of(null);\n          })\n        )\n        .subscribe((projectFolder) => {\n          this.setState({\n            projectFolder: !isNilOrError(projectFolder)\n              ? projectFolder.data\n              : projectFolder,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { projectFolderId, projectFolderSlug } = this.props;\n    this.inputProps$.next({ projectFolderId, projectFolderSlug });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { projectFolder } = this.state;\n    return (children as children)(projectFolder);\n  }\n}\n","import { useState, useEffect } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { Observable, of } from 'rxjs';\nimport {\n  adminPublicationByIdStream,\n  IAdminPublicationData,\n} from 'services/adminPublications';\n\nexport default function useAdminPublication(adminPublicationId: string | null) {\n  const [adminPublication, setAdminPublication] = useState<\n    IAdminPublicationData | undefined | null | Error\n  >(undefined);\n\n  useEffect(() => {\n    setAdminPublication(undefined);\n\n    let observable: Observable<{ data: IAdminPublicationData } | null> = of(\n      null\n    );\n\n    if (adminPublicationId) {\n      observable = adminPublicationByIdStream(adminPublicationId).observable;\n    }\n\n    const subscription = observable.subscribe((response) => {\n      const adminPublication = !isNilOrError(response)\n        ? response.data\n        : response;\n      setAdminPublication(adminPublication);\n    });\n\n    return () => subscription.unsubscribe();\n  }, [adminPublicationId]);\n\n  return adminPublication;\n}\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  goBack: {\n    id: 'app.components.GoBackButton.group.edit.goBack',\n    defaultMessage: 'Go back',\n  },\n});\n","import React, { memo, useState, useCallback, useEffect } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport TextArea, { Props as TextAreaProps } from 'components/UI/TextArea';\nimport { IconTooltip, LocaleSwitcher, Label } from 'cl2-component-library';\n\n// hooks\nimport useLocale from 'hooks/useLocale';\nimport useAppConfigurationLocales from 'hooks/useAppConfigurationLocales';\n\n// style\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\n\n// typings\nimport { Locale, Multiloc } from 'typings';\n\nconst Container = styled.div``;\n\nconst LabelContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\n\nconst StyledLabel = styled(Label)`\n  flex: 1;\n  padding: 0;\n  margin: 0;\n`;\n\nconst Spacer = styled.div`\n  flex: 1;\n`;\n\nconst StyledLocaleSwitcher = styled(LocaleSwitcher)`\n  width: auto;\n`;\n\nconst LabelText = styled.span`\n  color: ${colors.label};\n`;\n\nexport interface Props extends Omit<TextAreaProps, 'value' | 'onChange'> {\n  valueMultiloc: Multiloc | null | undefined;\n  onChange: (value: Multiloc, locale: Locale) => void;\n  labelTextElement?: JSX.Element;\n}\n\nconst TextAreaMultilocWithLocaleSwitcher = memo<Props>((props) => {\n  const {\n    valueMultiloc,\n    onChange,\n    className,\n    label,\n    labelTooltipText,\n    labelTextElement,\n    ...textAreaProps\n  } = props;\n\n  const [selectedLocale, setSelectedLocale] = useState<Locale | null>(null);\n\n  const locale = useLocale();\n  const tenantLocales = useAppConfigurationLocales();\n\n  useEffect(() => {\n    !isNilOrError(locale) && setSelectedLocale(locale);\n  }, [locale]);\n\n  const handleValueOnChange = useCallback(\n    (value: string, locale: Locale) => {\n      const newValueMultiloc = {\n        ...(valueMultiloc || {}),\n        [locale]: value,\n      } as Multiloc;\n\n      onChange(newValueMultiloc, locale);\n    },\n    [valueMultiloc, onChange]\n  );\n\n  const handleOnSelectedLocaleChange = useCallback(\n    (newSelectedLocale: Locale) => {\n      setSelectedLocale(newSelectedLocale);\n    },\n    []\n  );\n\n  if (selectedLocale) {\n    const id = `${props.id}-${selectedLocale}`;\n\n    return (\n      <Container className={className}>\n        <LabelContainer>\n          {label || labelTextElement ? (\n            <StyledLabel htmlFor={id}>\n              {labelTextElement || <LabelText>{label}</LabelText>}\n              {labelTooltipText && <IconTooltip content={labelTooltipText} />}\n            </StyledLabel>\n          ) : (\n            <Spacer />\n          )}\n\n          <StyledLocaleSwitcher\n            onSelectedLocaleChange={handleOnSelectedLocaleChange}\n            locales={!isNilOrError(tenantLocales) ? tenantLocales : []}\n            selectedLocale={selectedLocale}\n            values={{ valueMultiloc }}\n          />\n        </LabelContainer>\n\n        <TextArea\n          {...textAreaProps}\n          value={valueMultiloc?.[selectedLocale] || null}\n          locale={selectedLocale}\n          onChange={handleValueOnChange}\n          id={id}\n        />\n      </Container>\n    );\n  }\n\n  return null;\n});\n\nexport default TextAreaMultilocWithLocaleSwitcher;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  // edit - index\n  titleSettingsTab: {\n    id: 'app.containers.AdminPage.FoldersEdit.titleSettingsTab',\n    defaultMessage: 'Settings',\n  },\n  subtitleSettingsTab: {\n    id: 'app.containers.AdminPage.FoldersEdit.subtitleSettingsTab',\n    defaultMessage:\n      'Explain why grouped project belong together, define a visual identity, expose shared information.',\n  },\n  viewPublicProjectFolder: {\n    id: 'app.containers.AdminPage.FoldersEdit.viewPublicProjectFolder',\n    defaultMessage: 'View Folder',\n  },\n  projectFolderSettingsTab: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectFolderSettingsTab',\n    defaultMessage: 'Settings',\n  },\n  projectFolderPermissionsTab: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectFolderPermissionsTab',\n    defaultMessage: 'Permissions',\n  },\n  projectFolderProjectsTab: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectFolderProjectsTab',\n    defaultMessage: 'Projects',\n  },\n  titleInputLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.titleInputLabel',\n    defaultMessage: 'Title',\n  },\n  shortDescriptionInputLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.shortDescriptionInputLabel',\n    defaultMessage: 'Short description',\n  },\n  shortDescriptionInputLabelTooltip: {\n    id:\n      'app.containers.AdminPage.FoldersEdit.shortDescriptionInputLabelTooltip',\n    defaultMessage: 'shown in the landing page',\n  },\n  descriptionInputLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.descriptionInputLabel',\n    defaultMessage: 'Description',\n  },\n  headerImageInputLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.headerImageInputLabel',\n    defaultMessage: 'Header image',\n  },\n  projectFolderHeaderImageLabelTooltip: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.projectFolderHeaderImageLabelTooltip',\n    defaultMessage:\n      'This is the image displayed in the header on the folder page. The ideal dimensions for this image are a width between 1480 and 1280 pixels, and a height of 250 pixels.',\n  },\n  projectFolderCardImageLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectFolderCardImageLabel',\n    defaultMessage: 'Folder card image',\n  },\n  projectFolderCardImageTooltip: {\n    id: 'app.containers.AdminPage.ProjectEdit.projectFolderCardImageTooltip',\n    defaultMessage:\n      'This is the image displayed in the folder card. The ideal dimensions for this image are a width of 1440 pixels and a height between 1440 and 720 pixels.',\n  },\n  save: {\n    id: 'app.containers.AdminPage.FoldersEdit.save',\n    defaultMessage: 'Save',\n  },\n  saveSuccess: {\n    id: 'app.containers.AdminPage.FoldersEdit.saveSuccess',\n    defaultMessage: 'Success!',\n  },\n  saveErrorMessage: {\n    id: 'app.containers.AdminPage.FoldersEdit.saveErrorMessage',\n    defaultMessage: 'Something went wrong, please try again later.',\n  },\n  multilocError: {\n    id: 'app.containers.AdminPage.FoldersEdit.multilocError',\n    defaultMessage: 'All text fields must be fully filled in.',\n  },\n  saveSuccessMessage: {\n    id: 'app.containers.AdminPage.FoldersEdit.saveSuccessMessage',\n    defaultMessage: 'Your changes have been saved.',\n  },\n  titleNewFolder: {\n    id: 'app.containers.AdminPage.FoldersEdit.titleNewFolder',\n    defaultMessage: 'Create a new folder',\n  },\n  subtitleNewFolder: {\n    id: 'app.containers.AdminPage.FoldersEdit.subtitleNewFolder',\n    defaultMessage:\n      'Explain why grouped project belong together, define a visual identity, expose shared information.',\n  },\n  projectsAlreadyAdded: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectsAlreadyAdded',\n    defaultMessage: 'Projects added to this folder',\n  },\n  projectsYouCanAdd: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectsYouCanAdd',\n    defaultMessage: 'Projects you can add to this folder',\n  },\n  folderEmptyGoBackToAdd: {\n    id: 'app.containers.AdminPage.FoldersEdit.folderEmptyGoBackToAdd',\n    defaultMessage:\n      'There are no projects in this folder. Go back to the main Projects tab to create and add projects.',\n  },\n  addToFolder: {\n    id: 'app.containers.AdminPage.FoldersEdit.addToFolder',\n    defaultMessage: 'Add to folder',\n  },\n  removeFromFolder: {\n    id: 'app.containers.AdminPage.FoldersEdit.removeFromFolder',\n    defaultMessage: 'Remove from folder',\n  },\n  deleteFolderLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.deleteFolderLabel',\n    defaultMessage: 'Delete this folder',\n  },\n  noProjectsToAdd: {\n    id: 'app.containers.AdminPage.FoldersEdit.noProjectsToAdd',\n    defaultMessage: 'There are no projects that you can add to this folder.',\n  },\n  fileUploadLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.fileUploadLabel',\n    defaultMessage: 'Add files to this folder',\n  },\n  fileUploadLabelTooltip: {\n    id: 'app.containers.AdminPage.FoldersEdit.fileUploadLabelTooltip',\n    defaultMessage:\n      'Files should not be larger than 50Mb. Added files will be shown on the folder page.',\n  },\n  statusLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.statusLabel',\n    defaultMessage: 'Publication status',\n  },\n  publicationStatusTooltip: {\n    id: 'app.containers.AdminPage.FoldersEdit.publicationStatusTooltip',\n    defaultMessage:\n      'Choose whether this folder is \"draft\", \"published\" or \"archived\".',\n  },\n  draftStatus: {\n    id: 'app.containers.AdminPage.FoldersEdit.draftStatus',\n    defaultMessage: 'Draft',\n  },\n  publishedStatus: {\n    id: 'app.containers.AdminPage.FoldersEdit.publishedStatus',\n    defaultMessage: 'Published',\n  },\n  archivedStatus: {\n    id: 'app.containers.AdminPage.FoldersEdit.archivedStatus',\n    defaultMessage: 'Archived',\n  },\n});\n","import React, { PureComponent, FormEvent } from 'react';\nimport styled from 'styled-components';\nimport Button from 'components/UI/Button';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\nconst Container = styled.div`\n  display: inline-block;\n`;\n\ntype Props = {\n  onClick: (arg: FormEvent) => void;\n  className?: string;\n};\n\ninterface State {}\n\nexport default class GoBackButton extends PureComponent<Props, State> {\n  render() {\n    const { onClick, className } = this.props;\n\n    return (\n      <Container className={className || ''}>\n        <Button\n          onClick={onClick}\n          buttonStyle=\"text\"\n          icon=\"arrow-back\"\n          size=\"2\"\n          padding=\"0px\"\n          text={<FormattedMessage {...messages.goBack} />}\n        />\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport styled from 'styled-components';\nimport { SectionTitle, SectionDescription } from 'components/admin/Section';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\nimport { isNilOrError } from 'utils/helperUtils';\nimport clHistory from 'utils/cl-router/history';\nimport GetProjectFolder, {\n  GetProjectFolderChildProps,\n} from '../../../resources/GetProjectFolder';\nimport { adopt } from 'react-adopt';\nimport GoBackButton from 'components/UI/GoBackButton';\nimport ProjectFolderForm from './ProjectFolderForm';\n\nconst Container = styled.div<{ mode: 'edit' | 'new' }>`\n  display: flex;\n  flex-direction: column;\n  ${({ mode }) =>\n    mode === 'new'\n      ? `\n    background: #fff;\n    border-radius: 3px;\n    border: 1px solid #e0e0e0;\n    box-sizing: border-box;\n    padding: 3.5rem 4rem;\n    margin-bottom: 60px;\n  `\n      : ''}\n`;\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  margin-bottom: 50px;\n`;\n\nconst StyledGoBackButton = styled(GoBackButton)`\n  display: flex;\n  justify-content: start;\n  margin-bottom: 20px;\n`;\n\nconst goBack = () => {\n  clHistory.push('/admin/projects');\n};\n\ninterface DataProps {\n  projectFolder: GetProjectFolderChildProps;\n}\n\nconst FolderSettings = ({\n  params,\n  projectFolder,\n}: WithRouterProps & DataProps) => {\n  const { projectFolderId } = params;\n  const mode = projectFolderId ? 'edit' : 'new';\n\n  // ---- Rendering\n  if (mode === 'edit' && isNilOrError(projectFolder)) return null;\n\n  return (\n    <>\n      {mode === 'new' && <StyledGoBackButton onClick={goBack} />}\n      <Container mode={mode}>\n        {mode === 'edit' ? (\n          <>\n            <SectionTitle>\n              {<FormattedMessage {...messages.titleSettingsTab} />}\n            </SectionTitle>\n            <SectionDescription>\n              <FormattedMessage {...messages.subtitleSettingsTab} />\n            </SectionDescription>\n          </>\n        ) : (\n          <Header>\n            <SectionTitle>\n              {<FormattedMessage {...messages.titleNewFolder} />}\n            </SectionTitle>\n            <SectionDescription>\n              <FormattedMessage {...messages.subtitleNewFolder} />\n            </SectionDescription>\n          </Header>\n        )}\n        <ProjectFolderForm mode={mode} projectFolderId={projectFolderId} />\n      </Container>\n    </>\n  );\n};\n\nconst FolderSettingsWithHoCs = withRouter(FolderSettings);\n\nconst Data = adopt<DataProps, WithRouterProps>({\n  projectFolder: ({ params, render }) => (\n    <GetProjectFolder projectFolderId={params.projectFolderId}>\n      {render}\n    </GetProjectFolder>\n  ),\n});\n\nexport default (inputProps: WithRouterProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <FolderSettingsWithHoCs {...inputProps} {...dataProps} />}\n  </Data>\n);\n"],"sourceRoot":""}