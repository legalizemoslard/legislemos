{"version":3,"sources":["webpack:///./app/modules/commercial/widgets/admin/containers/IdeasWidget/index.tsx","webpack:///./app/modules/commercial/widgets/admin/containers/WidgetCode.tsx","webpack:///./app/components/UI/FormikColorPickerInput/index.tsx","webpack:///./app/modules/commercial/widgets/admin/containers/IdeasWidget/tracks.ts","webpack:///./app/components/UI/FormikToggle/index.tsx","webpack:///./app/components/UI/FormikMultipleSelect/index.tsx","webpack:///./app/modules/commercial/widgets/admin/containers/WidgetPreview.tsx","webpack:///./app/resources/GetTopics.tsx","webpack:///./app/components/UI/FormikInput/index.tsx","webpack:///./app/modules/commercial/widgets/admin/containers/IdeasWidget/Form.tsx","webpack:///./app/components/UI/FormikSelect/index.tsx","webpack:///./app/modules/commercial/widgets/admin/containers/index.tsx"],"names":["Container","styled","div","WidgetConfigWrapper","WidgetPreviewWrapper","WidgetTitle","h3","StyledWidgetPreview","WidgetPreview","IdeasWidget","props","debounce","stateUpdate","setState","formatMessage","intl","width","height","siteBgColor","bgColor","textColor","accentColor","font","fontSize","relativeLink","showHeader","showLogo","headerText","messages","fieldHeaderTextDefault","headerSubText","fieldHeaderSubTextDefault","showFooter","buttonText","fieldButtonTextDefault","sort","projects","topics","limit","values","setSubmitting","widgetParams","state","cleanedParams","omitBy","v","isNil","isString","isEmpty","stringify","codeModalOpened","trackEventByName","tracks","clickAdminExportHTML","name","debouncedSetState","initialValues","this","FormattedMessage","settingsTitle","Formik","render","renderIdeasFormFn","validate","onSubmit","handleOnSubmit","previewTitle","path","generateWidgetParams","onClick","handleShowCodeClick","buttonStyle","icon","exportHtmlCodeButton","opened","close","handleCloseCodeModal","fixedHeight","PureComponent","injectIntl","CodeSnippet","textarea","colors","lightGreyishBlue","adminBorder","theme","borderRadius","WidgetCode","createRef","event","target","select","ref","current","document","execCommand","copied","setTimeout","selection","window","getSelection","removeAllRanges","tenant","isNilOrError","text","attributes","host","htmlCodeTitle","htmlCodeExplanation","value","readOnly","onFocus","handleFocus","snippetRef","copy","copyToClipboard","inputProps","newValue","form","setFieldValue","field","ColorPickerInput","onChange","handleOnChange","React","Component","Toggle","checked","newOption","map","o","StyledIframe","iframe","className","frameBorder","scrolling","src","GetTopics","undefined","topicIds","code","exclude_code","projectId","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","isEqual","switchMap","queryParameters","projectTopicsStream","observable","data","filter","topic","relationships","id","combineLatest","topicId","topicByIdStream","length","of","topicsStream","subscribe","forEach","subscription","unsubscribe","children","_locale","Input","StyledCollapse","Collapse","StyledSection","Section","WidgetForm","resources","resource","label","localize","title_multiloc","sortTrending","sortPopular","sortNewest","homepage","project","slug","collapse","openedCollapse","handleSubmit","errors","touched","Form","onToggle","handleCollapseToggle","titleDimensions","SectionField","Label","fieldWidth","Field","component","FormikInput","type","fieldName","apiErrors","fieldHeight","fieldFontSize","titleStyle","fieldSiteBackgroundColor","FormikColorPickerInput","fieldBackgroundColor","fieldTextColor","fieldAccentColor","fieldFont","fieldFontDescription","googleFontsLink","href","rel","titleHeaderAndFooter","fieldRelativeLink","publicationStatuses","FormikSelect","options","relativeLinkOptions","projectsList","clearable","disabled","FormikToggle","fieldShowHeader","fieldShowLogo","fieldHeaderText","fieldHeaderSubText","fieldShowFooter","fieldButtonText","titleInputSelection","fieldProjects","FormikMultipleSelect","resourcesToOptionList","fieldTopics","fieldSort","sortOptions","fieldInputsLimit","Select","AdminSettingsWidgets","SectionTitle","titleWidgets","SectionDescription","subtitleWidgets"],"mappings":"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","file":"84.9b315c7e8b79a614d916.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { debounce, omitBy, isNil, isEmpty, isString } from 'lodash-es';\nimport { stringify } from 'qs';\n\nimport Form, { FormValues } from './Form';\nimport { Formik, FormikErrors } from 'formik';\n\nimport WidgetPreview from '../WidgetPreview';\nimport Modal from 'components/UI/Modal';\nimport WidgetCode from '../WidgetCode';\nimport Button from 'components/UI/Button';\n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../../messages';\n\nimport { trackEventByName } from 'utils/analytics';\nimport tracks from './tracks';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst WidgetConfigWrapper = styled.div`\n  flex: 1 1 500px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst WidgetPreviewWrapper = styled.div``;\n\nconst WidgetTitle = styled.h3``;\n\nconst StyledWidgetPreview = styled(WidgetPreview)`\n  margin-bottom: 40px;\n`;\n\ninterface Props {}\n\ntype State = {\n  widgetParams: Partial<FormValues>;\n  codeModalOpened: boolean;\n};\n\nclass IdeasWidget extends PureComponent<Props & InjectedIntlProps, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      widgetParams: this.initialValues(),\n      codeModalOpened: false,\n    };\n  }\n\n  debouncedSetState = debounce((stateUpdate) => {\n    this.setState(stateUpdate);\n  }, 400);\n\n  validate = (): FormikErrors<FormValues> => {\n    const errors: FormikErrors<FormValues> = {};\n    return errors;\n  };\n\n  initialValues = (): FormValues => {\n    const { formatMessage } = this.props.intl;\n    return {\n      width: 320,\n      height: 400,\n      siteBgColor: '#ffffff',\n      bgColor: '#ffffff',\n      textColor: '#666666',\n      accentColor: '#2233aa',\n      font: null,\n      fontSize: 15,\n      relativeLink: '/',\n      showHeader: true,\n      showLogo: true,\n      headerText: formatMessage(messages.fieldHeaderTextDefault),\n      headerSubText: formatMessage(messages.fieldHeaderSubTextDefault),\n      showFooter: true,\n      buttonText: formatMessage(messages.fieldButtonTextDefault),\n      sort: 'trending',\n      projects: [],\n      topics: [],\n      limit: 5,\n    };\n  };\n\n  handleOnSubmit = (values: FormValues, { setSubmitting }) => {\n    this.setState(({ widgetParams }) => ({\n      widgetParams: {\n        ...widgetParams,\n        ...values,\n      },\n    }));\n    setSubmitting(false);\n  };\n\n  generateWidgetParams = () => {\n    const { widgetParams } = this.state;\n    const cleanedParams = omitBy(\n      widgetParams,\n      (v) => isNil(v) || (isString(v) && isEmpty(v))\n    );\n    return stringify(cleanedParams);\n  };\n\n  handleCloseCodeModal = () => {\n    this.setState({ codeModalOpened: false });\n  };\n\n  handleShowCodeClick = () => {\n    this.setState({ codeModalOpened: true });\n    trackEventByName(tracks.clickAdminExportHTML.name);\n  };\n\n  renderIdeasFormFn = (props) => {\n    // This is a hack to react on Formik form changes without submitting,\n    // since there is no global onChange()\n    // See https://github.com/jaredpalmer/formik/issues/271\n    this.debouncedSetState({\n      widgetParams: {\n        ...this.state.widgetParams,\n        ...props.values,\n      },\n    });\n\n    return <Form {...props} />;\n  };\n\n  render() {\n    const {\n      widgetParams: { width, height },\n      codeModalOpened,\n    } = this.state;\n    return (\n      <Container>\n        <WidgetConfigWrapper>\n          <WidgetTitle>\n            <FormattedMessage {...messages.settingsTitle} />\n          </WidgetTitle>\n          <Formik\n            initialValues={this.initialValues()}\n            render={this.renderIdeasFormFn}\n            validate={this.validate}\n            onSubmit={this.handleOnSubmit}\n          />\n        </WidgetConfigWrapper>\n        <WidgetPreviewWrapper>\n          <WidgetTitle>\n            <FormattedMessage {...messages.previewTitle} />\n          </WidgetTitle>\n          <StyledWidgetPreview\n            path={`/ideas?${this.generateWidgetParams()}`}\n            width={width || 300}\n            height={height || 400}\n          />\n          <Button\n            onClick={this.handleShowCodeClick}\n            buttonStyle=\"cl-blue\"\n            icon=\"code\"\n          >\n            <FormattedMessage {...messages.exportHtmlCodeButton} />\n          </Button>\n        </WidgetPreviewWrapper>\n\n        <Modal\n          opened={codeModalOpened}\n          close={this.handleCloseCodeModal}\n          fixedHeight={true}\n        >\n          <WidgetCode\n            path={`/ideas?${this.generateWidgetParams()}`}\n            width={width || 300}\n            height={height || 400}\n          />\n        </Modal>\n      </Container>\n    );\n  }\n}\n\nexport default injectIntl(IdeasWidget);\n","import React, { PureComponent, createRef } from 'react';\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\nimport GetAppConfiguration, {\n  GetAppConfigurationChildProps,\n} from 'resources/GetAppConfiguration';\nimport { isNilOrError } from 'utils/helperUtils';\nimport Button from 'components/UI/Button';\n\nconst CodeSnippet = styled.textarea`\n  word-wrap: break-word;\n  font-family: 'Courier New', Courier, monospace;\n  background-color: ${colors.lightGreyishBlue};\n  border: solid 1px ${colors.adminBorder};\n  border-radius: ${(props: any) => props.theme.borderRadius};\n  padding: 15px;\n  margin: 20px 0;\n  width: 100%;\n  min-height: 200px;\n  user-select: all;\n`;\n\ninterface Props {\n  path: string;\n  width: number;\n  height: number;\n}\n\ninterface DataProps {\n  tenant: GetAppConfigurationChildProps;\n}\n\ninterface State {\n  copied: boolean;\n}\nclass WidgetCode extends PureComponent<Props & DataProps, State> {\n  snippetRef = createRef<HTMLTextAreaElement>();\n\n  constructor(props: Props & DataProps) {\n    super(props);\n    this.state = {\n      copied: false,\n    };\n  }\n\n  handleFocus = (event) => {\n    event.target.select();\n  };\n\n  copy = (ref) => () => {\n    ref.current.select();\n    if (document.execCommand('copy')) {\n      this.setState({ copied: true });\n      setTimeout(() => this.setState({ copied: false }), 3000);\n\n      const selection = window.getSelection();\n\n      if (selection) {\n        selection.removeAllRanges();\n      }\n    }\n  };\n\n  render() {\n    const { path, tenant, width, height } = this.props;\n\n    if (isNilOrError(tenant)) return null;\n\n    const text = `<iframe src=\"https://${tenant.attributes.host}/widgets${path}\" width=\"${width}\" height=\"${height}\" frameborder=\"0\" scrolling=\"no\"></iframe>`;\n\n    return (\n      <>\n        <h1>\n          <FormattedMessage {...messages.htmlCodeTitle} />\n        </h1>\n        <p>\n          <FormattedMessage {...messages.htmlCodeExplanation} />\n        </p>\n        <CodeSnippet\n          value={text}\n          readOnly\n          onFocus={this.handleFocus}\n          ref={this.snippetRef}\n        />\n        <Button\n          onClick={this.copy(this.snippetRef)}\n          buttonStyle={this.state.copied ? 'success' : 'admin-dark'}\n        >\n          {this.state.copied ? (\n            <FormattedMessage {...messages.copied} />\n          ) : (\n            <FormattedMessage {...messages.copyToClipboard} />\n          )}\n        </Button>\n      </>\n    );\n  }\n}\n\nexport default (inputProps) => (\n  <GetAppConfiguration>\n    {(tenant) => <WidgetCode {...inputProps} tenant={tenant} />}\n  </GetAppConfiguration>\n);\n","import React from 'react';\nimport {\n  ColorPickerInput,\n  ColorPickerInputProps as VanillaInputProps,\n} from 'cl2-component-library';\nimport { FieldProps } from 'formik';\n\ninterface State {}\n\nclass FormikColorPickerInput extends React.Component<\n  FieldProps & VanillaInputProps,\n  State\n> {\n  handleOnChange = (newValue) => {\n    this.props.form.setFieldValue(this.props.field.name, newValue);\n  };\n\n  render() {\n    const { value } = this.props.field;\n    return (\n      <ColorPickerInput\n        {...this.props}\n        value={value}\n        onChange={this.handleOnChange}\n      />\n    );\n  }\n}\n\nexport default FormikColorPickerInput;\n","export default {\n  clickAdminExportHTML: {\n    name: 'Widget HTML exported by admin',\n  },\n};\n","import React from 'react';\nimport { Toggle } from 'cl2-component-library';\nimport { FieldProps } from 'formik';\n\nclass FormikToggle extends React.PureComponent<FieldProps> {\n  handleOnChange = () => {\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      !this.props.field.value\n    );\n  };\n\n  render() {\n    const { value } = this.props.field;\n\n    return (\n      <Toggle {...this.props} checked={value} onChange={this.handleOnChange} />\n    );\n  }\n}\n\nexport default FormikToggle;\n","import React from 'react';\nimport MultipleSelect, {\n  Props as VanillaInputProps,\n} from 'components/UI/MultipleSelect';\nimport { FieldProps } from 'formik';\nimport { IOption } from 'typings';\n\ninterface State {}\n\nclass FormikMultipleSelect extends React.Component<\n  FieldProps & VanillaInputProps,\n  State\n> {\n  handleOnChange = (newOption: IOption[]) => {\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      newOption.map((o) => o.value)\n    );\n  };\n\n  render() {\n    const { value } = this.props.field;\n    return (\n      <MultipleSelect\n        {...this.props}\n        value={value}\n        onChange={this.handleOnChange}\n      />\n    );\n  }\n}\n\nexport default FormikMultipleSelect;\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nconst StyledIframe = styled.iframe``;\n\ntype Props = {\n  path: string;\n  width: number;\n  height: number;\n  className?: string;\n};\n\ninterface State {}\n\nclass WidgetPreview extends React.Component<Props, State> {\n  render() {\n    const { path, width, height, className } = this.props;\n    return (\n      <StyledIframe\n        className={className}\n        frameBorder={0}\n        scrolling=\"no\"\n        src={`/widgets${path}`}\n        width={width}\n        height={height}\n      />\n    );\n  }\n}\n\nexport default WidgetPreview;\n","import React from 'react';\nimport { isEqual } from 'lodash-es';\nimport { Subscription, BehaviorSubject, of, combineLatest } from 'rxjs';\nimport { distinctUntilChanged, switchMap, map } from 'rxjs/operators';\nimport {\n  ITopicData,\n  topicByIdStream,\n  topicsStream,\n  Code,\n} from 'services/topics';\nimport { projectTopicsStream } from 'services/projectTopics';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  // Don't use projectId, ids or the query parameters (code, exclude_code, sort) together\n  // Only one of the three at a time.\n  projectId?: string;\n  topicIds?: string[];\n  code?: Code;\n  exclude_code?: Code;\n  sort?: 'new' | 'custom';\n}\n\ntype children = (renderProps: GetTopicsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  topics: (ITopicData | Error)[] | undefined | null | Error;\n}\n\nexport type GetTopicsChildProps =\n  | (ITopicData | Error)[]\n  | undefined\n  | null\n  | Error;\n\nexport default class GetTopics extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      topics: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { topicIds, code, exclude_code, sort, projectId } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({\n      topicIds,\n      code,\n      exclude_code,\n      sort,\n      projectId,\n    });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => isEqual(prev, next)),\n          switchMap(({ topicIds, code, exclude_code, sort, projectId }) => {\n            const queryParameters = { code, exclude_code, sort };\n\n            if (projectId) {\n              return projectTopicsStream(projectId).observable.pipe(\n                map((topics) =>\n                  topics.data\n                    .filter((topic) => topic)\n                    .map((topic) => topic.relationships.topic.data.id)\n                ),\n                switchMap((topicIds) => {\n                  return combineLatest(\n                    topicIds.map((topicId) =>\n                      topicByIdStream(topicId).observable.pipe(\n                        map((topic) =>\n                          !isNilOrError(topic) ? topic.data : topic\n                        )\n                      )\n                    )\n                  );\n                })\n              );\n            } else if (topicIds) {\n              if (topicIds.length > 0) {\n                return combineLatest(\n                  topicIds.map((id) => {\n                    return topicByIdStream(id).observable.pipe(\n                      map((topic) =>\n                        !isNilOrError(topic) ? topic.data : topic\n                      )\n                    );\n                  })\n                );\n              }\n\n              return of(null);\n            } else {\n              return topicsStream({ queryParameters }).observable.pipe(\n                map((topics) => topics.data)\n              );\n            }\n          })\n        )\n        .subscribe((topics) => {\n          this.setState({ topics });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { topicIds, code, exclude_code, sort, projectId } = this.props;\n    this.inputProps$.next({\n      topicIds,\n      code,\n      exclude_code,\n      sort,\n      projectId,\n    });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { topics } = this.state;\n    return (children as children)(topics);\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { Input, InputProps } from 'cl2-component-library';\nimport { FieldProps } from 'formik';\nimport { Locale } from 'typings';\n\nclass FormikInput extends PureComponent<FieldProps & InputProps> {\n  handleOnChange = (newValue: string, _locale: Locale | undefined) => {\n    this.props.form.setFieldValue(this.props.field.name, newValue);\n  };\n\n  render() {\n    const { name, value } = this.props.field;\n    return (\n      <Input\n        {...this.props}\n        name={name}\n        value={value}\n        onChange={this.handleOnChange}\n      />\n    );\n  }\n}\n\nexport default FormikInput;\n","import React, { PureComponent } from 'react';\nimport { Form, Field, InjectedFormikProps } from 'formik';\n\n// Components\nimport FormikMultipleSelect from 'components/UI/FormikMultipleSelect';\nimport { Section, SectionField } from 'components/admin/Section';\nimport { default as ErrorxBox } from 'components/UI/Error';\nimport FormikInput from 'components/UI/FormikInput';\nimport { Label } from 'cl2-component-library';\nimport Collapse from 'components/UI/Collapse';\nimport FormikToggle from 'components/UI/FormikToggle';\nimport FormikColorPickerInput from 'components/UI/FormikColorPickerInput';\nimport FormikSelect from 'components/UI/FormikSelect';\n\n// I18n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport localize, { InjectedLocalized } from 'utils/localize';\nimport messages from '../../messages';\n\n// Resources\nimport GetTopics from 'resources/GetTopics';\nimport GetProjects from 'resources/GetProjects';\n\n// Utils\nimport { isNilOrError } from 'utils/helperUtils';\nimport { IProjectData } from 'services/projects';\n\n// Styling\nimport styled from 'styled-components';\n\nconst StyledCollapse = styled(Collapse)`\n  flex: 1;\n  width: 100%;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nconst StyledSection = styled(Section)`\n  width: 100%;\n  max-width: 500px;\n  padding: 20px;\n  border-radius: ${(props: any) => props.theme.borderRadius};\n  border: solid 1px #ddd;\n  background: #fff;\n`;\n\nexport interface Props {}\n\nexport interface FormValues {\n  width: number;\n  height: number;\n  siteBgColor: string;\n  bgColor: string;\n  textColor: string;\n  accentColor: string;\n  font: string | null;\n  fontSize: number;\n  relativeLink: string;\n  showHeader: boolean;\n  showLogo: boolean;\n  headerText: string;\n  headerSubText: string;\n  showFooter: boolean;\n  buttonText: string;\n  sort: 'trending' | 'popular' | 'newest';\n  topics: string[];\n  projects: string[];\n  limit: number;\n}\n\ninterface State {\n  openedCollapse: 'dimensions' | 'ideas' | 'style' | 'headerAndFooter' | null;\n}\n\nclass WidgetForm extends PureComponent<\n  InjectedFormikProps<\n    Props & InjectedIntlProps & InjectedLocalized,\n    FormValues\n  >,\n  State\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openedCollapse: null,\n    };\n  }\n\n  resourcesToOptionList = (resources) => {\n    return (\n      resources &&\n      resources.map((resource) => ({\n        label: this.props.localize(resource.attributes.title_multiloc),\n        value: resource.id,\n      }))\n    );\n  };\n\n  sortOptions = () => {\n    return [\n      {\n        value: 'trending',\n        label: this.props.intl.formatMessage(messages.sortTrending),\n      },\n      {\n        value: 'popular',\n        label: this.props.intl.formatMessage(messages.sortPopular),\n      },\n      {\n        value: 'new',\n        label: this.props.intl.formatMessage(messages.sortNewest),\n      },\n    ];\n  };\n\n  relativeLinkOptions = (projects?: IProjectData[] | null) => {\n    return [\n      {\n        value: '/',\n        label: this.props.intl.formatMessage(messages.homepage),\n      },\n      ...(!projects\n        ? []\n        : projects.map((project) => ({\n            value: `/projects/${project.attributes.slug}`,\n            label: this.props.localize(project.attributes.title_multiloc),\n          }))),\n    ];\n  };\n\n  handleCollapseToggle = (collapse) => () => {\n    this.setState({\n      openedCollapse: this.state.openedCollapse === collapse ? null : collapse,\n    });\n  };\n\n  handleSubmit = () => {\n    this.props.handleSubmit();\n  };\n\n  render() {\n    const { errors, touched, values } = this.props;\n    const { openedCollapse } = this.state;\n\n    return (\n      <Form>\n        <StyledCollapse\n          opened={openedCollapse === 'dimensions'}\n          onToggle={this.handleCollapseToggle('dimensions')}\n          label={<FormattedMessage {...messages.titleDimensions} />}\n        >\n          <StyledSection>\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldWidth} />\n              </Label>\n              <Field name=\"width\" component={FormikInput} type=\"number\" />\n              {touched.width && (\n                <ErrorxBox fieldName=\"width\" apiErrors={errors.width as any} />\n              )}\n            </SectionField>\n\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldHeight} />\n              </Label>\n              <Field name=\"height\" component={FormikInput} type=\"number\" />\n              {touched.height && (\n                <ErrorxBox\n                  fieldName=\"height\"\n                  apiErrors={errors.height as any}\n                />\n              )}\n            </SectionField>\n\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldFontSize} />\n              </Label>\n              <Field name=\"fontSize\" component={FormikInput} type=\"number\" />\n              {touched.fontSize && (\n                <ErrorxBox\n                  fieldName=\"fontSize\"\n                  apiErrors={errors.fontSize as any}\n                />\n              )}\n            </SectionField>\n          </StyledSection>\n        </StyledCollapse>\n\n        <StyledCollapse\n          opened={openedCollapse === 'style'}\n          onToggle={this.handleCollapseToggle('style')}\n          label={<FormattedMessage {...messages.titleStyle} />}\n        >\n          <StyledSection>\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldSiteBackgroundColor} />\n              </Label>\n              <Field name=\"siteBgColor\" component={FormikColorPickerInput} />\n              {touched.siteBgColor && (\n                <ErrorxBox\n                  fieldName=\"siteBgColor\"\n                  apiErrors={errors.siteBgColor as any}\n                />\n              )}\n            </SectionField>\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldBackgroundColor} />\n              </Label>\n              <Field name=\"bgColor\" component={FormikColorPickerInput} />\n              {touched.bgColor && (\n                <ErrorxBox\n                  fieldName=\"bgColor\"\n                  apiErrors={errors.bgColor as any}\n                />\n              )}\n            </SectionField>\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldTextColor} />\n              </Label>\n              <Field name=\"textColor\" component={FormikColorPickerInput} />\n              {touched.textColor && (\n                <ErrorxBox\n                  fieldName=\"textColor\"\n                  apiErrors={errors.textColor as any}\n                />\n              )}\n            </SectionField>\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldAccentColor} />\n              </Label>\n              <Field name=\"accentColor\" component={FormikColorPickerInput} />\n              {touched.accentColor && (\n                <ErrorxBox\n                  fieldName=\"accentColor\"\n                  apiErrors={errors.accentColor as any}\n                />\n              )}\n            </SectionField>\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldFont} />\n              </Label>\n              <Field name=\"font\" component={FormikInput} />\n              <p>\n                <FormattedMessage\n                  {...messages.fieldFontDescription}\n                  values={{\n                    googleFontsLink: (\n                      <a\n                        href=\"https://fonts.google.com\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        Google Fonts\n                      </a>\n                    ),\n                  }}\n                />\n              </p>\n              {touched.font && (\n                <ErrorxBox fieldName=\"font\" apiErrors={errors.font as any} />\n              )}\n            </SectionField>\n          </StyledSection>\n        </StyledCollapse>\n\n        <StyledCollapse\n          opened={openedCollapse === 'headerAndFooter'}\n          onToggle={this.handleCollapseToggle('headerAndFooter')}\n          label={<FormattedMessage {...messages.titleHeaderAndFooter} />}\n        >\n          <>\n            <StyledSection>\n              <SectionField>\n                <Label>\n                  <FormattedMessage {...messages.fieldRelativeLink} />\n                </Label>\n                <GetProjects publicationStatuses={['published', 'archived']}>\n                  {(projects) =>\n                    projects && isNilOrError(projects) ? null : (\n                      <Field\n                        name=\"relativeLink\"\n                        component={FormikSelect}\n                        options={this.relativeLinkOptions(\n                          projects.projectsList\n                        )}\n                        clearable={false}\n                        disabled={!values.showHeader && !values.showFooter}\n                      />\n                    )\n                  }\n                </GetProjects>\n                {touched.relativeLink && (\n                  <ErrorxBox\n                    fieldName=\"relativeLink\"\n                    apiErrors={errors.relativeLink as any}\n                  />\n                )}\n              </SectionField>\n\n              <SectionField>\n                <Field\n                  name=\"showHeader\"\n                  component={FormikToggle}\n                  label={<FormattedMessage {...messages.fieldShowHeader} />}\n                />\n                {touched.showHeader && (\n                  <ErrorxBox\n                    fieldName=\"showHeader\"\n                    apiErrors={errors.showHeader as any}\n                  />\n                )}\n              </SectionField>\n\n              {values.showHeader && (\n                <Section>\n                  <SectionField>\n                    <Field\n                      name=\"showLogo\"\n                      component={FormikToggle}\n                      label={<FormattedMessage {...messages.fieldShowLogo} />}\n                    />\n                    {touched.showLogo && (\n                      <ErrorxBox\n                        fieldName=\"showLogo\"\n                        apiErrors={errors.showLogo as any}\n                      />\n                    )}\n                  </SectionField>\n                  <SectionField>\n                    <Label>\n                      <FormattedMessage {...messages.fieldHeaderText} />\n                    </Label>\n                    <Field\n                      name=\"headerText\"\n                      component={FormikInput}\n                      type=\"text\"\n                    />\n                    {touched.headerText && (\n                      <ErrorxBox\n                        fieldName=\"headerText\"\n                        apiErrors={errors.headerText as any}\n                      />\n                    )}\n                  </SectionField>\n                  <SectionField>\n                    <Label>\n                      <FormattedMessage {...messages.fieldHeaderSubText} />\n                    </Label>\n                    <Field\n                      name=\"headerSubText\"\n                      component={FormikInput}\n                      type=\"text\"\n                    />\n                    {touched.headerSubText && (\n                      <ErrorxBox\n                        fieldName=\"headerSubText\"\n                        apiErrors={errors.headerSubText as any}\n                      />\n                    )}\n                  </SectionField>\n                </Section>\n              )}\n            </StyledSection>\n\n            <StyledSection>\n              <SectionField>\n                <Field\n                  name=\"showFooter\"\n                  component={FormikToggle}\n                  label={<FormattedMessage {...messages.fieldShowFooter} />}\n                />\n                {touched.showFooter && (\n                  <ErrorxBox\n                    fieldName=\"showFooter\"\n                    apiErrors={errors.showFooter as any}\n                  />\n                )}\n              </SectionField>\n\n              {values.showFooter && (\n                <Section>\n                  <SectionField>\n                    <Label>\n                      <FormattedMessage {...messages.fieldButtonText} />\n                    </Label>\n                    <Field\n                      name=\"buttonText\"\n                      component={FormikInput}\n                      type=\"text\"\n                    />\n                    {touched.buttonText && (\n                      <ErrorxBox\n                        fieldName=\"buttonText\"\n                        apiErrors={errors.buttonText as any}\n                      />\n                    )}\n                  </SectionField>\n                </Section>\n              )}\n            </StyledSection>\n          </>\n        </StyledCollapse>\n\n        <StyledCollapse\n          opened={openedCollapse === 'ideas'}\n          onToggle={this.handleCollapseToggle('ideas')}\n          label={<FormattedMessage {...messages.titleInputSelection} />}\n        >\n          <StyledSection>\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldProjects} />\n              </Label>\n              <GetProjects publicationStatuses={['published', 'archived']}>\n                {(projects) =>\n                  projects && isNilOrError(projects) ? null : (\n                    <Field\n                      name=\"projects\"\n                      component={FormikMultipleSelect}\n                      options={this.resourcesToOptionList(\n                        projects.projectsList\n                      )}\n                    />\n                  )\n                }\n              </GetProjects>\n            </SectionField>\n\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldTopics} />\n              </Label>\n              <GetTopics>\n                {(topics) =>\n                  topics && isNilOrError(topics) ? null : (\n                    <Field\n                      name=\"topics\"\n                      component={FormikMultipleSelect}\n                      options={this.resourcesToOptionList(topics)}\n                    />\n                  )\n                }\n              </GetTopics>\n            </SectionField>\n\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldSort} />\n              </Label>\n              <Field\n                name=\"sort\"\n                component={FormikSelect}\n                clearable={false}\n                options={this.sortOptions()}\n              />\n            </SectionField>\n\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.fieldInputsLimit} />\n              </Label>\n              <Field name=\"limit\" component={FormikInput} type=\"number\" />\n              {touched.limit && (\n                <ErrorxBox fieldName=\"limit\" apiErrors={errors.limit as any} />\n              )}\n            </SectionField>\n          </StyledSection>\n        </StyledCollapse>\n      </Form>\n    );\n  }\n}\n\nexport default injectIntl(localize(WidgetForm));\n","import React from 'react';\nimport { Select, SelectProps } from 'cl2-component-library';\nimport { FieldProps } from 'formik';\nimport { IOption } from 'typings';\n\ninterface State {}\n\nclass FormikInput extends React.Component<FieldProps & SelectProps, State> {\n  handleOnChange = (newOption: IOption) => {\n    this.props.form.setFieldValue(this.props.field.name, newOption.value);\n  };\n\n  render() {\n    const { value } = this.props.field;\n    return (\n      <Select {...this.props} value={value} onChange={this.handleOnChange} />\n    );\n  }\n}\n\nexport default FormikInput;\n","import React, { PureComponent } from 'react';\nimport IdeasWidget from './IdeasWidget';\nimport { SectionTitle, SectionDescription } from 'components/admin/Section';\n\nimport messages from '../messages';\nimport { FormattedMessage } from 'utils/cl-intl';\n\nexport default class AdminSettingsWidgets extends PureComponent {\n  render() {\n    return (\n      <>\n        <SectionTitle>\n          <FormattedMessage {...messages.titleWidgets} />\n        </SectionTitle>\n        <SectionDescription>\n          <FormattedMessage {...messages.subtitleWidgets} />\n        </SectionDescription>\n        <IdeasWidget />\n      </>\n    );\n  }\n}\n"],"sourceRoot":""}