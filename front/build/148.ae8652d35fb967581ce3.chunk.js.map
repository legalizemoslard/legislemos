{"version":3,"sources":["webpack:///./app/modules/commercial/granular_permissions/admin/containers/permissions/index.tsx","webpack:///./app/modules/commercial/granular_permissions/admin/containers/permissions/messages.ts","webpack:///./app/resources/GetGlobalPermissions.tsx"],"names":["PermissionsInitiatives","memo","permissions","Section","name","SectionTitle","FormattedMessage","messages","granularPermissionsTitle","isNilOrError","onChange","permission","permittedBy","groupIds","updateGlobalPermission","id","attributes","action","permitted_by","group_ids","postType","projectId","inputProps","defineMessages","defaultMessage","GetGlobalPermissions","props","state","undefined","this","subscriptions","globalPermissions","observable","subscribe","setState","data","forEach","subscription","unsubscribe","children","React","Component"],"mappings":"0QAAA,E,ybAAA,YACA,YACA,eACA,eAGA,YACA,eACA,YACA,YACA,e,+HAMA,IAAMA,GAAyB,IAAAC,OAAgB,YAAqB,IAAlBC,EAAkB,EAAlBA,YAOhD,OACE,wBAAC,EAAAC,QAAD,KACE,wBAAC,UAAD,CAAaC,KAAK,wBAChB,wBAAC,EAAAC,aAAD,KACE,wBAAC,EAAAC,iBAAqBC,UAASC,6BAE/B,IAAAC,cAAaP,IACb,wBAAC,UAAD,CACEA,YAAaA,EACbQ,SAfqB,SAACC,EAAYC,EAAaC,IACvD,IAAAC,wBAAuBH,EAAWI,GAAIJ,EAAWK,WAAWC,OAAQ,CAClEC,aAAcN,EACdO,UAAWN,KAaLO,SAAS,aACTC,UAAW,Y,UAQR,SAACC,GAAD,OACb,wBAAC,UAAD,MACG,SAACpB,GAAD,OACC,wBAACF,GAAD,gBAA4BsB,EAA5B,CAAwCpB,YAAaA,U,oGC7C3D,I,GAEe,EAFf,UAEeqB,gBAAe,CAC5Bf,yBAA0B,CACxBO,GAAI,4DACJS,eAAgB,0B,kQCLpB,eAEA,YACA,Y,8cA2BqBC,E,0CAMnB,WAAYC,GAAc,kCACxB,cAAMA,IADkB,sDAExB,EAAKC,MAAQ,CACXzB,iBAAa0B,GAHS,E,sDAO1B,WAAoB,WAClBC,KAAKC,cAAgB,EACnB,IAAAC,qBAAoBC,WAAWC,WAAU,SAAC/B,GACxC,EAAKgC,SAAS,CACZhC,aAAc,IAAAO,cAAaP,GAEvBA,EADAA,EAAYiC,a,kCAOxB,WACEN,KAAKC,cAAcM,SAAQ,SAACC,GAAD,OAAkBA,EAAaC,mB,oBAG5D,WAGE,OAAQC,EAFaV,KAAKH,MAAlBa,UACgBV,KAAKF,MAArBzB,iB,GA/BsCsC,UAAMC,W","file":"148.ae8652d35fb967581ce3.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Section, SectionTitle } from 'components/admin/Section';\nimport ActionsForm from '../../../admin/containers/Granular/ActionsForm';\nimport GetGlobalPermissions, {\n  GetGlobalPermissionsChildProps,\n} from 'resources/GetGlobalPermissions';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { updateGlobalPermission } from 'services/actionPermissions';\nimport FeatureFlag from 'components/FeatureFlag';\n\ninterface DataProps {\n  permissions: GetGlobalPermissionsChildProps;\n}\n\nconst PermissionsInitiatives = memo<DataProps>(({ permissions }) => {\n  const handlePermissionChange = (permission, permittedBy, groupIds) => {\n    updateGlobalPermission(permission.id, permission.attributes.action, {\n      permitted_by: permittedBy,\n      group_ids: groupIds,\n    });\n  };\n  return (\n    <Section>\n      <FeatureFlag name=\"granular_permissions\">\n        <SectionTitle>\n          <FormattedMessage {...messages.granularPermissionsTitle} />\n        </SectionTitle>\n        {!isNilOrError(permissions) && (\n          <ActionsForm\n            permissions={permissions}\n            onChange={handlePermissionChange}\n            postType=\"initiative\"\n            projectId={null}\n          />\n        )}\n      </FeatureFlag>\n    </Section>\n  );\n});\n\nexport default (inputProps) => (\n  <GetGlobalPermissions>\n    {(permissions) => (\n      <PermissionsInitiatives {...inputProps} permissions={permissions} />\n    )}\n  </GetGlobalPermissions>\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  granularPermissionsTitle: {\n    id: 'app.containers.Admin.initiatives.granularPermissionsTitle',\n    defaultMessage: 'Who can contribute ?',\n  },\n});\n","import React from 'react';\nimport { Subscription } from 'rxjs';\nimport { isNilOrError } from 'utils/helperUtils';\nimport {\n  globalPermissions,\n  IGlobalPermissionData,\n} from 'services/actionPermissions';\n\ninterface InputProps {\n  projectId?: string | null;\n}\n\ntype children = (\n  renderProps: GetGlobalPermissionsChildProps\n) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  permissions: IGlobalPermissionData[] | undefined | null | Error;\n}\n\nexport type GetGlobalPermissionsChildProps =\n  | IGlobalPermissionData[]\n  | undefined\n  | null\n  | Error;\n\nexport default class GetGlobalPermissions extends React.Component<\n  Props,\n  State\n> {\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      permissions: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.subscriptions = [\n      globalPermissions().observable.subscribe((permissions) => {\n        this.setState({\n          permissions: !isNilOrError(permissions)\n            ? permissions.data\n            : permissions,\n        });\n      }),\n    ];\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { permissions } = this.state;\n    return (children as children)(permissions);\n  }\n}\n"],"sourceRoot":""}