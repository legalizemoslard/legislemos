{"version":3,"sources":["webpack:///./app/components/Map/index.tsx","webpack:///./app/components/PostShowComponents/DropdownMap/Map.tsx"],"names":["LeafletMap","lazy","Container","styled","div","defaultCardStyle","MapWrapper","BoxContainer","CloseButton","button","defaultOutline","media","smallerThanMinTablet","CloseIcon","Icon","memo","projectId","centerLatLng","zoomLevel","mapHeight","points","noMarkerClustering","zoomControlPosition","layersControlPosition","boxContent","onInit","onBoxClose","className","hideLegend","appConfig","useState","additionalLeafletConfig","setAdditionalLeafletConfig","center","useMemo","getCenter","zoom","getZoomLevel","tileProvider","getTileProvider","tileOptions","getTileOptions","leafletConfig","handleLeafletConfigChange","useCallback","isNilOrError","onClick","event","preventDefault","name","Suspense","fallback","id","map","onLeafletConfigChange","position","coordinates"],"mappings":"mXAAA,I,EAAA,E,ybAAA,YAQA,YAGA,YACA,eAIA,eAGA,YASA,eACA,Y,6VAhBA,IAAMA,GAAa,IAAAC,OAAK,kBAAM,yEA2BxBC,EAAYC,UAAOC,IAAV,qEAAGD,CAAH,sDACXE,oBAKEC,EAAaH,UAAOC,IAAV,sEAAGD,CAAH,4CAMVI,EAAeJ,UAAOC,IAAV,wEAAGD,CAAH,yJAaZK,EAAcL,UAAOM,OAAV,uEAAGN,CAAH,8UAwBXO,iBAGFC,QAAMC,qBA3BO,iEAiCXC,GAAY,aAAOC,QAAV,qEAAG,CAAH,uC,GA0BH,IAAAC,OACV,YAcM,IAbJC,EAaI,EAbJA,UACAC,EAYI,EAZJA,aACAC,EAWI,EAXJA,UACAC,EAUI,EAVJA,UACAC,EASI,EATJA,OACAC,EAQI,EARJA,mBACAC,EAOI,EAPJA,oBACAC,EAMI,EANJA,sBACAC,EAKI,EALJA,WACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,UACAC,EACI,EADJA,WAEMC,GAAY,eAElB,GAGI,IAAAC,UAAmC,MAHvC,qBACEC,EADF,KAEEC,EAFF,KAKMC,GAAS,IAAAC,UAAQ,WACrB,OAAO,IAAAC,WAAUlB,EAAcY,KAC9B,CAACZ,EAAcY,IAEZO,GAAO,IAAAF,UAAQ,WACnB,OAAO,IAAAG,cAAanB,EAAWW,KAC9B,CAACX,EAAWW,IAETS,GAAe,IAAAJ,UAAQ,WAC3B,OAAO,IAAAK,iBAAgBV,KACtB,CAACA,IAEEW,GAAc,IAAAN,UAAQ,WAC1B,OAAO,IAAAO,oBAEN,CAACH,IAEEI,GAAgB,IAAAR,UAAQ,WAC5B,O,2WAAA,EACEd,SACAC,qBACAe,OACAH,SACAK,eACAE,cACAlB,sBACAC,yBACGQ,KAEJ,CACDX,EACAC,EACAe,EACAH,EACAK,EACAE,EACAlB,EACAC,EACAQ,IAGIY,GAA4B,IAAAC,cAChC,SAACF,GACCV,EAA2BU,KAE7B,IAYF,OACE,wBAACxC,EAAD,CAAWyB,UAAWA,GAAa,IACjC,wBAACrB,EAAD,OACI,IAAAuC,cAAarB,IACb,wBAACjB,EAAD,KACE,wBAACC,EAAD,CAAasC,QAdE,SAACC,GACxBA,EAAMC,iBACNtB,WAAaqB,KAaH,wBAAClC,EAAD,CAAWoC,KAAK,WAGjBzB,GAIL,wBAAC,EAAA0B,SAAD,CAAUC,UAAU,GAClB,wBAACnD,GAAD,cACEoD,GAAG,QACHzB,UAAU,iBACVR,UAAWA,EACXM,OAtBW,SAAC4B,GACpB5B,WAAS4B,KAsBGX,KAGR,wBAAC,UAAD,CACEU,GAAG,mCACHpC,UAAWA,EACXsC,sBAAuBX,EACvB1B,aAAcA,EACdC,UAAWA,EACXE,OAAQA,MAIVQ,GACA,wBAAC,UAAD,CAAQwB,GAAG,4BAA4BpC,UAAWA,Q,8QC7O5D,E,ybAAA,YACA,e,0sBAQA,I,GAAqB,IAAAD,OAAY,YAA6B,IAA1BwC,EAA0B,EAA1BA,SAAUvC,EAAgB,EAAhBA,UACtCI,EAAc,CAAC,EAAD,GAAMmC,IACpBtB,EAASsB,EAASC,YAClBvC,EAAe,CAACgB,EAAO,GAAIA,EAAO,IAExC,OACE,wBAAC,UAAD,CACEb,OAAQA,EACRH,aAAcA,EACdD,UAAWA,EACXG,UAAU,a","file":"151.d0ba6e32c540fbf1f80f.chunk.js","sourcesContent":["import React, {\n  memo,\n  useMemo,\n  useState,\n  lazy,\n  Suspense,\n  useCallback,\n} from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport { Icon } from 'cl2-component-library';\nimport Outlet from 'components/Outlet';\nconst LeafletMap = lazy(() => import('components/UI/LeafletMap'));\n\n// hooks\nimport useAppConfiguration from 'hooks/useAppConfiguration';\n\n// utils\nimport {\n  getCenter,\n  getZoomLevel,\n  getTileProvider,\n  getTileOptions,\n} from 'utils/map';\nimport { ILeafletMapConfig } from 'components/UI/LeafletMap/useLeaflet';\n\n// styling\nimport styled from 'styled-components';\nimport { media, defaultOutline, defaultCardStyle } from 'utils/styleUtils';\n\n// typings\nimport { LatLngTuple, Map as ILeafletMap } from 'leaflet';\n\nexport interface Point extends GeoJSON.Point {\n  data?: any;\n  id: string;\n  title?: string;\n}\n\nconst Container = styled.div`\n  ${defaultCardStyle};\n  background: transparent;\n  border: solid 1px #ccc;\n`;\n\nconst MapWrapper = styled.div`\n  flex: 1;\n  display: flex;\n  position: relative;\n`;\n\nconst BoxContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  position: absolute;\n  top: 0;\n  z-index: 1001;\n  background: #fff;\n  width: 100%;\n  height: 80%;\n  max-height: 550px;\n`;\n\nconst CloseButton = styled.button`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  cursor: pointer;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2;\n  border-radius: 50%;\n  border: solid 1px transparent;\n  background: #fff;\n  transition: all 100ms ease-out;\n  outline: none !important;\n\n  &:hover {\n    background: #ececec;\n  }\n\n  &.focus-visible {\n    ${defaultOutline};\n  }\n\n  ${media.smallerThanMinTablet`\n    top: 4px;\n    right: 4px;\n  `}\n`;\n\nconst CloseIcon = styled(Icon)`\n  width: 12px;\n  height: 12px;\n  fill: #000;\n`;\n\nexport interface IMapConfigProps {\n  centerLatLng?: LatLngTuple;\n  points?: Point[];\n  zoomLevel?: number;\n  areas?: GeoJSON.Polygon[];\n  mapHeight?: string;\n  noMarkerClustering?: boolean;\n  zoomControlPosition?: 'topleft' | 'topright' | 'bottomleft' | 'bottomright';\n  layersControlPosition?: 'topleft' | 'topright' | 'bottomleft' | 'bottomright';\n}\n\nexport interface IMapProps {\n  onInit?: (map: ILeafletMap) => void;\n  onBoxClose?: (event: React.FormEvent) => void;\n  className?: string;\n  projectId?: string | null;\n  hideLegend?: boolean;\n  boxContent?: JSX.Element | null;\n}\n\nconst Map = memo<IMapProps & IMapConfigProps>(\n  ({\n    projectId,\n    centerLatLng,\n    zoomLevel,\n    mapHeight,\n    points,\n    noMarkerClustering,\n    zoomControlPosition,\n    layersControlPosition,\n    boxContent,\n    onInit,\n    onBoxClose,\n    className,\n    hideLegend,\n  }) => {\n    const appConfig = useAppConfiguration();\n\n    const [\n      additionalLeafletConfig,\n      setAdditionalLeafletConfig,\n    ] = useState<ILeafletMapConfig | null>(null);\n\n    const center = useMemo(() => {\n      return getCenter(centerLatLng, appConfig);\n    }, [centerLatLng, appConfig]);\n\n    const zoom = useMemo(() => {\n      return getZoomLevel(zoomLevel, appConfig);\n    }, [zoomLevel, appConfig]);\n\n    const tileProvider = useMemo(() => {\n      return getTileProvider(appConfig);\n    }, [appConfig]);\n\n    const tileOptions = useMemo(() => {\n      return getTileOptions();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [tileProvider]);\n\n    const leafletConfig = useMemo(() => {\n      return {\n        points,\n        noMarkerClustering,\n        zoom,\n        center,\n        tileProvider,\n        tileOptions,\n        zoomControlPosition,\n        layersControlPosition,\n        ...additionalLeafletConfig,\n      };\n    }, [\n      points,\n      noMarkerClustering,\n      zoom,\n      center,\n      tileProvider,\n      tileOptions,\n      zoomControlPosition,\n      layersControlPosition,\n      additionalLeafletConfig,\n    ]);\n\n    const handleLeafletConfigChange = useCallback(\n      (leafletConfig: ILeafletMapConfig) => {\n        setAdditionalLeafletConfig(leafletConfig);\n      },\n      []\n    );\n\n    const handleBoxOnClose = (event: React.FormEvent) => {\n      event.preventDefault();\n      onBoxClose?.(event);\n    };\n\n    const handleOnInit = (map: L.Map) => {\n      onInit?.(map);\n    };\n\n    return (\n      <Container className={className || ''}>\n        <MapWrapper>\n          {!isNilOrError(boxContent) && (\n            <BoxContainer>\n              <CloseButton onClick={handleBoxOnClose}>\n                <CloseIcon name=\"close\" />\n              </CloseButton>\n\n              {boxContent}\n            </BoxContainer>\n          )}\n\n          <Suspense fallback={false}>\n            <LeafletMap\n              id=\"mapid\"\n              className=\"e2e-leafletmap\"\n              mapHeight={mapHeight}\n              onInit={handleOnInit}\n              {...leafletConfig}\n            />\n          </Suspense>\n          <Outlet\n            id=\"app.components.Map.leafletConfig\"\n            projectId={projectId}\n            onLeafletConfigChange={handleLeafletConfigChange}\n            centerLatLng={centerLatLng}\n            zoomLevel={zoomLevel}\n            points={points}\n          />\n        </MapWrapper>\n\n        {!hideLegend && (\n          <Outlet id=\"app.components.Map.Legend\" projectId={projectId} />\n        )}\n      </Container>\n    );\n  }\n);\n\nexport default Map;\n","import React, { memo } from 'react';\nimport Map from 'components/Map';\nimport { LatLngTuple } from 'leaflet';\n\nexport interface Props {\n  position: GeoJSON.Point;\n  projectId?: string | null;\n}\n\nconst MapComponent = memo<Props>(({ position, projectId }) => {\n  const points: any = [{ ...position }];\n  const center = position.coordinates;\n  const centerLatLng = [center[1], center[0]] as LatLngTuple;\n\n  return (\n    <Map\n      points={points}\n      centerLatLng={centerLatLng}\n      projectId={projectId}\n      mapHeight=\"400px\"\n    />\n  );\n});\n\nexport default MapComponent;\n"],"sourceRoot":""}