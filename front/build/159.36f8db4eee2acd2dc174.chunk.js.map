{"version":3,"sources":["webpack:///./app/containers/Admin/projects/edit/timeline/messages.ts","webpack:///./app/containers/Admin/projects/edit/timeline/index.tsx"],"names":["defineMessages","editPhaseTitle","id","defaultMessage","newPhaseTitle","titleLabel","descriptionLabel","datesLabel","saveLabel","saveSuccessLabel","saveErrorMessage","saveSuccessMessage","orderColumnTitle","nameColumnTitle","addPhaseButton","editPhaseButton","deletePhaseButton","deletePhaseConfirmation","startDatePlaceholder","endDatePlaceholder","fileUploadLabel","titleTimeline","subtitleTimeline","ListWrapper","styled","div","AddButton","Button","StyledList","List","OrderHeader","OrderLabel","fontSizes","base","colors","separation","AdminProjectTimelineIndex","projectId","phaseId","event","preventDefault","window","confirm","props","intl","formatMessage","messages","deletePhase","phases","this","params","SectionTitle","FormattedMessage","SectionDescription","className","icon","buttonStyle","linkTo","isNilOrError","length","HeadRow","map","phase","index","startAt","attributes","start_at","format","endAt","end_at","Row","key","pastPresentOrFuture","value","title_multiloc","onClick","createDeleteClickHandler","React","PureComponent","withRouter","injectIntl","inputProps"],"mappings":"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","file":"159.36f8db4eee2acd2dc174.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  editPhaseTitle: {\n    id: 'app.containers.AdminPage.ProjectTimeline.editPhaseTitle',\n    defaultMessage: 'Edit Phase',\n  },\n  newPhaseTitle: {\n    id: 'app.containers.AdminPage.ProjectTimeline.newPhaseTitle',\n    defaultMessage: 'New Phase',\n  },\n  titleLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.titleLabel',\n    defaultMessage: 'Title',\n  },\n  descriptionLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.descriptionLabel',\n    defaultMessage: 'Description',\n  },\n  datesLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.datesLabel',\n    defaultMessage: 'Dates',\n  },\n  saveLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.saveLabel',\n    defaultMessage: 'Save',\n  },\n  saveSuccessLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.saveSuccessLabel',\n    defaultMessage: 'Success',\n  },\n  saveErrorMessage: {\n    id: 'app.containers.AdminPage.ProjectTimeline.saveErrorMessage',\n    defaultMessage: 'There was an error submitting the form, please try again.',\n  },\n  saveSuccessMessage: {\n    id: 'app.containers.AdminPage.ProjectTimeline.saveSuccessMessage',\n    defaultMessage: 'Your changes have been saved successfully.',\n  },\n  orderColumnTitle: {\n    id: 'app.containers.AdminPage.ProjectTimeline.orderColumnTitle',\n    defaultMessage: 'Order',\n  },\n  nameColumnTitle: {\n    id: 'app.containers.AdminPage.ProjectTimeline.nameColumnTitle',\n    defaultMessage: 'Name & Dates',\n  },\n  addPhaseButton: {\n    id: 'app.containers.AdminPage.ProjectTimeline.addPhaseButton',\n    defaultMessage: 'Add a phase',\n  },\n  editPhaseButton: {\n    id: 'app.containers.AdminPage.ProjectTimeline.editPhaseButton',\n    defaultMessage: 'Edit',\n  },\n  deletePhaseButton: {\n    id: 'app.containers.AdminPage.ProjectTimeline.deletePhaseButton',\n    defaultMessage: 'Delete',\n  },\n  deletePhaseConfirmation: {\n    id: 'app.containers.AdminPage.ProjectTimeline.deletePhaseConfirmation',\n    defaultMessage: 'Are you sure you wannna delete this phase?',\n  },\n  startDatePlaceholder: {\n    id: 'app.containers.AdminPage.ProjectTimeline.startDatePlaceholder',\n    defaultMessage: 'Start Date',\n  },\n  endDatePlaceholder: {\n    id: 'app.containers.AdminPage.ProjectTimeline.endDatePlaceholder',\n    defaultMessage: 'End Date',\n  },\n  fileUploadLabel: {\n    id: 'app.containers.AdminPage.ProjectTimeline.fileUploadLabel',\n    defaultMessage: 'Attach files to this phase',\n  },\n  titleTimeline: {\n    id: 'app.containers.AdminPage.ProjectTimeline.titleTimeline',\n    defaultMessage: 'Manage timeline phases',\n  },\n  subtitleTimeline: {\n    id: 'app.containers.AdminPage.ProjectTimeline.subtitleTimeline',\n    defaultMessage:\n      'Define the different timeline phases for your project and describe what each phase is about. In every phase you can pick a different participation method: idea gathering, surveys, information, voting, commenting or participatory budgeting.',\n  },\n});\n","// Libraries\nimport React from 'react';\nimport styled from 'styled-components';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from './messages';\nimport moment from 'moment';\nimport { withRouter, WithRouterProps } from 'react-router';\n\n// Utils\nimport { pastPresentOrFuture } from 'utils/dateUtils';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\n\n// Services\nimport { deletePhase } from 'services/phases';\n\n// Resources\nimport GetPhases, { GetPhasesChildProps } from 'resources/GetPhases';\n\n// Components\nimport T from 'components/T';\nimport Button from 'components/UI/Button';\nimport { List, Row, HeadRow } from 'components/admin/ResourceList';\nimport { SectionTitle, SectionDescription } from 'components/admin/Section';\n\n// Styling\nimport { fontSizes, colors } from 'utils/styleUtils';\n\n// Styles\nconst ListWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst AddButton = styled(Button)`\n  align-self: flex-start;\n`;\n\nconst StyledList = styled(List)`\n  margin-top: 30px;\n`;\n\nconst OrderHeader = styled.div`\n  flex: 0 0 3rem;\n`;\n\nconst OrderLabel = styled.div`\n  border-radius: 50%;\n  color: white;\n  height: 3rem;\n  font-size: ${fontSizes.base}px;\n  font-weight: 400;\n  line-height: 3rem;\n  text-align: center;\n  width: 3rem;\n  flex: 0 0 3rem;\n\n  &.present {\n    background: #32b67a;\n  }\n\n  &.past {\n    background: ${colors.separation};\n  }\n\n  &.future {\n    background: #636363;\n  }\n`;\n\ninterface InputProps {}\n\ninterface DataProps {\n  phases: GetPhasesChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface State {}\n\nclass AdminProjectTimelineIndex extends React.PureComponent<\n  Props & WithRouterProps & InjectedIntlProps,\n  State\n> {\n  createDeleteClickHandler = (projectId: string, phaseId: string) => (\n    event: React.FormEvent<any>\n  ) => {\n    event.preventDefault();\n\n    if (\n      window.confirm(\n        this.props.intl.formatMessage(messages.deletePhaseConfirmation)\n      )\n    ) {\n      deletePhase(projectId, phaseId);\n    }\n  };\n\n  render() {\n    const { phases } = this.props;\n    const { projectId } = this.props.params;\n\n    return (\n      <ListWrapper>\n        <SectionTitle>\n          <FormattedMessage {...messages.titleTimeline} />\n        </SectionTitle>\n        <SectionDescription>\n          <FormattedMessage {...messages.subtitleTimeline} />\n        </SectionDescription>\n        <AddButton\n          className=\"e2e-add-phase-button\"\n          icon=\"plus-circle\"\n          buttonStyle=\"cl-blue\"\n          linkTo={`/admin/projects/${projectId}/timeline/new`}\n        >\n          <FormattedMessage {...messages.addPhaseButton} />\n        </AddButton>\n\n        {!isNilOrError(phases) && phases.length > 0 && (\n          <div className={'e2e-phases-table'}>\n            <StyledList>\n              <HeadRow>\n                <OrderHeader>\n                  <FormattedMessage {...messages.orderColumnTitle} />\n                </OrderHeader>\n                <div className=\"expand\">\n                  <FormattedMessage {...messages.nameColumnTitle} />\n                </div>\n              </HeadRow>\n\n              <>\n                {phases.map((phase, index) => {\n                  const startAt = moment(phase.attributes.start_at).format(\n                    'LL'\n                  );\n                  const endAt = moment(phase.attributes.end_at).format('LL');\n\n                  return (\n                    <Row\n                      className={`e2e-phase-line ${\n                        phases.length === index + 1 ? 'last' : ''\n                      }`}\n                      id={`e2e-phase_${phase.id}`}\n                      key={phase.id}\n                    >\n                      <OrderLabel\n                        className={pastPresentOrFuture([\n                          phase.attributes.start_at,\n                          phase.attributes.end_at,\n                        ])}\n                      >\n                        {index + 1}\n                      </OrderLabel>\n                      <div className=\"expand\">\n                        <h1 className=\"e2e-phase-title\">\n                          <T value={phase.attributes.title_multiloc} />\n                        </h1>\n                        <p>\n                          {startAt} → {endAt}\n                        </p>\n                      </div>\n                      <Button\n                        className=\"e2e-delete-phase\"\n                        icon=\"delete\"\n                        buttonStyle=\"text\"\n                        onClick={this.createDeleteClickHandler(\n                          projectId,\n                          phase.id\n                        )}\n                      >\n                        <FormattedMessage {...messages.deletePhaseButton} />\n                      </Button>\n                      <Button\n                        className=\"e2e-edit-phase\"\n                        icon=\"edit\"\n                        buttonStyle=\"secondary\"\n                        linkTo={`/admin/projects/${projectId}/timeline/${phase.id}`}\n                      >\n                        <FormattedMessage {...messages.editPhaseButton} />\n                      </Button>\n                    </Row>\n                  );\n                })}\n              </>\n            </StyledList>\n          </div>\n        )}\n      </ListWrapper>\n    );\n  }\n}\n\nexport default withRouter(\n  injectIntl((inputProps: InputProps & WithRouterProps & InjectedIntlProps) => (\n    <GetPhases projectId={inputProps.params.projectId}>\n      {(phases) => (\n        <AdminProjectTimelineIndex {...inputProps} phases={phases} />\n      )}\n    </GetPhases>\n  ))\n);\n"],"sourceRoot":""}