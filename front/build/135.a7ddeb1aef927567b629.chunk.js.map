{"version":3,"sources":["webpack:///./app/components/admin/PageTitle/index.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Insights/Detect/index.tsx","webpack:///./app/modules/commercial/insights/hooks/useInsightsDetectedCategories.ts","webpack:///./app/modules/commercial/insights/services/insightsDetectCategories.ts"],"names":["styled","h1","fontSizes","xxxl","StyledH2","h2","xl","ButtonsContainer","Box","withRouter","injectIntl","viewId","params","formatMessage","intl","useState","processing","setProcessing","selectedCategories","setSelectedCategories","detectedCategories","backRoute","isNilOrError","handleAddCategories","name","addInsightsCategory","clHistory","push","p","messages","detectCategoriesTitle","display","mb","buttonStyle","icon","padding","linkTo","detectCategoriesGoBack","w","detectCategoriesSectionTitle","length","detectCategoriesDescription","detectCategoriesEmpty","flexWrap","map","category","mr","label","attributes","variant","includes","key","id","size","onIconClick","selectedName","filter","disabled","onClick","detectCategoriesAddCategory","detectCategoriesAddCategories","detectCategoriesCancel","undefined","setDetectedCategories","useEffect","subscription","insightsDetectedCategoriesStream","observable","subscribe","data","unsubscribe","insightsViewId","streamParams","streams","get","apiEndpoint","API_PATH","getInsightsDetectCategoriesEndpoint","cacheStream"],"mappings":"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","file":"135.a7ddeb1aef927567b629.chunk.js","sourcesContent":["// style\nimport styled from 'styled-components';\nimport { fontSizes } from 'utils/styleUtils';\n\nexport default styled.h1`\n  font-size: ${fontSizes.xxxl}px;\n  line-height: 40px;\n  font-weight: 600;\n  padding: 0;\n  margin: 0;\n  margin-bottom: 15px;\n`;\n","import React, { useState } from 'react';\nimport { withRouter, WithRouterProps } from 'react-router';\n\n// hooks\nimport useDetectedCategories from 'modules/commercial/insights/hooks/useInsightsDetectedCategories';\n\n// components\nimport PageWrapper from 'components/admin/PageWrapper';\nimport Tag from 'modules/commercial/insights/admin/components/Tag';\nimport PageTitle from 'components/admin/PageTitle';\nimport TopBar from '../../../components/TopBar';\nimport Button from 'components/UI/Button';\nimport { Box } from 'cl2-component-library';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\nimport clHistory from 'utils/cl-router/history';\n\n// intl\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// styles\nimport styled from 'styled-components';\nimport { fontSizes } from 'utils/styleUtils';\n\n// services\nimport { addInsightsCategory } from 'modules/commercial/insights/services/insightsCategories';\n\nconst StyledH2 = styled.h2`\n  font-size: ${fontSizes.xl}px;\n`;\n\nconst ButtonsContainer = styled(Box)`\n  > * {\n    margin-right: 8px;\n  }\n`;\n\nconst Detect = ({\n  params: { viewId },\n  intl: { formatMessage },\n}: WithRouterProps & InjectedIntlProps) => {\n  const [processing, setProcessing] = useState(false);\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const detectedCategories = useDetectedCategories(viewId);\n\n  const backRoute = `/admin/insights/${viewId}/edit`;\n  if (isNilOrError(detectedCategories)) {\n    return null;\n  }\n\n  const goBack = () => {\n    clHistory.push(backRoute);\n  };\n\n  const handleAddCategories = async () => {\n    setProcessing(true);\n    for (const name of selectedCategories) {\n      try {\n        await addInsightsCategory(viewId, name);\n      } catch {\n        // Do nothing\n      }\n    }\n    setProcessing(false);\n    goBack();\n  };\n\n  const handleCategorySelection = (selectedName: string) => () => {\n    if (selectedCategories.includes(selectedName)) {\n      setSelectedCategories(\n        selectedCategories.filter((name) => name !== selectedName)\n      );\n    } else {\n      setSelectedCategories([...selectedCategories, selectedName]);\n    }\n  };\n\n  return (\n    <>\n      <TopBar />\n      <Box p=\"60px\" data-testid=\"insightsDetect\">\n        <PageTitle>{formatMessage(messages.detectCategoriesTitle)}</PageTitle>\n        <Box display=\"flex\" mb=\"32px\">\n          <Button\n            buttonStyle=\"text\"\n            icon=\"arrow-back\"\n            padding=\"0px\"\n            linkTo={backRoute}\n          >\n            {formatMessage(messages.detectCategoriesGoBack)}\n          </Button>\n        </Box>\n        <PageWrapper>\n          <Box w=\"60%\" mb=\"40px\">\n            <StyledH2>\n              {formatMessage(messages.detectCategoriesSectionTitle)}\n            </StyledH2>\n            {detectedCategories.length > 0 ? (\n              <p>{formatMessage(messages.detectCategoriesDescription)}</p>\n            ) : (\n              <p data-testid=\"insightsDetectEmptyDescription\">\n                {formatMessage(messages.detectCategoriesEmpty)}\n              </p>\n            )}\n          </Box>\n          {detectedCategories.length > 0 && (\n            <>\n              <Box display=\"flex\" flexWrap=\"wrap\" mb=\"60px\">\n                {detectedCategories.map((category) => (\n                  <Tag\n                    mr=\"8px\"\n                    mb=\"8px\"\n                    label={category.attributes.name}\n                    variant={\n                      selectedCategories.includes(category.attributes.name)\n                        ? 'primary'\n                        : 'default'\n                    }\n                    key={category.id}\n                    size=\"large\"\n                    onIconClick={handleCategorySelection(\n                      category.attributes.name\n                    )}\n                  />\n                ))}\n              </Box>\n              <ButtonsContainer\n                display=\"flex\"\n                data-testid=\"insightsDetectButtonContainer\"\n              >\n                <Button\n                  buttonStyle=\"admin-dark\"\n                  disabled={selectedCategories.length === 0}\n                  processing={processing}\n                  onClick={handleAddCategories}\n                >\n                  {selectedCategories.length === 1\n                    ? formatMessage(messages.detectCategoriesAddCategory)\n                    : formatMessage(messages.detectCategoriesAddCategories)}\n                  {selectedCategories.length\n                    ? ` (${selectedCategories.length})`\n                    : ''}\n                </Button>\n                <Button buttonStyle=\"secondary\" linkTo={backRoute}>\n                  {formatMessage(messages.detectCategoriesCancel)}\n                </Button>\n              </ButtonsContainer>\n            </>\n          )}\n        </PageWrapper>\n      </Box>\n    </>\n  );\n};\n\nexport default withRouter(injectIntl(Detect));\n","import { useState, useEffect } from 'react';\nimport {\n  insightsDetectedCategoriesStream,\n  IInsightsDetectedCategoriesData,\n} from '../services/insightsDetectCategories';\n\nconst useInsightsDetectedCategories = (viewId: string) => {\n  const [detectedCategories, setDetectedCategories] = useState<\n    IInsightsDetectedCategoriesData | undefined | null | Error\n  >(undefined);\n\n  useEffect(() => {\n    const subscription = insightsDetectedCategoriesStream(\n      viewId\n    ).observable.subscribe((detectedCategories) => {\n      setDetectedCategories(detectedCategories.data);\n    });\n\n    return () => subscription.unsubscribe();\n  }, [viewId]);\n\n  return detectedCategories;\n};\n\nexport default useInsightsDetectedCategories;\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\n\nconst getInsightsDetectCategoriesEndpoint = (viewId: string) =>\n  `insights/views/${viewId}/detected_categories`;\n\nexport type IInsightsDetectedCategoriesData = {\n  id: string;\n  attributes: {\n    name: string;\n  };\n}[];\n\nexport interface IInsightsDetectedCategories {\n  data: IInsightsDetectedCategoriesData;\n}\n\nexport function insightsDetectedCategoriesStream(\n  insightsViewId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IInsightsDetectedCategories>({\n    apiEndpoint: `${API_PATH}/${getInsightsDetectCategoriesEndpoint(\n      insightsViewId\n    )}`,\n    cacheStream: false,\n    ...streamParams,\n  });\n}\n"],"sourceRoot":""}