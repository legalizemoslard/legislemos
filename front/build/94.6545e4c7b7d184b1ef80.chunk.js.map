{"version":3,"sources":["webpack:///./app/modules/commercial/insights/admin/assets/insightsEdit.png","webpack:///./app/modules/commercial/insights/admin/containers/Insights/List/index.tsx","webpack:///./app/components/admin/PageTitle/index.tsx","webpack:///./app/modules/commercial/insights/hooks/useInsightsViews.ts","webpack:///./app/modules/commercial/insights/admin/containers/Insights/messages.ts","webpack:///./app/modules/commercial/insights/admin/containers/Insights/List/CreateInsightsView.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Insights/List/EmptyState.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Insights/List/InsightsList.tsx","webpack:///./app/components/admin/Divider.tsx","webpack:///./app/modules/commercial/insights/services/insightsViews.ts"],"names":["useState","createModalOpened","setCreateModalOpened","closeCreateModal","openCreateModal","insightsViews","isNilOrError","length","data","opened","close","styled","h1","fontSizes","xxxl","undefined","setInsightsViews","useEffect","subscription","insightsViewsStream","observable","subscribe","unsubscribe","defineMessages","emptyStateTitle","id","defaultMessage","emptyStateAccentText","emptyStateCreate","emptyStateDiscover","title","description","link","supportLinkUrl","listTitle","listDescription","listCreate","listManage","listDelete","listDuplicate","listDeleteConfirmation","createModalTitle","createModalDescription","createModalNameLabel","createModalProjectScopeLabel","createModalSaveView","createModalCancel","inputsDone","inputsTableInputs","inputsTableCategories","inputsTableAlsoIn","inputsTableEmpty","inputsTableNoResults","inputsTableNoResultsDescription","inputsTableCategoryTitle","inputsTableCategoryDescription","inputsTableNotCategorized","inputsTableRecentlyPosted","inputsTableRecentlyPostedInfoBox","categories","detectCategories","resetCategories","resetCategoriesConfimation","addCategory","categoryInfoBoxBold","categoryInfoBox","allInput","allInputTooltip","notCategorized","notCategorizedTooltip","recentlyPosted","recentlyPostedTooltip","editCategoryName","deleteCategory","deleteCategoryConfirmation","renameCategoryModalTitle","renameCategoryModalNameLabel","renameCategoryModalSave","renameCategoryModalCancel","addCategoryLabel","addCategoryPlaceholder","createCategoryPrompt","bulkAssignCategory","assignCategoriesButton","bulkUnassign","bulkApprove","deleteFromCategories","editCategories","categoriesTitle","categoriesTitleTooltip","categoriesSeeAll","categoriesSeeLess","categoriesEmptyTitle","categoriesEmptyDescription","categoriesEmptyButton","categoriesEmptyScanTitle","categoriesEmptyScanDescription","categoriesEmptyScanButton","inputsLoadMore","inputsReadMore","inputsEmptyTitle","inputsEmptyDescription","detectCategoriesTitle","detectCategoriesSectionTitle","detectCategoriesDescription","detectCategoriesAddCategory","detectCategoriesAddCategories","detectCategoriesCancel","detectCategoriesGoBack","detectCategoriesEmpty","Container","div","colors","adminTextColor","Title","xxl","Description","p","base","Form","form","ButtonContainer","CreateInsightsView","projects","localize","locale","loading","setLoading","errors","setErrors","name","setName","projectScope","setProjectScope","getProjectOptions","useCallback","projectsList","filter","project","attributes","ideas_count","map","label","title_multiloc","value","addInsightsView","scope_id","result","json","FormattedMessage","messages","SectionField","Input","type","onChange","apiErrors","fieldName","Select","options","option","Button","processing","disabled","onClick","bgColor","buttonStyle","Data","adopt","publicationStatuses","filterCanModerate","inputProps","dataProps","adminContentBackground","clBlueLight","Image","img","media","smallerThanMaxTablet","ButtonsContainer","injectIntl","formatMessage","intl","values","accentText","className","linkTo","src","insights","StyledDescription","StyledLink","a","clBlue","darken","InsightsContainer","InsightsContainerTitle","h2","xl","InsightsContainerHeader","InsightsListItem","xs","formatDate","target","rel","href","view","key","updated_at","icon","textColor","boxShadow","viewId","deleteMessage","window","confirm","deleteInsightsView","StyledHr","hr","separation","streamParams","streams","get","apiEndpoint","API_PATH","insightsViewsEndpoint","insightsViewId","update","delete","object","add","response","fetchAllWith"],"mappings":"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","file":"94.6545e4c7b7d184b1ef80.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"d5504f46e52e92e0bc74f6a8109b63af.png\";","import React, { useState } from 'react';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport EmptyState from './EmptyState';\nimport useInsightsViews from 'modules/commercial/insights/hooks/useInsightsViews';\nimport InsightsList from './InsightsList';\nimport Modal from 'components/UI/Modal';\nimport CreateInsightsView from './CreateInsightsView';\n\nconst Insights = () => {\n  const [createModalOpened, setCreateModalOpened] = useState(false);\n\n  const closeCreateModal = () => setCreateModalOpened(false);\n  const openCreateModal = () => setCreateModalOpened(true);\n\n  const insightsViews = useInsightsViews();\n\n  if (isNilOrError(insightsViews)) {\n    return null;\n  }\n\n  return (\n    <div>\n      {insightsViews.length === 0 ? (\n        <EmptyState openCreateModal={openCreateModal} />\n      ) : (\n        <InsightsList openCreateModal={openCreateModal} data={insightsViews} />\n      )}\n      <Modal opened={createModalOpened} close={closeCreateModal}>\n        <CreateInsightsView closeCreateModal={closeCreateModal} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default Insights;\n","// style\nimport styled from 'styled-components';\nimport { fontSizes } from 'utils/styleUtils';\n\nexport default styled.h1`\n  font-size: ${fontSizes.xxxl}px;\n  line-height: 40px;\n  font-weight: 600;\n  padding: 0;\n  margin: 0;\n  margin-bottom: 15px;\n`;\n","import { useState, useEffect } from 'react';\nimport {\n  insightsViewsStream,\n  IInsightsViewData,\n} from '../services/insightsViews';\n\nconst useInsightsViews = () => {\n  const [insightsViews, setInsightsViews] = useState<\n    IInsightsViewData[] | undefined | null | Error\n  >(undefined);\n\n  useEffect(() => {\n    const subscription = insightsViewsStream().observable.subscribe(\n      (insightsViews) => {\n        setInsightsViews(insightsViews.data);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  return insightsViews;\n};\n\nexport default useInsightsViews;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  emptyStateTitle: {\n    id: 'app.containers.Admin.Insights.emptyStateTitle',\n    defaultMessage: 'Easily understand what participants are { accentText }',\n  },\n  emptyStateAccentText: {\n    id: 'app.containers.Admin.Insights.emptyStateAccentText',\n    defaultMessage: 'talking about',\n  },\n  emptyStateCreate: {\n    id: 'app.containers.Admin.Insights.emptyStateCreate',\n    defaultMessage: 'Create my first insights',\n  },\n  emptyStateDiscover: {\n    id: 'app.containers.Admin.Insights.discover',\n    defaultMessage: 'Discover how it works',\n  },\n  title: {\n    id: 'app.containers.Admin.Insights.title',\n    defaultMessage: 'Insights',\n  },\n  description: {\n    id: 'app.containers.Admin.Insights.description',\n    defaultMessage:\n      'Efficiently analyse the textual input on your platform. Group individual contributions that belong together. Understand what participants are really saying.',\n  },\n  link: {\n    id: 'app.containers.Admin.Insights.link',\n    defaultMessage: 'Read our support guide',\n  },\n  supportLinkUrl: {\n    id: 'app.containers.Admin.Insights.supportLinkUrl',\n    defaultMessage:\n      'https://support.citizenlab.co/en/articles/5525933-create-insights-to-understand-what-participants-are-talking-about',\n  },\n  listTitle: {\n    id: 'app.containers.Admin.Insights.listTitle',\n    defaultMessage: 'Insights',\n  },\n  listDescription: {\n    id: 'app.containers.Admin.Insights.listDescription',\n    defaultMessage:\n      'An insight is a textual or visual summary of the input. It is a starting point to formulate conclusions and a building block for reports. Actions taken here don’t impact the rest of the platform and are not visible to participants.',\n  },\n  listCreate: {\n    id: 'app.containers.Admin.Insights.listCreate',\n    defaultMessage: 'Create insights',\n  },\n  listManage: {\n    id: 'app.containers.Admin.Insights.listManage',\n    defaultMessage: 'Manage',\n  },\n  listDelete: {\n    id: 'app.containers.Admin.Insights.listDelete',\n    defaultMessage: 'Delete',\n  },\n  listDuplicate: {\n    id: 'app.containers.Admin.Insights.listDuplicate',\n    defaultMessage: 'Duplicate',\n  },\n  listDeleteConfirmation: {\n    id: 'app.containers.Admin.Insights.listDeleteConfirmation',\n    defaultMessage: 'Are you sure you want to delete this view?',\n  },\n  createModalTitle: {\n    id: 'app.containers.Admin.Insights.createModalTitle',\n    defaultMessage: 'Start analyzing your inputs',\n  },\n  createModalDescription: {\n    id: 'app.containers.Admin.Insights.createModalDescription',\n    defaultMessage:\n      'You’re about to have your first insights on what participants are talking about. These insights will be saved so you can continue working on them later.',\n  },\n  createModalNameLabel: {\n    id: 'app.containers.Admin.Insights.createModalNameLabel',\n    defaultMessage: 'Name',\n  },\n  createModalProjectScopeLabel: {\n    id: 'app.containers.Admin.Insights.createModalProjectScopeLabel',\n    defaultMessage: 'Project',\n  },\n  createModalSaveView: {\n    id: 'app.containers.Admin.Insights.createModalSaveView',\n    defaultMessage: 'Create my insights',\n  },\n  createModalCancel: {\n    id: 'app.containers.Admin.Insights.createModalCancel',\n    defaultMessage: 'Cancel',\n  },\n  inputsDone: {\n    id: 'app.containers.Admin.Insights.Edit.inputsDone',\n    defaultMessage: 'Done',\n  },\n  inputsTableInputs: {\n    id: 'app.containers.Admin.Insights.Edit.inputsTableInputs',\n    defaultMessage: 'Inputs',\n  },\n  inputsTableCategories: {\n    id: 'app.containers.Admin.Insights.Edit.inputsTableCategories',\n    defaultMessage: 'Categories',\n  },\n  inputsTableAlsoIn: {\n    id: 'app.containers.Admin.Insights.Edit.inputsTableAlsoIn',\n    defaultMessage: 'Also in',\n  },\n  inputsTableEmpty: {\n    id: 'app.containers.Admin.Insights.Edit.inputsEmptyState',\n    defaultMessage: \"This project doesn't seem to contain any input.\",\n  },\n  inputsTableNoResults: {\n    id: 'app.containers.Admin.Insights.Edit.inputsTableNoResults',\n    defaultMessage: 'No results found',\n  },\n  inputsTableNoResultsDescription: {\n    id: 'app.containers.Admin.Insights.Edit.inputsTableNoResultsDescription',\n    defaultMessage: 'Please try a different filter or search term.',\n  },\n  inputsTableCategoryTitle: {\n    id: 'app.containers.Admin.Insights.Edit.inputsTableCategoryTitle',\n    defaultMessage: 'You have no input assigned to this category yet',\n  },\n  inputsTableCategoryDescription: {\n    id: 'app.containers.Admin.Insights.Edit.inputsTableCategoryDescription',\n    defaultMessage: 'Start moving input here to grow your category.',\n  },\n  inputsTableNotCategorized: {\n    id: 'app.containers.Admin.Insights.Edit.inputsTableNotCategorized',\n    defaultMessage: 'There is no input without a category',\n  },\n  inputsTableRecentlyPosted: {\n    id: 'app.containers.Admin.Insights.Edit.inputsTableRecentlyPosted',\n    defaultMessage:\n      'There is no recent input. All input has been taken into consideration.',\n  },\n  inputsTableRecentlyPostedInfoBox: {\n    id: 'app.containers.Admin.Insights.Edit.inputsTableRecentlyPostedInfoBox',\n    defaultMessage:\n      'The input below was recently added and has not yet been categorized. ',\n  },\n  categories: {\n    id: 'app.containers.Admin.Insights.Edit.categories',\n    defaultMessage: 'Categories',\n  },\n  detectCategories: {\n    id: 'app.containers.Admin.Insights.Edit.detectCategories',\n    defaultMessage: 'Detect new categories',\n  },\n  resetCategories: {\n    id: 'app.containers.Admin.Insights.Edit.resetCategories',\n    defaultMessage: 'Reset categories',\n  },\n  resetCategoriesConfimation: {\n    id: 'app.containers.Admin.Insights.Edit.resetCategoriesConfimation',\n    defaultMessage: 'Are you sure you want to reset all categories?',\n  },\n  addCategory: {\n    id: 'app.containers.Admin.Insights.Edit.addCategory',\n    defaultMessage: 'Add category',\n  },\n  categoryInfoBoxBold: {\n    id: 'app.containers.Admin.Insights.Edit.categoryInfoBoxBold',\n    defaultMessage: 'Add your first category',\n  },\n  categoryInfoBox: {\n    id: 'app.containers.Admin.Insights.Edit.categoryInfoBox',\n    defaultMessage: '{bold} to organize and analyze input',\n  },\n  allInput: {\n    id: 'app.containers.Admin.Insights.Edit.allInput',\n    defaultMessage: 'All input',\n  },\n  allInputTooltip: {\n    id: 'app.containers.Admin.Insights.Edit.allInputTooltip',\n    defaultMessage:\n      'This lists all previously processed input regardless of assigned categories. Recently added input is NOT shown here.',\n  },\n  notCategorized: {\n    id: 'app.containers.Admin.Insights.Edit.notCategorized',\n    defaultMessage: 'Not categorized',\n  },\n  notCategorizedTooltip: {\n    id: 'app.containers.Admin.Insights.Edit.notCategorizedTooltip',\n    defaultMessage:\n      \"This lists all previously processed input that hasn't been assigned a category. Recently added input is NOT shown here.\",\n  },\n  recentlyPosted: {\n    id: 'app.containers.Admin.Insights.Edit.recentlyPosted',\n    defaultMessage: 'Recently posted',\n  },\n  recentlyPostedTooltip: {\n    id: 'app.containers.Admin.Insights.Edit.recentlyPostedTooltip',\n    defaultMessage:\n      'This lists all recently added input, and has not yet been processed for categorization.',\n  },\n  editCategoryName: {\n    id: 'app.containers.Admin.Insights.Edit.editCategoryName',\n    defaultMessage: 'Edit category name',\n  },\n  deleteCategory: {\n    id: 'app.containers.Admin.Insights.Edit.deleteCategory',\n    defaultMessage: 'Delete category',\n  },\n  deleteCategoryConfirmation: {\n    id: 'app.containers.Admin.Insights.Edit.deleteCategoryConfirmation',\n    defaultMessage: 'Are you sure you want to delete this category?',\n  },\n  renameCategoryModalTitle: {\n    id: 'app.containers.Admin.Insights.Edit.renameCategoryModalTitle',\n    defaultMessage: 'Edit the name of this category',\n  },\n  renameCategoryModalNameLabel: {\n    id: 'app.containers.Admin.Insights.Edit.renameCategoryModalNameLabel',\n    defaultMessage: 'Name',\n  },\n  renameCategoryModalSave: {\n    id: 'app.containers.Admin.Insights.Edit.renameCategoryModalSave',\n    defaultMessage: 'Save',\n  },\n  renameCategoryModalCancel: {\n    id: 'app.containers.Admin.Insights.Edit.renameCategoryModalCancel',\n    defaultMessage: 'Cancel',\n  },\n  addCategoryLabel: {\n    id: 'app.containers.Admin.Insights.Edit.Details.addCategoryLabel',\n    defaultMessage: 'Add a category',\n  },\n  addCategoryPlaceholder: {\n    id: 'app.containers.Admin.Insights.Edit.Details.addCategoryPlaceholder',\n    defaultMessage: 'Type a category name...',\n  },\n  createCategoryPrompt: {\n    id: 'app.containers.Admin.Insights.Edit.Details.createCategoryPrompt',\n    defaultMessage: 'Create',\n  },\n  bulkAssignCategory: {\n    id: 'app.containers.Admin.Insights.Edit.bulkAssignCategory',\n    defaultMessage: 'Add categories to selected inputs',\n  },\n  assignCategoriesButton: {\n    id: 'app.containers.Admin.Insights.Edit.assignCategoriesButton',\n    defaultMessage: 'Add',\n  },\n  bulkUnassign: {\n    id: 'app.containers.Admin.Insights.Edit.bulkUnassign',\n    defaultMessage: 'Remove',\n  },\n  bulkApprove: {\n    id: 'app.containers.Admin.Insights.Edit.bulkApprove',\n    defaultMessage: 'Approve',\n  },\n  deleteFromCategories: {\n    id: 'app.containers.Admin.Insights.Edit.deleteFromCategories',\n    defaultMessage:\n      'Are you sure you can to remove {selectedCount} inputs from {categoryName}?',\n  },\n  editCategories: {\n    id: 'app.containers.Admin.Insights.Details.editCategories',\n    defaultMessage: 'Edit categories',\n  },\n  categoriesTitle: {\n    id: 'app.containers.Admin.Insights.Details.categoriesTitle',\n    defaultMessage: 'Categories',\n  },\n  categoriesTitleTooltip: {\n    id: 'app.containers.Admin.Insights.Details.categoriesTitleTooltip',\n    defaultMessage:\n      'Categories help structure your input. You can edit your categories at any time or use them as filter on the visualisation below.',\n  },\n  categoriesSeeAll: {\n    id: 'app.containers.Admin.Insights.Details.categoriesSeeAll',\n    defaultMessage: 'See all',\n  },\n  categoriesSeeLess: {\n    id: 'app.containers.Admin.Insights.Details.categoriesSeeLess',\n    defaultMessage: 'See less',\n  },\n  categoriesEmptyTitle: {\n    id: 'app.containers.Admin.Insights.Details.categoriesEmptyTitle',\n    defaultMessage: \"Organize the input you've received\",\n  },\n  categoriesEmptyDescription: {\n    id: 'app.containers.Admin.Insights.Details.categoriesEmptyDescription',\n    defaultMessage: 'Define the categories you want to group your input into.',\n  },\n  categoriesEmptyButton: {\n    id: 'app.containers.Admin.Insights.Details.categoriesEmptyButton',\n    defaultMessage: 'Create categories',\n  },\n  categoriesEmptyScanTitle: {\n    id: 'app.containers.Admin.Insights.Details.categoriesEmptyScanTitle',\n    defaultMessage:\n      'Do you want to scan for input that belongs in this category?',\n  },\n  categoriesEmptyScanDescription: {\n    id: 'app.containers.Admin.Insights.Details.categoriesEmptyScanDescription',\n    defaultMessage:\n      'This automated process may take a few minutes. You can leave the page and come back.',\n  },\n  categoriesEmptyScanButton: {\n    id: 'app.containers.Admin.Insights.Details.categoriesEmptyScanButton',\n    defaultMessage: 'Scan for suggestions',\n  },\n  inputsLoadMore: {\n    id: 'app.containers.Admin.Insights.Details.inputsLoadMore',\n    defaultMessage: 'Load more',\n  },\n  inputsReadMore: {\n    id: 'app.containers.Admin.Insights.Details.inputsReadMore',\n    defaultMessage: 'Read more',\n  },\n  inputsEmptyTitle: {\n    id: 'app.containers.Admin.Insights.Details.inputsEmptyTitle',\n    defaultMessage: 'No results found',\n  },\n  inputsEmptyDescription: {\n    id: 'app.containers.Admin.Insights.Details.inputsEmptyDescription',\n    defaultMessage: 'Please try a different filter or search term.',\n  },\n  detectCategoriesTitle: {\n    id: 'app.containers.Admin.Insights.Detect.pageTitle',\n    defaultMessage: 'Detect new categories',\n  },\n  detectCategoriesSectionTitle: {\n    id: 'app.containers.Admin.Insights.Detect.sectionTitle',\n    defaultMessage: 'Detected categories',\n  },\n  detectCategoriesDescription: {\n    id: 'app.containers.Admin.Insights.Detect.sectionDescription',\n    defaultMessage:\n      'These auto-detected categories are the most common topics discussed on your platform.',\n  },\n  detectCategoriesAddCategory: {\n    id: 'app.containers.Admin.Insights.Detect.addCategory',\n    defaultMessage: 'Add category',\n  },\n  detectCategoriesAddCategories: {\n    id: 'app.containers.Admin.Insights.Detect.addCategories',\n    defaultMessage: 'Add categories',\n  },\n  detectCategoriesCancel: {\n    id: 'app.containers.Admin.Insights.Detect.cancel',\n    defaultMessage: 'Cancel',\n  },\n  detectCategoriesGoBack: {\n    id: 'app.containers.Admin.Insights.Detect.goBack',\n    defaultMessage: 'Go back',\n  },\n  detectCategoriesEmpty: {\n    id: 'app.containers.Admin.Insights.Detect.empty',\n    defaultMessage:\n      'No categories detected. Please go back to define your own.',\n  },\n});\n","import React, { useCallback, useState } from 'react';\n\n// styles\nimport styled from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\n\n// intl\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\n\n// components\nimport { Button, Input, Select } from 'cl2-component-library';\nimport { SectionField } from 'components/admin/Section';\nimport Error from 'components/UI/Error';\n\n// resources\nimport { adopt } from 'react-adopt';\nimport GetProjects, {\n  GetProjectsChildProps,\n  PublicationStatus,\n} from 'resources/GetProjects';\n\n// hooks\nimport useLocalize from 'hooks/useLocalize';\nimport useLocale from 'hooks/useLocale';\n\n// services\nimport { addInsightsView } from 'modules/commercial/insights/services/insightsViews';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\n\n// typings\nimport { CLErrors } from 'typings';\n\nconst Container = styled.div`\n  width: 100%;\n  max-width: 350px;\n  margin: 40px auto;\n  color: ${colors.adminTextColor};\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n  font-size: ${fontSizes.xxl}px;\n`;\n\nconst Description = styled.p`\n  text-align: center;\n  padding-top: 10px;\n  font-size: ${fontSizes.base}px;\n`;\n\nconst Form = styled.form`\n  margin-top: 50px;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n\n  > :not(:first-child) {\n    margin-left: 5px;\n  }\n`;\n\ninterface DataProps {\n  projects: GetProjectsChildProps;\n}\n\ninterface InputProps {\n  closeCreateModal: () => void;\n}\n\nexport const CreateInsightsView = ({\n  projects,\n  closeCreateModal,\n}: DataProps & InputProps) => {\n  const localize = useLocalize();\n  const locale = useLocale();\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState<CLErrors | undefined>();\n\n  const [name, setName] = useState<string | null>();\n  const onChangeName = (value: string) => {\n    setName(value);\n    setErrors(undefined);\n  };\n\n  const [projectScope, setProjectScope] = useState<string | null>();\n  const onChangeProjectScope = (option) => {\n    setProjectScope(option.value);\n  };\n\n  const getProjectOptions = useCallback(\n    () =>\n      projects?.projectsList\n        ?.filter((project) => project.attributes.ideas_count > 0)\n        .map((project) => ({\n          label: localize(project.attributes.title_multiloc),\n          value: project.id,\n        })) ?? null,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [projects]\n  );\n\n  async function handleSubmit() {\n    if (name && projectScope) {\n      setLoading(true);\n      try {\n        const result = await addInsightsView({ name, scope_id: projectScope });\n        if (!isNilOrError(result)) {\n          closeCreateModal();\n        }\n      } catch (errors) {\n        setErrors(errors.json.errors);\n        setLoading(false);\n      }\n    }\n  }\n\n  if (isNilOrError(locale)) return null;\n\n  return (\n    <Container data-testid=\"insightsCreateModal\">\n      <Title>\n        <FormattedMessage {...messages.createModalTitle} />\n      </Title>\n      <Description>\n        <FormattedMessage {...messages.createModalDescription} />\n      </Description>\n      <Form>\n        <SectionField>\n          <Input\n            type=\"text\"\n            id=\"view_name\"\n            value={name}\n            onChange={onChangeName}\n            label={<FormattedMessage {...messages.createModalNameLabel} />}\n          />\n          {errors && <Error apiErrors={errors['name']} fieldName=\"view_name\" />}\n        </SectionField>\n        <SectionField>\n          <Select\n            id=\"view_project_scope\"\n            options={getProjectOptions()}\n            onChange={onChangeProjectScope}\n            value={projectScope}\n            label={\n              <FormattedMessage {...messages.createModalProjectScopeLabel} />\n            }\n          />\n        </SectionField>\n        <ButtonContainer>\n          <Button\n            processing={loading}\n            disabled={!(name && projectScope)}\n            locale={locale}\n            onClick={handleSubmit}\n            bgColor={colors.adminTextColor}\n          >\n            <FormattedMessage {...messages.createModalSaveView} />\n          </Button>\n          <Button\n            locale={locale}\n            onClick={closeCreateModal}\n            buttonStyle=\"secondary\"\n          >\n            <FormattedMessage {...messages.createModalCancel} />\n          </Button>\n        </ButtonContainer>\n      </Form>\n    </Container>\n  );\n};\n\nconst publicationStatuses: PublicationStatus[] = [\n  'published',\n  'archived',\n  'draft',\n];\n\nconst Data = adopt<DataProps>({\n  projects: (\n    <GetProjects\n      publicationStatuses={publicationStatuses}\n      filterCanModerate={true}\n    />\n  ),\n});\n\nexport default (inputProps: InputProps) => (\n  <Data>\n    {(dataProps: DataProps) => (\n      <CreateInsightsView {...dataProps} {...inputProps} />\n    )}\n  </Data>\n);\n","import React from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// intl\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport useLocale from 'hooks/useLocale';\n\n// styles\nimport styled from 'styled-components';\nimport { colors, fontSizes, media } from 'utils/styleUtils';\n\n// assets\nimport insights from '../../../assets/insightsEdit.png';\nimport messages from '../messages';\n\n// components\nimport { Button } from 'cl2-component-library';\nimport { InjectedIntlProps } from 'react-intl';\n\nconst Container = styled.div`\n  background-color: ${colors.adminContentBackground};\n  padding: 135px 100px;\n  display: flex;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);\n  border-radius: 3px;\n`;\n\nconst Title = styled.h1`\n  padding-top: 30px;\n  .accent {\n    color: ${colors.clBlueLight};\n  }\n`;\n\nconst Description = styled.p`\n  padding-top: 10px;\n  font-size: ${fontSizes.base}px;\n  color: ${colors.label};\n`;\n\nconst Image = styled.img`\n  width: 50%;\n  margin-left: 35px;\n  object-fit: contain;\n  ${media.smallerThanMaxTablet`\n    display: none;\n  `};\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  margin-top: 40px;\n  > *:first-child {\n    margin-right: 12px;\n    margin-bottom: 12px;\n  }\n`;\n\ninterface Props {\n  openCreateModal: () => void;\n}\n\nconst EmptyState = ({\n  openCreateModal,\n  intl: { formatMessage },\n}: Props & InjectedIntlProps) => {\n  const locale = useLocale();\n\n  return (\n    <Container data-testid=\"insightsListEmptyState\">\n      <div>\n        <Title>\n          <FormattedMessage\n            {...messages.emptyStateTitle}\n            values={{\n              accentText: (\n                <span className=\"accent\">\n                  {formatMessage(messages.emptyStateAccentText)}\n                </span>\n              ),\n            }}\n          />\n        </Title>\n        <Description>{formatMessage(messages.description)}</Description>\n        {!isNilOrError(locale) && (\n          <ButtonsContainer>\n            <Button\n              locale={locale}\n              bgColor={colors.adminTextColor}\n              onClick={openCreateModal}\n            >\n              {formatMessage(messages.emptyStateCreate)}\n            </Button>\n            <Button\n              locale={locale}\n              buttonStyle=\"secondary\"\n              linkTo={formatMessage(messages.supportLinkUrl)}\n            >\n              {formatMessage(messages.emptyStateDiscover)}\n            </Button>\n          </ButtonsContainer>\n        )}\n      </div>\n      <Image src={insights} />\n    </Container>\n  );\n};\n\nexport default injectIntl(EmptyState);\n","import React from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// intl\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\nimport useLocale from 'hooks/useLocale';\n\n// components\nimport PageTitle from 'components/admin/PageTitle';\nimport { Button } from 'cl2-component-library';\nimport Divider from 'components/admin/Divider';\n\n// styles\nimport styled from 'styled-components';\nimport { fontSizes, colors } from 'utils/styleUtils';\nimport { darken } from 'polished';\n\n// services\nimport {\n  IInsightsViewData,\n  deleteInsightsView,\n} from 'modules/commercial/insights/services/insightsViews';\n\nconst StyledDescription = styled.p`\n  font-size: ${fontSizes.base}px;\n  width: 60%;\n  margin: 0;\n`;\n\nconst StyledLink = styled.a`\n  cursor: pointer;\n  font-size: ${fontSizes.base}px;\n  color: ${colors.clBlue};\n  font-weight: 600;\n  text-decoration: underline;\n  &:hover {\n    color: ${darken(0.2, colors.clBlue)};\n    text-decoration: underline;\n  }\n`;\n\nconst InsightsContainer = styled.div`\n  margin-top: 40px;\n  background-color: ${colors.adminContentBackground};\n  padding: 60px 70px;\n  font-size: ${fontSizes.base}px;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);\n  border-radius: 3px;\n`;\n\nconst InsightsContainerTitle = styled.h2`\n  font-size: ${fontSizes.xl}px;\n`;\n\nconst InsightsContainerHeader = styled.div`\n  display: flex;\n  margin-bottom: 60px;\n  justify-content: space-between;\n  p {\n    color: ${colors.label};\n  }\n  > div:first-child {\n    width: 50%;\n  }\n`;\n\nconst InsightsListItem = styled.div`\n  margin-top: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  h3 {\n    font-size: ${fontSizes.base}px;\n    font-weight: bold;\n    margin-bottom: 4px;\n  }\n  p {\n    font-size: ${fontSizes.xs}px;\n    color: ${colors.label};\n  }\n  .buttons {\n    display: flex;\n    > * {\n      margin-left: 8px;\n    }\n  }\n`;\n\ntype InsightsList = {\n  data: IInsightsViewData[];\n  openCreateModal: () => void;\n};\n\nconst InsightsList: React.FC<InsightsList & InjectedIntlProps> = ({\n  intl: { formatMessage, formatDate },\n  data,\n  openCreateModal,\n}) => {\n  const locale = useLocale();\n\n  const handleDeleteClick = (viewId: string) => () => {\n    const deleteMessage = formatMessage(messages.listDeleteConfirmation);\n\n    if (window.confirm(deleteMessage)) {\n      deleteInsightsView(viewId);\n    }\n  };\n\n  return (\n    <div data-testid=\"insightsList\">\n      <PageTitle>{formatMessage(messages.title)}</PageTitle>\n      <StyledDescription>\n        {formatMessage(messages.description)}\n      </StyledDescription>\n      <StyledLink\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        href={formatMessage(messages.supportLinkUrl)}\n      >\n        {formatMessage(messages.link)}\n      </StyledLink>\n      {!isNilOrError(locale) && (\n        <InsightsContainer>\n          <InsightsContainerHeader>\n            <div>\n              <InsightsContainerTitle>\n                {formatMessage(messages.listTitle)}\n              </InsightsContainerTitle>\n              <p>{formatMessage(messages.listDescription)}</p>\n            </div>\n            <Button\n              locale={locale}\n              bgColor={colors.adminTextColor}\n              onClick={openCreateModal}\n            >\n              {formatMessage(messages.listCreate)}\n            </Button>\n          </InsightsContainerHeader>\n          {data.map((view) => (\n            <div key={view.id} data-testid=\"insightsListItem\">\n              <InsightsListItem>\n                <div>\n                  <h3> {view.attributes.name}</h3>\n                  <p>{formatDate(view.attributes.updated_at)}</p>\n                </div>\n                <div className=\"buttons\">\n                  {/* <Button\n                    locale={locale}\n                    buttonStyle=\"white\"\n                    icon=\"copy\"\n                    textColor={colors.adminTextColor}\n                    boxShadow=\"none\"\n                  >\n                    {formatMessage(messages.listDuplicate)}\n                  </Button> */}\n                  <Button\n                    locale={locale}\n                    buttonStyle=\"white\"\n                    icon=\"delete\"\n                    textColor={colors.adminTextColor}\n                    boxShadow=\"none\"\n                    onClick={handleDeleteClick(view.id)}\n                  >\n                    {formatMessage(messages.listDelete)}\n                  </Button>\n                  <Button\n                    locale={locale}\n                    buttonStyle=\"secondary\"\n                    icon=\"edit\"\n                    linkTo={`/admin/insights/${view.id}/edit`}\n                  >\n                    {formatMessage(messages.listManage)}\n                  </Button>\n                </div>\n              </InsightsListItem>\n              <Divider />\n            </div>\n          ))}\n        </InsightsContainer>\n      )}\n    </div>\n  );\n};\n\nexport default injectIntl(InsightsList);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\n\nconst StyledHr = styled.hr`\n  display: block;\n  height: 1px;\n  border: 0;\n  border-top: 1px solid ${colors.separation};\n  margin: 1em 0;\n  padding: 0;\n`;\n\nconst Divider = ({ className }: { className?: string }) => (\n  <StyledHr className={className} />\n);\n\nexport default Divider;\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { IRelationship } from 'typings';\n\nexport interface IInsightsViewData {\n  id: string;\n  type: string;\n  attributes: {\n    name: string;\n    updated_at: string;\n  };\n  relationships?: {\n    scope: {\n      data: IRelationship;\n    };\n  };\n}\n\nexport interface IInsightsView {\n  data: IInsightsViewData;\n}\n\nexport interface IInsightsViews {\n  data: IInsightsViewData[];\n}\n\ninterface IInsightsViewObject {\n  scope_id: string;\n  name: string;\n}\n\nconst insightsViewsEndpoint = 'insights/views';\n\nexport function insightsViewsStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IInsightsViews>({\n    apiEndpoint: `${API_PATH}/${insightsViewsEndpoint}`,\n    ...streamParams,\n  });\n}\n\nexport function insightsViewStream(\n  insightsViewId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IInsightsView>({\n    apiEndpoint: `${API_PATH}/${insightsViewsEndpoint}/${insightsViewId}`,\n    ...streamParams,\n  });\n}\n\nexport async function addInsightsView(object: IInsightsViewObject) {\n  const response = await streams.add<IInsightsView>(\n    `${API_PATH}/${insightsViewsEndpoint}`,\n    {\n      view: object,\n    }\n  );\n  await streams.fetchAllWith({\n    apiEndpoint: [`${API_PATH}/${insightsViewsEndpoint}`],\n  });\n  return response;\n}\n\nexport function updateInsightsView(insightsViewId: string, name: string) {\n  return streams.update<IInsightsView>(\n    `${API_PATH}/${insightsViewsEndpoint}/${insightsViewId}`,\n    insightsViewId,\n    { view: { name } }\n  );\n}\n\nexport function deleteInsightsView(insightsViewId: string) {\n  return streams.delete(\n    `${API_PATH}/${insightsViewsEndpoint}/${insightsViewId}`,\n    insightsViewId\n  );\n}\n"],"sourceRoot":""}