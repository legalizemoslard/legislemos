{"version":3,"sources":["webpack:///./app/components/UI/FormikTextAreaMultilocWithLocaleSwitcher/index.tsx","webpack:///./app/components/UI/FormikToggle/index.tsx","webpack:///./app/components/UI/GoBackButton/messages.ts","webpack:///./app/components/UI/TextAreaMultilocWithLocaleSwitcher/index.tsx","webpack:///./app/modules/commercial/user_custom_fields/admin/containers/CustomFields/RegistrationCustomFieldForm/index.tsx","webpack:///./app/components/UI/FormikSelect/index.tsx","webpack:///./app/modules/commercial/user_custom_fields/admin/containers/CustomFields/RegistrationCustomFieldNew/index.tsx","webpack:///./app/components/UI/GoBackButton/index.tsx"],"names":["newValue","props","form","setFieldTouched","field","name","setFieldValue","value","this","valueMultiloc","onChange","handleOnChange","React","Component","Toggle","checked","PureComponent","defineMessages","goBack","id","defaultMessage","Container","styled","div","LabelContainer","StyledLabel","Label","Spacer","StyledLocaleSwitcher","LocaleSwitcher","LabelText","span","colors","label","memo","className","labelTooltipText","labelTextElement","textAreaProps","useState","selectedLocale","setSelectedLocale","locale","tenantLocales","useEffect","isNilOrError","handleValueOnChange","useCallback","newValueMultiloc","handleOnSelectedLocaleChange","newSelectedLocale","htmlFor","IconTooltip","content","onSelectedLocaleChange","locales","values","StyledSpan","RegistrationCustomFieldForm","map","inputType","intl","formatMessage","messages","isSubmitting","mode","errors","isValid","touched","builtInField","status","Form","Section","SectionField","FormattedMessage","answerFormat","Field","component","FormikSelect","options","inputTypeOptions","disabled","input_type","fieldName","apiErrors","FormikInputMultilocWithLocaleSwitcher","title_multiloc","FormikTextAreaMultilocWithLocaleSwitcher","fieldDescription","descriptionTooltip","description_multiloc","required","FormikToggle","isFieldRequired","every","isEmpty","error","injectIntl","newOption","Select","PageTitle","h1","setErrors","setSubmitting","setStatus","addCustomFieldForUsers","then","response","hasOptions","clHistory","push","data","catch","errorResponse","isCLErrorJSON","json","onClick","addANewRegistrationField","Formik","initialValues","enabled","onSubmit","handleSubmit","render","renderFn","validate","GoBackButton","buttonStyle","icon","size","padding","text"],"mappings":"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","file":"101.822e78a0aa5d8522d100.chunk.js","sourcesContent":["import React from 'react';\nimport TextAreaMultilocWithLocaleSwitcher, {\n  Props,\n} from 'components/UI/TextAreaMultilocWithLocaleSwitcher';\nimport { FieldProps } from 'formik';\n\nclass FormikTextAreaMultilocWithLocaleSwitcher extends React.Component<\n  FieldProps & Props\n> {\n  handleOnChange = (newValue) => {\n    this.props.form.setFieldTouched(this.props.field.name);\n    this.props.form.setFieldValue(this.props.field.name, newValue);\n  };\n\n  render() {\n    const { value } = this.props.field;\n    return (\n      <TextAreaMultilocWithLocaleSwitcher\n        {...this.props}\n        valueMultiloc={value}\n        onChange={this.handleOnChange}\n      />\n    );\n  }\n}\n\nexport default FormikTextAreaMultilocWithLocaleSwitcher;\n","import React from 'react';\nimport { Toggle } from 'cl2-component-library';\nimport { FieldProps } from 'formik';\n\nclass FormikToggle extends React.PureComponent<FieldProps> {\n  handleOnChange = () => {\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      !this.props.field.value\n    );\n  };\n\n  render() {\n    const { value } = this.props.field;\n\n    return (\n      <Toggle {...this.props} checked={value} onChange={this.handleOnChange} />\n    );\n  }\n}\n\nexport default FormikToggle;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  goBack: {\n    id: 'app.components.GoBackButton.group.edit.goBack',\n    defaultMessage: 'Go back',\n  },\n});\n","import React, { memo, useState, useCallback, useEffect } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport TextArea, { Props as TextAreaProps } from 'components/UI/TextArea';\nimport { IconTooltip, LocaleSwitcher, Label } from 'cl2-component-library';\n\n// hooks\nimport useLocale from 'hooks/useLocale';\nimport useAppConfigurationLocales from 'hooks/useAppConfigurationLocales';\n\n// style\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\n\n// typings\nimport { Locale, Multiloc } from 'typings';\n\nconst Container = styled.div``;\n\nconst LabelContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\n\nconst StyledLabel = styled(Label)`\n  flex: 1;\n  padding: 0;\n  margin: 0;\n`;\n\nconst Spacer = styled.div`\n  flex: 1;\n`;\n\nconst StyledLocaleSwitcher = styled(LocaleSwitcher)`\n  width: auto;\n`;\n\nconst LabelText = styled.span`\n  color: ${colors.label};\n`;\n\nexport interface Props extends Omit<TextAreaProps, 'value' | 'onChange'> {\n  valueMultiloc: Multiloc | null | undefined;\n  onChange: (value: Multiloc, locale: Locale) => void;\n  labelTextElement?: JSX.Element;\n}\n\nconst TextAreaMultilocWithLocaleSwitcher = memo<Props>((props) => {\n  const {\n    valueMultiloc,\n    onChange,\n    className,\n    label,\n    labelTooltipText,\n    labelTextElement,\n    ...textAreaProps\n  } = props;\n\n  const [selectedLocale, setSelectedLocale] = useState<Locale | null>(null);\n\n  const locale = useLocale();\n  const tenantLocales = useAppConfigurationLocales();\n\n  useEffect(() => {\n    !isNilOrError(locale) && setSelectedLocale(locale);\n  }, [locale]);\n\n  const handleValueOnChange = useCallback(\n    (value: string, locale: Locale) => {\n      const newValueMultiloc = {\n        ...(valueMultiloc || {}),\n        [locale]: value,\n      } as Multiloc;\n\n      onChange(newValueMultiloc, locale);\n    },\n    [valueMultiloc, onChange]\n  );\n\n  const handleOnSelectedLocaleChange = useCallback(\n    (newSelectedLocale: Locale) => {\n      setSelectedLocale(newSelectedLocale);\n    },\n    []\n  );\n\n  if (selectedLocale) {\n    const id = `${props.id}-${selectedLocale}`;\n\n    return (\n      <Container className={className}>\n        <LabelContainer>\n          {label || labelTextElement ? (\n            <StyledLabel htmlFor={id}>\n              {labelTextElement || <LabelText>{label}</LabelText>}\n              {labelTooltipText && <IconTooltip content={labelTooltipText} />}\n            </StyledLabel>\n          ) : (\n            <Spacer />\n          )}\n\n          <StyledLocaleSwitcher\n            onSelectedLocaleChange={handleOnSelectedLocaleChange}\n            locales={!isNilOrError(tenantLocales) ? tenantLocales : []}\n            selectedLocale={selectedLocale}\n            values={{ valueMultiloc }}\n          />\n        </LabelContainer>\n\n        <TextArea\n          {...textAreaProps}\n          value={valueMultiloc?.[selectedLocale] || null}\n          locale={selectedLocale}\n          onChange={handleValueOnChange}\n          id={id}\n        />\n      </Container>\n    );\n  }\n\n  return null;\n});\n\nexport default TextAreaMultilocWithLocaleSwitcher;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { isEmpty, values as getValues, every } from 'lodash-es';\nimport { IUserCustomFieldInputType } from '../../../../services/userCustomFields';\nimport FormikInputMultilocWithLocaleSwitcher from 'components/UI/FormikInputMultilocWithLocaleSwitcher';\nimport FormikTextAreaMultilocWithLocaleSwitcher from 'components/UI/FormikTextAreaMultilocWithLocaleSwitcher';\nimport FormikToggle from 'components/UI/FormikToggle';\nimport FormikSelect from 'components/UI/FormikSelect';\nimport Error from 'components/UI/Error';\nimport { Section, SectionField } from 'components/admin/Section';\nimport { Form, Field, InjectedFormikProps, FormikErrors } from 'formik';\nimport { Label } from 'cl2-component-library';\nimport FormikSubmitWrapper from 'components/admin/FormikSubmitWrapper';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport { Multiloc } from 'typings';\nimport messages from '../messages';\n\nconst StyledSpan = styled.span`\n  display: inline-block;\n  margin-left: 6px;\n`;\n\nconst StyledLabel = styled(Label)``;\n\nexport interface FormValues {\n  enabled: boolean;\n  input_type: IUserCustomFieldInputType;\n  title_multiloc: Multiloc;\n  description_multiloc: Multiloc;\n  required: boolean;\n}\n\nexport interface Props {\n  mode: 'new' | 'edit';\n  customFieldId: string;\n  builtInField: boolean;\n}\n\nclass RegistrationCustomFieldForm extends React.Component<\n  InjectedFormikProps<Props & InjectedIntlProps, FormValues>\n> {\n  public static validate = (values: FormValues): FormikErrors<FormValues> => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (every(getValues(values.title_multiloc), isEmpty)) {\n      errors.title_multiloc = [{ error: 'blank' }] as any;\n    }\n\n    return errors;\n  };\n\n  inputTypeOptions = () => {\n    const fieldTypes = [\n      'select',\n      'multiselect',\n      'checkbox',\n      'text',\n      'multiline_text',\n      'number',\n      'date',\n    ];\n    return fieldTypes.map((inputType) => ({\n      value: inputType,\n      label: this.props.intl.formatMessage(messages[`fieldType_${inputType}`]),\n    }));\n  };\n\n  render() {\n    const {\n      isSubmitting,\n      mode,\n      errors,\n      isValid,\n      touched,\n      builtInField,\n      status,\n      intl: { formatMessage },\n    } = this.props;\n\n    return (\n      <Form>\n        <Section>\n          <SectionField>\n            <Label>\n              <FormattedMessage {...messages.answerFormat} />\n            </Label>\n            <Field\n              name=\"input_type\"\n              component={FormikSelect}\n              options={this.inputTypeOptions()}\n              disabled={mode === 'edit' || builtInField}\n            />\n            {touched.input_type && (\n              <Error\n                fieldName=\"input_type\"\n                apiErrors={errors.input_type as any}\n              />\n            )}\n          </SectionField>\n\n          <SectionField>\n            <Field\n              name=\"title_multiloc\"\n              component={FormikInputMultilocWithLocaleSwitcher}\n              label={formatMessage(messages.fieldName)}\n              disabled={builtInField}\n            />\n            {touched.title_multiloc && (\n              <Error\n                fieldName=\"title_multiloc\"\n                apiErrors={errors.title_multiloc as any}\n              />\n            )}\n          </SectionField>\n\n          <SectionField>\n            <Field\n              name=\"description_multiloc\"\n              component={FormikTextAreaMultilocWithLocaleSwitcher}\n              label={formatMessage(messages.fieldDescription)}\n              labelTooltipText={formatMessage(messages.descriptionTooltip)}\n              disabled={builtInField}\n            />\n            {touched.description_multiloc && (\n              <Error\n                fieldName=\"description_multiloc\"\n                apiErrors={errors.description_multiloc as any}\n              />\n            )}\n          </SectionField>\n\n          <SectionField>\n            <StyledLabel>\n              <Field\n                className={`e2e-custom-field-required-toggle ${\n                  this.props.values.required ? 'enabled' : 'disabled'\n                }`}\n                name=\"required\"\n                component={FormikToggle}\n              />\n              <StyledSpan>\n                <FormattedMessage {...messages.isFieldRequired} />\n              </StyledSpan>\n            </StyledLabel>\n            {touched.required && (\n              <Error fieldName=\"required\" apiErrors={errors.required as any} />\n            )}\n          </SectionField>\n        </Section>\n\n        <FormikSubmitWrapper {...{ isValid, isSubmitting, status, touched }} />\n      </Form>\n    );\n  }\n}\n\nexport default injectIntl(RegistrationCustomFieldForm);\n","import React from 'react';\nimport { Select, SelectProps } from 'cl2-component-library';\nimport { FieldProps } from 'formik';\nimport { IOption } from 'typings';\n\ninterface State {}\n\nclass FormikInput extends React.Component<FieldProps & SelectProps, State> {\n  handleOnChange = (newOption: IOption) => {\n    this.props.form.setFieldValue(this.props.field.name, newOption.value);\n  };\n\n  render() {\n    const { value } = this.props.field;\n    return (\n      <Select {...this.props} value={value} onChange={this.handleOnChange} />\n    );\n  }\n}\n\nexport default FormikInput;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { addCustomFieldForUsers } from '../../../../services/userCustomFields';\nimport { CLErrorsJSON } from 'typings';\nimport clHistory from 'utils/cl-router/history';\n\nimport GoBackButton from 'components/UI/GoBackButton';\nimport PageWrapper from 'components/admin/PageWrapper';\nimport RegistrationCustomFieldForm, {\n  FormValues,\n} from '../RegistrationCustomFieldForm';\nimport { Formik } from 'formik';\n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\nimport { isCLErrorJSON } from 'utils/errorUtils';\n\nconst PageTitle = styled.h1`\n  width: 100%;\n  font-size: 2rem;\n  margin: 1rem 0 3rem 0;\n`;\n\ninterface Props {}\n\nclass RegistrationCustomFieldNew extends React.Component<Props> {\n  handleSubmit = (\n    values: FormValues,\n    { setErrors, setSubmitting, setStatus }\n  ) => {\n    addCustomFieldForUsers({\n      ...values,\n    })\n      .then((response) => {\n        if (this.hasOptions(values.input_type)) {\n          clHistory.push(\n            `/admin/settings/registration/custom-fields/${response.data.id}/options`\n          );\n        } else {\n          clHistory.push('/admin/settings/registration');\n        }\n      })\n      .catch((errorResponse) => {\n        if (isCLErrorJSON(errorResponse)) {\n          const apiErrors = (errorResponse as CLErrorsJSON).json.errors;\n          setErrors(apiErrors);\n        } else {\n          setStatus('error');\n        }\n        setSubmitting(false);\n      });\n  };\n\n  renderFn = (props) => (\n    <RegistrationCustomFieldForm {...props} mode=\"new\" builtInField={false} />\n  );\n\n  hasOptions = (inputType) => {\n    return inputType === 'select' || inputType === 'multiselect';\n  };\n\n  goBack = () => {\n    clHistory.push('/admin/settings/registration');\n  };\n\n  render() {\n    return (\n      <div>\n        <GoBackButton onClick={this.goBack} />\n        <PageTitle>\n          <FormattedMessage {...messages.addANewRegistrationField} />\n        </PageTitle>\n        <PageWrapper>\n          <Formik\n            initialValues={{\n              input_type: 'text',\n              title_multiloc: {},\n              description_multiloc: {},\n              required: false,\n              enabled: true,\n            }}\n            onSubmit={this.handleSubmit}\n            render={this.renderFn}\n            validate={RegistrationCustomFieldForm['validate']}\n          />\n        </PageWrapper>\n      </div>\n    );\n  }\n}\n\nexport default RegistrationCustomFieldNew;\n","import React, { PureComponent, FormEvent } from 'react';\nimport styled from 'styled-components';\nimport Button from 'components/UI/Button';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\nconst Container = styled.div`\n  display: inline-block;\n`;\n\ntype Props = {\n  onClick: (arg: FormEvent) => void;\n  className?: string;\n};\n\ninterface State {}\n\nexport default class GoBackButton extends PureComponent<Props, State> {\n  render() {\n    const { onClick, className } = this.props;\n\n    return (\n      <Container className={className || ''}>\n        <Button\n          onClick={onClick}\n          buttonStyle=\"text\"\n          icon=\"arrow-back\"\n          size=\"2\"\n          padding=\"0px\"\n          text={<FormattedMessage {...messages.goBack} />}\n        />\n      </Container>\n    );\n  }\n}\n"],"sourceRoot":""}