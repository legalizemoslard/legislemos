{"version":3,"sources":["webpack:///./app/modules/commercial/project_folders/admin/containers/permissions/messages.ts","webpack:///./app/modules/commercial/project_folders/admin/containers/permissions/index.tsx"],"names":["defineMessages","folderManagerTooltip","id","defaultMessage","moreInfoFolderManagerLink","projectManagementInfoCenterLinkText","folderManagerSectionTitle","searchFolderManager","noMatch","deleteFolderManagerLabel","addFolderManager","Container","styled","div","StyledA","a","UserSelectSection","section","UserSelectSelect","AsyncSelect","UserSelectButton","Button","injectIntl","projectFolderId","params","formatMessage","intl","authUser","folderModerators","useProjectFolderModerators","useState","selectedUserOptions","setSelectedUserOptions","searchInput","setSearchInput","loading","setLoading","processing","setProcessing","handleFolderModeratorsChange","selection","handleOnAddFolderModeratorsClick","useCallback","forEach","userId","value","addFolderModerator","handleDeleteFolderModeratorClick","moderatorId","deleteFolderModerator","getFolderModeratorOptions","users","isNilOrError","data","filter","user","isProjectFolderModerator","map","label","userName","attributes","email","disabled","isAdmin","isDropdownIconHidden","useMemo","isNonEmptyString","first_name","last_name","SubSectionTitle","FormattedMessage","messages","IconTooltip","content","values","projectManagementInfoCenterLink","href","target","name","isMulti","cacheOptions","defaultOptions","loadOptions","inputValue","callback","usersStream","queryParameters","search","observable","pipe","first","subscribe","response","isLoading","isDisabled","onChange","placeholder","styles","selectStyles","noOptionsMessage","onInputChange","components","DropdownIndicator","text","buttonStyle","icon","padding","onClick","length","List","folderModerator","index","Row","key","isLastItem","size","className"],"mappings":"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","file":"170.cb613ef2e8fbdf811193.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  folderManagerTooltip: {\n    id: 'app.containers.AdminPage.FolderPermissions.folderManagerTooltip',\n    defaultMessage:\n      'Folder managers can edit the folder description, create new projects within the folder, and have project management rights over all projects within the folder. They cannot delete projects and they do not have access to projects that are not within their folder. You can {projectManagementInfoCenterLink} to find more information on project management rights.',\n  },\n  moreInfoFolderManagerLink: {\n    id: 'app.containers.AdminPage.FolderPermissions.moreInfoFolderManagerLink',\n    defaultMessage:\n      'https://support.citizenlab.co/en/articles/4648650-assign-the-right-project-managers',\n  },\n  projectManagementInfoCenterLinkText: {\n    id:\n      'app.containers.AdminPage.FolderPermissions.projectManagementInfoCenterLinkText',\n    defaultMessage: 'visit our Help Center',\n  },\n  folderManagerSectionTitle: {\n    id: 'app.containers.AdminPage.FolderPermissions.folderManagerSectionTitle',\n    defaultMessage: 'Folder managers',\n  },\n  searchFolderManager: {\n    id: 'app.containers.AdminPage.FolderPermissions.searchFolderManager',\n    defaultMessage: 'Search users',\n  },\n  noMatch: {\n    id: 'app.containers.AdminPage.FolderPermissions.noMatch',\n    defaultMessage: 'No match found',\n  },\n  deleteFolderManagerLabel: {\n    id: 'app.containers.AdminPage.FolderPermissions.deleteFolderManagerLabel',\n    defaultMessage: 'Delete',\n  },\n  addFolderManager: {\n    id: 'app.containers.AdminPage.FolderPermissions.addFolderManager',\n    defaultMessage: 'Add',\n  },\n});\n","import React, { useState, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { WithRouterProps } from 'react-router';\nimport AsyncSelect from 'react-select/async';\nimport { first } from 'rxjs/operators';\nimport { IOption } from 'typings';\nimport { isProjectFolderModerator } from '../../../permissions/roles';\n\n// utils\nimport { isNilOrError, isNonEmptyString } from 'utils/helperUtils';\n\n// services\nimport { useProjectFolderModerators } from '../../../hooks';\nimport { IUsers, IUserData, usersStream } from 'services/users';\nimport useAuthUser from 'hooks/useAuthUser';\nimport {\n  addFolderModerator,\n  deleteFolderModerator,\n} from '../../../services/projectFolderModerators';\n\n// i18n\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from './messages';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\n\n// components\nimport { SubSectionTitle } from 'components/admin/Section';\nimport { IconTooltip } from 'cl2-component-library';\nimport Button from 'components/UI/Button';\nimport { List, Row } from 'components/admin/ResourceList';\nimport Avatar from 'components/Avatar';\nimport selectStyles from 'components/UI/MultipleSelect/styles';\nimport { isAdmin } from 'services/permissions/roles';\n\nconst Container = styled.div`\n  width: 100%;\n  margin-bottom: 25px;\n`;\n\nconst StyledA = styled.a`\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst UserSelectSection = styled.section`\n  display: flex;\n  margin-bottom: 12px;\n`;\n\nconst UserSelectSelect = styled(AsyncSelect)`\n  min-width: 300px;\n`;\n\nconst UserSelectButton = styled(Button)`\n  margin-left: 12px;\n`;\n\nconst FolderPermissions = ({\n  params: { projectFolderId },\n  intl: { formatMessage },\n}: WithRouterProps & InjectedIntlProps) => {\n  const authUser = useAuthUser();\n  const folderModerators = useProjectFolderModerators(projectFolderId);\n\n  const [selectedUserOptions, setSelectedUserOptions] = useState<IOption[]>([]);\n  const [searchInput, setSearchInput] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n  const [processing, setProcessing] = useState<boolean>(false);\n\n  const handleFolderModeratorInputChange = (value: string) => {\n    setSearchInput(value);\n  };\n\n  const handleFolderModeratorsChange = async (selection: IOption[]) => {\n    setSelectedUserOptions(selection);\n  };\n\n  const handleOnAddFolderModeratorsClick = useCallback(() => {\n    setProcessing(true);\n    selectedUserOptions.forEach(({ value: userId }) =>\n      addFolderModerator(projectFolderId, userId)\n    );\n    setProcessing(false);\n    setSelectedUserOptions([]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedUserOptions]);\n\n  const handleDeleteFolderModeratorClick = (\n    projectFolderId: string,\n    moderatorId: string\n  ) => () => {\n    deleteFolderModerator(projectFolderId, moderatorId);\n  };\n\n  const loadUsers = (inputValue: string, callback) => {\n    if (inputValue) {\n      setLoading(true);\n\n      usersStream({\n        queryParameters: {\n          search: inputValue,\n        },\n      })\n        .observable.pipe(first())\n        .subscribe((response) => {\n          setLoading(false);\n          callback(getFolderModeratorOptions(response));\n        });\n    }\n  };\n\n  const getFolderModeratorOptions = (users: IUsers) => {\n    // note: this typing info of users above is not correc\n    if (!isNilOrError(users)) {\n      return users.data\n        .filter(\n          (user: IUserData) => !isProjectFolderModerator(user, projectFolderId)\n        )\n        .map((user: IUserData) => {\n          return {\n            value: user.id,\n            label: `${userName(user)} (${user.attributes.email})`,\n            email: `${user.attributes.email}`,\n            disabled:\n              isProjectFolderModerator(user) && !isAdmin({ data: user }),\n          };\n        });\n    }\n\n    return [];\n  };\n\n  const noOptionsMessage = () => {\n    if (isNonEmptyString(searchInput)) {\n      return formatMessage(messages.noMatch);\n    }\n\n    return null;\n  };\n\n  const isDropdownIconHidden = useMemo(() => !isNonEmptyString(searchInput), [\n    searchInput,\n  ]);\n\n  const userName = (user: IUserData) => {\n    return `${user.attributes.first_name} ${user.attributes.last_name}`;\n  };\n\n  return (\n    <Container>\n      <SubSectionTitle>\n        <FormattedMessage {...messages.folderManagerSectionTitle} />\n        <IconTooltip\n          content={\n            <FormattedMessage\n              {...messages.folderManagerTooltip}\n              values={{\n                projectManagementInfoCenterLink: (\n                  <StyledA\n                    href={formatMessage(messages.moreInfoFolderManagerLink)}\n                    target=\"_blank\"\n                  >\n                    <FormattedMessage\n                      {...messages.projectManagementInfoCenterLinkText}\n                    />\n                  </StyledA>\n                ),\n              }}\n            />\n          }\n        />\n      </SubSectionTitle>\n\n      <UserSelectSection>\n        <UserSelectSelect\n          name=\"search-user\"\n          isMulti={true}\n          cacheOptions={false}\n          defaultOptions={false}\n          loadOptions={loadUsers}\n          isLoading={loading}\n          isDisabled={processing}\n          value={selectedUserOptions}\n          onChange={handleFolderModeratorsChange}\n          placeholder={formatMessage(messages.searchFolderManager)}\n          styles={selectStyles}\n          noOptionsMessage={noOptionsMessage}\n          onInputChange={handleFolderModeratorInputChange}\n          components={isDropdownIconHidden && { DropdownIndicator: () => null }}\n        />\n        <UserSelectButton\n          text={formatMessage(messages.addFolderManager)}\n          buttonStyle=\"cl-blue\"\n          icon=\"plus-circle\"\n          padding=\"13px 16px\"\n          onClick={handleOnAddFolderModeratorsClick}\n          disabled={!selectedUserOptions || selectedUserOptions.length === 0}\n          processing={processing}\n        />\n      </UserSelectSection>\n\n      <List>\n        <>\n          {!isNilOrError(folderModerators) &&\n            !isNilOrError(authUser) &&\n            folderModerators.map((folderModerator, index) => (\n              <Row\n                key={folderModerator.id}\n                isLastItem={index === folderModerators.length - 1}\n              >\n                <Avatar userId={folderModerator.id} size={30} />\n                <p className=\"expand\">{userName(folderModerator)}</p>\n                <p className=\"expand\">{folderModerator.attributes.email}</p>\n                <Button\n                  onClick={handleDeleteFolderModeratorClick(\n                    projectFolderId,\n                    folderModerator.id\n                  )}\n                  buttonStyle=\"text\"\n                  icon=\"delete\"\n                  disabled={\n                    !isNilOrError(authUser) &&\n                    authUser.id === folderModerator.id\n                  }\n                >\n                  <FormattedMessage {...messages.deleteFolderManagerLabel} />\n                </Button>\n              </Row>\n            ))}\n        </>\n      </List>\n    </Container>\n  );\n};\n\nexport default injectIntl(FolderPermissions);\n"],"sourceRoot":""}