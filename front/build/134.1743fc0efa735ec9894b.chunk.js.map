{"version":3,"sources":["webpack:///./app/components/HelmetIntl/index.tsx","webpack:///./app/services/invites.ts","webpack:///./app/containers/Admin/invitations/invite/index.tsx","webpack:///./app/containers/Admin/invitations/messages.ts"],"names":["HelmetIntl","formatMessage","this","props","intl","title","description","Helmet","meta","name","content","React","PureComponent","injectIntl","streamParams","streams","get","apiEndpoint","API_PATH","cacheStream","inviteId","delete","object","add","invites","response","fetchAllWith","InvitationOptions","styled","div","theme","borderRadius","StyledTabs","Tabs","FileInputWrapper","StyledToggle","Toggle","ButtonWrapper","Processing","colors","label","StyledSectionTitle","SectionTitle","fontSizes","large","SectionDescription","base","SectionParagraph","p","clBlue","darken","FlexWrapper","DownloadButton","Button","StyledWarning","Warning","Invitations","projects","locale","tenantLocales","projectsList","isNilOrError","length","map","project","value","id","getLocalized","attributes","title_multiloc","groups","groupsList","group","selectedEmails","resetErrorAndSuccessState","setState","event","selectedFile","target","files","filetypeError","type","FormattedMessage","messages","fileInputElement","getBase64FromFile","selectedFileBase64","state","hasAdminRights","hasModeratorRights","selectedLocale","selectedProjects","selectedGroups","selectedInviteText","errors","processed","isInvitationValid","validateInvitation","invitationOptionsOpened","selectedView","apiErrors","unknownError","preventDefault","requestBlob","blob","saveAs","ref","roles","push","forEach","project_id","hasCorrectSelection","isString","processing","bulkInvite","getRoles","group_ids","invite_text","bulkInviteXLSX","xlsx","bulkInviteEmails","emails","split","item","trim","isValidEmails","isEmpty","hasValidRights","isValidInvitationTemplate","projectOptions","getProjectOptions","groupOptions","getGroupOptions","invitationTabs","importTab","textTab","invitationOptions","opened","onToggle","toggleOptions","labelTooltipText","importOptionsInfo","values","supportPageLink","href","invitesSupportPageURL","rel","supportPage","SectionField","Label","adminLabel","IconTooltip","adminLabelTooltip","checked","onChange","handleAdminRightsOnToggle","moderatorLabel","moderatorLabelTooltip","moderatorLabelTooltipLink","moderatorLabelTooltipLinkText","handleModeratorRightsOnToggle","options","handleSelectedProjectsOnChange","placeholder","projectSelectorPlaceholder","required","localeLabel","currentTenantLocale","Radio","key","handleLocaleOnChange","currentValue","appLocalePairs","addToGroupLabel","handleSelectedGroupsOnChange","groupsPlaceholder","inviteTextLabel","handleInviteTextOnChange","limitedTextFormatting","noImages","noVideos","withCTAButton","helmetTitle","helmetDescription","onSubmit","handleOnSubmit","Section","items","selectedValue","onClick","resetWithView","downloadFillOutTemplate","buttonStyle","icon","downloadExampleFile","downloadTemplate","visitSupportPage","supportPageLinkText","fileRequirements","uploadCompletedFile","accept","handleFileInputOnChange","setFileInputRef","text","configureInvitations","emailListLabel","handleEmailListOnChange","loading","status","getSubmitState","buttonSave","save","buttonSuccess","saveSuccess","messageError","saveErrorMessage","messageSuccess","saveSuccessMessage","showIcon","marginTop","animate","nextProps","prevState","InvitationsWithIntl","Data","adopt","publicationStatuses","membershipType","inputProps","dataProps","defineMessages","defaultMessage","email","invitePeople","invitationSubtitle","inviteStatus","invitedSince","deleteInvite","deleteInviteTooltip","exportInvites","inviteStatusPending","inviteStatusAccepted","confirmDelete","currentlyNoInvitesThatMatchSearch","tabInviteUsers","tabAllInvitations"],"mappings":"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","file":"134.1743fc0efa735ec9894b.chunk.js","sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { InjectedIntlProps } from 'react-intl';\nimport { injectIntl } from 'utils/cl-intl';\n\ntype Props = {\n  title: ReactIntl.FormattedMessage.MessageDescriptor;\n  description: ReactIntl.FormattedMessage.MessageDescriptor;\n};\n\ninterface State {}\n\nexport class HelmetIntl extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { title, description } = this.props;\n\n    return (\n      <>\n        <Helmet\n          title={formatMessage(title)}\n          meta={[{ name: 'description', content: formatMessage(description) }]}\n        />\n      </>\n    );\n  }\n}\n\nexport default injectIntl<Props>(HelmetIntl);\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\n\nexport interface IInviteData {\n  id: string;\n  type: 'invite';\n  attributes: {\n    token: 'string';\n    accepted_at: string;\n    updated_at: string;\n    created_at: string;\n    activate_invite_url: string;\n  };\n  relationships: {\n    invitee: {\n      data: {\n        id: string;\n        type: 'votable';\n      };\n    };\n    inviter: {\n      data: {\n        id: string;\n        type: 'user';\n      };\n    };\n  };\n}\n\nexport interface IInvites {\n  data: IInviteData[];\n  links: {\n    self: string;\n    first: string;\n    prev: string;\n    next: string;\n    last: string;\n  };\n}\n\nexport interface IInvite {\n  data: IInviteData;\n}\n\nexport interface IInviteError {\n  error: string;\n  raw_error: string;\n  row?: number | undefined;\n  rows?: number[] | undefined;\n  value?: number | string | undefined;\n  payload?: Record<string, any>;\n}\n\ntype AdminRole = {\n  type: 'admin';\n};\n\ntype ProjectModeratorRole = {\n  type: 'project_moderator';\n  project_id: string;\n};\n\ntype Roles = (AdminRole | ProjectModeratorRole)[] | null | undefined;\n\nexport interface INewBulkInvite {\n  locale?: string | null | undefined;\n  roles?: Roles;\n  group_ids?: string[] | null | undefined;\n  invite_text?: string | null | undefined;\n}\n\nexport interface INewBulkInviteEmails extends INewBulkInvite {\n  emails: string[];\n}\n\nexport interface INewBulkXLSXInviteXLSX extends INewBulkInvite {\n  xlsx: string;\n}\n\nexport function invitesStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IInvites>({\n    apiEndpoint: `${API_PATH}/invites`,\n    ...streamParams,\n    cacheStream: false,\n  });\n}\n\nexport async function bulkInviteEmails(object: INewBulkInviteEmails) {\n  const response = await streams.add<IInvites>(\n    `${API_PATH}/invites/bulk_create`,\n    { invites: object }\n  );\n  await streams.fetchAllWith({ apiEndpoint: [`${API_PATH}/invites`] });\n  return response;\n}\n\nexport async function bulkInviteXLSX(object: INewBulkXLSXInviteXLSX) {\n  const response = await streams.add<IInvites>(\n    `${API_PATH}/invites/bulk_create_xlsx`,\n    { invites: object }\n  );\n  await streams.fetchAllWith({ apiEndpoint: [`${API_PATH}/invites`] });\n  return response;\n}\n\nexport function deleteInvite(inviteId: string) {\n  return streams.delete(`${API_PATH}/invites/${inviteId}`, inviteId);\n}\n","import React from 'react';\nimport { isString, isEmpty, get } from 'lodash-es';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport TextArea from 'components/UI/TextArea';\nimport Error from 'components/UI/Error';\nimport { Radio, IconTooltip, Toggle, Label } from 'cl2-component-library';\nimport Tabs from 'components/UI/Tabs';\nimport Collapse from 'components/UI/Collapse';\nimport MultipleSelect from 'components/UI/MultipleSelect';\nimport SubmitWrapper from 'components/admin/SubmitWrapper';\nimport { Section, SectionField, SectionTitle } from 'components/admin/Section';\nimport QuillEditor from 'components/UI/QuillEditor';\nimport HelmetIntl from 'components/HelmetIntl';\nimport Button from 'components/UI/Button';\nimport Warning from 'components/UI/Warning';\n\n// services\nimport {\n  bulkInviteXLSX,\n  bulkInviteEmails,\n  IInviteError,\n  INewBulkInvite,\n} from 'services/invites';\n\n// resources\nimport GetAppConfigurationLocales, {\n  GetAppConfigurationLocalesChildProps,\n} from 'resources/GetAppConfigurationLocales';\nimport GetLocale, { GetLocaleChildProps } from 'resources/GetLocale';\nimport GetGroups, { GetGroupsChildProps } from 'resources/GetGroups';\nimport GetProjects, { GetProjectsChildProps } from 'resources/GetProjects';\n\n// i18n\nimport { InjectedIntlProps } from 'react-intl';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport messages from '../messages';\nimport { API_PATH, appLocalePairs } from 'containers/App/constants';\nimport { getLocalized } from 'utils/i18n';\n\n// utils\nimport { getBase64FromFile } from 'utils/fileTools';\nimport { saveAs } from 'file-saver';\nimport { requestBlob } from 'utils/request';\n\n// styling\nimport styled from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\nimport { darken } from 'polished';\n\n// typings\nimport { Locale, IOption } from 'typings';\n\nconst InvitationOptions = styled.div`\n  width: 497px;\n  padding: 20px;\n  border-radius: ${(props: any) => props.theme.borderRadius};\n  border: solid 1px #ddd;\n  background: #fff;\n`;\n\nconst StyledTabs = styled(Tabs)`\n  margin-bottom: 35px;\n`;\n\nconst FileInputWrapper = styled.div`\n  margin-top: 15px;\n  margin-bottom: 20px;\n`;\n\nconst StyledToggle = styled(Toggle)`\n  margin-bottom: 10px;\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 30px;\n`;\n\nconst Processing = styled.div`\n  color: ${(props) => props.theme.colors.label};\n  margin-left: 15px;\n`;\n\nconst StyledSectionTitle = styled(SectionTitle)`\n  margin-bottom: 15px;\n  font-size: ${fontSizes.large}px;\n  font-weight: bold;\n`;\n\nconst SectionDescription = styled.div`\n  font-size: ${fontSizes.base}px;\n`;\n\nconst SectionParagraph = styled.p`\n  a {\n    color: ${colors.clBlue};\n    text-decoration: underline;\n\n    &:hover {\n      color: ${darken(0.2, colors.clBlue)};\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst FlexWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst DownloadButton = styled(Button)`\n  margin-bottom: 15px;\n`;\n\nconst StyledWarning = styled(Warning)`\n  margin-top: 5px;\n`;\n\nexport interface InputProps {}\n\ninterface DataProps {\n  projects: GetProjectsChildProps;\n  locale: GetLocaleChildProps;\n  tenantLocales: GetAppConfigurationLocalesChildProps;\n  groups: GetGroupsChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\ntype State = {\n  selectedEmails: string | null;\n  selectedFileBase64: string | null;\n  hasAdminRights: boolean;\n  hasModeratorRights: boolean;\n  selectedLocale: Locale | null;\n  selectedProjects: IOption[] | null;\n  selectedGroups: IOption[] | null;\n  selectedInviteText: string | null;\n  invitationOptionsOpened: boolean;\n  selectedView: 'import' | 'text';\n  processing: boolean;\n  processed: boolean;\n  apiErrors: IInviteError[] | null;\n  filetypeError: JSX.Element | null;\n  unknownError: JSX.Element | null;\n};\n\nclass Invitations extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  fileInputElement: HTMLInputElement | null;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedEmails: null,\n      selectedFileBase64: null,\n      hasAdminRights: false,\n      hasModeratorRights: false,\n      selectedLocale: null,\n      selectedProjects: null,\n      selectedGroups: null,\n      selectedInviteText: null,\n      invitationOptionsOpened: false,\n      selectedView: 'import',\n      processing: false,\n      processed: false,\n      apiErrors: null,\n      filetypeError: null,\n      unknownError: null,\n    };\n    this.fileInputElement = null;\n  }\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.tenantLocales && !prevState.selectedLocale) {\n      return {\n        selectedLocale: nextProps.tenantLocales[0],\n      };\n    }\n\n    return null;\n  }\n\n  getProjectOptions = (\n    projects: GetProjectsChildProps,\n    locale: GetLocaleChildProps,\n    tenantLocales: GetAppConfigurationLocalesChildProps\n  ) => {\n    const { projectsList } = projects;\n\n    if (\n      !isNilOrError(locale) &&\n      !isNilOrError(tenantLocales) &&\n      !isNilOrError(projectsList) &&\n      projectsList.length > 0\n    ) {\n      return projectsList.map((project) => ({\n        value: project.id,\n        label: getLocalized(\n          project.attributes.title_multiloc,\n          locale,\n          tenantLocales\n        ),\n      }));\n    }\n\n    return null;\n  };\n\n  getGroupOptions = (\n    groups: GetGroupsChildProps,\n    locale: GetLocaleChildProps,\n    tenantLocales: GetAppConfigurationLocalesChildProps\n  ) => {\n    if (\n      !isNilOrError(locale) &&\n      !isNilOrError(tenantLocales) &&\n      !isNilOrError(groups.groupsList) &&\n      groups.groupsList.length > 0\n    ) {\n      return groups.groupsList.map((group) => ({\n        value: group.id,\n        label: getLocalized(\n          group.attributes.title_multiloc,\n          locale,\n          tenantLocales\n        ),\n      }));\n    }\n\n    return null;\n  };\n\n  resetErrorAndSuccessState() {\n    this.setState({ processed: false, apiErrors: null, unknownError: null });\n  }\n\n  handleEmailListOnChange = (selectedEmails: string) => {\n    this.resetErrorAndSuccessState();\n    this.setState({ selectedEmails });\n  };\n\n  handleFileInputOnChange = async (event) => {\n    let selectedFile: File | null =\n      event.target.files && event.target.files.length === 1\n        ? event.target.files['0']\n        : null;\n    let filetypeError: JSX.Element | null = null;\n\n    if (\n      selectedFile &&\n      selectedFile.type !==\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ) {\n      filetypeError = <FormattedMessage {...messages.filetypeError} />;\n      selectedFile = null;\n\n      if (this.fileInputElement) {\n        this.fileInputElement.value = '';\n      }\n    }\n\n    const selectedFileBase64 = selectedFile\n      ? await getBase64FromFile(selectedFile)\n      : null;\n    this.resetErrorAndSuccessState();\n    this.setState({ selectedFileBase64, filetypeError });\n  };\n\n  handleAdminRightsOnToggle = () => {\n    this.resetErrorAndSuccessState();\n    this.setState((state) => ({ hasAdminRights: !state.hasAdminRights }));\n  };\n\n  handleModeratorRightsOnToggle = () => {\n    this.resetErrorAndSuccessState();\n    this.setState((state) => ({\n      hasModeratorRights: !state.hasModeratorRights,\n    }));\n  };\n\n  handleLocaleOnChange = (selectedLocale: Locale) => {\n    this.resetErrorAndSuccessState();\n    this.setState({ selectedLocale });\n  };\n\n  handleSelectedProjectsOnChange = (selectedProjects: IOption[]) => {\n    this.resetErrorAndSuccessState();\n    this.setState({\n      selectedProjects: selectedProjects.length > 0 ? selectedProjects : null,\n    });\n  };\n\n  handleSelectedGroupsOnChange = (selectedGroups: IOption[]) => {\n    this.resetErrorAndSuccessState();\n    this.setState({\n      selectedGroups: selectedGroups.length > 0 ? selectedGroups : null,\n    });\n  };\n\n  handleInviteTextOnChange = (selectedInviteText: string) => {\n    this.resetErrorAndSuccessState();\n    this.setState({ selectedInviteText });\n  };\n\n  getSubmitState = (errors: IInviteError[] | null, processed: boolean) => {\n    const isInvitationValid = this.validateInvitation();\n    if (errors && errors.length > 0) {\n      return 'error';\n    } else if (processed && !isInvitationValid) {\n      return 'success';\n    } else if (!isInvitationValid) {\n      return 'disabled';\n    }\n    return 'enabled';\n  };\n\n  toggleOptions = () => {\n    this.setState((state) => ({\n      invitationOptionsOpened: !state.invitationOptionsOpened,\n    }));\n  };\n\n  resetWithView = (selectedView: 'import' | 'text') => {\n    this.setState({\n      selectedView,\n      selectedEmails: null,\n      selectedFileBase64: null,\n      hasAdminRights: false,\n      hasModeratorRights: false,\n      selectedLocale: this.props.tenantLocales\n        ? this.props.tenantLocales[0]\n        : null,\n      selectedProjects: null,\n      selectedGroups: null,\n      selectedInviteText: null,\n      invitationOptionsOpened: false,\n      processed: false,\n      apiErrors: null,\n      filetypeError: null,\n      unknownError: null,\n    });\n  };\n\n  downloadExampleFile = async (event) => {\n    event.preventDefault();\n    const blob = await requestBlob(\n      `${API_PATH}/invites/example_xlsx`,\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    );\n    saveAs(blob, 'example.xlsx');\n  };\n\n  setFileInputRef = (ref: HTMLInputElement) => {\n    this.fileInputElement = ref;\n  };\n\n  getRoles = () => {\n    const { hasAdminRights, hasModeratorRights, selectedProjects } = this.state;\n\n    const roles: INewBulkInvite['roles'] = [];\n\n    if (hasAdminRights) {\n      roles.push({ type: 'admin' });\n    }\n\n    if (hasModeratorRights && selectedProjects && selectedProjects.length > 0) {\n      selectedProjects.forEach((project) => {\n        roles.push({ type: 'project_moderator', project_id: project.value });\n      });\n    }\n\n    return roles;\n  };\n\n  handleOnSubmit = async (event) => {\n    event.preventDefault();\n    const {\n      selectedLocale,\n      selectedView,\n      selectedEmails,\n      selectedFileBase64,\n      selectedGroups,\n      selectedInviteText,\n    } = this.state;\n    const hasCorrectSelection =\n      (selectedView === 'import' &&\n        isString(selectedFileBase64) &&\n        !selectedEmails) ||\n      (selectedView === 'text' &&\n        !selectedFileBase64 &&\n        isString(selectedEmails));\n\n    if (selectedLocale && hasCorrectSelection) {\n      try {\n        this.setState({\n          processing: true,\n          processed: false,\n          apiErrors: null,\n          filetypeError: null,\n          unknownError: null,\n        });\n\n        const bulkInvite: INewBulkInvite = {\n          locale: selectedLocale,\n          roles: this.getRoles(),\n          group_ids:\n            selectedGroups && selectedGroups.length > 0\n              ? selectedGroups.map((group) => group.value)\n              : null,\n          invite_text: selectedInviteText,\n        };\n\n        if (selectedView === 'import' && isString(selectedFileBase64)) {\n          await bulkInviteXLSX({\n            xlsx: selectedFileBase64,\n            ...bulkInvite,\n          });\n        }\n\n        if (selectedView === 'text' && isString(selectedEmails)) {\n          await bulkInviteEmails({\n            emails: selectedEmails.split(',').map((item) => item.trim()),\n            ...bulkInvite,\n          });\n        }\n\n        // reset file input\n        if (this.fileInputElement) {\n          this.fileInputElement.value = '';\n        }\n\n        // reset state\n        this.setState({\n          processing: false,\n          processed: true,\n          selectedEmails: null,\n          selectedFileBase64: null,\n        });\n      } catch (errors) {\n        const apiErrors = get(errors, 'json.errors', null);\n\n        this.setState({\n          apiErrors,\n          unknownError: !apiErrors ? (\n            <FormattedMessage {...messages.unknownError} />\n          ) : null,\n          processing: false,\n        });\n      }\n    }\n  };\n\n  validateInvitation = () => {\n    const {\n      selectedEmails,\n      selectedProjects,\n      hasModeratorRights,\n      selectedFileBase64,\n    } = this.state;\n    const isValidEmails = isString(selectedEmails) && !isEmpty(selectedEmails);\n    const hasValidRights = hasModeratorRights\n      ? !isEmpty(selectedProjects)\n      : true;\n    const isValidInvitationTemplate =\n      isString(selectedFileBase64) && !isEmpty(selectedFileBase64);\n    return (isValidEmails || isValidInvitationTemplate) && hasValidRights;\n  };\n\n  render() {\n    const {\n      projects,\n      locale,\n      tenantLocales,\n      groups,\n      intl: { formatMessage },\n    } = this.props;\n    const {\n      selectedEmails,\n      hasAdminRights,\n      hasModeratorRights,\n      selectedLocale,\n      selectedProjects,\n      selectedGroups,\n      selectedInviteText,\n      invitationOptionsOpened,\n      selectedView,\n      processing,\n      processed,\n      apiErrors,\n      filetypeError,\n      unknownError,\n    } = this.state;\n    const projectOptions = this.getProjectOptions(\n      projects,\n      locale,\n      tenantLocales\n    );\n    const groupOptions = this.getGroupOptions(groups, locale, tenantLocales);\n\n    const invitationTabs = [\n      {\n        name: 'import',\n        label: this.props.intl.formatMessage(messages.importTab),\n      },\n      {\n        name: 'text',\n        label: this.props.intl.formatMessage(messages.textTab),\n      },\n    ];\n\n    const invitationOptions = (\n      <Collapse\n        opened={invitationOptionsOpened}\n        onToggle={this.toggleOptions}\n        label={<FormattedMessage {...messages.invitationOptions} />}\n        labelTooltipText={\n          selectedView === 'import' ? (\n            <FormattedMessage\n              {...messages.importOptionsInfo}\n              values={{\n                supportPageLink: (\n                  <a\n                    href={this.props.intl.formatMessage(\n                      messages.invitesSupportPageURL\n                    )}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    <FormattedMessage {...messages.supportPage} />\n                  </a>\n                ),\n              }}\n            />\n          ) : null\n        }\n      >\n        <InvitationOptions>\n          <SectionField>\n            <FlexWrapper>\n              <Label>\n                <FormattedMessage {...messages.adminLabel} />\n                <IconTooltip\n                  content={<FormattedMessage {...messages.adminLabelTooltip} />}\n                />\n              </Label>\n              <Toggle\n                checked={hasAdminRights}\n                onChange={this.handleAdminRightsOnToggle}\n              />\n            </FlexWrapper>\n          </SectionField>\n\n          <SectionField>\n            <FlexWrapper>\n              <Label>\n                <FormattedMessage {...messages.moderatorLabel} />\n                <IconTooltip\n                  content={\n                    <FormattedMessage\n                      {...messages.moderatorLabelTooltip}\n                      values={{\n                        moderatorLabelTooltipLink: (\n                          <a\n                            href={formatMessage(\n                              messages.moderatorLabelTooltipLink\n                            )}\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                          >\n                            <FormattedMessage\n                              {...messages.moderatorLabelTooltipLinkText}\n                            />\n                          </a>\n                        ),\n                      }}\n                    />\n                  }\n                />\n              </Label>\n              <StyledToggle\n                checked={hasModeratorRights}\n                onChange={this.handleModeratorRightsOnToggle}\n              />\n            </FlexWrapper>\n\n            {hasModeratorRights && (\n              <>\n                <MultipleSelect\n                  value={selectedProjects}\n                  options={projectOptions}\n                  onChange={this.handleSelectedProjectsOnChange}\n                  placeholder={\n                    <FormattedMessage\n                      {...messages.projectSelectorPlaceholder}\n                    />\n                  }\n                />\n                {isNilOrError(selectedProjects) && (\n                  <StyledWarning>\n                    <FormattedMessage {...messages.required} />\n                  </StyledWarning>\n                )}\n              </>\n            )}\n          </SectionField>\n\n          {!isNilOrError(tenantLocales) && tenantLocales.length > 1 && (\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.localeLabel} />\n              </Label>\n\n              {tenantLocales.map((currentTenantLocale) => (\n                <Radio\n                  key={currentTenantLocale}\n                  onChange={this.handleLocaleOnChange}\n                  currentValue={selectedLocale}\n                  value={currentTenantLocale}\n                  label={appLocalePairs[currentTenantLocale]}\n                  name=\"locales\"\n                  id={`locale-${currentTenantLocale}`}\n                />\n              ))}\n            </SectionField>\n          )}\n\n          <SectionField>\n            <Label>\n              <FormattedMessage {...messages.addToGroupLabel} />\n            </Label>\n            <MultipleSelect\n              value={selectedGroups}\n              options={groupOptions}\n              onChange={this.handleSelectedGroupsOnChange}\n              placeholder={<FormattedMessage {...messages.groupsPlaceholder} />}\n            />\n          </SectionField>\n\n          <SectionField>\n            <Label>\n              <FormattedMessage {...messages.inviteTextLabel} />\n            </Label>\n            <QuillEditor\n              id=\"invite-text\"\n              value={selectedInviteText || ''}\n              onChange={this.handleInviteTextOnChange}\n              limitedTextFormatting\n              noImages\n              noVideos\n              withCTAButton\n            />\n          </SectionField>\n        </InvitationOptions>\n      </Collapse>\n    );\n\n    return (\n      <>\n        <HelmetIntl\n          title={messages.helmetTitle}\n          description={messages.helmetDescription}\n        />\n        <form onSubmit={this.handleOnSubmit} id=\"e2e-invitations\">\n          <Section>\n            <StyledTabs\n              items={invitationTabs}\n              selectedValue={selectedView || 'import'}\n              onClick={this.resetWithView}\n            />\n\n            {selectedView === 'import' && (\n              <>\n                <SectionField>\n                  <StyledSectionTitle>\n                    <FormattedMessage {...messages.downloadFillOutTemplate} />\n                  </StyledSectionTitle>\n                  <SectionDescription>\n                    <FlexWrapper>\n                      <DownloadButton\n                        buttonStyle=\"secondary\"\n                        icon=\"download\"\n                        onClick={this.downloadExampleFile}\n                      >\n                        <FormattedMessage {...messages.downloadTemplate} />\n                      </DownloadButton>\n                    </FlexWrapper>\n                    <SectionParagraph>\n                      <FormattedMessage\n                        {...messages.visitSupportPage}\n                        values={{\n                          supportPageLink: (\n                            <a\n                              href={this.props.intl.formatMessage(\n                                messages.invitesSupportPageURL\n                              )}\n                              target=\"_blank\"\n                              rel=\"noreferrer\"\n                            >\n                              <FormattedMessage\n                                {...messages.supportPageLinkText}\n                              />\n                            </a>\n                          ),\n                        }}\n                      />\n                    </SectionParagraph>\n                    <SectionParagraph>\n                      <FormattedMessage {...messages.fileRequirements} />\n                    </SectionParagraph>\n                  </SectionDescription>\n\n                  <StyledSectionTitle>\n                    <FormattedMessage {...messages.uploadCompletedFile} />\n                  </StyledSectionTitle>\n\n                  <FileInputWrapper>\n                    <input\n                      type=\"file\"\n                      accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                      onChange={this.handleFileInputOnChange}\n                      ref={this.setFileInputRef}\n                    />\n                  </FileInputWrapper>\n                  <Error text={filetypeError} />\n                </SectionField>\n\n                <StyledSectionTitle>\n                  <FormattedMessage {...messages.configureInvitations} />\n                </StyledSectionTitle>\n                {invitationOptions}\n              </>\n            )}\n\n            {selectedView === 'text' && (\n              <>\n                <SectionField>\n                  <Label>\n                    <FormattedMessage {...messages.emailListLabel} />\n                  </Label>\n                  <TextArea\n                    value={selectedEmails || ''}\n                    onChange={this.handleEmailListOnChange}\n                    id=\"e2e-emails\"\n                  />\n                </SectionField>\n\n                {invitationOptions}\n              </>\n            )}\n\n            <SectionField>\n              <ButtonWrapper>\n                <SubmitWrapper\n                  loading={processing}\n                  status={this.getSubmitState(apiErrors, processed)}\n                  messages={{\n                    buttonSave: messages.save,\n                    buttonSuccess: messages.saveSuccess,\n                    messageError: messages.saveErrorMessage,\n                    messageSuccess: messages.saveSuccessMessage,\n                  }}\n                />\n\n                {processing && (\n                  <Processing>\n                    <FormattedMessage {...messages.processing} />\n                  </Processing>\n                )}\n              </ButtonWrapper>\n\n              <Error\n                apiErrors={apiErrors}\n                showIcon={true}\n                marginTop=\"15px\"\n                animate={false}\n              />\n\n              <Error text={unknownError} />\n            </SectionField>\n          </Section>\n        </form>\n      </>\n    );\n  }\n}\n\nconst InvitationsWithIntl = injectIntl(Invitations);\n\nconst Data = adopt<DataProps>({\n  projects: (\n    <GetProjects publicationStatuses={['draft', 'published', 'archived']} />\n  ),\n  locale: <GetLocale />,\n  tenantLocales: <GetAppConfigurationLocales />,\n  groups: <GetGroups membershipType=\"manual\" />,\n});\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <InvitationsWithIntl {...inputProps} {...dataProps} />}\n  </Data>\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  helmetTitle: {\n    id: 'app.containers.Admin.Invitations.helmetTitle',\n    defaultMessage: 'Admin invitation dashboard',\n  },\n  helmetDescription: {\n    id: 'app.containers.Admin.Invitations.helmetDescription',\n    defaultMessage: 'Invite users to the platform',\n  },\n  name: {\n    id: 'app.containers.Admin.Invitations.name',\n    defaultMessage: 'Name',\n  },\n  email: {\n    id: 'app.containers.Admin.Invitations.email',\n    defaultMessage: 'Email',\n  },\n  invitePeople: {\n    id: 'app.containers.Admin.Invitations.invitePeople',\n    defaultMessage: 'Invite people via email',\n  },\n  invitationSubtitle: {\n    id: 'app.containers.Admin.Invitations.invitationSubtitle',\n    defaultMessage:\n      'Invite people to the platform at any point in time. They get a neutral invitation email with your logo, in which they are asked to register on the platform.',\n  },\n  importTab: {\n    id: 'app.containers.Admin.Invitations.importTab',\n    defaultMessage: 'Import email addresses',\n  },\n  textTab: {\n    id: 'app.containers.Admin.Invitations.textTab',\n    defaultMessage: 'Manually enter email addresses',\n  },\n  emailListLabel: {\n    id: 'app.containers.Admin.Invitations.emailListLabel',\n    defaultMessage:\n      'Manually enter the email addresses of the people you want to invite. Seperate each address by a comma.',\n  },\n  fileRequirements: {\n    id: 'app.containers.Admin.Invitations.fileRequirements',\n    defaultMessage:\n      'Important: In order to send the invitations correctly, no column can be removed from the import template. Leave unused columns empty.',\n  },\n  visitSupportPage: {\n    id: 'app.containers.Admin.Invitations.visitSupportPage',\n    defaultMessage:\n      '{supportPageLink} if you want more info about all supported columns in the import template.',\n  },\n  supportPageLinkText: {\n    id: 'app.containers.Admin.Invitations.supportPageLinkText',\n    defaultMessage: 'Visit the support page',\n  },\n  supportPage: {\n    id: 'app.containers.Admin.Invitations.supportPage',\n    defaultMessage: 'support page',\n  },\n  importOptionsInfo: {\n    id: 'app.containers.Admin.Invitations.importOptionsInfo',\n    defaultMessage: `\n      These options will only be taken into account when they are not defined in the Excel file.\n      Please visit the {supportPageLink} for more information.\n    `,\n  },\n  adminLabel: {\n    id: 'app.containers.Admin.Invitations.adminLabel',\n    defaultMessage: 'Grant administrator rights to the invited people?',\n  },\n  adminLabelTooltip: {\n    id: 'app.containers.Admin.Invitations.adminLabelTooltip',\n    defaultMessage:\n      'When toggled on, people receiving and accepting your invitation will also have access to all admin settings of the platform.',\n  },\n  moderatorLabel: {\n    id: 'app.containers.Admin.Invitations.moderatorLabel',\n    defaultMessage: 'Grant project moderator rights to the invited people?',\n  },\n  moderatorLabelTooltip: {\n    id: 'app.containers.Admin.Invitations.moderatorLabelTooltip',\n    defaultMessage:\n      'When toggled on, people receiving and accepting your invitation will also have moderator rights to one or multiple projects. More info on the project moderator role {moderatorLabelTooltipLink}.',\n  },\n  moderatorLabelTooltipLink: {\n    id: 'app.containers.Admin.Invitations.moderatorLabelTooltipLink',\n    defaultMessage:\n      'http://support.citizenlab.co/en-your-citizenlab-platform-step-by-step/set-up/pointing-out-the-right-project-moderators',\n  },\n  moderatorLabelTooltipLinkText: {\n    id: 'app.containers.Admin.Invitations.moderatorLabelTooltipLinkText',\n    defaultMessage: 'here',\n  },\n  projectSelectorPlaceholder: {\n    id: 'app.containers.Admin.Invitations.projectSelectorPlaceholder',\n    defaultMessage: 'No project(s) selected',\n  },\n  localeLabel: {\n    id: 'app.containers.Admin.Invitations.localeLabel',\n    defaultMessage: 'Select the default language for the invited people',\n  },\n  invitationOptions: {\n    id: 'app.containers.Admin.Invitations.invitationOptions',\n    defaultMessage: 'Invitation options',\n  },\n  addToGroupLabel: {\n    id: 'app.containers.Admin.Invitations.addToGroupLabel',\n    defaultMessage: 'Add these people to specific manual user groups',\n  },\n  inviteTextLabel: {\n    id: 'app.containers.Admin.Invitations.inviteTextLabel',\n    defaultMessage:\n      'Optionally type a message that will be added to the invitation mail.',\n  },\n  groupsPlaceholder: {\n    id: 'app.containers.Admin.Invitations.groupsPlaceholder',\n    defaultMessage: 'No group selected',\n  },\n  processing: {\n    id: 'app.containers.Admin.Invitations.processing',\n    defaultMessage: 'Sending out invitations. Please wait...',\n  },\n  save: {\n    id: 'app.containers.Admin.Invitations.save',\n    defaultMessage: 'Send out invitations',\n  },\n  saveSuccess: {\n    id: 'app.containers.Admin.Invitations.saveSuccess',\n    defaultMessage: 'Success!',\n  },\n  saveErrorMessage: {\n    id: 'app.containers.Admin.Invitations.saveErrorMessage',\n    defaultMessage: `\n      One or more errors occured.\n      Therefore no invitations were sent out.\n      Please correct the error(s) listed below and try again.\n    `,\n  },\n  saveSuccessMessage: {\n    id: 'app.containers.Admin.Invitations.saveSuccessMessage',\n    defaultMessage: 'Invitation successfully sent out.',\n  },\n  inviteStatus: {\n    id: 'app.containers.Admin.Invitations.inviteStatus',\n    defaultMessage: 'Status',\n  },\n  invitedSince: {\n    id: 'app.containers.Admin.Invitations.invitedSince',\n    defaultMessage: 'Invited',\n  },\n  deleteInvite: {\n    id: 'app.containers.Admin.Invitations.deleteInvite',\n    defaultMessage: 'Delete',\n  },\n  deleteInviteTooltip: {\n    id: 'app.containers.Admin.Invitations.deleteInviteTooltip',\n    defaultMessage:\n      'Cancelling an invitation will allow you to resend an invitation to these persons.',\n  },\n  exportInvites: {\n    id: 'app.containers.Admin.Invitations.exportInvites',\n    defaultMessage: 'Export all invitations',\n  },\n  inviteStatusPending: {\n    id: 'app.containers.Admin.Invitations.inviteStatusPending',\n    defaultMessage: 'Pending',\n  },\n  inviteStatusAccepted: {\n    id: 'app.containers.Admin.Invitations.inviteStatusAccepted',\n    defaultMessage: 'Accepted',\n  },\n  confirmDelete: {\n    id: 'app.containers.Admin.Invitations.confirmDelete',\n    defaultMessage: \"Yes, I'm sure\",\n  },\n  currentlyNoInvitesThatMatchSearch: {\n    id: 'app.containers.Admin.Invitations.currentlyNoInvitesThatMatchSearch',\n    defaultMessage: 'There are no invites that match your search',\n  },\n  filetypeError: {\n    id: 'app.containers.Admin.Invitations.filetypeError',\n    defaultMessage: 'Incorrect file type. Only XLSX files are supported.',\n  },\n  unknownError: {\n    id: 'app.containers.Admin.Invitations.unknownError',\n    defaultMessage: 'Something went wrong. Please try again later.',\n  },\n  invitesSupportPageURL: {\n    id: 'app.containers.Admin.Invitations.invitesSupportPageURL',\n    defaultMessage:\n      'http://support.citizenlab.co/en/articles/1771605-invite-people-to-the-platform',\n  },\n  tabInviteUsers: {\n    id: 'app.containers.Admin.Invitations.tabInviteUsers',\n    defaultMessage: 'Invite users',\n  },\n  tabAllInvitations: {\n    id: 'app.containers.Admin.Invitations.tabAllInvitations',\n    defaultMessage: 'All invitations',\n  },\n  downloadFillOutTemplate: {\n    id: 'app.containers.Admin.Invitations.downloadFillOutTemplate',\n    defaultMessage: '1. Download and fill out the template',\n  },\n  downloadTemplate: {\n    id: 'app.containers.Admin.Invitations.downloadTemplate',\n    defaultMessage: 'Download template',\n  },\n  uploadCompletedFile: {\n    id: 'app.containers.Admin.Invitations.uploadCompletedFile',\n    defaultMessage: '2. Upload your completed template file',\n  },\n  configureInvitations: {\n    id: 'app.containers.Admin.Invitations.configureInvitations',\n    defaultMessage: '3. Configure the invitations',\n  },\n  required: {\n    id: 'UI.FormComponents.required',\n    defaultMessage: 'required',\n  },\n});\n"],"sourceRoot":""}