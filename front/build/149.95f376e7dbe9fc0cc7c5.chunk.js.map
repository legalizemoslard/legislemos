{"version":3,"sources":["webpack:///./app/modules/commercial/user_custom_fields/admin/containers/CustomFields/RegistrationCustomFieldEdit/RegistrationCustomFieldOptionsForm.tsx","webpack:///./app/modules/commercial/user_custom_fields/admin/containers/CustomFields/RegistrationCustomFieldEdit/RegistrationCustomFieldOptionsEdit.tsx","webpack:///./app/modules/commercial/user_custom_fields/hooks/useUserCustomFieldOption.ts"],"names":["Buttons","styled","div","CancelButton","Button","RegistrationCustomFieldOptionsForm","e","preventDefault","userCustomFieldId","props","params","clHistory","push","this","isSubmitting","errors","isValid","touched","status","formatMessage","intl","Form","Section","SectionField","Field","name","component","FormikInputMultilocWithLocaleSwitcher","label","messages","answerOption","title_multiloc","fieldName","apiErrors","buttonStyle","onClick","handleCancelClick","optionCancelButton","React","Component","values","every","isEmpty","error","withRouter","injectIntl","userCustomFieldOptionId","userCustomFieldOption","isNilOrError","SectionTitle","FormattedMessage","editCustomFieldAnswerOptionFormTitle","Formik","initialValues","attributes","render","onSubmit","setErrors","setSubmitting","setStatus","updateUserCustomFieldOption","then","catch","errorResponse","isCLErrorJSON","json","validate","useState","undefined","setUserCustomFieldOption","useEffect","subscription","userCustomFieldOptionStream","observable","subscribe","data","unsubscribe"],"mappings":"gVAAA,eACA,eACA,YACA,eACA,YAIA,YACA,eAGA,YACA,eACA,eACA,YACA,eACA,e,0cAEA,IAAMA,EAAUC,UAAOC,IAAV,kGAAGD,CAAH,sCAIPE,GAAe,aAAOC,WAAV,uGAAG,CAAH,MAWZC,E,yPAYgB,SAACC,GACnBA,EAAEC,iBACF,IAAQC,EAAsB,EAAKC,MAAMC,OAAjCF,kBAERG,UAAUC,KAAV,qDACgDJ,EADhD,iB,6CAKF,WACE,MAOIK,KAAKJ,MANPK,EADF,EACEA,aACAC,EAFF,EAEEA,OACAC,EAHF,EAGEA,QACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,OACQC,EANV,EAMEC,KAAQD,cAGV,OACE,wBAAC,EAAAE,KAAD,KACE,wBAAC,EAAAC,QAAD,KACE,wBAAC,EAAAC,aAAD,KACE,wBAAC,EAAAC,MAAD,CACEC,KAAK,iBACLC,UAAWC,UACXC,MAAOT,EAAcU,UAASC,gBAE/Bb,EAAQc,gBACP,wBAAC,UAAD,CACEC,UAAU,iBACVC,UAAWlB,EAAOgB,mBAM1B,wBAAC/B,EAAD,KACE,wBAAC,UAAD,CACQgB,UAASF,eAAcI,SAAQD,YAEvC,wBAACd,EAAD,CAAc+B,YAAY,OAAOC,QAAStB,KAAKuB,mBAC5CjB,EAAcU,UAASQ,2B,GAtDaC,UAAMC,Y,aAAjDlC,E,YAGqB,SAACmC,GACxB,IAAMzB,EAAmC,GAKzC,OAHI,IAAA0B,QAAM,YAAUD,EAAOT,gBAAiBW,aAC1C3B,EAAOgB,eAAiB,CAAC,CAAEY,MAAO,WAE7B5B,K,OAqDI,IAAA6B,aAAW,IAAAC,YAAWxC,I,iIChGrC,mBACA,YACA,YACA,eACA,YAEA,YAGA,YACA,eAGA,eAGA,YAGA,YACA,e,GAiEe,IAAAuC,aAzD4B,SAAC,GAEb,QAD7BlC,OAAUF,EACmB,EADnBA,kBAAmBsC,EACA,EADAA,wBAEvBC,GAAwB,aAC5BvC,EACAsC,GA6BF,OAAK,IAAAE,cAAaD,GAoBX,KAlBH,wBAAC,EAAAzB,QAAD,KACE,wBAAC,EAAA2B,aAAD,KACE,wBAAC,EAAAC,iBACKrB,UAASsB,uCAGjB,wBAAC,EAAAC,OAAD,CACEC,cAAe,CACbtB,eAAgBgB,EAAsBO,WAAWvB,gBAEnDwB,OAhBS,SAAC9C,GAChB,OAAO,wBAAC,UAAuCA,IAgBzC+C,SAxCa,SACnBhB,EADmB,GAGhB,IADDiB,EACC,EADDA,UAAWC,EACV,EADUA,cAAeC,EACzB,EADyBA,WAE5B,IAAAC,6BAA4BpD,EAAmBsC,EAAyB,CACtEf,eAAgBS,EAAOT,iBAEtB8B,MAAK,WACJlD,UAAUC,KAAV,qDACgDJ,EADhD,iBAIDsD,OAAM,SAACC,GACN,IAAI,IAAAC,eAAcD,GAAgB,CAChC,IAAM9B,EAAa8B,EAA+BE,KAAKlD,OACvD0C,EAAUxB,QAEV0B,EAAU,SAEZD,GAAc,OAsBZQ,SAAW7D,UAA2C6D,e,0HCtEjD,SACb1D,EACAsC,GAEA,OAA0D,IAAAqB,eAExDC,GAFF,qBAAOrB,EAAP,KAA8BsB,EAA9B,KAgBA,OAZA,IAAAC,YAAU,WACR,IAAMC,GAAe,IAAAC,6BACnBhE,EACAsC,GACA2B,WAAWC,WAAU,SAAC3B,GACtBsB,EAAyBtB,EAAsB4B,SAGjD,OAAO,kBAAMJ,EAAaK,iBAEzB,CAAC9B,IAEGC,G,mBA1BT,YACA","file":"149.95f376e7dbe9fc0cc7c5.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { isEmpty, values as getValues, every } from 'lodash-es';\nimport clHistory from 'utils/cl-router/history';\nimport { withRouter, WithRouterProps } from 'react-router';\n\n// i18n\nimport { InjectedIntlProps } from 'react-intl';\nimport { injectIntl } from 'utils/cl-intl';\nimport messages from '../messages';\n\n// components\nimport { Form, Field, InjectedFormikProps, FormikErrors } from 'formik';\nimport FormikInputMultilocWithLocaleSwitcher from 'components/UI/FormikInputMultilocWithLocaleSwitcher';\nimport FormikSubmitWrapper from 'components/admin/FormikSubmitWrapper';\nimport { Section, SectionField } from 'components/admin/Section';\nimport Error from 'components/UI/Error';\nimport Button from 'components/UI/Button';\n\nconst Buttons = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst CancelButton = styled(Button)``;\n\n// Typings\nimport { Multiloc } from 'typings';\n\nexport interface Props {}\n\nexport interface FormValues {\n  title_multiloc: Multiloc;\n}\n\nclass RegistrationCustomFieldOptionsForm extends React.Component<\n  InjectedFormikProps<Props & InjectedIntlProps & WithRouterProps, FormValues>\n> {\n  public static validate = (values: FormValues): FormikErrors<FormValues> => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (every(getValues(values.title_multiloc), isEmpty)) {\n      errors.title_multiloc = [{ error: 'blank' }] as any;\n    }\n    return errors;\n  };\n\n  handleCancelClick = (e) => {\n    e.preventDefault();\n    const { userCustomFieldId } = this.props.params;\n\n    clHistory.push(\n      `/admin/settings/registration/custom-fields/${userCustomFieldId}/options/`\n    );\n  };\n\n  render() {\n    const {\n      isSubmitting,\n      errors,\n      isValid,\n      touched,\n      status,\n      intl: { formatMessage },\n    } = this.props;\n\n    return (\n      <Form>\n        <Section>\n          <SectionField>\n            <Field\n              name=\"title_multiloc\"\n              component={FormikInputMultilocWithLocaleSwitcher}\n              label={formatMessage(messages.answerOption)}\n            />\n            {touched.title_multiloc && (\n              <Error\n                fieldName=\"title_multiloc\"\n                apiErrors={errors.title_multiloc as any}\n              />\n            )}\n          </SectionField>\n        </Section>\n\n        <Buttons>\n          <FormikSubmitWrapper\n            {...{ isValid, isSubmitting, status, touched }}\n          />\n          <CancelButton buttonStyle=\"text\" onClick={this.handleCancelClick}>\n            {formatMessage(messages.optionCancelButton)}\n          </CancelButton>\n        </Buttons>\n      </Form>\n    );\n  }\n}\n\nexport default withRouter(injectIntl(RegistrationCustomFieldOptionsForm));\n","import React from 'react';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport { isNilOrError } from 'utils/helperUtils';\nimport clHistory from 'utils/cl-router/history';\nimport { Formik } from 'formik';\nimport { CLErrorsJSON } from 'typings';\nimport { isCLErrorJSON } from 'utils/errorUtils';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\n\n// hooks\nimport useUserCustomFieldOption from '../../../../hooks/useUserCustomFieldOption';\n\n// services\nimport { updateUserCustomFieldOption } from '../../../../services/userCustomFieldOptions';\n\n// components\nimport { Section, SectionTitle } from 'components/admin/Section';\nimport RegistrationCustomFieldOptionsForm, {\n  FormValues,\n} from './RegistrationCustomFieldOptionsForm';\n\nexport interface Props {\n  userCustomFieldId: string;\n}\n\nconst RegistrationCustomFieldOptionsEdit = ({\n  params: { userCustomFieldId, userCustomFieldOptionId },\n}: Props & WithRouterProps) => {\n  const userCustomFieldOption = useUserCustomFieldOption(\n    userCustomFieldId,\n    userCustomFieldOptionId\n  );\n  const handleSubmit = (\n    values: FormValues,\n    { setErrors, setSubmitting, setStatus }\n  ) => {\n    updateUserCustomFieldOption(userCustomFieldId, userCustomFieldOptionId, {\n      title_multiloc: values.title_multiloc,\n    })\n      .then(() => {\n        clHistory.push(\n          `/admin/settings/registration/custom-fields/${userCustomFieldId}/options/`\n        );\n      })\n      .catch((errorResponse) => {\n        if (isCLErrorJSON(errorResponse)) {\n          const apiErrors = (errorResponse as CLErrorsJSON).json.errors;\n          setErrors(apiErrors);\n        } else {\n          setStatus('error');\n        }\n        setSubmitting(false);\n      });\n  };\n\n  const renderFn = (props) => {\n    return <RegistrationCustomFieldOptionsForm {...props} />;\n  };\n\n  if (!isNilOrError(userCustomFieldOption)) {\n    return (\n      <Section>\n        <SectionTitle>\n          <FormattedMessage\n            {...messages.editCustomFieldAnswerOptionFormTitle}\n          />\n        </SectionTitle>\n        <Formik\n          initialValues={{\n            title_multiloc: userCustomFieldOption.attributes.title_multiloc,\n          }}\n          render={renderFn}\n          onSubmit={handleSubmit}\n          validate={(RegistrationCustomFieldOptionsForm as any).validate}\n        />\n      </Section>\n    );\n  }\n\n  return null;\n};\n\nexport default withRouter(RegistrationCustomFieldOptionsEdit);\n","import { useState, useEffect } from 'react';\nimport {\n  userCustomFieldOptionStream,\n  IUserCustomFieldOptionData,\n} from '../services/userCustomFieldOptions';\n\nexport default function useUserCustomFieldOption(\n  userCustomFieldId: string,\n  userCustomFieldOptionId: string\n) {\n  const [userCustomFieldOption, setUserCustomFieldOption] = useState<\n    IUserCustomFieldOptionData | undefined | null | Error\n  >(undefined);\n\n  useEffect(() => {\n    const subscription = userCustomFieldOptionStream(\n      userCustomFieldId,\n      userCustomFieldOptionId\n    ).observable.subscribe((userCustomFieldOption) => {\n      setUserCustomFieldOption(userCustomFieldOption.data);\n    });\n\n    return () => subscription.unsubscribe();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userCustomFieldOptionId]);\n\n  return userCustomFieldOption;\n}\n"],"sourceRoot":""}