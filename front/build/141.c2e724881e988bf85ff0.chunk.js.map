{"version":3,"sources":["webpack:///./app/modules/commercial/project_folders/services/projects.ts","webpack:///./app/modules/commercial/project_folders/resources/GetProjectFolder.tsx","webpack:///./app/modules/commercial/project_folders/admin/containers/messages.ts","webpack:///./app/modules/commercial/project_folders/admin/containers/projects/index.tsx"],"names":["apiEndpoint","API_PATH","projectId","newProjectFolderId","oldProjectFolderId","streams","update","project","folder_id","response","fetchAllWith","dataId","filter","item","GetProjectFolder","props","state","projectFolder","undefined","this","projectFolderId","projectFolderSlug","resetOnChange","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","tap","setState","switchMap","isString","projectFolderByIdStream","observable","projectFolderBySlugStream","of","subscribe","isNilOrError","data","forEach","subscription","unsubscribe","children","React","Component","defineMessages","titleSettingsTab","id","defaultMessage","subtitleSettingsTab","viewPublicProjectFolder","projectFolderSettingsTab","projectFolderPermissionsTab","projectFolderProjectsTab","titleInputLabel","shortDescriptionInputLabel","shortDescriptionInputLabelTooltip","descriptionInputLabel","headerImageInputLabel","projectFolderHeaderImageLabelTooltip","projectFolderCardImageLabel","projectFolderCardImageTooltip","save","saveSuccess","saveErrorMessage","multilocError","saveSuccessMessage","titleNewFolder","subtitleNewFolder","projectsAlreadyAdded","projectsYouCanAdd","folderEmptyGoBackToAdd","addToFolder","removeFromFolder","deleteFolderLabel","noProjectsToAdd","fileUploadLabel","fileUploadLabelTooltip","statusLabel","publicationStatusTooltip","draftStatus","publishedStatus","archivedStatus","Container","styled","div","ListsContainer","ListHeader","StyledHeaderTitle","HeaderTitle","Spacer","AdminFolderProjectsList","itemId","newOrder","reorderAdminPublication","processing","updateProjectFolderMembership","adminPublications","authUser","allPublications","list","userIsAdmin","isAdmin","projectsInFolder","childrenOf","relationships","admin_publication","otherProjects","publicationType","attributes","depth","FormattedMessage","messages","length","SortableList","key","items","onReorder","handleReorder","className","itemsList","handleDragRow","handleDropRow","map","adminPublication","index","SortableRow","moveRow","dropRow","lastItem","publication","actions","buttonContent","handler","removeProjectFromFolder","icon","includes","publicationId","List","Row","isLastItem","addProjectToFolder","publicationStatuses","Data","adopt","params","render","publicationStatusFilter","withRouter","inputProps","dataProps"],"mappings":"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","file":"141.c2e724881e988bf85ff0.chunk.js","sourcesContent":["import { IProject } from 'services/projects';\n\nimport streams from 'utils/streams';\nimport { API_PATH } from 'containers/App/constants';\n\nconst apiEndpoint = `${API_PATH}/projects`;\n\ndeclare module 'services/projects' {\n  export interface IUpdatedProjectProperties {\n    folder_id?: string;\n  }\n\n  export interface IProjectAttributes {\n    folder_id?: string;\n  }\n}\n\nexport async function updateProjectFolderMembership(\n  projectId: string,\n  newProjectFolderId: string | null,\n  oldProjectFolderId?: string\n) {\n  const response = await streams.update<IProject>(\n    `${apiEndpoint}/${projectId}`,\n    projectId,\n    { project: { folder_id: newProjectFolderId } }\n  );\n\n  await streams.fetchAllWith({\n    dataId: [newProjectFolderId, oldProjectFolderId].filter(\n      (item) => item\n    ) as string[],\n    apiEndpoint: [`${API_PATH}/admin_publications`, `${API_PATH}/projects`],\n  });\n\n  return response;\n}\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { Subscription, BehaviorSubject, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { isNilOrError } from 'utils/helperUtils';\nimport shallowCompare from 'utils/shallowCompare';\nimport {\n  projectFolderByIdStream,\n  projectFolderBySlugStream,\n  IProjectFolderData,\n} from '../services/projectFolders';\n\ninterface InputProps {\n  projectFolderId?: string | null;\n  projectFolderSlug?: string | null;\n  resetOnChange?: boolean;\n}\n\ntype children = (renderProps: GetProjectFolderChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  projectFolder: IProjectFolderData | undefined | null | Error;\n}\n\nexport type GetProjectFolderChildProps =\n  | IProjectFolderData\n  | undefined\n  | null\n  | Error;\n\nexport default class GetProjectFolder extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  static defaultProps = {\n    resetOnChange: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      projectFolder: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { projectFolderId, projectFolderSlug, resetOnChange } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({\n      projectFolderId,\n      projectFolderSlug,\n    });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          tap(\n            () => resetOnChange && this.setState({ projectFolder: undefined })\n          ),\n          switchMap(({ projectFolderId, projectFolderSlug }) => {\n            if (isString(projectFolderId)) {\n              return projectFolderByIdStream(projectFolderId).observable;\n            } else if (isString(projectFolderSlug)) {\n              return projectFolderBySlugStream(projectFolderSlug).observable;\n            }\n\n            return of(null);\n          })\n        )\n        .subscribe((projectFolder) => {\n          this.setState({\n            projectFolder: !isNilOrError(projectFolder)\n              ? projectFolder.data\n              : projectFolder,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { projectFolderId, projectFolderSlug } = this.props;\n    this.inputProps$.next({ projectFolderId, projectFolderSlug });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { projectFolder } = this.state;\n    return (children as children)(projectFolder);\n  }\n}\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  // edit - index\n  titleSettingsTab: {\n    id: 'app.containers.AdminPage.FoldersEdit.titleSettingsTab',\n    defaultMessage: 'Settings',\n  },\n  subtitleSettingsTab: {\n    id: 'app.containers.AdminPage.FoldersEdit.subtitleSettingsTab',\n    defaultMessage:\n      'Explain why grouped project belong together, define a visual identity, expose shared information.',\n  },\n  viewPublicProjectFolder: {\n    id: 'app.containers.AdminPage.FoldersEdit.viewPublicProjectFolder',\n    defaultMessage: 'View Folder',\n  },\n  projectFolderSettingsTab: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectFolderSettingsTab',\n    defaultMessage: 'Settings',\n  },\n  projectFolderPermissionsTab: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectFolderPermissionsTab',\n    defaultMessage: 'Permissions',\n  },\n  projectFolderProjectsTab: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectFolderProjectsTab',\n    defaultMessage: 'Projects',\n  },\n  titleInputLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.titleInputLabel',\n    defaultMessage: 'Title',\n  },\n  shortDescriptionInputLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.shortDescriptionInputLabel',\n    defaultMessage: 'Short description',\n  },\n  shortDescriptionInputLabelTooltip: {\n    id:\n      'app.containers.AdminPage.FoldersEdit.shortDescriptionInputLabelTooltip',\n    defaultMessage: 'shown in the landing page',\n  },\n  descriptionInputLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.descriptionInputLabel',\n    defaultMessage: 'Description',\n  },\n  headerImageInputLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.headerImageInputLabel',\n    defaultMessage: 'Header image',\n  },\n  projectFolderHeaderImageLabelTooltip: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.projectFolderHeaderImageLabelTooltip',\n    defaultMessage:\n      'This is the image displayed in the header on the folder page. The ideal dimensions for this image are a width between 1480 and 1280 pixels, and a height of 250 pixels.',\n  },\n  projectFolderCardImageLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectFolderCardImageLabel',\n    defaultMessage: 'Folder card image',\n  },\n  projectFolderCardImageTooltip: {\n    id: 'app.containers.AdminPage.ProjectEdit.projectFolderCardImageTooltip',\n    defaultMessage:\n      'This is the image displayed in the folder card. The ideal dimensions for this image are a width of 1440 pixels and a height between 1440 and 720 pixels.',\n  },\n  save: {\n    id: 'app.containers.AdminPage.FoldersEdit.save',\n    defaultMessage: 'Save',\n  },\n  saveSuccess: {\n    id: 'app.containers.AdminPage.FoldersEdit.saveSuccess',\n    defaultMessage: 'Success!',\n  },\n  saveErrorMessage: {\n    id: 'app.containers.AdminPage.FoldersEdit.saveErrorMessage',\n    defaultMessage: 'Something went wrong, please try again later.',\n  },\n  multilocError: {\n    id: 'app.containers.AdminPage.FoldersEdit.multilocError',\n    defaultMessage: 'All text fields must be fully filled in.',\n  },\n  saveSuccessMessage: {\n    id: 'app.containers.AdminPage.FoldersEdit.saveSuccessMessage',\n    defaultMessage: 'Your changes have been saved.',\n  },\n  titleNewFolder: {\n    id: 'app.containers.AdminPage.FoldersEdit.titleNewFolder',\n    defaultMessage: 'Create a new folder',\n  },\n  subtitleNewFolder: {\n    id: 'app.containers.AdminPage.FoldersEdit.subtitleNewFolder',\n    defaultMessage:\n      'Explain why grouped project belong together, define a visual identity, expose shared information.',\n  },\n  projectsAlreadyAdded: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectsAlreadyAdded',\n    defaultMessage: 'Projects added to this folder',\n  },\n  projectsYouCanAdd: {\n    id: 'app.containers.AdminPage.FoldersEdit.projectsYouCanAdd',\n    defaultMessage: 'Projects you can add to this folder',\n  },\n  folderEmptyGoBackToAdd: {\n    id: 'app.containers.AdminPage.FoldersEdit.folderEmptyGoBackToAdd',\n    defaultMessage:\n      'There are no projects in this folder. Go back to the main Projects tab to create and add projects.',\n  },\n  addToFolder: {\n    id: 'app.containers.AdminPage.FoldersEdit.addToFolder',\n    defaultMessage: 'Add to folder',\n  },\n  removeFromFolder: {\n    id: 'app.containers.AdminPage.FoldersEdit.removeFromFolder',\n    defaultMessage: 'Remove from folder',\n  },\n  deleteFolderLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.deleteFolderLabel',\n    defaultMessage: 'Delete this folder',\n  },\n  noProjectsToAdd: {\n    id: 'app.containers.AdminPage.FoldersEdit.noProjectsToAdd',\n    defaultMessage: 'There are no projects that you can add to this folder.',\n  },\n  fileUploadLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.fileUploadLabel',\n    defaultMessage: 'Add files to this folder',\n  },\n  fileUploadLabelTooltip: {\n    id: 'app.containers.AdminPage.FoldersEdit.fileUploadLabelTooltip',\n    defaultMessage:\n      'Files should not be larger than 50Mb. Added files will be shown on the folder page.',\n  },\n  statusLabel: {\n    id: 'app.containers.AdminPage.FoldersEdit.statusLabel',\n    defaultMessage: 'Publication status',\n  },\n  publicationStatusTooltip: {\n    id: 'app.containers.AdminPage.FoldersEdit.publicationStatusTooltip',\n    defaultMessage:\n      'Choose whether this folder is \"draft\", \"published\" or \"archived\".',\n  },\n  draftStatus: {\n    id: 'app.containers.AdminPage.FoldersEdit.draftStatus',\n    defaultMessage: 'Draft',\n  },\n  publishedStatus: {\n    id: 'app.containers.AdminPage.FoldersEdit.publishedStatus',\n    defaultMessage: 'Published',\n  },\n  archivedStatus: {\n    id: 'app.containers.AdminPage.FoldersEdit.archivedStatus',\n    defaultMessage: 'Archived',\n  },\n});\n","import React, { Component } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { adopt } from 'react-adopt';\nimport { withRouter, WithRouterProps } from 'react-router';\n\n// services\nimport { PublicationStatus } from 'services/projects';\nimport { updateProjectFolderMembership } from '../../../services/projects';\nimport { isAdmin } from 'services/permissions/roles';\n\n// resources\nimport GetProjectFolder, {\n  GetProjectFolderChildProps,\n} from '../../../resources/GetProjectFolder';\nimport GetAdminPublications, {\n  GetAdminPublicationsChildProps,\n} from 'resources/GetAdminPublications';\nimport GetAuthUser, { GetAuthUserChildProps } from 'resources/GetAuthUser';\n\n// localisation\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\n\n// components\nimport {\n  List,\n  Row,\n  SortableList,\n  SortableRow,\n} from 'components/admin/ResourceList';\nimport { HeaderTitle } from 'containers/Admin/projects/all/StyledComponents';\nimport ProjectRow from 'containers/Admin/projects/components/ProjectRow';\n\n// style\nimport styled from 'styled-components';\nimport { reorderAdminPublication } from 'services/adminPublications';\nimport { IAdminPublicationContent } from 'hooks/useAdminPublications';\n\nconst Container = styled.div`\n  min-height: 60vh;\n`;\n\nconst ListsContainer = styled.div``;\n\nconst ListHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  margin-bottom: 25px;\n\n  &:not(:first-child) {\n    margin-top: 70px;\n  }\n\n  & + & {\n    margin-top: 30px;\n  }\n`;\n\nconst StyledHeaderTitle = styled(HeaderTitle)`\n  font-weight: bold;\n`;\n\nconst Spacer = styled.div`\n  flex: 1;\n`;\n\ninterface DataProps {\n  adminPublications: GetAdminPublicationsChildProps;\n  projectFolder: GetProjectFolderChildProps;\n  authUser: GetAuthUserChildProps;\n}\n\ninterface Props extends DataProps {}\n\ninterface State {\n  processing: string[];\n}\n\nclass AdminFolderProjectsList extends Component<\n  Props & WithRouterProps,\n  State\n> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      processing: [],\n    };\n  }\n\n  handleReorder = (itemId, newOrder) => {\n    reorderAdminPublication(itemId, newOrder);\n  };\n\n  addProjectToFolder = (projectFolderId: string) => (\n    projectId: string\n  ) => async () => {\n    this.setState(({ processing }) => ({\n      processing: [...processing, projectId],\n    }));\n    await updateProjectFolderMembership(projectId, projectFolderId);\n    this.setState(({ processing }) => ({\n      processing: processing.filter((item) => item !== projectId),\n    }));\n  };\n\n  removeProjectFromFolder = (projectFolderId: string) => (\n    projectId: string\n  ) => async () => {\n    this.setState(({ processing }) => ({\n      processing: [...processing, projectId],\n    }));\n    await updateProjectFolderMembership(projectId, null, projectFolderId);\n    this.setState(({ processing }) => ({\n      processing: processing.filter((item) => item !== projectId),\n    }));\n  };\n\n  render() {\n    const { adminPublications, authUser, projectFolder } = this.props;\n    const { processing } = this.state;\n    const { list: allPublications } = adminPublications;\n    const userIsAdmin = authUser && isAdmin({ data: authUser });\n\n    if (isNilOrError(projectFolder)) return null;\n\n    const projectsInFolder = adminPublications.childrenOf({\n      id: projectFolder.relationships.admin_publication.data?.id,\n    });\n\n    const otherProjects = !isNilOrError(allPublications)\n      ? allPublications.filter(\n          (item) =>\n            item.publicationType === 'project' && item.attributes.depth === 0\n        )\n      : null;\n\n    const projectFolderId = projectFolder.id;\n    return (\n      <Container>\n        <ListsContainer>\n          <ListHeader>\n            <StyledHeaderTitle>\n              <FormattedMessage {...messages.projectsAlreadyAdded} />\n            </StyledHeaderTitle>\n            <Spacer />\n          </ListHeader>\n\n          {!isNilOrError(projectsInFolder) && projectsInFolder.length > 0 ? (\n            <SortableList\n              key={`IN_FOLDER_LIST${projectsInFolder.length}`}\n              items={projectsInFolder}\n              onReorder={this.handleReorder}\n              className=\"projects-list e2e-admin-folder-projects-list\"\n              id=\"e2e-admin-folders-projects-list\"\n            >\n              {({ itemsList, handleDragRow, handleDropRow }) => (\n                <>\n                  {itemsList.map(\n                    (adminPublication: IAdminPublicationContent, index) => {\n                      return (\n                        <SortableRow\n                          key={adminPublication.id}\n                          id={adminPublication.id}\n                          index={index}\n                          moveRow={handleDragRow}\n                          dropRow={handleDropRow}\n                          lastItem={index === itemsList.length - 1}\n                        >\n                          <ProjectRow\n                            publication={adminPublication}\n                            actions={\n                              userIsAdmin\n                                ? [\n                                    {\n                                      buttonContent: (\n                                        <FormattedMessage\n                                          {...messages.removeFromFolder}\n                                        />\n                                      ),\n                                      handler: this.removeProjectFromFolder(\n                                        projectFolderId\n                                      ),\n                                      icon: 'remove',\n                                      processing: processing.includes(\n                                        adminPublication.publicationId\n                                      ),\n                                    },\n                                    'manage',\n                                  ]\n                                : ['manage']\n                            }\n                          />\n                        </SortableRow>\n                      );\n                    }\n                  )}\n                </>\n              )}\n            </SortableList>\n          ) : (\n            <FormattedMessage {...messages.folderEmptyGoBackToAdd} />\n          )}\n\n          {userIsAdmin && (\n            <>\n              <ListHeader>\n                <StyledHeaderTitle>\n                  <FormattedMessage {...messages.projectsYouCanAdd} />\n                </StyledHeaderTitle>\n              </ListHeader>\n\n              {otherProjects ? (\n                <List>\n                  <>\n                    {otherProjects.map((adminPublication, index: number) => (\n                      <Row\n                        id={adminPublication.id}\n                        isLastItem={index === otherProjects.length - 1}\n                        key={adminPublication.id}\n                      >\n                        <ProjectRow\n                          publication={adminPublication}\n                          actions={[\n                            {\n                              buttonContent: (\n                                <FormattedMessage {...messages.addToFolder} />\n                              ),\n                              handler: this.addProjectToFolder(projectFolderId),\n                              processing: processing.includes(\n                                adminPublication.publicationId\n                              ),\n                              icon: 'plus-circle',\n                            },\n                          ]}\n                        />\n                      </Row>\n                    ))}\n                  </>\n                </List>\n              ) : (\n                <FormattedMessage {...messages.noProjectsToAdd} />\n              )}\n            </>\n          )}\n        </ListsContainer>\n      </Container>\n    );\n  }\n}\nconst publicationStatuses: PublicationStatus[] = [\n  'draft',\n  'archived',\n  'published',\n];\n\nconst Data = adopt<DataProps, WithRouterProps>({\n  authUser: <GetAuthUser />,\n  projectFolder: ({ params, render }) => (\n    <GetProjectFolder projectFolderId={params.projectFolderId}>\n      {render}\n    </GetProjectFolder>\n  ),\n  adminPublications: ({ render }) => (\n    <GetAdminPublications publicationStatusFilter={publicationStatuses}>\n      {render}\n    </GetAdminPublications>\n  ),\n});\n\nexport default withRouter((inputProps: WithRouterProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <AdminFolderProjectsList {...inputProps} {...dataProps} />}\n  </Data>\n));\n"],"sourceRoot":""}