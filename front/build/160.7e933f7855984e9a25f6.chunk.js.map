{"version":3,"sources":["webpack:///./app/containers/Admin/users/UsersGroup.tsx","webpack:///./app/resources/GetGroup.tsx"],"names":["UsersGroup","props","setState","groupEditionModal","group","trackEditGroup","isNilOrError","groupType","attributes","membership_type","extra","groupId","values","setErrors","setSubmitting","setStatus","updateGroup","then","streams","fetchAllWith","dataId","apiEndpoint","API_PATH","onlyFetchActiveStreams","closeGroupEditionModal","catch","errorResponse","isCLErrorJSON","apiErrors","json","errors","deleteMessage","intl","formatMessage","messages","groupDeletionConfirmation","window","confirm","deleteGroup","searchTerm","search","isString","isEmpty","userIds","membershipDeleteConfirmation","id","promises","forEach","userId","push","deleteMembershipByUserId","Promise","all","eventEmitter","emit","events","membershipDeleteFailed","state","modalHeaderManual","type","undefined","this","title","title_multiloc","onEdit","openGroupEditionModal","onDelete","onSearch","searchGroup","deleteUsersFromGroup","header","renderModalHeader","fixedHeight","opened","close","Formik","initialValues","validate","NormalGroupForm","render","renderNormalGroupForm","onSubmit","handleSubmitForm","isVerificationEnabled","React","PureComponent","UsersGroupWithHoCs","withRouter","injectTracks","tracks","editGroup","injectIntl","Data","adopt","params","name","inputProps","dataProps","GetGroup","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","filter","switchMap","getGroup","observable","subscribe","data","subscription","unsubscribe","children","Component"],"mappings":"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","file":"160.7e933f7855984e9a25f6.chunk.js","sourcesContent":["// Libraries\nimport React from 'react';\nimport { adopt } from 'react-adopt';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport { Formik } from 'formik';\nimport { isEmpty, isString } from 'lodash-es';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\nimport { API_PATH } from 'containers/App/constants';\nimport streams from 'utils/streams';\n\n// Components\nimport UsersHeader from './UsersHeader';\nimport Modal from 'components/UI/Modal';\nimport NormalGroupForm, { NormalFormValues } from './NormalGroupForm';\nimport UserManager from './UserManager';\n\n// Events\nimport eventEmitter from 'utils/eventEmitter';\nimport events from './events';\n\n// i18n\nimport FormattedMessage from 'utils/cl-intl/FormattedMessage';\nimport messages from './messages';\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\n\n// Resources\nimport GetGroup, { GetGroupChildProps } from 'resources/GetGroup';\nimport GetFeatureFlag, {\n  GetFeatureFlagChildProps,\n} from 'resources/GetFeatureFlag';\n\n// Services\nimport { deleteGroup, updateGroup, MembershipType } from 'services/groups';\nimport { deleteMembershipByUserId } from 'services/groupMemberships';\n\n// tracking\nimport { injectTracks } from 'utils/analytics';\nimport tracks from './tracks';\n\n// Typings\nimport { CLErrorsJSON } from 'typings';\nimport { isCLErrorJSON } from 'utils/errorUtils';\nimport Outlet from 'components/Outlet';\n\nexport interface InputProps {}\n\ninterface DataProps {\n  group: GetGroupChildProps;\n  isVerificationEnabled: GetFeatureFlagChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nexport interface State {\n  groupEditionModal: false | MembershipType;\n  search: string | undefined;\n}\n\ninterface Tracks {\n  trackEditGroup: ({ extra: { groupType: MembershipType } }) => void;\n}\n\nexport class UsersGroup extends React.PureComponent<\n  Props & InjectedIntlProps & Tracks,\n  State\n> {\n  constructor(props: Props & InjectedIntlProps & Tracks) {\n    super(props);\n    this.state = {\n      groupEditionModal: false,\n      search: undefined,\n    };\n  }\n\n  closeGroupEditionModal = () => {\n    this.setState({ groupEditionModal: false });\n  };\n\n  openGroupEditionModal = () => {\n    const { group, trackEditGroup } = this.props;\n\n    if (!isNilOrError(group)) {\n      const groupType = group.attributes.membership_type;\n      trackEditGroup({\n        extra: {\n          groupType,\n        },\n      });\n      this.setState({ groupEditionModal: groupType });\n    }\n  };\n\n  handleSubmitForm = (groupId: string) => (\n    values: NormalFormValues,\n    { setErrors, setSubmitting, setStatus }\n  ) => {\n    updateGroup(groupId, { ...values })\n      .then(() => {\n        streams.fetchAllWith({\n          dataId: [groupId],\n          apiEndpoint: [`${API_PATH}/users`, `${API_PATH}/groups`],\n          onlyFetchActiveStreams: true,\n        });\n        this.closeGroupEditionModal();\n      })\n      .catch((errorResponse) => {\n        if (isCLErrorJSON(errorResponse)) {\n          const apiErrors = (errorResponse as CLErrorsJSON).json.errors;\n          setErrors(apiErrors);\n        } else {\n          setStatus('error');\n        }\n        setSubmitting(false);\n      });\n  };\n\n  deleteGroup = (groupId: string) => () => {\n    const deleteMessage = this.props.intl.formatMessage(\n      messages.groupDeletionConfirmation\n    );\n\n    if (window.confirm(deleteMessage)) {\n      deleteGroup(groupId);\n    }\n  };\n\n  searchGroup = (searchTerm: string) => {\n    this.setState({\n      search: isString(searchTerm) && !isEmpty(searchTerm) ? searchTerm : '',\n    });\n  };\n\n  deleteUsersFromGroup = async (userIds: string[]) => {\n    if (\n      !isNilOrError(this.props.group) &&\n      this.props.group.attributes.membership_type === 'manual'\n    ) {\n      const deleteMessage = this.props.intl.formatMessage(\n        messages.membershipDeleteConfirmation\n      );\n\n      if (window.confirm(deleteMessage)) {\n        const groupId = this.props.group.id;\n        const promises: Promise<any>[] = [];\n\n        userIds.forEach((userId) =>\n          promises.push(deleteMembershipByUserId(groupId, userId))\n        );\n\n        try {\n          await Promise.all(promises);\n          await streams.fetchAllWith({\n            dataId: [groupId],\n            apiEndpoint: [`${API_PATH}/groups`],\n          });\n        } catch (error) {\n          eventEmitter.emit<JSX.Element>(\n            events.membershipDeleteFailed,\n            <FormattedMessage {...messages.membershipDeleteFailed} />\n          );\n        }\n      }\n    }\n  };\n\n  renderNormalGroupForm = (props) => <NormalGroupForm {...props} />;\n\n  renderModalHeader = () => {\n    const { groupEditionModal } = this.state;\n    if (groupEditionModal === 'manual') {\n      return <FormattedMessage {...messages.modalHeaderManual} />;\n    }\n    return (\n      <Outlet\n        id=\"app.containers.Admin.users.UsersGroup.header\"\n        type={groupEditionModal}\n      />\n    );\n  };\n\n  render() {\n    const { group } = this.props;\n    const { groupEditionModal, search } = this.state;\n\n    if (!isNilOrError(group)) {\n      return (\n        <>\n          <UsersHeader\n            title={group.attributes.title_multiloc}\n            groupType={group.attributes.membership_type}\n            onEdit={this.openGroupEditionModal}\n            onDelete={this.deleteGroup(group.id)}\n            onSearch={this.searchGroup}\n          />\n\n          <UserManager\n            search={search}\n            groupId={group.id}\n            groupType={group.attributes.membership_type}\n            deleteUsersFromGroup={this.deleteUsersFromGroup}\n          />\n\n          <Modal\n            header={this.renderModalHeader()}\n            fixedHeight={true}\n            opened={groupEditionModal !== false}\n            close={this.closeGroupEditionModal}\n          >\n            <>\n              {groupEditionModal === 'manual' && (\n                <Formik\n                  initialValues={group.attributes}\n                  validate={NormalGroupForm.validate}\n                  render={this.renderNormalGroupForm}\n                  onSubmit={this.handleSubmitForm(group.id)}\n                />\n              )}\n\n              <Outlet\n                id=\"app.containers.Admin.users.UsersGroup.form\"\n                initialValues={group.attributes}\n                type={groupEditionModal}\n                onSubmit={this.handleSubmitForm(group.id)}\n                isVerificationEnabled={this.props.isVerificationEnabled}\n              />\n            </>\n          </Modal>\n        </>\n      );\n    }\n\n    return null;\n  }\n}\n\nconst UsersGroupWithHoCs = withRouter(\n  injectTracks<Props>({\n    trackEditGroup: tracks.editGroup,\n  })(injectIntl<Props>(UsersGroup))\n);\n\nconst Data = adopt<DataProps, InputProps & WithRouterProps>({\n  group: ({ params, render }) => (\n    <GetGroup id={params.groupId}>{render}</GetGroup>\n  ),\n  isVerificationEnabled: <GetFeatureFlag name=\"verification\" />,\n});\n\nexport default (inputProps: InputProps & WithRouterProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <UsersGroupWithHoCs {...inputProps} {...dataProps} />}\n  </Data>\n);\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, switchMap, filter } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport { getGroup, IGroupData } from 'services/groups';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  id: string;\n}\n\ntype children = (renderProps: GetGroupChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  group: IGroupData | undefined | null | Error;\n}\n\nexport type GetGroupChildProps = IGroupData | undefined | null | Error;\n\nexport default class GetGroup extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      group: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { id } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ id });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          filter(({ id }) => isString(id)),\n          switchMap(({ id }) => getGroup(id).observable)\n        )\n        .subscribe((group) =>\n          this.setState({ group: !isNilOrError(group) ? group.data : group })\n        ),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { id } = this.props;\n    this.inputProps$.next({ id });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { group } = this.state;\n    return (children as children)(group);\n  }\n}\n"],"sourceRoot":""}