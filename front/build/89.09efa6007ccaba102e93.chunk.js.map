{"version":3,"sources":["webpack:///./app/components/admin/PostManager/components/PostTable/TopicsSelector.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/ProjectSelector.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/InitiativeRow.tsx","webpack:///./app/resources/GetInitiativeAllowedTransitions.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/InitiativesStatusSelector.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/WrappedRow.tsx","webpack:///./app/services/initiatives.ts","webpack:///./app/components/admin/PostManager/events.ts","webpack:///./app/components/admin/PostManager/components/PostTable/SubRow.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/IdeasStatusSelector.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/PhasesSelector.tsx"],"names":["StyledLabel","Label","memo","selectedTopics","onUpdateTopics","topics","topicIds","processedTopics","isNilOrError","filter","topic","handleTopicDelete","useCallback","topicId","event","stopPropagation","newSelectedTopics","pull","map","key","id","color","basic","value","attributes","title_multiloc","Icon","name","onClick","LabelText","styled","span","props","projectId","project","Error","InitiativeRow","selectedPhases","updateInitiative","initiative","phase_ids","topic_ids","statusId","initiativeId","eventEmitter","emit","events","statusChangeModalOpen","newStatusId","trackEventByName","tracks","initiativeStatusChange","location","method","assigneeId","assignee_id","changeInitiativeAssignment","tenant","statuses","selectedStatus","get","selectedStatusObject","find","status","settings","initiatives","code","getDaysRemainingUntil","expires_at","StatusLabel","text","backgroundColor","this","selection","connectDragSource","activeFilterMenu","className","onClickCheckbox","onClickTitle","nothingHappens","allowedTransitions","relationships","data","p","attrs","active","has","as","StyledRow","undraggable","ref","instance","findDOMNode","Table","Cell","collapsing","checked","onChange","size","TitleLink","singleLine","onAssigneeChange","onUpdateInitiativeAssignee","renderTimingCell","upvotes_count","comments_count","onUpdatePhases","onUpdateInitiativePhases","onUpdateInitiativeTopics","onUpdateStatus","onUpdateInitiativeStatus","postType","React","PureComponent","initiativeSource","beginDrag","type","endDrag","monitor","item","getItem","dropResult","getDropResult","observables","initiativeByIdStream","observable","combineLatest","pipe","take","subscribe","currentTopics","d","newTopics","uniq","concat","InitiativesRowWithHocs","injectIntl","DragSource","connect","dragSource","isDragging","Data","adopt","render","inputProps","dataProps","GetInitiativeAllowedTransitions","state","initiativeAllowedTransitions","undefined","inputProps$","BehaviorSubject","subscriptions","distinctUntilChanged","prev","next","isString","switchMap","initiativeAllowedTransitionsStream","of","setState","forEach","subscription","unsubscribe","children","Component","Container","div","ColorIndicator","theme","borderRadius","disabled","isAllowed","Popup","trigger","isActive","handleStatusClick","content","position","WrappedRow","Row","initiativeSlug","streams","apiEndpoint","API_PATH","streamParams","cacheStream","object","add","response","update","fetchAllWith","Promise","all","first","toPromise","delete","authorId","ModalEvents","phases","FilterCell","colSpan","phaseId","indexOf","phase","isEnabled","newSelectedPhases","xor","canContainIdeas","index","handlePhaseClick","circular"],"mappings":"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","file":"89.09efa6007ccaba102e93.chunk.js","sourcesContent":["import React, { memo, useCallback, FormEvent } from 'react';\nimport { pull } from 'lodash-es';\nimport { Label, Icon } from 'semantic-ui-react';\nimport T from 'components/T';\nimport useTopics from 'hooks/useTopics';\nimport { isNilOrError } from 'utils/helperUtils';\nimport styled from 'styled-components';\nimport { ITopicData } from 'services/topics';\n\nconst StyledLabel = styled(Label)`\n  white-space: nowrap;\n`;\n\ninterface Props {\n  selectedTopics: string[];\n  onUpdateTopics: (topicIds: string[]) => void;\n}\n\nconst TopicsSelector = memo<Props>(({ selectedTopics, onUpdateTopics }) => {\n  const topics = useTopics({ topicIds: selectedTopics });\n  const processedTopics = !isNilOrError(topics)\n    ? (topics.filter((topic) => !isNilOrError(topic)) as ITopicData[])\n    : null;\n\n  const handleTopicDelete = useCallback(\n    (topicId: string) => (event: FormEvent) => {\n      event.stopPropagation();\n      const newSelectedTopics = pull(selectedTopics, topicId);\n      onUpdateTopics(newSelectedTopics);\n    },\n    [selectedTopics, onUpdateTopics]\n  );\n\n  if (processedTopics) {\n    return (\n      <>\n        {processedTopics.map((topic) => {\n          return (\n            <StyledLabel key={topic.id} color=\"teal\" basic={true}>\n              <T value={topic.attributes.title_multiloc} />\n              <Icon name=\"delete\" onClick={handleTopicDelete(topic.id)} />\n            </StyledLabel>\n          );\n        })}\n      </>\n    );\n  }\n\n  return null;\n});\n\nexport default TopicsSelector;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Label } from 'semantic-ui-react';\nimport T from 'components/T';\nimport GetProject from 'resources/GetProject';\n\nconst LabelText = styled.span`\n  font-weight: 600;\n`;\n\nconst StyledLabel = styled(Label)`\n  white-space: nowrap;\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 175px;\n`;\n\nexport default (props: { projectId: string }) => (\n  <GetProject projectId={props.projectId}>\n    {(project) => {\n      if (!project || project instanceof Error) return null;\n\n      return (\n        <StyledLabel key={project.id} color=\"teal\" basic={true}>\n          <LabelText>\n            <T value={project.attributes.title_multiloc} />\n          </LabelText>\n        </StyledLabel>\n      );\n    }}\n  </GetProject>\n);\n","import React from 'react';\nimport { combineLatest } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { uniq, get } from 'lodash-es';\nimport { findDOMNode } from 'react-dom';\nimport { DragSource } from 'react-dnd-cjs';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// services\nimport {\n  IInitiativeData,\n  updateInitiative,\n  initiativeByIdStream,\n} from 'services/initiatives';\nimport { IInitiativeStatusData } from 'services/initiativeStatuses';\n\n// components\nimport { Table, Icon } from 'semantic-ui-react';\nimport WrappedRow from './WrappedRow';\nimport T from 'components/T';\nimport Checkbox from 'components/UI/Checkbox';\nimport { StatusLabel } from 'cl2-component-library';\n\n// utils\nimport localize, { InjectedLocalized } from 'utils/localize';\n\n// i18n\nimport { InjectedIntlProps } from 'react-intl';\nimport { injectIntl } from 'utils/cl-intl';\n\n// style\nimport AssigneeSelect from './AssigneeSelect';\n\n// analytics\nimport { trackEventByName } from 'utils/analytics';\nimport tracks from '../../tracks';\nimport { TFilterMenu, ManagerType } from '../..';\nimport { TitleLink, StyledRow } from './Row';\nimport SubRow from './SubRow';\n\n// resources\nimport GetAppConfiguration, {\n  GetAppConfigurationChildProps,\n} from 'resources/GetAppConfiguration';\nimport GetInitiativeAllowedTransitions, {\n  GetInitiativeAllowedTransitionsChildProps,\n} from 'resources/GetInitiativeAllowedTransitions';\nimport { getDaysRemainingUntil } from 'utils/dateUtils';\n\n// events\nimport eventEmitter from 'utils/eventEmitter';\nimport events, {\n  StatusChangeModalOpen,\n} from 'components/admin/PostManager/events';\n\ninterface DataProps {\n  tenant: GetAppConfigurationChildProps;\n  allowedTransitions: GetInitiativeAllowedTransitionsChildProps;\n}\n\ninterface InputProps {\n  type: ManagerType;\n  initiative: IInitiativeData;\n  statuses?: IInitiativeStatusData[];\n  /** A set of ids of ideas/initiatives that are currently selected */\n  selection: Set<string>;\n  activeFilterMenu: TFilterMenu;\n  className?: string;\n  onClickCheckbox: (event) => void;\n  onClickTitle: (event) => void;\n  nothingHappens: (event) => void;\n}\n\ninterface Props extends InputProps, DataProps {\n  connectDragSource: any;\n}\n\nclass InitiativeRow extends React.PureComponent<\n  Props & InjectedIntlProps & InjectedLocalized\n> {\n  onUpdateInitiativePhases = (selectedPhases) => {\n    updateInitiative(this.props.initiative.id, {\n      phase_ids: selectedPhases,\n    });\n  };\n\n  onUpdateInitiativeTopics = (selectedTopics) => {\n    updateInitiative(this.props.initiative.id, {\n      topic_ids: selectedTopics,\n    });\n  };\n\n  onUpdateInitiativeStatus = (statusId) => {\n    const { initiative } = this.props;\n    const initiativeId = initiative.id;\n\n    eventEmitter.emit<StatusChangeModalOpen>(events.statusChangeModalOpen, {\n      initiativeId,\n      newStatusId: statusId,\n    });\n\n    trackEventByName(tracks.initiativeStatusChange, {\n      location: 'Initiative overview',\n      method: 'Clicked on the squares representing the statuses',\n      initiative: initiativeId,\n    });\n  };\n\n  onUpdateInitiativeAssignee = (assigneeId) => {\n    const { initiative } = this.props;\n    const initiativeId = initiative.id;\n\n    updateInitiative(initiativeId, {\n      assignee_id: assigneeId || null,\n    });\n\n    trackEventByName(tracks.changeInitiativeAssignment, {\n      location: 'Initiative Manager',\n      method: 'Changed through the dropdown in the table overview',\n      initiative: initiativeId,\n    });\n  };\n\n  renderTimingCell = () => {\n    const { initiative, tenant, statuses } = this.props;\n\n    const selectedStatus: string | undefined = get(\n      initiative,\n      'relationships.initiative_status.data.id'\n    );\n    const selectedStatusObject =\n      statuses && statuses.find((status) => status.id === selectedStatus);\n\n    if (\n      selectedStatusObject &&\n      !isNilOrError(tenant) &&\n      tenant.attributes.settings.initiatives\n    ) {\n      if (selectedStatusObject.attributes.code === 'proposed') {\n        return getDaysRemainingUntil(initiative.attributes.expires_at);\n      } else {\n        return (\n          <StatusLabel\n            text={<T value={selectedStatusObject.attributes.title_multiloc} />}\n            backgroundColor={selectedStatusObject.attributes.color}\n          />\n        );\n      }\n    }\n    return null;\n  };\n\n  render() {\n    const {\n      initiative,\n      selection,\n      connectDragSource,\n      activeFilterMenu,\n      statuses,\n      className,\n      onClickCheckbox,\n      onClickTitle,\n      nothingHappens,\n      allowedTransitions,\n    } = this.props;\n\n    const selectedStatus: string | undefined = get(\n      initiative,\n      'relationships.initiative_status.data.id'\n    );\n    const selectedTopics = initiative.relationships.topics.data.map(\n      (p) => p.id\n    );\n    const attrs = initiative.attributes;\n    const active = selection.has(initiative.id);\n    const assigneeId = get(initiative, 'relationships.assignee.data.id');\n\n    return (\n      <>\n        <WrappedRow\n          className={`e2e-initiative-row ${className}`}\n          as={StyledRow}\n          active={active}\n          undraggable={activeFilterMenu === 'statuses'}\n          ref={(instance) => {\n            instance &&\n              activeFilterMenu !== 'statuses' &&\n              // eslint-disable-next-line react/no-find-dom-node\n              connectDragSource(findDOMNode(instance));\n          }}\n        >\n          <Table.Cell collapsing={true}>\n            <Checkbox\n              checked={!!active}\n              onChange={onClickCheckbox}\n              size=\"21px\"\n            />\n          </Table.Cell>\n          <Table.Cell>\n            <TitleLink\n              className=\"e2e-initiative-manager-initiative-title\"\n              onClick={onClickTitle}\n            >\n              <T value={attrs.title_multiloc} />\n            </TitleLink>\n          </Table.Cell>\n          <Table.Cell onClick={nothingHappens} singleLine>\n            <AssigneeSelect\n              onAssigneeChange={this.onUpdateInitiativeAssignee}\n              assigneeId={assigneeId}\n            />\n          </Table.Cell>\n          <Table.Cell>{this.renderTimingCell()}</Table.Cell>\n          <Table.Cell singleLine>\n            <Icon name=\"thumbs up\" />\n            {attrs.upvotes_count}\n          </Table.Cell>\n          <Table.Cell>{attrs.comments_count}</Table.Cell>\n        </WrappedRow>\n        <SubRow\n          {...{\n            active,\n            className,\n            activeFilterMenu,\n            selectedTopics,\n            statuses,\n            selectedStatus,\n            allowedTransitions,\n          }}\n          onUpdatePhases={this.onUpdateInitiativePhases}\n          onUpdateTopics={this.onUpdateInitiativeTopics}\n          onUpdateStatus={this.onUpdateInitiativeStatus}\n          postType=\"initiative\"\n        />\n      </>\n    );\n  }\n}\n\nconst initiativeSource = {\n  beginDrag(props: Props) {\n    return {\n      type: 'initiative',\n      id: props.initiative.id,\n    };\n  },\n  endDrag(props: Props & InjectedIntlProps & InjectedLocalized, monitor) {\n    const item = monitor.getItem();\n    const dropResult = monitor.getDropResult();\n    const { selection } = props;\n\n    if (dropResult && dropResult.type) {\n      const observables = selection.has(item.id)\n        ? [...selection].map((id) => initiativeByIdStream(id).observable)\n        : [initiativeByIdStream(item.id).observable];\n\n      if (dropResult.type === 'topic') {\n        combineLatest(observables)\n          .pipe(take(1))\n          .subscribe((initiatives) => {\n            initiatives.map((initiative) => {\n              const currentTopics = initiative.data.relationships.topics.data.map(\n                (d) => d.id\n              );\n              const newTopics = uniq(currentTopics.concat(dropResult.id));\n              updateInitiative(initiative.data.id, {\n                topic_ids: newTopics,\n              });\n            });\n          });\n      }\n    }\n  },\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  };\n}\n\nconst InitiativesRowWithHocs = injectIntl(\n  localize(DragSource('IDEA', initiativeSource, collect)(InitiativeRow))\n);\n\nconst Data = adopt<DataProps, InputProps>({\n  tenant: <GetAppConfiguration />,\n  allowedTransitions: ({ initiative, render }) => (\n    <GetInitiativeAllowedTransitions id={initiative.id}>\n      {render}\n    </GetInitiativeAllowedTransitions>\n  ),\n});\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <InitiativesRowWithHocs {...inputProps} {...dataProps} />}\n  </Data>\n);\n","import React from 'react';\nimport { BehaviorSubject, Subscription, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, filter } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport {\n  IInitiativeAllowedTransitions,\n  initiativeAllowedTransitionsStream,\n} from 'services/initiatives';\nimport { isString } from 'lodash-es';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  id: string | null;\n}\n\ntype children = (\n  renderProps: GetInitiativeAllowedTransitionsChildProps\n) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  initiativeAllowedTransitions:\n    | IInitiativeAllowedTransitions\n    | undefined\n    | null;\n}\n\nexport type GetInitiativeAllowedTransitionsChildProps =\n  | IInitiativeAllowedTransitions\n  | undefined\n  | null;\n\nexport default class GetInitiativeAllowedTransitions extends React.Component<\n  Props,\n  State\n> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      initiativeAllowedTransitions: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { id } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ id });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          filter(({ id }) => isString(id)),\n          switchMap(({ id }: { id: string }) => {\n            if (isString(id)) {\n              return initiativeAllowedTransitionsStream(id).observable;\n            }\n\n            return of(null);\n          })\n        )\n        .subscribe((initiativeAllowedTransitions) =>\n          this.setState({\n            initiativeAllowedTransitions: !isNilOrError(\n              initiativeAllowedTransitions\n            )\n              ? initiativeAllowedTransitions\n              : null,\n          })\n        ),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { id } = this.props;\n    this.inputProps$.next({ id });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { initiativeAllowedTransitions } = this.state;\n    return (children as children)(initiativeAllowedTransitions);\n  }\n}\n","import React from 'react';\nimport { Popup } from 'semantic-ui-react';\nimport { IInitiativeAllowedTransitions } from 'services/initiatives';\nimport { IInitiativeStatusData } from 'services/initiativeStatuses';\nimport T from 'components/T';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst ColorIndicator = styled.div<{ active: boolean; disabled: boolean }>`\n  width: 1rem;\n  height: 1rem;\n  border: 1px solid ${(props) => props.color};\n  border-radius: ${(props) => props.theme.borderRadius};\n  margin-right: 0.5rem;\n  cursor: pointer;\n  margin: 0 0.25rem;\n  ${(props) => (props.disabled ? 'cursor: not-allowed;' : '')}\n  ${(props) => (props.active ? `background-color: ${props.color};` : '')}\n`;\n\ntype Props = {\n  selectedStatus?: string;\n  statuses: IInitiativeStatusData[];\n  onUpdateStatus: (statusId: string) => void;\n  allowedTransitions: IInitiativeAllowedTransitions | null;\n};\n\nclass InitiativesStatusSelector extends React.PureComponent<Props> {\n  isActive = (statusId) => {\n    return this.props.selectedStatus === statusId;\n  };\n\n  isAllowed = (statusId) => {\n    return (\n      this.props.allowedTransitions &&\n      this.props.allowedTransitions[statusId] !== undefined\n    );\n  };\n\n  handleStatusClick = (statusId) => (event) => {\n    event.stopPropagation();\n    if (this.isAllowed(statusId)) {\n      this.props.onUpdateStatus(statusId);\n    }\n  };\n\n  render() {\n    const { statuses } = this.props;\n    return (\n      <Container>\n        {statuses.map((status) => (\n          <Popup\n            key={status.id}\n            basic\n            trigger={\n              <ColorIndicator\n                disabled={!this.isAllowed(status.id)}\n                color={status.attributes.color}\n                active={this.isActive(status.id)}\n                onClick={this.handleStatusClick(status.id)}\n              />\n            }\n            content={<T value={status.attributes.title_multiloc} />}\n            position=\"top center\"\n          />\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default InitiativesStatusSelector;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\n\n// Little hack needed to apply react DnD to the custom component\nexport default class WrappedRow extends React.Component<any> {\n  render() {\n    return <Table.Row {...this.props} />;\n  }\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { IRelationship, Multiloc, ImageSizes, ILinks } from 'typings';\nimport { first } from 'rxjs/operators';\nimport { get } from 'lodash-es';\n\nexport type InitiativePublicationStatus =\n  | 'draft'\n  | 'published'\n  | 'archived'\n  | 'spam';\n\nexport type IInitiativeAction =\n  | 'posting_initiative'\n  | 'commenting_initiative'\n  | 'voting_initiative'\n  | 'comment_voting_initiative';\n\nexport interface IInitiativeData {\n  id: string;\n  type: 'initiatives';\n  attributes: {\n    title_multiloc: Multiloc;\n    body_multiloc: Multiloc;\n    author_name: string;\n    slug: string;\n    publication_status: InitiativePublicationStatus;\n    upvotes_count: number;\n    comments_count: number;\n    location_point_geojson: GeoJSON.Point;\n    location_description: string;\n    budget: number | null;\n    created_at: string;\n    updated_at: string;\n    published_at: string;\n    header_bg: ImageSizes;\n    expires_at: string;\n  };\n  relationships: {\n    topics: {\n      data: IRelationship[];\n    };\n    initiative_images: {\n      data: IRelationship[];\n    };\n    author: {\n      data: IRelationship | null;\n    };\n    assignee: {\n      data: IRelationship | null;\n    };\n    initiative_status?: {\n      data: IRelationship | null;\n    };\n    user_vote?: {\n      data: IRelationship | null;\n    };\n  };\n}\n\nexport interface IInitiative {\n  data: IInitiativeData;\n}\n\nexport interface IInitiatives {\n  data: IInitiativeData[];\n  links: ILinks;\n}\n\nexport interface IInitiativeAdd {\n  author_id?: string | null;\n  assignee_id?: string | null;\n  initiative_status_id?: string | null;\n  publication_status?: InitiativePublicationStatus;\n  title_multiloc?: Multiloc;\n  body_multiloc?: Multiloc;\n  topic_ids?: string[] | null;\n  area_ids?: string[] | null;\n  phase_ids?: string[] | null;\n  location_point_geojson?: GeoJSON.Point | null;\n  location_description?: string | null;\n}\nexport interface IInitiativesCount {\n  count: number;\n}\n\nexport interface IInitiativesFilterCounts {\n  initiative_status_id: {\n    [key: string]: number;\n  };\n  area_id: {\n    [key: string]: number;\n  };\n  topic_id: {\n    [key: string]: number;\n  };\n  total: number;\n}\n\nexport interface IGeotaggedInitiativeData {\n  id: string;\n  type: string;\n  attributes: {\n    title_multiloc: Multiloc;\n    location_point_geojson: GeoJSON.Point;\n    location_description: string;\n  };\n}\n\nexport interface IInitiativeLinks {\n  self: string;\n  first: string;\n  prev: string;\n  next: string;\n  last: string;\n}\n\nexport interface InitiativeActivity {\n  id: string;\n  type: 'activity';\n  attributes: {\n    action: string;\n    acted_at: string;\n    change: string[] | { [key: string]: string }[] | null;\n  };\n  relationships: {\n    user: { data: IRelationship };\n  };\n}\n\nexport type InitiativeDisabledReason =\n  | 'not_permitted'\n  | 'not_verified'\n  | 'not_signed_in';\n\nexport function initiativeByIdStream(initiativeId: string) {\n  return streams.get<IInitiative>({\n    apiEndpoint: `${API_PATH}/initiatives/${initiativeId}`,\n  });\n}\n\nexport function initiativeBySlugStream(initiativeSlug: string) {\n  return streams.get<IInitiative>({\n    apiEndpoint: `${API_PATH}/initiatives/by_slug/${initiativeSlug}`,\n  });\n}\n\nexport function initiativesStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IInitiatives>({\n    apiEndpoint: `${API_PATH}/initiatives`,\n    ...streamParams,\n  });\n}\n\nexport function initiativesFilterCountsStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IInitiativesFilterCounts>({\n    apiEndpoint: `${API_PATH}/initiatives/filter_counts`,\n    ...streamParams,\n    cacheStream: false,\n  });\n}\n\nexport function initiativesMarkersStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<{\n    data: IGeotaggedInitiativeData[];\n    links: IInitiativeLinks;\n  }>({\n    apiEndpoint: `${API_PATH}/initiatives/as_markers`,\n    ...streamParams,\n    cacheStream: false,\n  });\n}\n\nexport async function addInitiative(object: IInitiativeAdd) {\n  const response = await streams.add<IInitiative>(`${API_PATH}/initiatives`, {\n    initiative: object,\n  });\n  return response;\n}\n\nexport async function updateInitiative(\n  initiativeId: string,\n  object: Partial<IInitiativeAdd>\n) {\n  const response = await streams.update<IInitiative>(\n    `${API_PATH}/initiatives/${initiativeId}`,\n    initiativeId,\n    { initiative: object }\n  );\n  streams.fetchAllWith({\n    apiEndpoint: [\n      `${API_PATH}/stats/initiatives_count`,\n      `${API_PATH}/initiatives`,\n      `${API_PATH}/initiatives/${initiativeId}/activities`,\n    ],\n  });\n  return response;\n}\n\nexport async function deleteInitiative(initiativeId: string) {\n  const [initiative, response] = await Promise.all([\n    initiativeByIdStream(initiativeId).observable.pipe(first()).toPromise(),\n    streams.delete(`${API_PATH}/initiatives/${initiativeId}`, initiativeId),\n  ]);\n\n  const authorId = get(initiative, 'relationships.author.data.id', false);\n\n  streams.fetchAllWith({\n    apiEndpoint: authorId\n      ? [`${API_PATH}/users/${authorId}/initiatives_count`]\n      : [],\n  });\n\n  return response;\n}\n\nexport interface IInitiativeAllowedTransitions {\n  [key: string]: {\n    feedback_needed: boolean;\n  };\n}\n\nexport function initiativeAllowedTransitionsStream(initiativeId: string) {\n  return streams.get<IInitiativeAllowedTransitions>({\n    apiEndpoint: `${API_PATH}/initiatives/${initiativeId}/allowed_transitions`,\n  });\n}\n\nexport interface IInitiativesFilterCounts {\n  initiative_status_id: {\n    [key: string]: number;\n  };\n  area_id: {\n    [key: string]: number;\n  };\n  topic_id: {\n    [key: string]: number;\n  };\n  total: number;\n}\n\nexport function initiativeActivities(initiativeId: string) {\n  return streams.get<{ data: InitiativeActivity[] }>({\n    apiEndpoint: `${API_PATH}/initiatives/${initiativeId}/activities`,\n  });\n}\n\nexport type IInitiativeActionDescriptors = {\n  [key in IInitiativeAction]: {\n    enabled: boolean;\n    disabled_reason: InitiativeDisabledReason | null;\n  };\n};\n\nexport function getInitiativeActionDescriptors() {\n  return streams.get<IInitiativeActionDescriptors>({\n    apiEndpoint: `${API_PATH}/action_descriptors/initiatives`,\n  });\n}\n","export interface StatusChangeModalOpen {\n  initiativeId: string;\n  newStatusId: string;\n}\n\nenum ModalEvents {\n  statusChangeModalOpen = 'initiatiateStatusChange',\n}\n\nexport default ModalEvents;\n","import React from 'react';\n\nimport PhasesSelector from './PhasesSelector';\nimport TopicsSelector from './TopicsSelector';\nimport ProjectSelector from './ProjectSelector';\nimport IdeasStatusSelector from './IdeasStatusSelector';\nimport InitiativesStatusSelector from './InitiativesStatusSelector';\n\nimport { Table } from 'semantic-ui-react';\nimport { FilterCell } from './Row';\nimport { TFilterMenu } from '../..';\nimport { IPhaseData } from 'services/phases';\nimport { IIdeaStatusData } from 'services/ideaStatuses';\nimport { IInitiativeStatusData } from 'services/initiativeStatuses';\nimport { GetInitiativeAllowedTransitionsChildProps } from 'resources/GetInitiativeAllowedTransitions';\n\ninterface Props {\n  active: boolean;\n  className?: string;\n  activeFilterMenu: TFilterMenu;\n  selectedPhases?: string[];\n  phases?: IPhaseData[];\n  selectedTopics?: string[];\n  projectId?: string;\n  statuses?: IIdeaStatusData[] | IInitiativeStatusData[] | undefined;\n  selectedStatus: string | undefined;\n  onUpdatePhases: (id: string[]) => void;\n  onUpdateTopics: (id: string[]) => void;\n  onUpdateStatus: (id: string) => void;\n  allowedTransitions: GetInitiativeAllowedTransitionsChildProps;\n  /* set allowedTransitions to null to allow all */\n  postType: 'idea' | 'initiative';\n}\n\nexport default ({\n  active,\n  className,\n  activeFilterMenu,\n  selectedPhases,\n  phases,\n  selectedTopics,\n  projectId,\n  statuses,\n  selectedStatus,\n  onUpdatePhases,\n  onUpdateTopics,\n  onUpdateStatus,\n  allowedTransitions,\n  postType,\n}: Props) => {\n  return (\n    <Table.Row active={active} className={className}>\n      <Table.Cell as={FilterCell} collapsing={true} />\n      <Table.Cell colSpan={6} as={FilterCell}>\n        {activeFilterMenu === 'phases' && phases && (\n          <PhasesSelector\n            selectedPhases={selectedPhases || []}\n            phases={phases}\n            onUpdatePhases={onUpdatePhases}\n          />\n        )}\n        {activeFilterMenu === 'topics' && (\n          <TopicsSelector\n            selectedTopics={selectedTopics || []}\n            onUpdateTopics={onUpdateTopics}\n          />\n        )}\n        {activeFilterMenu === 'projects' && projectId && (\n          <ProjectSelector projectId={projectId} />\n        )}\n        {activeFilterMenu === 'statuses' &&\n          postType === 'initiative' &&\n          statuses &&\n          allowedTransitions !== undefined && (\n            <InitiativesStatusSelector\n              statuses={statuses as IInitiativeStatusData[]}\n              selectedStatus={selectedStatus}\n              onUpdateStatus={onUpdateStatus}\n              allowedTransitions={allowedTransitions}\n            />\n          )}\n        {activeFilterMenu === 'statuses' && postType === 'idea' && statuses && (\n          <IdeasStatusSelector\n            statuses={statuses as IIdeaStatusData[]}\n            selectedStatus={selectedStatus}\n            onUpdateStatus={onUpdateStatus}\n          />\n        )}\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n","import React from 'react';\nimport { Popup } from 'semantic-ui-react';\nimport { IIdeaStatusData } from 'services/ideaStatuses';\nimport T from 'components/T';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst ColorIndicator = styled.div<{ active: boolean }>`\n  width: 1rem;\n  height: 1rem;\n  border: 1px solid ${(props) => props.color};\n  border-radius: ${(props) => props.theme.borderRadius};\n  margin-right: 0.5rem;\n  cursor: pointer;\n  margin: 0 0.25rem;\n  ${(props) => (props.active ? `background-color: ${props.color};` : '')}\n`;\n\ntype Props = {\n  selectedStatus?: string;\n  statuses: IIdeaStatusData[];\n  onUpdateStatus: (statusId: string) => void;\n};\n\nclass IdeasStatusSelector extends React.PureComponent<Props> {\n  isActive = (statusId) => {\n    return this.props.selectedStatus === statusId;\n  };\n\n  handleStatusClick = (statusId) => (event) => {\n    event.stopPropagation();\n    this.props.onUpdateStatus(statusId);\n  };\n\n  render() {\n    const { statuses } = this.props;\n    return (\n      <Container>\n        {statuses.map((status) => (\n          <Popup\n            key={status.id}\n            basic\n            trigger={\n              <ColorIndicator\n                color={status.attributes.color}\n                active={this.isActive(status.id)}\n                onClick={this.handleStatusClick(status.id)}\n              />\n            }\n            content={<T value={status.attributes.title_multiloc} />}\n            position=\"top center\"\n          />\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default IdeasStatusSelector;\n","import React from 'react';\nimport { xor } from 'lodash-es';\nimport { IPhaseData, canContainIdeas } from 'services/phases';\nimport { Label, Popup } from 'semantic-ui-react';\nimport T from 'components/T';\n\ntype Props = {\n  selectedPhases: string[];\n  phases: IPhaseData[];\n  onUpdatePhases: (phasesIds: string[]) => void;\n};\n\nclass PhasesSelector extends React.PureComponent<Props> {\n  isActive = (phaseId) => {\n    return this.props.selectedPhases.indexOf(phaseId) >= 0;\n  };\n\n  handlePhaseClick = (phase: IPhaseData) => (event) => {\n    event.stopPropagation();\n    if (this.isEnabled(phase)) {\n      const newSelectedPhases = xor(this.props.selectedPhases, [phase.id]);\n      this.props.onUpdatePhases(newSelectedPhases);\n    }\n  };\n\n  isEnabled = (phase: IPhaseData) => {\n    return canContainIdeas(phase);\n  };\n\n  render() {\n    const { phases } = this.props;\n    return (\n      <div>\n        {phases.map((phase, index) => (\n          <Popup\n            basic\n            key={phase.id}\n            trigger={\n              <Label\n                as={this.isEnabled(phase) ? 'a' : undefined}\n                color={this.isActive(phase.id) ? 'teal' : undefined}\n                active={this.isActive(phase.id)}\n                onClick={this.handlePhaseClick(phase)}\n                circular\n                basic\n              >\n                {index + 1}\n              </Label>\n            }\n            content={<T value={phase.attributes.title_multiloc} />}\n            position=\"top center\"\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default PhasesSelector;\n"],"sourceRoot":""}