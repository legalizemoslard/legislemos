{"version":3,"sources":["webpack:///./app/resources/GetInitiativesCount.tsx","webpack:///./app/resources/GetIdeasCount.tsx","webpack:///./app/services/globalState.ts","webpack:///./app/services/stats.ts","webpack:///./app/components/UI/CountBadge.tsx"],"names":["GetInitiativesCount","props","state","inputPropsQueryParameters","author","authorId","search","topics","areas","initiative_status","initiativeStatusId","bounding_box","boundingBox","assignee","feedback_needed","feedbackNeeded","queryParameters","search$","next","queryParameters$","initiativeStatus","undefined","searchValue","count","querying","getQueryParameters","BehaviorSubject","Subject","subscriptions","this","queryParametersInput$","pipe","distinctUntilChanged","x","y","queryParametersSearch$","map","merge","tap","setState","debounceTime","startWith","isString","isEmpty","queryParametersOutput$","combineLatest","switchMap","initiativesCount","observable","subscribe","isNilOrError","prevProps","_prevState","children","prevPropsWithoutChildren","nextPropsWithoutChildren","isEqual","forEach","subscription","unsubscribe","onChangeSearchTerm","handleSearchOnChange","onChangeTopics","handleTopicsOnChange","onChangeAreas","handleAreasOnchange","onChangeInitiativeStatus","handleInitiativeStatusOnChange","onChangeAssignee","handleAssigneeOnChange","onChangeFeedbackFilter","handleFeedbackFilterOnChange","React","Component","GetIdeasCount","projects","projectIds","phase","phaseId","idea_status","ideaStatusId","project_publication_status","projectPublicationStatus","ideaStatus","ideasCount","onChangeProject","handleProjectOnChange","onChangePhase","handlePhaseOnChange","onChangeIdeaStatus","handleIdeaStatusOnChange","onChangeProjectPublicationStatus","handleProjectPublicationStatusOnChange","globalState","stream","observer","Observable","scan","oldState","stateInput","propertyName","updatedStateProperties","filter","isObject","publishReplay","refCount","initialState","filteredState","newFilteredState","set","newState","setTimeout","get","has","first","toPromise","streamParams","streams","apiEndpoint","userId","API_PATH","ideasByStatusXlsxEndpoint","ideasByTimeXlsxEndpoint","ideasByTimeCumulativeXlsxEndpoint","ideasByTopicXlsxEndpoint","ideasByProjectXlsxEndpoint","userXlsxEndpoint","usersByTimeXlsxEndpoint","usersByTimeCumulativeXlsxEndpoint","activeUsersByTimeXlsxEndpoint","activeUsersByTimeCumulativeXlsxEndpoint","commentsByTimeCumulativeXlsxEndpoint","commentsByTopicXlsxEndpoint","commentsByProjectXlsxEndpoint","votesByTimeXlsxEndpoint","votesByTopicXlsxEndpoint","votesByProjectXlsxEndpoint","Container","styled","span","fontSizes","xs","bgColor","colors","clRed","memo"],"mappings":"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","file":"9.9518bf3273973dba6b3d.chunk.js","sourcesContent":["import React from 'react';\nimport { isString, isEmpty, isEqual } from 'lodash-es';\nimport {\n  Subscription,\n  Subject,\n  BehaviorSubject,\n  combineLatest,\n  merge,\n} from 'rxjs';\nimport {\n  map,\n  startWith,\n  distinctUntilChanged,\n  tap,\n  debounceTime,\n  switchMap,\n} from 'rxjs/operators';\nimport { initiativesCount } from 'services/stats';\nimport shallowCompare from 'utils/shallowCompare';\nimport { isNilOrError } from 'utils/helperUtils';\n\nexport interface InputProps {\n  authorId?: string;\n  search?: string;\n  topics?: string[];\n  areas?: string[];\n  initiativeStatusId?: string;\n  boundingBox?: number[];\n  assignee?: string;\n  feedbackNeeded?: boolean;\n}\n\ninterface IQueryParameters {\n  author: string | undefined;\n  search: string | undefined;\n  topics: string[] | undefined;\n  areas: string[] | undefined;\n  initiative_status: string | undefined;\n  bounding_box: number[] | undefined;\n  assignee: string | undefined;\n  feedback_needed: boolean | undefined;\n}\n\ntype children = (\n  renderProps: GetInitiativesCountChildProps\n) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: (obj: GetInitiativesCountChildProps) => JSX.Element | null;\n}\n\nexport type GetInitiativesCountChildProps = State & {\n  onChangeSearchTerm: (search: string) => void;\n  onChangeTopics: (topics: string[]) => void;\n  onChangeAreas: (areas: string[]) => void;\n  onChangeInitiativeStatus: (initiativeStatus: string) => void;\n  onChangeAssignee: (assignee: string | undefined) => void;\n  onChangeFeedbackFilter: (feedbackNeeded: boolean) => void;\n};\n\ninterface State {\n  queryParameters: IQueryParameters;\n  searchValue: string | undefined;\n  count: number | undefined | null | Error;\n  querying: boolean;\n}\n\nexport default class GetInitiativesCount extends React.Component<Props, State> {\n  queryParameters$: BehaviorSubject<IQueryParameters>;\n  search$: Subject<string | undefined>;\n  subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      // defaults\n      queryParameters: {\n        author: undefined,\n        search: undefined,\n        topics: undefined,\n        areas: undefined,\n        initiative_status: undefined,\n        bounding_box: undefined,\n        assignee: undefined,\n        feedback_needed: undefined,\n      },\n      searchValue: undefined,\n      count: undefined,\n      querying: true,\n    };\n    const queryParameters = this.getQueryParameters(this.state, props);\n    this.queryParameters$ = new BehaviorSubject(queryParameters);\n    this.search$ = new Subject();\n    this.subscriptions = [];\n  }\n\n  componentDidMount() {\n    const queryParameters = this.getQueryParameters(this.state, this.props);\n    const queryParametersInput$ = this.queryParameters$.pipe(\n      distinctUntilChanged((x, y) => shallowCompare(x, y))\n    );\n    const queryParametersSearch$ = queryParametersInput$.pipe(\n      map((queryParameters) => queryParameters.search),\n      distinctUntilChanged()\n    );\n    const search$ = merge(\n      this.search$.pipe(\n        tap((searchValue) => this.setState({ searchValue })),\n        debounceTime(500)\n      ),\n      queryParametersSearch$.pipe(\n        tap((searchValue) => this.setState({ searchValue }))\n      )\n    ).pipe(\n      startWith(queryParameters.search),\n      map((searchValue) =>\n        isString(searchValue) && !isEmpty(searchValue) ? searchValue : undefined\n      ),\n      distinctUntilChanged()\n    );\n\n    const queryParametersOutput$ = combineLatest(\n      queryParametersInput$,\n      search$\n    ).pipe(\n      map(([queryParameters, search]) => ({ ...queryParameters, search }))\n    );\n\n    this.subscriptions = [\n      queryParametersOutput$\n        .pipe(\n          switchMap((queryParameters) => {\n            return initiativesCount({\n              queryParameters,\n            }).observable.pipe(\n              map((initiativesCount) => ({ queryParameters, initiativesCount }))\n            );\n          })\n        )\n        .subscribe(({ initiativesCount, queryParameters }) => {\n          this.setState({\n            queryParameters,\n            count: isNilOrError(initiativesCount)\n              ? initiativesCount\n              : initiativesCount.count,\n            querying: false,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props, _prevState: State) {\n    const { children: _prevChildren, ...prevPropsWithoutChildren } = prevProps;\n    const { children: _nextChildren, ...nextPropsWithoutChildren } = this.props;\n\n    if (!isEqual(prevPropsWithoutChildren, nextPropsWithoutChildren)) {\n      const queryParameters = this.getQueryParameters(this.state, this.props);\n      this.queryParameters$.next(queryParameters);\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  getQueryParameters = (state: State, props: Props) => {\n    const inputPropsQueryParameters: IQueryParameters = {\n      author: props.authorId,\n      search: props.search,\n      topics: props.topics,\n      areas: props.areas,\n      initiative_status: props.initiativeStatusId,\n      bounding_box: props.boundingBox,\n      assignee: props.assignee,\n      feedback_needed: props.feedbackNeeded,\n    };\n\n    return {\n      ...state.queryParameters,\n      ...inputPropsQueryParameters,\n    };\n  };\n\n  handleSearchOnChange = (search: string) => {\n    this.search$.next(search);\n  };\n\n  handleTopicsOnChange = (topics: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      topics,\n    });\n  };\n\n  handleAreasOnchange = (areas: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      areas,\n    });\n  };\n\n  handleInitiativeStatusOnChange = (initiativeStatus: string) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      initiative_status: initiativeStatus,\n    });\n  };\n\n  handleAssigneeOnChange = (assignee: string | undefined) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      assignee,\n    });\n  };\n\n  handleFeedbackFilterOnChange = (feedbackNeeded: boolean) => {\n    if (feedbackNeeded === true) {\n      this.queryParameters$.next({\n        ...this.state.queryParameters,\n        feedback_needed: true,\n      });\n    } else if (feedbackNeeded === false) {\n      this.queryParameters$.next({\n        ...this.state.queryParameters,\n        feedback_needed: undefined,\n      });\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    return (children as children)({\n      ...this.state,\n      onChangeSearchTerm: this.handleSearchOnChange,\n      onChangeTopics: this.handleTopicsOnChange,\n      onChangeAreas: this.handleAreasOnchange,\n      onChangeInitiativeStatus: this.handleInitiativeStatusOnChange,\n      onChangeAssignee: this.handleAssigneeOnChange,\n      onChangeFeedbackFilter: this.handleFeedbackFilterOnChange,\n    });\n  }\n}\n","import React from 'react';\nimport { isString, isEmpty, isEqual } from 'lodash-es';\nimport {\n  Subscription,\n  Subject,\n  BehaviorSubject,\n  combineLatest,\n  merge,\n} from 'rxjs';\nimport {\n  map,\n  startWith,\n  distinctUntilChanged,\n  tap,\n  debounceTime,\n  switchMap,\n} from 'rxjs/operators';\nimport { ideasCount } from 'services/stats';\nimport { PublicationStatus as ProjectPublicationStatus } from 'services/projects';\nimport shallowCompare from 'utils/shallowCompare';\nimport { isNilOrError } from 'utils/helperUtils';\n\nexport interface InputProps {\n  projectIds?: string[];\n  phaseId?: string;\n  authorId?: string;\n  search?: string;\n  topics?: string[];\n  areas?: string[];\n  ideaStatusId?: string;\n  projectPublicationStatus?: ProjectPublicationStatus;\n  boundingBox?: number[];\n  assignee?: string;\n  feedbackNeeded?: boolean;\n}\n\ninterface IQueryParameters {\n  projects: string[] | undefined;\n  phase: string | undefined;\n  author: string | undefined;\n  search: string | undefined;\n  topics: string[] | undefined;\n  areas: string[] | undefined;\n  idea_status: string | undefined;\n  project_publication_status: ProjectPublicationStatus | undefined;\n  bounding_box: number[] | undefined;\n  assignee: string | undefined;\n  feedback_needed: boolean | undefined;\n}\n\ntype children = (renderProps: GetIdeasCountChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: (obj: GetIdeasCountChildProps) => JSX.Element | null;\n}\n\nexport type GetIdeasCountChildProps = State & {\n  onChangeProject: (projectIds: string[]) => void;\n  onChangePhase: (phaseId: string) => void;\n  onChangeSearchTerm: (search: string) => void;\n  onChangeTopics: (topics: string[]) => void;\n  onChangeAreas: (areas: string[]) => void;\n  onChangeIdeaStatus: (ideaStatus: string) => void;\n  onChangeProjectPublicationStatus: (\n    ProjectPublicationStatus: ProjectPublicationStatus\n  ) => void;\n  onChangeAssignee: (assignee: string | undefined) => void;\n  onChangeFeedbackFilter: (feedbackNeeded: boolean) => void;\n};\n\ninterface State {\n  queryParameters: IQueryParameters;\n  searchValue: string | undefined;\n  count: number | undefined | null | Error;\n  querying: boolean;\n}\n\nexport default class GetIdeasCount extends React.Component<Props, State> {\n  queryParameters$: BehaviorSubject<IQueryParameters>;\n  search$: Subject<string | undefined>;\n  subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      // defaults\n      queryParameters: {\n        projects: undefined,\n        phase: undefined,\n        author: undefined,\n        search: undefined,\n        topics: undefined,\n        areas: undefined,\n        idea_status: undefined,\n        project_publication_status: undefined,\n        bounding_box: undefined,\n        assignee: undefined,\n        feedback_needed: undefined,\n      },\n      searchValue: undefined,\n      count: undefined,\n      querying: true,\n    };\n    const queryParameters = this.getQueryParameters(this.state, props);\n    this.queryParameters$ = new BehaviorSubject(queryParameters);\n    this.search$ = new Subject();\n    this.subscriptions = [];\n  }\n\n  componentDidMount() {\n    const queryParameters = this.getQueryParameters(this.state, this.props);\n    const queryParametersInput$ = this.queryParameters$.pipe(\n      distinctUntilChanged((x, y) => shallowCompare(x, y))\n    );\n    const queryParametersSearch$ = queryParametersInput$.pipe(\n      map((queryParameters) => queryParameters.search),\n      distinctUntilChanged()\n    );\n    const search$ = merge(\n      this.search$.pipe(\n        tap((searchValue) => this.setState({ searchValue })),\n        debounceTime(500)\n      ),\n      queryParametersSearch$.pipe(\n        tap((searchValue) => this.setState({ searchValue }))\n      )\n    ).pipe(\n      startWith(queryParameters.search),\n      map((searchValue) =>\n        isString(searchValue) && !isEmpty(searchValue) ? searchValue : undefined\n      ),\n      distinctUntilChanged()\n    );\n\n    const queryParametersOutput$ = combineLatest(\n      queryParametersInput$,\n      search$\n    ).pipe(\n      map(([queryParameters, search]) => ({ ...queryParameters, search }))\n    );\n\n    this.subscriptions = [\n      queryParametersOutput$\n        .pipe(\n          switchMap((queryParameters) => {\n            return ideasCount({\n              queryParameters,\n            }).observable.pipe(\n              map((ideasCount) => ({ queryParameters, ideasCount }))\n            );\n          })\n        )\n        .subscribe(({ ideasCount, queryParameters }) => {\n          this.setState({\n            queryParameters,\n            count: isNilOrError(ideasCount) ? ideasCount : ideasCount.count,\n            querying: false,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props, _prevState: State) {\n    const { children: _prevChildren, ...prevPropsWithoutChildren } = prevProps;\n    const { children: _nextChildren, ...nextPropsWithoutChildren } = this.props;\n\n    if (!isEqual(prevPropsWithoutChildren, nextPropsWithoutChildren)) {\n      const queryParameters = this.getQueryParameters(this.state, this.props);\n      this.queryParameters$.next(queryParameters);\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  getQueryParameters = (state: State, props: Props) => {\n    const inputPropsQueryParameters: IQueryParameters = {\n      projects: props.projectIds,\n      phase: props.phaseId,\n      author: props.authorId,\n      search: props.search,\n      topics: props.topics,\n      areas: props.areas,\n      idea_status: props.ideaStatusId,\n      project_publication_status: props.projectPublicationStatus,\n      bounding_box: props.boundingBox,\n      assignee: props.assignee,\n      feedback_needed: props.feedbackNeeded,\n    };\n\n    return {\n      ...state.queryParameters,\n      ...inputPropsQueryParameters,\n    };\n  };\n\n  handleProjectOnChange = (projectIds: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      projects: projectIds,\n    });\n  };\n\n  handlePhaseOnChange = (phaseId: string) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      phase: phaseId,\n    });\n  };\n\n  handleSearchOnChange = (search: string) => {\n    this.search$.next(search);\n  };\n\n  handleTopicsOnChange = (topics: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      topics,\n    });\n  };\n\n  handleAreasOnchange = (areas: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      areas,\n    });\n  };\n\n  handleIdeaStatusOnChange = (ideaStatus: string) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      idea_status: ideaStatus,\n    });\n  };\n\n  handleProjectPublicationStatusOnChange = (\n    projectPublicationStatus: ProjectPublicationStatus\n  ) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      project_publication_status: projectPublicationStatus,\n    });\n  };\n\n  handleAssigneeOnChange = (assignee: string | undefined) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      assignee,\n    });\n  };\n\n  handleFeedbackFilterOnChange = (feedbackNeeded: boolean) => {\n    if (feedbackNeeded === true) {\n      this.queryParameters$.next({\n        ...this.state.queryParameters,\n        feedback_needed: true,\n      });\n    } else if (feedbackNeeded === false) {\n      this.queryParameters$.next({\n        ...this.state.queryParameters,\n        feedback_needed: undefined,\n      });\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    return (children as children)({\n      ...this.state,\n      onChangeProject: this.handleProjectOnChange,\n      onChangePhase: this.handlePhaseOnChange,\n      onChangeSearchTerm: this.handleSearchOnChange,\n      onChangeTopics: this.handleTopicsOnChange,\n      onChangeAreas: this.handleAreasOnchange,\n      onChangeIdeaStatus: this.handleIdeaStatusOnChange,\n      onChangeProjectPublicationStatus: this\n        .handleProjectPublicationStatusOnChange,\n      onChangeAssignee: this.handleAssigneeOnChange,\n      onChangeFeedbackFilter: this.handleFeedbackFilterOnChange,\n    });\n  }\n}\n","import { Observer, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  scan,\n  refCount,\n  publishReplay,\n  first,\n} from 'rxjs/operators';\nimport { isObject, isEmpty, has } from 'lodash-es';\n\n// utils\nimport shallowCompare from 'utils/shallowCompare';\n\n// typings\nimport { UploadFile } from 'typings';\n\nexport interface IIdeasPageGlobalState {\n  title: string | null;\n  description: string | null;\n  selectedTopics: string[];\n  budget: number | null;\n  proposedBudget: number | null;\n  position: string;\n  position_coordinates: GeoJSON.Point | null;\n  submitError: boolean;\n  titleProfanityError: boolean;\n  descriptionProfanityError: boolean;\n  fileOrImageError: boolean;\n  processing: boolean;\n  ideaId: string | null;\n  ideaSlug: string | null;\n  imageFile: UploadFile[];\n  imageId: string | null;\n  ideaFiles: UploadFile[];\n  authorId: string | null;\n}\n\nexport interface IAdminFullWidth {\n  enabled: boolean;\n}\n\nexport interface IAdminNoPadding {\n  enabled: boolean;\n}\n\ntype valueof<T> = T[keyof T];\n\ntype State = {\n  IdeasNewPage?: IIdeasPageGlobalState;\n  IdeasEditPage?: IIdeasPageGlobalState;\n  AdminFullWidth?: IAdminFullWidth;\n  AdminNoPadding?: IAdminNoPadding;\n};\n\ninterface IStateInput {\n  propertyName: keyof State;\n  updatedStateProperties: valueof<State>;\n}\n\ninterface IStream<T> {\n  observer: Observer<T>;\n  observable: Observable<T>;\n}\n\nexport interface IGlobalStateService<T> {\n  observable: Observable<T>;\n  set: (newState: Partial<T>) => void;\n  get: () => Promise<T>;\n}\n\nclass GlobalState {\n  private stream: IStream<any>;\n\n  constructor() {\n    this.stream = {\n      observer: null as any,\n      observable: null as any,\n    };\n\n    this.stream.observable = new Observable<State>((observer) => {\n      this.stream.observer = observer;\n    }).pipe(\n      startWith({}),\n      scan((oldState: State, stateInput: IStateInput) => {\n        const { propertyName, updatedStateProperties } = stateInput;\n\n        const newState = {\n          ...oldState,\n          [propertyName]: {\n            ...oldState[propertyName],\n            ...updatedStateProperties,\n          },\n        };\n\n        return newState;\n      }),\n      filter((state) => isObject(state) && !isEmpty(state)),\n      publishReplay(1),\n      refCount()\n    );\n\n    // keep stream hot\n    this.stream.observable.subscribe();\n  }\n\n  init<T>(propertyName: keyof State, initialState?: T) {\n    const observable: Observable<T> = this.stream.observable.pipe(\n      map((state) => state[propertyName]),\n      filter(\n        (filteredState) => isObject(filteredState) && !isEmpty(filteredState)\n      ),\n      distinctUntilChanged((filteredState, newFilteredState) =>\n        shallowCompare(filteredState, newFilteredState)\n      )\n    );\n\n    const set = (newState: Partial<T>) => this.set(propertyName, newState);\n\n    const get = () => this.get<T>(propertyName);\n\n    if (initialState && isObject(initialState) && !isEmpty(initialState)) {\n      if (!this.stream.observer) {\n        setTimeout(() => set(initialState), 0);\n      } else {\n        set(initialState);\n      }\n    }\n\n    return {\n      observable,\n      set,\n      get,\n    } as IGlobalStateService<T>;\n  }\n\n  set<T>(propertyName: keyof State, updatedStateProperties: Partial<T>) {\n    this.stream.observer.next({\n      propertyName,\n      updatedStateProperties,\n    });\n  }\n\n  get<T>(propertyName: keyof State) {\n    return this.stream.observable\n      .pipe(\n        map((state) => (has(state, propertyName) ? state[propertyName] : null)),\n        first()\n      )\n      .toPromise() as Promise<T>;\n  }\n}\n\nexport const globalState = new GlobalState();\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { Multiloc } from 'typings';\n\nconst apiEndpoint = `${API_PATH}/stats`;\n\nexport type IResourceByTime =\n  | IIdeasByTime\n  | IUsersByTime\n  | ICommentsByTime\n  | IVotesByTime;\n\n// Ideas\nexport interface IIdeasByTime {\n  series: {\n    ideas: {\n      [key: string]: number;\n    };\n  };\n}\nexport interface IIdeasByStatus {\n  series: {\n    ideas: {\n      [key: string]: number;\n    };\n  };\n  idea_status: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n      color: string;\n      ordering: number;\n    };\n  };\n}\n\nexport interface IIdeasByTopic {\n  series: {\n    ideas: {\n      [key: string]: number;\n    };\n  };\n  topics: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport interface IIdeasByProject {\n  series: {\n    ideas: {\n      [key: string]: number;\n    };\n  };\n  projects: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport interface IIdeasCount {\n  count: number;\n}\n\nexport interface ICount {\n  count: number;\n}\n\nexport function ideasByStatusStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IIdeasByStatus>({\n    apiEndpoint: `${apiEndpoint}/ideas_by_status`,\n    ...streamParams,\n  });\n}\nexport const ideasByStatusXlsxEndpoint = `${apiEndpoint}/ideas_by_status_as_xlsx`;\n\nexport const ideasByTimeXlsxEndpoint = `${apiEndpoint}/ideas_by_time_as_xlsx`;\n\nexport function ideasByTimeStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IIdeasByTime>({\n    apiEndpoint: `${apiEndpoint}/ideas_by_time`,\n    ...streamParams,\n  });\n}\n\nexport const ideasByTimeCumulativeXlsxEndpoint = `${apiEndpoint}/ideas_by_time_cumulative_as_xlsx`;\n\nexport function ideasByTimeCumulativeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IIdeasByTime>({\n    apiEndpoint: `${apiEndpoint}/ideas_by_time_cumulative`,\n    ...streamParams,\n  });\n}\n\nexport const ideasByTopicXlsxEndpoint = `${apiEndpoint}/ideas_by_topic_as_xlsx`;\n\nexport function ideasByTopicStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IIdeasByTopic>({\n    apiEndpoint: `${apiEndpoint}/ideas_by_topic`,\n    ...streamParams,\n  });\n}\n\nexport const ideasByProjectXlsxEndpoint = `${apiEndpoint}/ideas_by_project_as_xlsx`;\n\nexport function ideasByProjectStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IIdeasByProject>({\n    apiEndpoint: `${apiEndpoint}/ideas_by_project`,\n    ...streamParams,\n  });\n}\n\nexport function ideasCount(streamParams: IStreamParams | null = null) {\n  return streams.get<IIdeasCount>({\n    apiEndpoint: `${apiEndpoint}/ideas_count`,\n    ...streamParams,\n  });\n}\n\nexport function ideasCountForUser(userId: string) {\n  return streams.get<ICount>({\n    apiEndpoint: `${API_PATH}/users/${userId}/ideas_count`,\n  });\n}\n\n// Users\n\nexport interface IUsersCount {\n  count: number;\n}\n\nexport interface IUsersByTime {\n  series: {\n    users: {\n      [key: string]: number;\n    };\n  };\n}\nexport interface IUserEngagementScores {\n  data: IUserEngagementScore[];\n}\n\nexport interface IUserEngagementScore {\n  id: string;\n  type: string;\n  attributes: {\n    sum_score: number;\n  };\n  relationships: {\n    user: {\n      data: {\n        id: string;\n        type: 'user';\n      };\n    };\n  };\n}\n\nexport const userXlsxEndpoint = `${apiEndpoint}/users_count_as_xlsx`;\n\nexport function usersCount(streamParams: IStreamParams | null = null) {\n  return streams.get<IUsersCount>({\n    apiEndpoint: `${apiEndpoint}/users_count`,\n    ...streamParams,\n  });\n}\n\nexport const usersByTimeXlsxEndpoint = `${apiEndpoint}/users_by_time_as_xlsx`;\n\nexport function usersByTimeStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IUsersByTime>({\n    apiEndpoint: `${apiEndpoint}/users_by_time`,\n    ...streamParams,\n  });\n}\n\nexport function commentsByTimeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICommentsByTime>({\n    apiEndpoint: `${apiEndpoint}/comments_by_time`,\n    ...streamParams,\n  });\n}\n\nexport const usersByTimeCumulativeXlsxEndpoint = `${apiEndpoint}/users_by_time_cumulative_as_xlsx`;\n\nexport function usersByTimeCumulativeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IUsersByTime>({\n    apiEndpoint: `${apiEndpoint}/users_by_time_cumulative`,\n    ...streamParams,\n  });\n}\n\nexport const activeUsersByTimeXlsxEndpoint = `${apiEndpoint}/active_users_by_time_as_xlsx`;\n\nexport function activeUsersByTimeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IUsersByTime>({\n    apiEndpoint: `${apiEndpoint}/active_users_by_time`,\n    ...streamParams,\n  });\n}\n\nexport const activeUsersByTimeCumulativeXlsxEndpoint = `${apiEndpoint}/active_users_by_time_cumulative_as_xlsx`;\n\nexport function activeUsersByTimeCumulativeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IUsersByTime>({\n    apiEndpoint: `${apiEndpoint}/active_users_by_time_cumulative`,\n    ...streamParams,\n  });\n}\n\nexport function userEngagementScoresStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IUserEngagementScores>({\n    apiEndpoint: `${apiEndpoint}/users_engagement_scores`,\n    ...streamParams,\n  });\n}\n\n// Comments\nexport interface ICommentsByTime {\n  series: {\n    comments: {\n      [key: string]: number;\n    };\n  };\n}\n\nexport interface ICommentsByTopic {\n  series: {\n    comments: {\n      [key: string]: number;\n    };\n  };\n  topics: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport interface ICommentsByProject {\n  series: {\n    comments: {\n      [key: string]: number;\n    };\n  };\n  projects: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport const commentsByTimeCumulativeXlsxEndpoint = `${apiEndpoint}/comments_by_time_cumulative_as_xlsx`;\n\nexport function commentsByTimeCumulativeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICommentsByTime>({\n    apiEndpoint: `${apiEndpoint}/comments_by_time_cumulative`,\n    ...streamParams,\n  });\n}\n\nexport const commentsByTopicXlsxEndpoint = `${apiEndpoint}/comments_by_topic_as_xlsx`;\n\nexport function commentsByTopicStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICommentsByTopic>({\n    apiEndpoint: `${apiEndpoint}/comments_by_topic`,\n    ...streamParams,\n  });\n}\n\nexport const commentsByProjectXlsxEndpoint = `${apiEndpoint}/comments_by_project_as_xlsx`;\n\nexport function commentsByProjectStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICommentsByProject>({\n    apiEndpoint: `${apiEndpoint}/comments_by_project`,\n    ...streamParams,\n  });\n}\n\nexport function commentsCountForUser(userId: string) {\n  return streams.get<ICount>({\n    apiEndpoint: `${API_PATH}/users/${userId}/comments_count`,\n  });\n}\n\n// Votes\nexport interface IVotesByTime {\n  series: {\n    up: { [key: string]: number };\n    down: { [key: string]: number };\n    total: { [key: string]: number };\n  };\n}\n\nexport interface IVotesByTopic {\n  series: {\n    votes: {\n      [key: string]: number;\n    };\n  };\n  topics: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport interface IVotesByProject {\n  series: {\n    total: {\n      [key: string]: number;\n    };\n  };\n  projects: {\n    [key: string]: {\n      title_multiloc: Multiloc;\n    };\n  };\n}\n\nexport interface IVotesByTimeCumulative {\n  series: {\n    up: { [key: string]: number };\n    down: { [key: string]: number };\n    total: { [key: string]: number };\n  };\n}\n\nexport function votesByTimeCumulativeStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IVotesByTimeCumulative>({\n    apiEndpoint: `${apiEndpoint}/votes_by_time_cumulative`,\n    ...streamParams,\n  });\n}\nexport const votesByTimeXlsxEndpoint = `${apiEndpoint}/votes_by_time_as_xlsx`;\n\nexport function votesByTimeStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IVotesByTime>({\n    apiEndpoint: `${apiEndpoint}/votes_by_time`,\n    ...streamParams,\n  });\n}\n\nexport const votesByTopicXlsxEndpoint = `${apiEndpoint}/votes_by_topic_as_xlsx`;\n\nexport function votesByTopicStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IVotesByTopic>({\n    apiEndpoint: `${apiEndpoint}/votes_by_topic`,\n    ...streamParams,\n  });\n}\n\nexport const votesByProjectXlsxEndpoint = `${apiEndpoint}/votes_by_project_as_xlsx`;\n\nexport function votesByProjectStream(\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IVotesByProject>({\n    apiEndpoint: `${apiEndpoint}/votes_by_project`,\n    ...streamParams,\n  });\n}\n\nexport interface IInitiativesCount {\n  count: number;\n}\n\nexport function initiativesCount(streamParams: IStreamParams | null = null) {\n  return streams.get<IInitiativesCount>({\n    apiEndpoint: `${apiEndpoint}/initiatives_count`,\n    ...streamParams,\n  });\n}\n\n// -----\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport { fontSizes, colors } from 'utils/styleUtils';\n\nconst Container: any = styled.span`\n  padding: 0 3px;\n  min-width: 16px;\n  height: 16px;\n  font-size: ${fontSizes.xs}px;\n  font-weight: 500;\n  border-radius: 3px;\n  margin-left: 6px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  color: #ffffff;\n  background: ${(props: any) => (props.bgColor ? props.bgColor : colors.clRed)};\n`;\n\ninterface Props {\n  count: number;\n  bgColor?: string;\n}\n\nexport default memo<Props>((props) => {\n  const { count, bgColor } = props;\n  if (count > 0) {\n    return <Container bgColor={bgColor}>{count}</Container>;\n  } else {\n    return null;\n  }\n});\n"],"sourceRoot":""}