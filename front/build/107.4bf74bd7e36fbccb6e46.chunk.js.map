{"version":3,"sources":["webpack:///./app/components/PageForm/messages.js","webpack:///./app/containers/Admin/pages/Edit/index.tsx","webpack:///./app/components/UI/QuillEditor/FormikQuillMultiloc.tsx","webpack:///./app/components/PageForm/index.tsx","webpack:///./app/components/UI/GoBackButton/messages.ts","webpack:///./app/components/UI/FormikInput/index.tsx","webpack:///./app/components/UI/GoBackButton/index.tsx"],"names":["defineMessages","pageTitle","id","defaultMessage","pageSlug","editContent","dontChange","fileUploadLabel","fileUploadLabelTooltip","Title","styled","h1","fontSizes","xxxl","EditPage","page","props","isNilOrError","title_multiloc","attributes","slug","body_multiloc","initialValues","newValues","changedKeys","keys","filter","key","isEqual","pick","values","setErrors","setSubmitting","setStatus","updatePage","changedValues","then","clHistory","push","catch","errorResponse","isCLErrorJSON","apiErrors","json","errors","mode","pageId","this","onClick","handleGoBack","value","Formik","onSubmit","handleSubmit","render","renderFn","validate","PageForm","React","Component","withRouter","inputProps","params","FormikQuillMultiloc","newValue","form","setFieldValue","field","name","setFieldTouched","valueMultiloc","onChange","handleOnChange","onBlur","handleOnBlur","PureComponent","StyledSection","Section","label","FormattedMessage","messages","fieldName","withCTAButton","local_page_files","onFileAdd","handlePageFileOnAdd","onFileRemove","handlePageFileOnRemove","files","fileToAdd","fileToRemove","file","isSubmitting","isValid","touched","hideTitle","status","Form","SectionField","Field","component","FormikInputMultilocWithLocaleSwitcher","className","renderQuill","Label","FormikInput","IconTooltip","content","renderFileUploader","every","isEmpty","error","goBack","_locale","Input","Container","div","GoBackButton","buttonStyle","icon","size","padding","text"],"mappings":"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","file":"107.4bf74bd7e36fbccb6e46.chunk.js","sourcesContent":["/*\n * Components.PagesForm Messages\n *\n * This contains all the text for the Pages Form component.\n */\n\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  pageTitle: {\n    id: 'app.components.PagesForm.pageTitle',\n    defaultMessage: 'Title',\n  },\n  pageSlug: {\n    id: 'app.components.PagesForm.pageSlug',\n    defaultMessage: 'Slug',\n  },\n  editContent: {\n    id: 'app.components.PagesForm.editContent',\n    defaultMessage: 'Content',\n  },\n  dontChange: {\n    id: 'app.components.PagesForm.dontChange',\n    defaultMessage:\n      \"Don't change this! (unless you really know what you're doing)\",\n  },\n  fileUploadLabel: {\n    id: 'app.components.PagesForm.fileUploadLabel',\n    defaultMessage: 'Add files to this page',\n  },\n  fileUploadLabelTooltip: {\n    id: 'app.components.PagesForm.fileUploadLabelTooltip',\n    defaultMessage:\n      'Files should not be larger than 50Mb. Added files will be shown on the bottom of this page.',\n  },\n});\n","import React from 'react';\nimport styled from 'styled-components';\nimport { keys, pick, isEqual } from 'lodash-es';\nimport { CLErrorsJSON } from 'typings';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport { updatePage } from 'services/pages';\nimport GetPage, { GetPageChildProps } from 'resources/GetPage';\nimport PageForm from 'components/PageForm';\nimport { Formik } from 'formik';\nimport PageWrapper from 'components/admin/PageWrapper';\nimport { fontSizes } from 'utils/styleUtils';\nimport GoBackButton from 'components/UI/GoBackButton';\nimport T from 'components/T';\nimport { isNilOrError } from 'utils/helperUtils';\nimport clHistory from 'utils/cl-router/history';\nimport { isCLErrorJSON } from 'utils/errorUtils';\n\nconst Title = styled.h1`\n  font-size: ${fontSizes.xxxl}px;\n  padding: 0;\n  width: 100%;\n  margin: 1rem 0 3rem 0;\n`;\n\ninterface InputProps {}\n\ninterface DataProps {\n  page: GetPageChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface State {}\n\nclass EditPage extends React.Component<Props & WithRouterProps, State> {\n  initialValues = () => {\n    const { page } = this.props;\n\n    return (\n      !isNilOrError(page) && {\n        title_multiloc: page.attributes.title_multiloc,\n        slug: page.attributes.slug,\n        body_multiloc: page.attributes.body_multiloc,\n      }\n    );\n  };\n\n  changedValues = (initialValues, newValues) => {\n    const changedKeys = keys(newValues).filter(\n      (key) => !isEqual(initialValues[key], newValues[key])\n    );\n    return pick(newValues, changedKeys);\n  };\n\n  // Still need to handle file saving if we'll use this form.\n  // Also change typing of values parameter to something different (probably FormValues) than 'any'\n  handleSubmit = (values: any, { setErrors, setSubmitting, setStatus }) => {\n    const { page } = this.props;\n\n    if (isNilOrError(page)) return;\n\n    updatePage(page.id, { ...this.changedValues(this.initialValues(), values) })\n      .then(() => {\n        clHistory.push('/admin/pages');\n      })\n      .catch((errorResponse) => {\n        if (isCLErrorJSON(errorResponse)) {\n          const apiErrors = (errorResponse as CLErrorsJSON).json.errors;\n          setErrors(apiErrors);\n        } else {\n          setStatus('error');\n        }\n        setSubmitting(false);\n      });\n  };\n\n  handleGoBack = () => {\n    clHistory.push('/admin/pages');\n  };\n\n  renderFn = (props) =>\n    !isNilOrError(this.props.page) && (\n      <PageForm {...props} mode=\"edit\" pageId={this.props.page.id} />\n    );\n\n  render() {\n    const { page } = this.props;\n    const initialValues = this.initialValues();\n\n    return (\n      !isNilOrError(page) &&\n      initialValues && (\n        <>\n          <GoBackButton onClick={this.handleGoBack} />\n          <Title>\n            <T value={page.attributes.title_multiloc} />\n          </Title>\n          <PageWrapper>\n            <Formik\n              initialValues={initialValues}\n              onSubmit={this.handleSubmit}\n              render={this.renderFn}\n              validate={PageForm.validate}\n            />\n          </PageWrapper>\n        </>\n      )\n    );\n  }\n}\n\nexport default withRouter((inputProps: InputProps & WithRouterProps) => (\n  <GetPage id={inputProps.params.pageId}>\n    {(page) => <EditPage {...inputProps} page={page} />}\n  </GetPage>\n));\n","import React, { PureComponent } from 'react';\nimport { FieldProps } from 'formik';\n\n// components\nimport QuillMultilocWithLocaleSwitcher, {\n  Props,\n} from 'components/UI/QuillEditor/QuillMultilocWithLocaleSwitcher';\n\n// typings\nimport { Multiloc } from 'typings';\n\nexport default class FormikQuillMultiloc extends PureComponent<\n  FieldProps & Props\n> {\n  handleOnChange = (newValue: Multiloc) => {\n    this.props.form.setFieldValue(this.props.field.name, newValue);\n    this.props.form.setStatus('enabled');\n  };\n\n  handleOnBlur = () => {\n    this.props.form.setFieldTouched(this.props.field.name);\n  };\n\n  render() {\n    const { field } = this.props;\n\n    return (\n      <QuillMultilocWithLocaleSwitcher\n        {...this.props}\n        valueMultiloc={field.value}\n        onChange={this.handleOnChange}\n        onBlur={this.handleOnBlur}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport { isEmpty, values as getValues, every } from 'lodash-es';\nimport { Form, Field, InjectedFormikProps, FormikErrors } from 'formik';\nimport styled from 'styled-components';\n\n// Components\nimport FormikInput from 'components/UI/FormikInput';\nimport FormikInputMultilocWithLocaleSwitcher from 'components/UI/FormikInputMultilocWithLocaleSwitcher';\nimport FormikQuillMultiloc from 'components/UI/QuillEditor/FormikQuillMultiloc';\nimport FormikSubmitWrapper from 'components/admin/FormikSubmitWrapper';\nimport { Section, SectionField } from 'components/admin/Section';\nimport ErrorComponent from 'components/UI/Error';\nimport { Label, IconTooltip } from 'cl2-component-library';\nimport Warning from 'components/UI/Warning';\nimport FileUploader from 'components/UI/FileUploader';\n\n// I18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\n// Typings\nimport { Multiloc, UploadFile } from 'typings';\n\nconst StyledSection = styled(Section)`\n  margin-bottom: 30px;\n`;\n\nexport interface FormValues {\n  title_multiloc: Multiloc;\n  body_multiloc: Multiloc;\n  local_page_files: UploadFile[] | [];\n  slug?: any;\n}\n\nexport interface Props {\n  slug?: string;\n  mode: 'simple' | 'edit';\n  hideTitle?: boolean;\n  pageId?: string;\n}\n\nclass PageForm extends React.Component<InjectedFormikProps<Props, FormValues>> {\n  public static validate = (values: FormValues): FormikErrors<FormValues> => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (every(getValues(values.title_multiloc), isEmpty)) {\n      errors.title_multiloc = [{ error: 'blank' }] as any;\n    }\n\n    if (every(getValues(values.body_multiloc), isEmpty)) {\n      errors.body_multiloc = [{ error: 'blank' }] as any;\n    }\n\n    return errors;\n  };\n\n  renderQuill = (props) => {\n    return (\n      <FormikQuillMultiloc\n        label={<FormattedMessage {...messages.editContent} />}\n        id={`${this.props.slug}-${props.fieldName}`}\n        {...props}\n        withCTAButton\n      />\n    );\n  };\n\n  renderFileUploader = (values: FormValues) => () => {\n    const { local_page_files } = values;\n\n    return (\n      <FileUploader\n        onFileAdd={this.handlePageFileOnAdd}\n        onFileRemove={this.handlePageFileOnRemove}\n        files={local_page_files}\n      />\n    );\n  };\n\n  handlePageFileOnAdd = (fileToAdd: UploadFile) => {\n    const { setFieldValue, setStatus, values } = this.props;\n    setFieldValue('local_page_files', [...values.local_page_files, fileToAdd]);\n    setStatus('enabled');\n  };\n\n  handlePageFileOnRemove = (fileToRemove: UploadFile) => {\n    const { setFieldValue, setStatus, values } = this.props;\n    const localPageFiles = [...values.local_page_files];\n    const filteredLocalPageFiles = localPageFiles.filter(\n      (file) => file !== fileToRemove\n    );\n    setFieldValue('local_page_files', filteredLocalPageFiles);\n    setStatus('enabled');\n  };\n\n  render() {\n    const {\n      isSubmitting,\n      errors,\n      isValid,\n      touched,\n      mode,\n      hideTitle,\n      values,\n      status,\n    } = this.props;\n    return (\n      <Form>\n        <StyledSection>\n          {!hideTitle && (\n            <SectionField>\n              <Field\n                name=\"title_multiloc\"\n                component={FormikInputMultilocWithLocaleSwitcher}\n                label={<FormattedMessage {...messages.pageTitle} />}\n              />\n              {touched.title_multiloc && (\n                <ErrorComponent\n                  fieldName=\"title_multiloc\"\n                  apiErrors={errors.title_multiloc as any}\n                />\n              )}\n            </SectionField>\n          )}\n\n          <SectionField className=\"fullWidth\">\n            <Field name=\"body_multiloc\" render={this.renderQuill} />\n            {touched.body_multiloc && (\n              <ErrorComponent\n                fieldName=\"body_multiloc\"\n                apiErrors={errors.body_multiloc as any}\n              />\n            )}\n          </SectionField>\n\n          {mode === 'edit' && (\n            <SectionField>\n              <Label>\n                <FormattedMessage {...messages.pageSlug} />\n              </Label>\n              <Field\n                name=\"slug\"\n                component={FormikInput}\n                label={<FormattedMessage {...messages.pageSlug} />}\n              />\n              {touched.slug && (\n                <ErrorComponent\n                  fieldName=\"slug\"\n                  apiErrors={errors.slug as any}\n                />\n              )}\n              <Warning>\n                <FormattedMessage {...messages.dontChange} />\n              </Warning>\n            </SectionField>\n          )}\n          <SectionField>\n            <Label>\n              <FormattedMessage {...messages.fileUploadLabel} />\n              <IconTooltip\n                content={\n                  <FormattedMessage {...messages.fileUploadLabelTooltip} />\n                }\n              />\n            </Label>\n            <Field name=\"page_files\" render={this.renderFileUploader(values)} />\n          </SectionField>\n        </StyledSection>\n\n        <FormikSubmitWrapper {...{ isValid, isSubmitting, status, touched }} />\n      </Form>\n    );\n  }\n}\n\nexport default PageForm;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  goBack: {\n    id: 'app.components.GoBackButton.group.edit.goBack',\n    defaultMessage: 'Go back',\n  },\n});\n","import React, { PureComponent } from 'react';\nimport { Input, InputProps } from 'cl2-component-library';\nimport { FieldProps } from 'formik';\nimport { Locale } from 'typings';\n\nclass FormikInput extends PureComponent<FieldProps & InputProps> {\n  handleOnChange = (newValue: string, _locale: Locale | undefined) => {\n    this.props.form.setFieldValue(this.props.field.name, newValue);\n  };\n\n  render() {\n    const { name, value } = this.props.field;\n    return (\n      <Input\n        {...this.props}\n        name={name}\n        value={value}\n        onChange={this.handleOnChange}\n      />\n    );\n  }\n}\n\nexport default FormikInput;\n","import React, { PureComponent, FormEvent } from 'react';\nimport styled from 'styled-components';\nimport Button from 'components/UI/Button';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\nconst Container = styled.div`\n  display: inline-block;\n`;\n\ntype Props = {\n  onClick: (arg: FormEvent) => void;\n  className?: string;\n};\n\ninterface State {}\n\nexport default class GoBackButton extends PureComponent<Props, State> {\n  render() {\n    const { onClick, className } = this.props;\n\n    return (\n      <Container className={className || ''}>\n        <Button\n          onClick={onClick}\n          buttonStyle=\"text\"\n          icon=\"arrow-back\"\n          size=\"2\"\n          padding=\"0px\"\n          text={<FormattedMessage {...messages.goBack} />}\n        />\n      </Container>\n    );\n  }\n}\n"],"sourceRoot":""}