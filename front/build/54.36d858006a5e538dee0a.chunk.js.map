{"version":3,"sources":["webpack:///./app/containers/Admin/projects/edit/volunteering/messages.ts","webpack:///./app/services/causes.ts","webpack:///./app/containers/Admin/projects/edit/volunteering/NewCause.tsx"],"names":["defineMessages","titleVolunteeringTab","id","defaultMessage","subtitleVolunteeringTab","exportVolunteers","addCauseButton","editButtonLabel","deleteButtonLabel","xVolunteers","causeDeletionConfirmation","newCauseTitle","newCauseSubtitle","editCauseTitle","editCauseSubtitle","causeTitleLabel","causeDescriptionLabel","causeDescriptionTooltip","causeImageLabel","saveCause","causeErrorMessage","causeId","streams","get","apiEndpoint","participationContextType","participationContextId","streamParams","API_PATH","delete","ordering","update","cause","object","add","stream","fetchAllWith","regexApiEndpoint","dataId","Container","styled","div","ButtonContainer","NewCause","memo","props","formatMessage","intl","useState","touched","setTouched","processing","setProcessing","errors","setErrors","title_multiloc","description_multiloc","image","formValues","setFormValues","projectId","params","phaseId","handleTitleOnChange","useCallback","prevFormValues","handleDescriptionOnChange","_locale","handleImageOnAdd","images","handleImageOnRemove","handleOnSubmit","PCType","addCause","participation_context_type","participation_context_id","base64","then","clHistory","push","catch","errorResponse","json","SectionTitle","FormattedMessage","messages","SectionDescription","Section","SectionField","type","valueMultiloc","onChange","label","fieldName","apiErrors","labelTooltipText","withCTAButton","Label","acceptedFileTypes","imagePreviewRatio","maxImagePreviewWidth","onAdd","onRemove","buttonStyle","onClick","disabled","isEmpty","text","showBackground","showIcon","withRouter","injectIntl"],"mappings":"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","file":"54.36d858006a5e538dee0a.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  titleVolunteeringTab: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.titleVolunteeringTab',\n    defaultMessage: 'Volunteering',\n  },\n  subtitleVolunteeringTab: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.subtitleVolunteeringTab',\n    defaultMessage:\n      'Here, you can set up the causes users can volunteer for and download the volunteers.',\n  },\n  exportVolunteers: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.exportVolunteers',\n    defaultMessage: 'Export volunteers',\n  },\n  addCauseButton: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.addCauseButton',\n    defaultMessage: 'Add cause',\n  },\n  editButtonLabel: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.editButtonLabel',\n    defaultMessage: 'Edit',\n  },\n  deleteButtonLabel: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.deleteButtonLabel',\n    defaultMessage: 'Delete',\n  },\n  xVolunteers: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.xVolunteers',\n    defaultMessage:\n      '{x, plural, =0 {no volunteers} one {# volunteer} other {# volunteers}}',\n  },\n  causeDeletionConfirmation: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeDeletionConfirmation',\n    defaultMessage: 'Are you sure?',\n  },\n  newCauseTitle: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.newCauseTitle',\n    defaultMessage: 'New cause',\n  },\n  newCauseSubtitle: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.newCauseSubtitle',\n    defaultMessage:\n      'A cause is an action or activity that citizens can volunteer to.',\n  },\n  editCauseTitle: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.editCauseTitle',\n    defaultMessage: 'Edit cause',\n  },\n  editCauseSubtitle: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.editCauseSubtitle',\n    defaultMessage:\n      'A cause is an action or activity that citizens can volunteer to.',\n  },\n  causeTitleLabel: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeTitleLabel',\n    defaultMessage: 'Title',\n  },\n  causeDescriptionLabel: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeDescriptionLabel',\n    defaultMessage: 'Description',\n  },\n  causeDescriptionTooltip: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeDescriptionTooltip',\n    defaultMessage:\n      'Use this explain what is required from volunteers and what they can expect.',\n  },\n  causeImageLabel: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeImageLabel',\n    defaultMessage: 'Image',\n  },\n  saveCause: {\n    id: 'app.containers.AdminPage.ProjectEdit.VolunteeringTab.saveCause',\n    defaultMessage: 'Save',\n  },\n  causeErrorMessage: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.VolunteeringTab.causeErrorMessage',\n    defaultMessage: \"Couldn't save because the form contains errors.\",\n  },\n});\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { Multiloc, ImageSizes } from 'typings';\n\nconst apiEndpoint = `${API_PATH}/causes`;\n\nexport interface ICauseData {\n  id: string;\n  type: string;\n  attributes: {\n    title_multiloc: Multiloc;\n    description_multiloc: Multiloc;\n    image: ImageSizes;\n    volunteers_count: number;\n    ordering: number;\n  };\n  relationships: {\n    participation_context: {\n      data: {\n        type: 'project' | 'phase';\n        id: string;\n      };\n    };\n    user_volunteer?: {\n      data: null | {\n        id: string;\n      };\n    };\n  };\n}\n\nexport interface ICauseLinks {\n  self: string;\n  first: string;\n  prev: string;\n  next: string;\n  last: string;\n}\n\nexport interface ICauses {\n  data: ICauseData[];\n  links: ICauseLinks;\n}\n\nexport interface ICause {\n  data: ICauseData;\n}\n\nexport function causeByIdStream(causeId: string) {\n  return streams.get<ICause>({ apiEndpoint: `${apiEndpoint}/${causeId}` });\n}\n\nexport function causesStream(\n  participationContextType: 'project' | 'phase',\n  participationContextId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<ICauses>({\n    apiEndpoint: `${API_PATH}/${participationContextType}s/${participationContextId}/causes`,\n    ...streamParams,\n  });\n}\n\nexport async function addCause(object) {\n  const stream = await streams.add<ICause>(apiEndpoint, { cause: object });\n  await streams.fetchAllWith({ regexApiEndpoint: [/^.*causes$/] });\n  return stream;\n}\n\nexport async function updateCause(causeId: string, object) {\n  const stream = streams.update<ICause>(`${apiEndpoint}/${causeId}`, causeId, {\n    cause: object,\n  });\n  await streams.fetchAllWith({ dataId: [causeId] });\n  return stream;\n}\n\nexport function deleteCause(causeId: string) {\n  return streams.delete(`${apiEndpoint}/${causeId}`, causeId);\n}\n\nexport function reorderCause(causeId: string, ordering: number) {\n  return streams.update<ICause>(`${apiEndpoint}/${causeId}/reorder`, causeId, {\n    cause: { ordering },\n  });\n}\n","import React, { memo, useCallback, useState } from 'react';\nimport { isEmpty } from 'lodash-es';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport clHistory from 'utils/cl-router/history';\n\n// Services\nimport { addCause } from 'services/causes';\n\n// Components\nimport {\n  Section,\n  SectionField,\n  SectionTitle,\n  SectionDescription,\n} from 'components/admin/Section';\nimport QuillMultilocWithLocaleSwitcher from 'components/UI/QuillEditor/QuillMultilocWithLocaleSwitcher';\nimport InputMultilocWithLocaleSwitcher from 'components/UI/InputMultilocWithLocaleSwitcher';\nimport Button from 'components/UI/Button';\nimport Error from 'components/UI/Error';\nimport ImagesDropzone from 'components/UI/ImagesDropzone';\nimport { Label } from 'cl2-component-library';\n\n// i18n\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\nimport { InjectedIntlProps } from 'react-intl';\n\n// Styling\nimport styled from 'styled-components';\n\n// Typing\nimport { Multiloc, Locale, UploadFile } from 'typings';\n\nconst Container = styled.div``;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n`;\n\ninterface Props {\n  className?: string;\n}\n\ninterface IFormValues {\n  title_multiloc: Multiloc | null;\n  description_multiloc: Multiloc | null;\n  image: UploadFile | null;\n}\n\nconst NewCause = memo<Props & InjectedIntlProps & WithRouterProps>((props) => {\n  const {\n    intl: { formatMessage },\n  } = props;\n\n  const [touched, setTouched] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [errors, setErrors] = useState<{ [key: string]: any }>({});\n  const [formValues, setFormValues] = useState<IFormValues>({\n    title_multiloc: null,\n    description_multiloc: null,\n    image: null,\n  });\n\n  const projectId = props.params.projectId;\n  const phaseId = props.params.phaseId;\n  const participationContextType = phaseId ? 'phase' : 'project';\n  const participationContextId = phaseId || projectId;\n\n  const handleTitleOnChange = useCallback((title_multiloc: Multiloc) => {\n    setTouched(true);\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      title_multiloc,\n    }));\n  }, []);\n\n  const handleDescriptionOnChange = useCallback(\n    (description_multiloc: Multiloc, _locale: Locale) => {\n      setTouched(true);\n      setFormValues((prevFormValues) => ({\n        ...prevFormValues,\n        description_multiloc,\n      }));\n    },\n    []\n  );\n\n  const handleImageOnAdd = useCallback((images: UploadFile[]) => {\n    setTouched(true);\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      image: images[0],\n    }));\n  }, []);\n\n  const handleImageOnRemove = useCallback(() => {\n    setTouched(true);\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      image: null,\n    }));\n  }, []);\n\n  const handleOnSubmit = useCallback(() => {\n    const { title_multiloc, description_multiloc, image } = formValues;\n\n    if (!processing && title_multiloc && description_multiloc) {\n      setProcessing(true);\n      setErrors({});\n\n      let PCType;\n      switch (participationContextType) {\n        case 'project':\n          PCType = 'Project';\n          break;\n        case 'phase':\n          PCType = 'Phase';\n          break;\n      }\n      addCause({\n        description_multiloc,\n        title_multiloc,\n        participation_context_type: PCType,\n        participation_context_id: participationContextId,\n        image: image?.base64,\n      })\n        .then(() => {\n          setProcessing(false);\n          setErrors({});\n          setTouched(false);\n          clHistory.push(`/admin/projects/${projectId}/volunteering`);\n        })\n        .catch((errorResponse) => {\n          setProcessing(false);\n          setErrors(errorResponse?.json?.errors || {});\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formValues, processing]);\n\n  return (\n    <Container>\n      <SectionTitle>\n        <FormattedMessage {...messages.newCauseTitle} />\n      </SectionTitle>\n      <SectionDescription>\n        <FormattedMessage {...messages.newCauseSubtitle} />\n      </SectionDescription>\n\n      <Section>\n        <SectionField>\n          <InputMultilocWithLocaleSwitcher\n            type=\"text\"\n            id=\"cause-title\"\n            valueMultiloc={formValues.title_multiloc}\n            onChange={handleTitleOnChange}\n            label={formatMessage(messages.causeTitleLabel)}\n          />\n          <Error\n            fieldName=\"title_multiloc\"\n            apiErrors={errors?.title_multiloc}\n          />\n        </SectionField>\n\n        <SectionField>\n          <QuillMultilocWithLocaleSwitcher\n            id=\"cause-description\"\n            valueMultiloc={formValues.description_multiloc}\n            onChange={handleDescriptionOnChange}\n            label={formatMessage(messages.causeDescriptionLabel)}\n            labelTooltipText={formatMessage(messages.causeDescriptionTooltip)}\n            withCTAButton\n          />\n          <Error\n            fieldName=\"description_multiloc\"\n            apiErrors={errors?.description_multiloc}\n          />\n        </SectionField>\n        <SectionField>\n          <Label>\n            <FormattedMessage {...messages.causeImageLabel} />\n          </Label>\n          <ImagesDropzone\n            acceptedFileTypes=\"image/jpg, image/jpeg, image/png, image/gif\"\n            images={formValues.image ? [formValues.image] : null}\n            imagePreviewRatio={120 / 480}\n            maxImagePreviewWidth=\"500px\"\n            onAdd={handleImageOnAdd}\n            onRemove={handleImageOnRemove}\n          />\n        </SectionField>\n      </Section>\n\n      <ButtonContainer>\n        <Button\n          buttonStyle=\"admin-dark\"\n          onClick={handleOnSubmit}\n          processing={processing}\n          disabled={!touched}\n        >\n          <FormattedMessage {...messages.saveCause} />\n        </Button>\n\n        {!isEmpty(errors) && (\n          <Error\n            text={formatMessage(messages.causeErrorMessage)}\n            showBackground={false}\n            showIcon={false}\n          />\n        )}\n      </ButtonContainer>\n    </Container>\n  );\n});\n\nexport default withRouter(injectIntl(NewCause));\n"],"sourceRoot":""}