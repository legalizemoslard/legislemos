{"version":3,"sources":["webpack:///./app/containers/ProjectsIndexPage/messages.ts","webpack:///./app/components/AvatarBubbles/index.tsx","webpack:///./app/containers/ProjectsIndexPage/index.tsx","webpack:///./app/components/CityLogoSection/index.tsx","webpack:///./app/resources/GetRandomAvatars.tsx","webpack:///./app/components/ProjectAndFolderCards/LoadingBox.tsx","webpack:///./app/components/CityLogoSection/messages.ts","webpack:///./app/components/AvatarBubbles/messages.ts","webpack:///./app/resources/GetAvatars.tsx","webpack:///./app/services/avatars.ts","webpack:///./app/containers/ProjectsIndexPage/ProjectsIndexMeta.tsx"],"names":["defineMessages","pageTitle","id","defaultMessage","metaTitle","metaDescription","EmptyContainer","styled","div","Container","props","width","height","AvatarImageBubble","img","size","index","overlap","UserCountBubble","bgColor","UserCountBubbleInner","digits","getFontSize","AvatarBubblesWithHoCs","avatarIds","context","className","userCountBgColor","colors","label","formatMessage","intl","avatars","userCount","isNilOrError","isNumber","bubbleSize","bubbleOverlap","imageSize","avatarsWithImage","filter","avatar","isError","attributes","avatarImagesCount","length","remainingUsers","remainingUsersDigits","toString","containerHeight","containerWidth","map","key","src","alt","ScreenReaderOnly","messages","numberOfUsers","undefined","inputProps","ids","limit","data","meta","total","main","theme","menuHeight","footerHeight","background","media","smallerThanMaxTablet","mobileMenuHeight","mobileTopBarHeight","StyledContentContainer","ContentContainer","smallerThanMinTablet","PageTitle","h1","colorText","fontSizes","xxxxl","xxxl","React","memo","mode","FormattedMessage","showTitle","layout","publicationStatusFilter","LogoLink","a","TenantLogo","CityLogoSection","locale","appConfiguration","currentTenantLogo","logo","medium","tenantSite","settings","core","organization_site","footerLocale","title","iframeTitle","name","href","target","injectIntl","GetRandomAvatars","state","this","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","isEqual","switchMap","randomAvatarsStream","queryParameters","context_type","type","context_id","observable","subscribe","setState","forEach","subscription","unsubscribe","children","Component","defaultCardStyle","Spinner","GetAvatars","combineLatest","avatarByIdStream","avatarId","streams","get","apiEndpoint","API_PATH","cacheStream","streamParams","ProjectsMeta","authUser","tenantLocales","location","window","projectsIndexTitle","projectsIndexDescription","Helmet","unread_notifications","content","property","ProjectsMetaWithHoc","Data","adopt","dataprops"],"mappings":"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","file":"86.cc02a3ee67835cb578cd.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  pageTitle: {\n    id: 'app.containers.ProjectsIndexPage.pageTitle',\n    defaultMessage: 'Projects',\n  },\n  metaTitle: {\n    id: 'app.containers.ProjectsIndexPage.metaTitle',\n    defaultMessage: 'Projects â€¢ {orgName}',\n  },\n  metaDescription: {\n    id: 'app.containers.ProjectsIndexPage.metaDescription',\n    defaultMessage:\n      'Explore all ongoing projects of {orgName} to understand how you can participate.\\n Come discuss local projects that matter most to you.',\n  },\n});\n","import React from 'react';\nimport { isNumber, isError } from 'lodash-es';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// services\nimport { IAvatarData } from 'services/avatars';\n\n// resources\nimport GetRandomAvatars from 'resources/GetRandomAvatars';\nimport GetAvatars from 'resources/GetAvatars';\n\n// i18n\nimport injectIntl from 'utils/cl-intl/injectIntl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from './messages';\n\n// styling\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\nimport { ScreenReaderOnly } from 'utils/a11y';\n\nconst getFontSize = (size: number, digits: number) => {\n  if (size >= 34) {\n    if (digits <= 2) {\n      return 14;\n    }\n\n    if (digits === 3) {\n      return 12;\n    }\n\n    if (digits >= 4) {\n      return 11;\n    }\n  } else {\n    if (digits <= 2) {\n      return 12;\n    }\n\n    if (digits === 3) {\n      return 11;\n    }\n\n    if (digits >= 4) {\n      return 10;\n    }\n  }\n\n  return 14;\n};\n\nconst EmptyContainer = styled.div``;\n\nconst Container = styled.div<{ width: number; height: number }>`\n  flex-shrink: 0;\n  width: ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n  position: relative;\n`;\n\nconst AvatarImageBubble = styled.img<{\n  overlap: number;\n  index: number;\n  size: number;\n}>`\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  border-radius: 50%;\n  border: solid 2px #fff;\n  text-indent: -9999px;\n  position: absolute;\n  z-index: ${(props) => props.index + 1};\n  left: ${(props) => props.index * (props.size - props.overlap)}px;\n  object-fit: cover;\n  object-position: center;\n`;\n\nconst UserCountBubble = styled.div<{\n  overlap: number;\n  index: number;\n  size: number;\n  bgColor: string;\n}>`\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-bottom: 0;\n  border-radius: 50%;\n  border: solid 2px #fff;\n  background: ${(props: any) => props.bgColor};\n  position: absolute;\n  z-index: ${(props) => props.index + 1};\n  left: ${(props) => props.index * (props.size - props.overlap)}px;\n`;\n\nconst UserCountBubbleInner = styled.div<{ size: number; digits: number }>`\n  color: #fff;\n  font-size: ${({ size, digits }) => getFontSize(size, digits)}px;\n  font-weight: 500;\n  display: flex;\n`;\n\n/* InputProps\n * limit: the number of avatars you need, you'll get one extra bubble with the remaining count, defaults to 3\n * context: extra info if you use the component in a specific context, defaults to platform-wide\n * size: image size, each bubble will be 4px bigger because of margins, defaults to 30px\n * overlap: the number of pixel the bubbles overlap, defaults to 7\n */\ninterface InputProps {\n  limit?: number;\n  context?: {\n    type: 'project' | 'group';\n    id: string;\n  };\n  size?: number;\n  overlap?: number;\n  userCountBgColor?: string;\n  avatarIds?: string[];\n  className?: string;\n  userCount?: number;\n}\n\ninterface DataProps {\n  avatars: (IAvatarData | Error)[] | null;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nconst defaultLimit = 4;\n\nconst AvatarBubbles = ({\n  avatarIds,\n  context,\n  size = 34,\n  overlap,\n  className,\n  userCountBgColor = colors.label,\n  intl: { formatMessage },\n  avatars,\n  userCount,\n}: Props & InjectedIntlProps) => {\n  if (!isNilOrError(avatars) && isNumber(userCount) && userCount > 0) {\n    const bubbleSize = size + 4;\n    const bubbleOverlap = overlap || 10;\n    const imageSize = bubbleSize > 160 ? 'large' : 'medium';\n    const avatarsWithImage = avatars.filter(\n      (avatar) =>\n        !isError(avatar) &&\n        avatar.attributes.avatar &&\n        avatar.attributes.avatar[imageSize]\n    ) as IAvatarData[];\n    const avatarImagesCount = avatarsWithImage.length;\n    const remainingUsers = userCount - avatarImagesCount;\n    const remainingUsersDigits = remainingUsers.toString().length;\n    const bubblesCount = avatarImagesCount + (remainingUsers > 0 ? 1 : 0);\n    const containerHeight = bubbleSize + 2;\n    const containerWidth =\n      bubblesCount * (bubbleSize - bubbleOverlap) + bubbleOverlap + 2;\n\n    if (avatarIds || context || avatarImagesCount > 0) {\n      return (\n        <Container\n          className={className}\n          width={containerWidth}\n          height={containerHeight}\n        >\n          {avatarsWithImage.map((avatar, index) => (\n            <AvatarImageBubble\n              key={index}\n              index={index}\n              overlap={bubbleOverlap}\n              size={bubbleSize}\n              src={avatar.attributes.avatar[imageSize]}\n              alt=\"\"\n            />\n          ))}\n          {remainingUsers > 0 && (\n            <UserCountBubble\n              index={avatarsWithImage.length}\n              overlap={bubbleOverlap}\n              size={bubbleSize}\n              bgColor={userCountBgColor}\n            >\n              <UserCountBubbleInner\n                size={bubbleSize}\n                digits={remainingUsersDigits}\n                aria-hidden\n              >\n                +{remainingUsers}\n              </UserCountBubbleInner>\n              <ScreenReaderOnly>\n                {formatMessage(messages.numberOfUsers, {\n                  numberOfUsers: userCount,\n                })}\n              </ScreenReaderOnly>\n            </UserCountBubble>\n          )}\n        </Container>\n      );\n    }\n  } else if (avatars !== undefined) {\n    return <EmptyContainer className={className} />;\n  }\n\n  return null;\n};\n\nconst AvatarBubblesWithHoCs = injectIntl(AvatarBubbles);\n\nexport default (inputProps: InputProps) => {\n  if (inputProps.avatarIds) {\n    return (\n      <GetAvatars ids={inputProps.avatarIds}>\n        {(avatars) => (\n          <AvatarBubblesWithHoCs\n            {...inputProps}\n            avatars={!isNilOrError(avatars) ? avatars : null}\n          />\n        )}\n      </GetAvatars>\n    );\n  }\n\n  return (\n    <GetRandomAvatars\n      limit={inputProps.limit || defaultLimit}\n      context={inputProps.context}\n    >\n      {(avatars) => (\n        <AvatarBubblesWithHoCs\n          {...inputProps}\n          avatars={!isNilOrError(avatars) ? avatars.data : null}\n          userCount={!isNilOrError(avatars) ? avatars.meta.total : undefined}\n        />\n      )}\n    </GetRandomAvatars>\n  );\n};\n","import React from 'react';\n\n// components\nimport ContentContainer from 'components/ContentContainer';\nimport ProjectAndFolderCards from 'components/ProjectAndFolderCards';\nimport CityLogoSection from 'components/CityLogoSection';\nimport ProjectsIndexMeta from './ProjectsIndexMeta';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\n// style\nimport styled from 'styled-components';\nimport { media, fontSizes, colors } from 'utils/styleUtils';\n\nconst Container = styled.main`\n  min-height: calc(\n    100vh - ${(props) => props.theme.menuHeight + props.theme.footerHeight}px\n  );\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  background: ${colors.background};\n\n  ${media.smallerThanMaxTablet`\n    min-height: calc(100vh - ${(props) => props.theme.mobileMenuHeight}px - ${(\n    props\n  ) => props.theme.mobileTopBarHeight}px);\n  `}\n`;\n\nconst StyledContentContainer = styled(ContentContainer)`\n  flex: 1 1 auto;\n  padding-top: 60px;\n  padding-bottom: 100px;\n\n  ${media.smallerThanMinTablet`\n    padding-top: 30px;\n  `}\n`;\n\nconst PageTitle = styled.h1`\n  color: ${({ theme }) => theme.colorText};\n  font-size: ${fontSizes.xxxxl}px;\n  line-height: normal;\n  font-weight: 500;\n  text-align: center;\n  padding: 0;\n  margin: 0;\n  margin-bottom: 0px;\n\n  ${media.smallerThanMaxTablet`\n    text-align: left;\n    margin-bottom: 0px;\n  `}\n\n  ${media.smallerThanMinTablet`\n    font-size: ${fontSizes.xxxl}px;\n  `}\n`;\n\nexport default React.memo(() => (\n  <>\n    <ProjectsIndexMeta />\n    <Container>\n      <StyledContentContainer mode=\"page\">\n        <PageTitle>\n          <FormattedMessage {...messages.pageTitle} />\n        </PageTitle>\n        <ProjectAndFolderCards\n          showTitle={false}\n          layout=\"threecolumns\"\n          publicationStatusFilter={['published', 'archived']}\n        />\n      </StyledContentContainer>\n      <CityLogoSection />\n    </Container>\n  </>\n));\n","import React, { memo } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport Fragment from 'components/Fragment';\n\n// i18n\nimport { InjectedIntlProps } from 'react-intl';\nimport { injectIntl } from 'utils/cl-intl';\nimport messages from './messages';\n\n// hooks\nimport useLocale from 'hooks/useLocale';\nimport useAppConfiguration from 'hooks/useAppConfiguration';\n\n// style\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-top: 110px;\n  padding-bottom: 130px;\n  background: #fff;\n  width: 100%;\n`;\n\nconst LogoLink = styled.a`\n  cursor: pointer;\n`;\n\nconst TenantLogo = styled.img`\n  height: 50px;\n  margin-bottom: 20px;\n`;\n\ninterface Props {}\n\nconst CityLogoSection = memo(\n  ({ intl: { formatMessage } }: Props & InjectedIntlProps) => {\n    const locale = useLocale();\n    const appConfiguration = useAppConfiguration();\n\n    if (!isNilOrError(appConfiguration)) {\n      const currentTenantLogo =\n        appConfiguration.data.attributes.logo?.medium || null;\n      const tenantSite =\n        appConfiguration.data.attributes.settings.core.organization_site;\n      const footerLocale = `footer-city-logo-${locale}`;\n\n      if (currentTenantLogo) {\n        return (\n          <Fragment\n            title={formatMessage(messages.iframeTitle)}\n            name={footerLocale}\n          >\n            <Container id=\"hook-footer-logo\">\n              {tenantSite ? (\n                <LogoLink href={tenantSite} target=\"_blank\">\n                  <TenantLogo src={currentTenantLogo} alt=\"Organization logo\" />\n                </LogoLink>\n              ) : (\n                <TenantLogo src={currentTenantLogo} alt=\"Organization logo\" />\n              )}\n            </Container>\n          </Fragment>\n        );\n      }\n    }\n\n    return null;\n  }\n);\n\nexport default injectIntl(CityLogoSection);\n","import React from 'react';\nimport { isEqual } from 'lodash-es';\nimport { Subscription, BehaviorSubject } from 'rxjs';\nimport { IAvatars, randomAvatarsStream } from 'services/avatars';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { distinctUntilChanged, switchMap } from 'rxjs/operators';\n\ninterface InputProps {\n  limit?: number;\n  context?: {\n    type: 'project' | 'group' | 'idea' | 'initiative';\n    id: string;\n  };\n}\n\ntype children = (renderProps: GetRandomAvatarsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  avatars: IAvatars | undefined | null;\n}\n\nexport type GetRandomAvatarsChildProps = IAvatars | undefined | null;\n\nexport default class GetRandomAvatars extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      avatars: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { limit, context } = this.props;\n    this.inputProps$ = new BehaviorSubject({ limit, context });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => isEqual(prev, next)),\n          switchMap(({ limit, context }) => {\n            if (context) {\n              return randomAvatarsStream({\n                queryParameters: {\n                  limit,\n                  context_type: context.type,\n                  context_id: context.id,\n                },\n              }).observable;\n            }\n\n            return randomAvatarsStream({\n              queryParameters: {\n                limit,\n              },\n            }).observable;\n          })\n        )\n        .subscribe((avatars) =>\n          this.setState({ avatars: !isNilOrError(avatars) ? avatars : null })\n        ),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { limit, context } = this.props;\n    this.inputProps$.next({ limit, context });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { avatars } = this.state;\n    return (children as children)(avatars);\n  }\n}\n","import React, { memo } from 'react';\nimport { Spinner } from 'cl2-component-library';\nimport styled from 'styled-components';\nimport { defaultCardStyle } from 'utils/styleUtils';\n\nconst Container = styled.div`\n  width: 100%;\n  height: 300px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  ${defaultCardStyle};\n`;\n\ninterface Props {\n  className?: string;\n}\n\nconst LoadingBox = memo<Props>(({ className }) => (\n  <Container className={className || ''}>\n    <Spinner />\n  </Container>\n));\n\nexport default LoadingBox;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  iframeTitle: {\n    id: 'app.components.CityLogoSection.iframeTitle',\n    defaultMessage: 'More information about {orgName}',\n  },\n});\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  numberOfUsers: {\n    id: 'app.components.AvatarBubbles.numberOfUsers',\n    defaultMessage: '{numberOfUsers} users',\n  },\n});\n","import React from 'react';\nimport { isEqual } from 'lodash-es';\nimport { Subscription, BehaviorSubject, combineLatest } from 'rxjs';\nimport { distinctUntilChanged, switchMap, map, filter } from 'rxjs/operators';\nimport { IAvatarData, avatarByIdStream } from 'services/avatars';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  ids?: string[];\n}\n\ntype children = (renderProps: GetAvatarsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  avatars: (IAvatarData | Error)[] | undefined | null | Error;\n}\n\nexport type GetAvatarsChildProps =\n  | (IAvatarData | Error)[]\n  | undefined\n  | null\n  | Error;\n\nexport default class GetAvatars extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      avatars: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { ids } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ ids });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => isEqual(prev, next)),\n          filter(({ ids }) => !!(ids && ids.length > 0)),\n          switchMap(({ ids }: { ids: string[] }) => {\n            return combineLatest(\n              ids.map((id) =>\n                avatarByIdStream(id).observable.pipe(\n                  map((avatar) =>\n                    !isNilOrError(avatar) ? avatar.data : avatar\n                  )\n                )\n              )\n            );\n          })\n        )\n        .subscribe((avatars) => {\n          this.setState({ avatars });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    this.inputProps$.next({ ids: this.props.ids });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { avatars } = this.state;\n    return (children as children)(avatars);\n  }\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\n\nconst apiEndpoint = `${API_PATH}/avatars`;\n\nexport interface IAvatarData {\n  id: string;\n  type: string;\n  attributes: {\n    avatar: {\n      small: string;\n      medium: string;\n      large: string;\n    };\n  };\n}\n\nexport interface IAvatar {\n  data: IAvatarData;\n}\n\nexport interface IAvatars {\n  data: IAvatarData[];\n  meta: {\n    total: number;\n  };\n}\n\n/*\n * cf http://developers.citizenlab.co/api-docs/frontweb_api/epic/CL2-2838-landing-page-i1/avatars/list_random_user_avatars.html\n * limit: number of avaters returned, defaults to 5, max 10.\n * context_type: when null, context is the whole platform.\n */\ninterface IAvatarsQueryParams {\n  limit?: number | null;\n  context_type?: 'group' | 'project' | 'idea' | 'initiative' | null;\n  context_id?: string | null;\n}\n\ninterface IStreamAvatarsParams extends IStreamParams {\n  queryParameters?: IAvatarsQueryParams;\n}\n\nexport function avatarByIdStream(avatarId: string) {\n  return streams.get<IAvatar>({\n    apiEndpoint: `${API_PATH}/avatars/${avatarId}`,\n    cacheStream: false,\n  });\n}\n\nexport function randomAvatarsStream(\n  streamParams: IStreamAvatarsParams | null = null\n) {\n  return streams.get<IAvatars>({\n    apiEndpoint,\n    ...streamParams,\n    cacheStream: false,\n  });\n}\n","// libraries\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { adopt } from 'react-adopt';\n\n// i18n\nimport messages from './messages';\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\n\n// utils\nimport getAlternateLinks from 'utils/cl-router/getAlternateLinks';\nimport getCanonicalLink from 'utils/cl-router/getCanonicalLink';\n\n// resources\nimport GetAuthUser, { GetAuthUserChildProps } from 'resources/GetAuthUser';\nimport GetAppConfigurationLocales, {\n  GetAppConfigurationLocalesChildProps,\n} from 'resources/GetAppConfigurationLocales';\n\ninterface InputProps {}\n\ninterface DataProps {\n  authUser: GetAuthUserChildProps;\n  tenantLocales: GetAppConfigurationLocalesChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nconst ProjectsMeta = React.memo<Props & InjectedIntlProps>(\n  ({ intl, authUser, tenantLocales }) => {\n    const { formatMessage } = intl;\n    const { location } = window;\n    const projectsIndexTitle = formatMessage(messages.metaTitle);\n    const projectsIndexDescription = formatMessage(messages.metaDescription);\n\n    return (\n      <Helmet>\n        <title>\n          {`\n          ${\n            authUser && authUser.attributes.unread_notifications\n              ? `(${authUser.attributes.unread_notifications}) `\n              : ''\n          }\n          ${projectsIndexTitle}`}\n        </title>\n        {getCanonicalLink()}\n        {getAlternateLinks(tenantLocales)}\n        <meta name=\"title\" content={projectsIndexTitle} />\n        <meta name=\"description\" content={projectsIndexDescription} />\n        <meta property=\"og:title\" content={projectsIndexTitle} />\n        <meta property=\"og:description\" content={projectsIndexDescription} />\n        <meta property=\"og:url\" content={location.href} />\n      </Helmet>\n    );\n  }\n);\n\nconst ProjectsMetaWithHoc = injectIntl<Props>(ProjectsMeta);\n\nconst Data = adopt<DataProps, InputProps>({\n  tenantLocales: <GetAppConfigurationLocales />,\n  authUser: <GetAuthUser />,\n});\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataprops) => <ProjectsMetaWithHoc {...inputProps} {...dataprops} />}\n  </Data>\n);\n"],"sourceRoot":""}