{"version":3,"sources":["webpack:///./app/components/InitiativeForm/messages.ts","webpack:///./app/components/UI/TopicsPicker/index.tsx","webpack:///./app/components/InitiativeForm/index.tsx","webpack:///./app/services/initiativeImages.ts","webpack:///./app/components/UI/TopicsPicker/messages.ts","webpack:///./app/utils/locationTools.ts"],"names":["defineMessages","header","id","defaultMessage","orgName","tipsTitle","elaborate","meaningfulTitle","visualise","relevantAttachments","shareSocialMedia","formGeneralSectionTitle","titleEmptyError","titleMinLengthError","titleMaxLengthError","titleLabel","titleLabelSubtext2","descriptionLabel","descriptionLabelSubtext","descriptionEmptyError","descriptionBodyLengthError","formDetailsSectionTitle","topicEmptyError","topicsLabel","topicsLabelDescription","locationLabel","locationLabelSubtext","locationPlaceholder","formAttachmentsSectionTitle","bannerUploadLabel","bannerUploadLabelSubtext","imageDropzonePlaceholder","imageUploadLabel","imageUploadLabelSubtext","imageEmptyError","fileUploadLabel","fileUploadLabelSubtext","publishButton","submitApiError","profanityError","guidelinesLinkText","TopicsContainer","styled","div","isRtl","TopicSwitch","button","colors","label","fontSizes","small","separationDark","theme","colorSecondary","darken","lighten","TopicsPicker","memo","onChange","onBlur","selectedTopicIds","localize","availableTopics","className","setRef","selectedTopics","topicIds","removeFocus","useCallback","event","preventDefault","isNilOrError","numberOfSelectedTopics","length","selectedTopicNames","filter","topic","map","attributes","title_multiloc","join","index","topicId","isSelected","includes","key","onClick","stopPropagation","newTopics","i","lastIndexOf","push","splice","item","onMouseDown","ref","undefined","disabled","value","ScreenReaderOnly","FormattedMessage","messages","values","Form","form","StyledFormSection","FormSection","media","largePhone","InitiativeForm","props","title","locale","titleMinLength","message","titleMaxLength","body_multiloc","body","stripHtmlTags","bodyMinLength","topic_ids","image","fieldName","errors","Object","assign","state","get","validations","setState","setTimeout","touched","onSave","every","val","onPublish","newTouched","newErrors","requiredFields","forEach","titleInputElement","align","offset","duration","focus","descriptionElement","topicElement","onChangeTopics","banner","onChangeBanner","onChangeImage","element","onChangeTitle","onChangeBody","this","bowser","mobile","prevProps","errorEntries","entries","entry","validate","publishing","position","onChangePosition","files","onAddFile","onRemoveFile","publishError","formatMessage","intl","apiErrors","topics","titleProfanityError","descriptionProfanityError","mapsLoaded","window","googleMaps","FormSectionTitle","SectionField","FormLabel","labelMessage","subtextMessage","Input","type","handleTitleOnChange","autocomplete","handleTitleInputSetRef","maxCharCount","text","guidelinesLink","to","target","htmlFor","noVideos","noAlign","handleBodyOnChange","handleDescriptionSetRef","changeAndSaveTopics","handleTopicsPickerSetRef","optional","LocationInput","placeholder","images","imagePreviewRatio","acceptedFileTypes","onAdd","addBanner","onRemove","removeBanner","header_bg","addImage","removeImage","onFileAdd","onFileRemove","FormSubmitFooter","error","errorMessage","processing","onSubmit","handleOnPublish","React","Component","injectIntl","initiativeId","imageId","apiEndpoint","API_PATH","streams","streamParams","delete","base64","ordering","bodyData","add","initiativeImage","initiativeByIdStream","fetch","address","Promise","resolve","google","maps","Geocoder","geocode","results","status","response","GeocoderStatus","OK","lat","geometry","location","lng","isNumber","coordinates","formattedAddress","formatted_address"],"mappings":"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","file":"17.0dffad9e73f4103c52b0.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  // Header Messages\n  header: {\n    id: 'app.containers.InitiativesNewPage.header',\n    defaultMessage:\n      'Start your own initiative and make your voice heard by {styledOrgName}',\n  },\n  orgName: {\n    id: 'app.containers.InitiativesNewPage.orgName',\n    defaultMessage: '{orgName}',\n  },\n  // Tips Box Messages\n  tipsTitle: {\n    id: 'app.containers.InitiativesNewPage.tipsTitle',\n    defaultMessage: 'Tips and tricks for a successful initiative',\n  },\n  elaborate: {\n    id: 'app.containers.InitiativesNewPage.elaborate',\n    defaultMessage:\n      'Take the time to elaborate on your proposal. If necessary, type a draft first and then copy-paste it here. As soon as you post it, others will be able to read it and the time will start running.',\n  },\n  meaningfulTitle: {\n    id: 'app.containers.InitiativesNewPage.meaningfulTitle',\n    defaultMessage:\n      'Choose a meaningful title that explains clearly what your proposal entails.',\n  },\n  visualise: {\n    id: 'app.containers.InitiativesNewPage.visualise',\n    defaultMessage:\n      'Make sure to visualise your proposal with a fitting image, so that it stands out more.',\n  },\n  relevantAttachments: {\n    id: 'app.containers.InitiativesNewPage.relevantAttachments',\n    defaultMessage:\n      'Add relevant attachments, such as videos, inspiring examples, technical details or plans.',\n  },\n  shareSocialMedia: {\n    id: 'app.containers.InitiativesNewPage.shareSocialMedia',\n    defaultMessage:\n      'Share your idea on social media and other channels to gather support from others.',\n  },\n  // Form Messages\n  formGeneralSectionTitle: {\n    id: 'app.components.InitiativeForm.formGeneralSectionTitle',\n    defaultMessage: 'What is your initiative?',\n  },\n  titleEmptyError: {\n    id: 'app.components.InitiativeForm.titleEmptyError',\n    defaultMessage: 'Please provide a title',\n  },\n  titleMinLengthError: {\n    id: 'app.components.InitiativeForm.titleMinLengthError',\n    defaultMessage:\n      'The provided title is too short. Please add a title that is between 10 and 72 characters long.',\n  },\n  titleMaxLengthError: {\n    id: 'app.components.InitiativeForm.titleMaxLengthError',\n    defaultMessage:\n      'The provided title is too long. Please add a title that is between 10 and 72 characters long.',\n  },\n  titleLabel: {\n    id: 'app.components.InitiativeForm.titleLabel',\n    defaultMessage: 'Title',\n  },\n  titleLabelSubtext2: {\n    id: 'app.components.InitiativeForm.titleLabelSubtext2',\n    defaultMessage:\n      'Choose a descriptive, yet concise title (min. 10 characters, max. 72 characters)',\n  },\n  descriptionLabel: {\n    id: 'app.components.InitiativeForm.descriptionLabel',\n    defaultMessage: 'What is your initiative about?',\n  },\n  descriptionLabelSubtext: {\n    id: 'app.components.InitiativeForm.descriptionLabelSubtext',\n    defaultMessage: 'Describe your initiative clearly (min. 500 characters)',\n  },\n  descriptionEmptyError: {\n    id: 'app.components.InitiativeForm.descriptionEmptyError',\n    defaultMessage: 'Please provide a description',\n  },\n  descriptionBodyLengthError: {\n    id: 'app.components.InitiativeForm.descriptionBodyLengthError',\n    defaultMessage:\n      'The initiative description must be at least 30 characters long',\n  },\n  formDetailsSectionTitle: {\n    id: 'app.components.InitiativeForm.formDetailsSectionTitle',\n    defaultMessage: 'Details',\n  },\n  topicEmptyError: {\n    id: 'app.components.InitiativeForm.topicEmptyError',\n    defaultMessage: 'Please provide a topic',\n  },\n  topicsLabel: {\n    id: 'app.components.InitiativeForm.topicsLabel',\n    defaultMessage: 'Select the topic of your initiative',\n  },\n  topicsLabelDescription: {\n    id: 'app.components.InitiativeForm.topicsLabelDescription',\n    defaultMessage: 'Select the topics that best cover your proposal.',\n  },\n  locationLabel: {\n    id: 'app.components.InitiativeForm.locationLabel',\n    defaultMessage: 'Select a Location',\n  },\n  locationLabelSubtext: {\n    id: 'app.components.InitiativeForm.locationLabelSubtext',\n    defaultMessage: 'Where is your initiative located?',\n  },\n  locationPlaceholder: {\n    id: 'app.components.InitiativeForm.locationPlaceholder',\n    defaultMessage: 'Type an address',\n  },\n  formAttachmentsSectionTitle: {\n    id: 'app.components.InitiativeForm.formAttachmentsSectionTitle',\n    defaultMessage: 'Images and attachments',\n  },\n  bannerUploadLabel: {\n    id: 'app.components.InitiativeForm.bannerUploadLabel',\n    defaultMessage: 'Add a banner',\n  },\n  bannerUploadLabelSubtext: {\n    id: 'app.components.InitiativeForm.bannerUploadLabelSubtext',\n    defaultMessage:\n      'This cover will be used at the top of your initiative page',\n  },\n  imageDropzonePlaceholder: {\n    id: 'app.container.InitiativeForm.imageDropzonePlaceholder',\n    defaultMessage: 'Drop your image here',\n  },\n  imageUploadLabel: {\n    id: 'app.components.InitiativeForm.imageUploadLabel',\n    defaultMessage: 'Add a main picture',\n  },\n  imageUploadLabelSubtext: {\n    id: 'app.components.InitiativeForm.imageUploadLabelSubtext',\n    defaultMessage: 'This image is shown on top of your initiative’s page',\n  },\n  imageEmptyError: {\n    id: 'app.components.InitiativeForm.imageEmptyError',\n    defaultMessage: 'Please provide an image',\n  },\n  fileUploadLabel: {\n    id: 'app.container.InitiativeForm.fileUploadLabel',\n    defaultMessage: 'Add files to your initiative',\n  },\n  fileUploadLabelSubtext: {\n    id: 'app.container.InitiativeForm.fileUploadLabelSubtext',\n    defaultMessage: 'Upload files to give others more information and context',\n  },\n  publishButton: {\n    id: 'app.components.InitiativeForm.publishButton',\n    defaultMessage: 'Publish your initiative',\n  },\n  submitApiError: {\n    id: 'app.components.InitiativeForm.submitApiError',\n    defaultMessage:\n      'There was an issue submitting the form. Please check for any errors and try again.',\n  },\n  profanityError: {\n    id: 'app.components.InitiativeForm.profanityError',\n    defaultMessage:\n      'You may have used one or more words that are considered profanity by {guidelinesLink}. Please alter your text to remove any profanities that might be present.',\n  },\n  guidelinesLinkText: {\n    id: 'app.components.InitiativeForm.guidelinesLinkText',\n    defaultMessage: 'our guidelines',\n  },\n});\n","import React, { memo, useCallback, MouseEvent } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n// styles\nimport styled from 'styled-components';\nimport { colors, fontSizes, isRtl } from 'utils/styleUtils';\nimport { ScreenReaderOnly } from 'utils/a11y';\nimport { darken, lighten } from 'polished';\n\n// types\nimport { ITopicData } from 'services/topics';\n\n// intl\nimport T from 'components/T';\nimport injectLocalize, { InjectedLocalized } from 'utils/localize';\nimport messages from './messages';\nimport { FormattedMessage } from 'utils/cl-intl';\n\n// hooks\nimport useTopics from 'hooks/useTopics';\n\nconst TopicsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 10px;\n\n  ${isRtl`\n    justify-content: flex-end;\n  `}\n`;\n\nconst TopicSwitch = styled.button`\n  color: ${colors.label};\n  font-size: ${fontSizes.small}px;\n  font-weight: 400;\n  line-height: normal;\n  text-align: left;\n  display: inline-block;\n  padding-left: 18px;\n  padding-right: 18px;\n  padding-top: 11px;\n  padding-bottom: 11px;\n  margin: 0px;\n  margin-right: 6px;\n  margin-bottom: 8px;\n  cursor: pointer;\n  user-select: none;\n  border: solid 1px ${colors.separationDark};\n  border-radius: 5px;\n  transition: all 80ms ease-out;\n\n  &:not(.selected):not(:disabled) {\n    &:hover {\n      color: ${({ theme }) => theme.colorSecondary};\n      border-color: ${({ theme }) => theme.colorSecondary};\n    }\n  }\n\n  &.selected {\n    color: #fff;\n    background: ${({ theme }) => theme.colorSecondary};\n    border-color: ${({ theme }) => theme.colorSecondary};\n\n    &:hover {\n      background: ${({ theme }) => darken(0.15, theme.colorSecondary)};\n      border-color: ${({ theme }) => darken(0.15, theme.colorSecondary)};\n    }\n  }\n\n  &:disabled {\n    color: ${({ theme }) => lighten(0.4, theme.colors.label)};\n    border-color: ${({ theme }) => lighten(0.45, theme.colors.label)};\n    cursor: not-allowed;\n  }\n`;\n\nexport interface InputProps {\n  onChange: (tocisIds: string[]) => void;\n  onBlur?: () => void;\n  selectedTopicIds: string[];\n  id?: string;\n  className?: string;\n  setRef?: (element: HTMLButtonElement) => void;\n  availableTopics: ITopicData[];\n}\n\ninterface Props extends InputProps {}\n\nconst TopicsPicker = memo(\n  ({\n    onChange,\n    onBlur,\n    selectedTopicIds,\n    localize,\n    availableTopics,\n    className,\n    setRef,\n  }: Props & InjectedLocalized) => {\n    const selectedTopics = useTopics({ topicIds: selectedTopicIds });\n\n    const handleOnChange = (topicId: string) => (event) => {\n      event.stopPropagation();\n      event.preventDefault();\n      const newTopics = [...selectedTopicIds];\n\n      if (!selectedTopicIds) {\n        onChange([topicId]);\n      } else {\n        const i = newTopics.lastIndexOf(topicId);\n        const topicNotSelectedYet = i === -1;\n\n        if (topicNotSelectedYet) {\n          newTopics.push(topicId);\n        } else {\n          newTopics.splice(i, 1);\n        }\n\n        onChange(newTopics);\n      }\n    };\n\n    const removeFocus = useCallback((event: MouseEvent<HTMLElement>) => {\n      event.preventDefault();\n    }, []);\n\n    if (!isNilOrError(availableTopics)) {\n      const numberOfSelectedTopics = selectedTopicIds.length;\n      const selectedTopicNames = !isNilOrError(selectedTopics)\n        ? selectedTopics\n            .filter((topic) => !isNilOrError(topic))\n            .map((topic: ITopicData) =>\n              localize(topic.attributes.title_multiloc)\n            )\n            .join(', ')\n        : '';\n      return (\n        <>\n          <TopicsContainer\n            onBlur={onBlur}\n            className={`${className} e2e-topics-picker`}\n          >\n            {availableTopics.map((topic, index) => {\n              const isSelected = selectedTopicIds.includes(topic.id);\n\n              return (\n                <TopicSwitch\n                  key={topic.id}\n                  onClick={handleOnChange(topic.id)}\n                  className={[\n                    'e2e-topics-picker-item',\n                    isSelected ? 'selected' : null,\n                  ]\n                    .filter((item) => item)\n                    .join(' ')}\n                  onMouseDown={removeFocus}\n                  ref={index === 0 ? setRef : undefined}\n                  disabled={false}\n                >\n                  <T value={topic.attributes.title_multiloc} />\n                </TopicSwitch>\n              );\n            })}\n          </TopicsContainer>\n          <ScreenReaderOnly aria-live=\"polite\">\n            <FormattedMessage\n              {...messages.selectedTopics}\n              values={{ numberOfSelectedTopics, selectedTopicNames }}\n            />\n          </ScreenReaderOnly>\n        </>\n      );\n    }\n\n    return null;\n  }\n);\n\nexport default injectLocalize(TopicsPicker);\n","import * as React from 'react';\nimport { get } from 'lodash-es';\nimport { stripHtmlTags, isNilOrError } from 'utils/helperUtils';\nimport styled from 'styled-components';\nimport { media } from 'utils/styleUtils';\nimport scrollToComponent from 'react-scroll-to-component';\n\n// Components\nimport {\n  FormSection,\n  FormSectionTitle,\n  FormLabel,\n  FormSubmitFooter,\n} from 'components/UI/FormComponents';\nimport { SectionField } from 'components/admin/Section';\nimport TopicsPicker from 'components/UI/TopicsPicker';\nimport { Input, LocationInput } from 'cl2-component-library';\nimport QuillEditor from 'components/UI/QuillEditor';\nimport ImagesDropzone from 'components/UI/ImagesDropzone';\nimport FileUploader from 'components/UI/FileUploader';\nimport Error from 'components/UI/Error';\nimport Link from 'utils/cl-router/Link';\n\n// intl\nimport messages from './messages';\nimport { InjectedIntlProps } from 'react-intl';\nimport { IMessageInfo, injectIntl, FormattedMessage } from 'utils/cl-intl';\n\n// typings\nimport { Multiloc, Locale, UploadFile } from 'typings';\nimport bowser from 'bowser';\nimport { ITopicData } from 'services/topics';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 100px;\n`;\n\nconst StyledFormSection = styled(FormSection)`\n  ${media.largePhone`\n    padding-left: 18px;\n    padding-right: 18px;\n  `}\n`;\n\nexport interface SimpleFormValues {\n  title_multiloc: Multiloc | undefined | null;\n  body_multiloc: Multiloc | undefined | null;\n  topic_ids: string[];\n  position: string | undefined | null;\n}\n\nexport interface FormValues extends SimpleFormValues {\n  banner: UploadFile | undefined | null;\n  image: UploadFile | undefined | null;\n  files: UploadFile[];\n}\n\nexport interface FormProps {\n  saving?: boolean;\n  publishing: boolean;\n  onSave: () => void;\n  onPublish: () => void;\n}\n\ninterface Props extends FormValues, FormProps {\n  onChangeTitle: (newValue: Multiloc) => void;\n  onChangeBody: (newValue: Multiloc) => void;\n  onChangeTopics: (newValue: string[]) => void;\n  onChangePosition: (newValue: string) => void;\n  onChangeBanner: (newValue: UploadFile | null) => void;\n  onChangeImage: (newValue: UploadFile | null) => void;\n  onAddFile: (newValue: UploadFile) => void;\n  onRemoveFile: (newValue: UploadFile) => void;\n  locale: Locale;\n  publishError: boolean;\n  apiErrors: any;\n  topics: ITopicData[];\n  titleProfanityError: boolean;\n  descriptionProfanityError: boolean;\n}\n\ninterface State {\n  touched: {\n    [key in keyof FormValues]?: boolean | undefined;\n  };\n  errors: {\n    [key in keyof FormValues]?: IMessageInfo | undefined;\n  };\n}\n\nclass InitiativeForm extends React.Component<Props & InjectedIntlProps, State> {\n  static titleMinLength = 10;\n  static titleMaxLength = 72;\n  static bodyMinLength = process.env.NODE_ENV === 'development' ? 10 : 30;\n  static requiredFields = ['title_multiloc', 'body_multiloc', 'topic_ids'];\n\n  titleInputElement: HTMLInputElement | null;\n  descriptionElement: HTMLDivElement | null;\n  topicElement: HTMLButtonElement | null;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      touched: {} as State['touched'],\n      errors: {} as State['errors'],\n    };\n    this.titleInputElement = null;\n    this.descriptionElement = null;\n    this.topicElement = null;\n  }\n\n  componentDidMount() {\n    const errors = {};\n    InitiativeForm.requiredFields.forEach((fieldName) => {\n      errors[fieldName] = this.validations[fieldName]();\n    });\n    this.setState({ errors });\n\n    if (!bowser.mobile && this.titleInputElement !== null) {\n      setTimeout(\n        () => (this.titleInputElement as HTMLInputElement).focus(),\n        50\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    // we generally validate on blur, but when the form is almost ready to be\n    // sent, we want to have the publish button active as soon as it's usable\n\n    // getting the non null errors\n    const errorEntries = Object.entries(this.state.errors).filter(\n      (entry) => entry[1]\n    );\n    // if there's only one\n    if (errorEntries.length === 1) {\n      // if the value of this field was changed\n      if (prevProps[errorEntries[0][0]] !== this.props[errorEntries[0][0]]) {\n        // run validation for that field\n        this.validate(errorEntries[0][0]);\n      }\n    }\n\n    // also, when the form is in a publishable state, if we modify a field we\n    // want to make sure detect the form is no longer valid as soon as possible\n\n    // if the form is valid\n    if (errorEntries.length === 0) {\n      // find what prop whas changed and run its validation\n      Object.entries(prevProps)\n        .filter((entry) => entry[1] !== this.props[entry[0]])\n        .forEach(\n          (entry) => this.validations[entry[0]] && this.validate(entry[0])\n        );\n    }\n  }\n\n  validations = {\n    title_multiloc: () => {\n      const { title_multiloc } = this.props;\n      const title = title_multiloc\n        ? title_multiloc[this.props.locale]\n        : undefined;\n\n      if (\n        title &&\n        title.length > 0 &&\n        title.length < InitiativeForm.titleMinLength\n      ) {\n        return { message: messages.titleMinLengthError };\n      } else if (\n        title &&\n        title.length > 0 &&\n        title.length > InitiativeForm.titleMaxLength\n      ) {\n        return { message: messages.titleMaxLengthError };\n      } else if (!title || title === '') {\n        return { message: messages.titleEmptyError };\n      }\n\n      return undefined;\n    },\n    body_multiloc: () => {\n      const { body_multiloc } = this.props;\n      const body = body_multiloc ? body_multiloc[this.props.locale] : undefined;\n      if (\n        body &&\n        stripHtmlTags(body).length < InitiativeForm.bodyMinLength &&\n        body.length > 0\n      ) {\n        return { message: messages.descriptionBodyLengthError };\n      } else if (!body || body === '') {\n        return { message: messages.descriptionEmptyError };\n      }\n      return undefined;\n    },\n    topic_ids: () => {\n      const { topic_ids } = this.props;\n      if (topic_ids.length === 0) {\n        return { message: messages.topicEmptyError };\n      }\n      return undefined;\n    },\n    image: () => {\n      const { image } = this.props;\n      if (!image) {\n        return { message: messages.imageEmptyError };\n      }\n      return undefined;\n    },\n  };\n\n  validate = (fieldName: string) => {\n    const errors = Object.assign({}, this.state.errors);\n    errors[fieldName] = get(this.validations, fieldName, () => undefined)();\n    this.setState({ errors });\n  };\n\n  onBlur = (fieldName: string) => () => {\n    // making sure the props are updated before validation and save.\n    setTimeout(() => {\n      const touched = Object.assign({}, this.state.touched);\n      touched[fieldName] = true;\n      const errors = Object.assign({}, this.state.errors);\n      errors[fieldName] = get(this.validations, fieldName, () => undefined)();\n      this.setState({ touched, errors });\n      this.props.onSave();\n    }, 5);\n  };\n\n  handleOnPublish = () => {\n    const { errors, touched } = this.state;\n\n    if (Object.values(errors).every((val) => val === undefined)) {\n      this.props.onPublish();\n    } else {\n      const newTouched = Object.assign({}, touched);\n      const newErrors = Object.assign({}, errors);\n      InitiativeForm.requiredFields.forEach((fieldName) => {\n        newTouched[fieldName] = true;\n        newErrors[fieldName] = get(\n          this.validations,\n          fieldName,\n          () => undefined\n        )();\n      });\n\n      this.setState({ touched: newTouched, errors: newErrors });\n\n      if (newErrors.title_multiloc && this.titleInputElement) {\n        scrollToComponent(this.titleInputElement, {\n          align: 'top',\n          offset: -240,\n          duration: 300,\n        });\n        setTimeout(\n          () => this.titleInputElement && this.titleInputElement.focus(),\n          300\n        );\n      } else if (newErrors.body_multiloc && this.descriptionElement) {\n        scrollToComponent(this.descriptionElement, {\n          align: 'top',\n          offset: -200,\n          duration: 300,\n        });\n        setTimeout(\n          () => this.descriptionElement && this.descriptionElement.focus(),\n          300\n        );\n      } else if (newErrors.topic_ids && this.topicElement) {\n        scrollToComponent(this.topicElement, {\n          align: 'top',\n          offset: -200,\n          duration: 300,\n        });\n        setTimeout(() => this.topicElement?.focus(), 300);\n      }\n    }\n  };\n\n  changeAndSaveTopics = (topic_ids) => {\n    this.props.onChangeTopics(topic_ids);\n    this.onBlur('topic_ids')();\n  };\n\n  addBanner = (banner: UploadFile[]) => {\n    this.props.onChangeBanner(banner[0]);\n    this.onBlur('banner')();\n  };\n\n  removeBanner = () => {\n    this.props.onChangeBanner(null);\n    this.onBlur('banner')();\n  };\n\n  addImage = (image: UploadFile[]) => {\n    this.props.onChangeImage(image[0]);\n    this.onBlur('image')();\n  };\n\n  removeImage = () => {\n    this.props.onChangeImage(null);\n    this.onBlur('image')();\n  };\n\n  handleTitleInputSetRef = (element: HTMLInputElement) => {\n    this.titleInputElement = element;\n  };\n\n  handleDescriptionSetRef = (element: HTMLDivElement) => {\n    this.descriptionElement = element;\n  };\n\n  handleTopicsPickerSetRef = (element: HTMLButtonElement) => {\n    this.topicElement = element;\n  };\n\n  handleTitleOnChange = (value: string, locale: Locale | undefined) => {\n    if (locale && this.props.onChangeTitle) {\n      this.props.onChangeTitle({\n        ...this.props.title_multiloc,\n        [locale]: value,\n      });\n    }\n  };\n\n  handleBodyOnChange = (value: string, locale: Locale | undefined) => {\n    if (locale && this.props.onChangeBody) {\n      this.props.onChangeBody({\n        ...this.props.body_multiloc,\n        [locale]: value,\n      });\n    }\n  };\n\n  render() {\n    const {\n      locale,\n      title_multiloc,\n      publishing,\n      body_multiloc,\n      topic_ids,\n      position,\n      onChangePosition,\n      banner,\n      image,\n      files,\n      onAddFile,\n      onRemoveFile,\n      publishError,\n      intl: { formatMessage },\n      apiErrors,\n      topics,\n      titleProfanityError,\n      descriptionProfanityError,\n    } = this.props;\n\n    const { touched, errors } = this.state;\n\n    const mapsLoaded = window.googleMaps;\n\n    if (!isNilOrError(topics)) {\n      const availableTopics = topics.filter(\n        (topic) => !isNilOrError(topic)\n      ) as ITopicData[];\n\n      return (\n        <Form id=\"initiative-form\">\n          <StyledFormSection>\n            <FormSectionTitle message={messages.formGeneralSectionTitle} />\n\n            <SectionField id=\"e2e-initiative-form-title-section\">\n              <FormLabel\n                labelMessage={messages.titleLabel}\n                subtextMessage={messages.titleLabelSubtext2}\n              >\n                <Input\n                  type=\"text\"\n                  id=\"e2e-initiative-title-input\"\n                  value={title_multiloc?.[locale] || ''}\n                  locale={locale}\n                  onChange={this.handleTitleOnChange}\n                  onBlur={this.onBlur('title_multiloc')}\n                  autocomplete=\"off\"\n                  setRef={this.handleTitleInputSetRef}\n                  maxCharCount={72}\n                />\n                {touched.title_multiloc && errors.title_multiloc ? (\n                  <Error\n                    id=\"e2e-proposal-title-error\"\n                    text={formatMessage(errors.title_multiloc.message)}\n                  />\n                ) : (\n                  apiErrors &&\n                  apiErrors.title_multiloc && (\n                    <Error apiErrors={apiErrors.title_multiloc} />\n                  )\n                )}\n              </FormLabel>\n              {titleProfanityError && (\n                <Error\n                  text={\n                    <FormattedMessage\n                      {...messages.profanityError}\n                      values={{\n                        guidelinesLink: (\n                          <Link to=\"/pages/faq\" target=\"_blank\">\n                            {formatMessage(messages.guidelinesLinkText)}\n                          </Link>\n                        ),\n                      }}\n                    />\n                  }\n                />\n              )}\n            </SectionField>\n\n            <SectionField id=\"e2e-initiative-form-description-section\">\n              <FormLabel\n                id=\"description-label-id\"\n                htmlFor=\"body\"\n                labelMessage={messages.descriptionLabel}\n                subtextMessage={messages.descriptionLabelSubtext}\n              />\n              <QuillEditor\n                id=\"body\"\n                value={body_multiloc?.[locale] || ''}\n                locale={locale}\n                noVideos={true}\n                noAlign={true}\n                onChange={this.handleBodyOnChange}\n                onBlur={this.onBlur('body_multiloc')}\n                setRef={this.handleDescriptionSetRef}\n              />\n              {touched.body_multiloc && errors.body_multiloc ? (\n                <Error text={formatMessage(errors.body_multiloc.message)} />\n              ) : (\n                apiErrors &&\n                apiErrors.body_multiloc && (\n                  <Error apiErrors={apiErrors.body_multiloc} />\n                )\n              )}\n              {descriptionProfanityError && (\n                <Error\n                  text={\n                    <FormattedMessage\n                      {...messages.profanityError}\n                      values={{\n                        guidelinesLink: (\n                          <Link to=\"/pages/faq\" target=\"_blank\">\n                            {formatMessage(messages.guidelinesLinkText)}\n                          </Link>\n                        ),\n                      }}\n                    />\n                  }\n                />\n              )}\n            </SectionField>\n          </StyledFormSection>\n\n          <StyledFormSection>\n            <FormSectionTitle message={messages.formDetailsSectionTitle} />\n\n            <SectionField aria-live=\"polite\">\n              <FormLabel\n                labelMessage={messages.topicsLabel}\n                subtextMessage={messages.topicsLabelDescription}\n                htmlFor=\"field-topic-multiple-picker\"\n              />\n              <TopicsPicker\n                id=\"field-topic-multiple-picker\"\n                selectedTopicIds={topic_ids}\n                onChange={this.changeAndSaveTopics}\n                setRef={this.handleTopicsPickerSetRef}\n                availableTopics={availableTopics}\n              />\n              {touched.topic_ids && errors.topic_ids ? (\n                <Error text={formatMessage(errors.topic_ids.message)} />\n              ) : (\n                apiErrors &&\n                apiErrors.topic_ids && <Error apiErrors={apiErrors.topic_ids} />\n              )}\n            </SectionField>\n            {mapsLoaded && (\n              <SectionField>\n                <FormLabel\n                  labelMessage={messages.locationLabel}\n                  subtextMessage={messages.locationLabelSubtext}\n                  optional\n                >\n                  <LocationInput\n                    className=\"e2e-initiative-location-input\"\n                    value={position || ''}\n                    onChange={onChangePosition}\n                    onBlur={this.onBlur('position')}\n                    placeholder={formatMessage(messages.locationPlaceholder)}\n                  />\n                </FormLabel>\n              </SectionField>\n            )}\n          </StyledFormSection>\n          <StyledFormSection>\n            <FormSectionTitle message={messages.formAttachmentsSectionTitle} />\n            <SectionField id=\"e2e-iniatiative-banner-dropzone\">\n              <FormLabel\n                labelMessage={messages.bannerUploadLabel}\n                subtextMessage={messages.bannerUploadLabelSubtext}\n                htmlFor=\"initiative-banner-dropzone\"\n                optional\n              />\n              <ImagesDropzone\n                id=\"initiative-banner-dropzone\"\n                images={banner ? [banner] : null}\n                imagePreviewRatio={360 / 1440}\n                acceptedFileTypes=\"image/jpg, image/jpeg, image/png, image/gif\"\n                onAdd={this.addBanner}\n                onRemove={this.removeBanner}\n              />\n              {apiErrors && apiErrors.header_bg && (\n                <Error apiErrors={apiErrors.header_bg} />\n              )}\n            </SectionField>\n            <SectionField id=\"e2e-iniatiative-img-dropzone\">\n              <FormLabel\n                labelMessage={messages.imageUploadLabel}\n                subtextMessage={messages.imageUploadLabelSubtext}\n                htmlFor=\"initiative-image-dropzone\"\n                optional\n              />\n              <ImagesDropzone\n                id=\"initiative-image-dropzone\"\n                images={image ? [image] : null}\n                imagePreviewRatio={135 / 298}\n                acceptedFileTypes=\"image/jpg, image/jpeg, image/png, image/gif\"\n                onAdd={this.addImage}\n                onRemove={this.removeImage}\n              />\n              {touched.image && errors.image && (\n                <Error text={formatMessage(errors.image.message)} />\n              )}\n            </SectionField>\n            <SectionField>\n              <FormLabel\n                labelMessage={messages.fileUploadLabel}\n                subtextMessage={messages.fileUploadLabelSubtext}\n                optional\n              >\n                <FileUploader\n                  id=\"e2e-initiative-file-upload\"\n                  onFileAdd={onAddFile}\n                  onFileRemove={onRemoveFile}\n                  files={files}\n                  errors={apiErrors}\n                />\n              </FormLabel>\n            </SectionField>\n          </StyledFormSection>\n          <FormSubmitFooter\n            className=\"e2e-initiative-publish-button\"\n            message={messages.publishButton}\n            error={publishError}\n            errorMessage={messages.submitApiError}\n            processing={publishing}\n            onSubmit={this.handleOnPublish}\n          />\n        </Form>\n      );\n    }\n\n    return null;\n  }\n}\n\nconst InitiativeFormWithHOCs = injectIntl(InitiativeForm);\n\nexport default InitiativeFormWithHOCs;\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { initiativeByIdStream } from 'services/initiatives';\nimport { ImageSizes } from 'typings';\n\nexport interface IInitiativeImageData {\n  id: string;\n  type: string;\n  attributes: {\n    versions: ImageSizes;\n    ordering: number;\n    created_at: string;\n    updated_at: string;\n  };\n}\n\nexport interface IInitiativeImage {\n  data: IInitiativeImageData;\n}\n\nexport interface IInitiativeImages {\n  data: IInitiativeImageData[];\n}\n\nexport function initiativeImageStream(initiativeId: string, imageId: string) {\n  const apiEndpoint = `${API_PATH}/initiatives/${initiativeId}/images/${imageId}`;\n  return streams.get<IInitiativeImage>({ apiEndpoint });\n}\n\nexport function initiativeImagesStream(\n  initiativeId: string,\n  streamParams: IStreamParams | null = null\n) {\n  const apiEndpoint = `${API_PATH}/initiatives/${initiativeId}/images`;\n  return streams.get<IInitiativeImages>({ apiEndpoint, ...streamParams });\n}\n\nexport function deleteInitiativeImage(initiativeId: string, imageId: string) {\n  return streams.delete(\n    `${API_PATH}/initiatives/${initiativeId}/images/${imageId}`,\n    imageId\n  );\n}\n\nexport async function addInitiativeImage(\n  initiativeId: string,\n  base64: string,\n  ordering: number | null = null\n) {\n  const apiEndpoint = `${API_PATH}/initiatives/${initiativeId}/images`;\n  const bodyData = {\n    image: {\n      ordering,\n      image: base64,\n    },\n  };\n\n  const initiativeImage = await streams.add<IInitiativeImage>(\n    apiEndpoint,\n    bodyData\n  );\n  await initiativeByIdStream(initiativeId).fetch();\n  return initiativeImage;\n}\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  selectedTopics: {\n    id: 'app.components.TopicsPicker.numberOfSelectedTopics',\n    defaultMessage:\n      'Selected {numberOfSelectedTopics, plural, =0 {zero topics} one {one topic} other {# topics}}. {selectedTopicNames}',\n  },\n});\n","import { isNumber } from 'lodash-es';\n\nexport const geocode = (address: string | null | undefined) => {\n  return new Promise((resolve: (value: GeoJSON.Point | null) => void) => {\n    if (address && window?.google?.maps?.Geocoder) {\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode({ address }, (results, status) => {\n        let response: GeoJSON.Point | null = null;\n\n        if (status === google.maps.GeocoderStatus.OK) {\n          const lat = results?.[0]?.geometry?.location?.lat();\n          const lng = results?.[0]?.geometry?.location?.lng();\n\n          if (isNumber(lat) && isNumber(lng)) {\n            response = {\n              type: 'Point',\n              coordinates: [lng, lat],\n            };\n          }\n        }\n\n        resolve(response);\n      });\n    } else {\n      resolve(null);\n    }\n  });\n};\n\nexport const reverseGeocode = (lat: number, lng: number) => {\n  return new Promise((resolve: (value: string | undefined) => void) => {\n    if (window?.google?.maps?.Geocoder) {\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode(\n        {\n          location: {\n            lat,\n            lng,\n          },\n        },\n        (results, status) => {\n          let response: string | undefined = undefined;\n          const formattedAddress = results?.[0]?.formatted_address;\n\n          if (status === google.maps.GeocoderStatus.OK && formattedAddress) {\n            response = formattedAddress;\n          }\n\n          resolve(response);\n        }\n      );\n    } else {\n      resolve(undefined);\n    }\n  });\n};\n"],"sourceRoot":""}