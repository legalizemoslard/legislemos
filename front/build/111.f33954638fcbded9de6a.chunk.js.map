{"version":3,"sources":["webpack:///./app/resources/GetInitiative.tsx","webpack:///./app/components/admin/PostManager/components/StatusChangeModal/StatusChangeForm.tsx","webpack:///./app/resources/GetInitiativeStatus.tsx","webpack:///./app/components/admin/PostManager/events.ts","webpack:///./app/components/admin/PostManager/components/StatusChangeModal/index.tsx","webpack:///./app/components/admin/PostManager/components/StatusChangeModal/StatusChangeFormWrapper.tsx","webpack:///./app/services/initiativeStatusChanges.ts"],"names":["GetInitiative","props","state","initiative","undefined","this","id","slug","resetOnChange","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","tap","setState","switchMap","isString","initiativeByIdStream","observable","initiativeBySlugStream","of","subscribe","isNilOrError","data","forEach","subscription","unsubscribe","children","React","Component","StyledSection","Section","StyledLocaleSwitcher","LocaleSwitcher","StyledMentionsTextArea","MentionsTextArea","StyledInput","Input","StyledRadio","Radio","ChangeStatusButton","Button","StatusChangeForm","latestOfficialFeedback","mode","onChangeMode","formatMessage","intl","onChange","currentValue","value","name","label","messages","newFeedbackMode","renderFeedbackForm","latestFeedbackMode","editingAllowed","officialFeedbackPost","postType","locale","selectedLocale","onChangeBody","newOfficialFeedback","body_multiloc","onChangeAuthor","author_multiloc","tenantLocales","onSelectedLocaleChange","onLocaleChange","locales","values","placeholder","feedbackBodyPlaceholder","rows","padding","background","ariaLabel","officialUpdateBody","handleBodyOnChange","type","feedbackAuthorPlaceholder","officialUpdateAuthor","handleAuthorOnChange","submit","loading","error","valid","renderFullForm","processing","disabled","onClick","bgColor","colors","clBlue","FormattedMessage","statusChangeSave","text","statusChangeGenericError","PureComponent","StatusChangeFormWithHoC","injectIntl","Data","adopt","inputProps","dataProps","GetInitiativeStatus","initiativeStatus","filter","initiativeStatusStream","ModalEvents","initiativeId","newStatusId","eventEmitter","observeEvent","events","statusChangeModalOpen","eventValue","opened","close","closeOnClickOutside","header","changeStatusModalTitle","closeModal","Container","styled","div","ContextLine","fontSizes","base","ColoredText","span","color","StatusChangeFormWrapper","event","touched","validated","isEmpty","officialFeedbacks","validate","updateInitiativeStatusAddFeedback","then","catch","officialFeedbacksList","updateInitiativeStatusWithExistingFeedback","newStatus","statusChange","initiativeTitle","clBlueDark","attributes","title_multiloc","get","render","postId","StatusChangeFormWrapperWithHocs","statusId","feedbackId","streams","add","API_PATH","initiative_status_change","initiative_status_id","official_feedback_id","response","fetchAllWith","apiEndpoint","official_feedback_attributes"],"mappings":"gTAAA,eACA,YACA,YACA,YACA,YACA,eACA,Y,8cA4BqBA,E,0CAQnB,WAAYC,GAAc,kCACxB,cAAMA,IADkB,2GAExB,EAAKC,MAAQ,CACXC,gBAAYC,GAHU,E,sDAO1B,WAAoB,WAClB,EAAoCC,KAAKJ,MAAjCK,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,cAElBH,KAAKI,YAAc,IAAIC,kBAAgB,CAAEJ,KAAIC,SAE7CF,KAAKM,cAAgB,CACnBN,KAAKI,YACFG,MACC,IAAAC,uBAAqB,SAACC,EAAMC,GAAP,OAAgB,aAAeD,EAAMC,OAC1D,IAAAC,MAAI,kBAAMR,GAAiB,EAAKS,SAAS,CAAEd,gBAAYC,QACvD,IAAAc,YAAU,YAAkB,IAAfZ,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACf,OAAI,IAAAY,UAASb,IACJ,IAAAc,sBAAqBd,GAAIe,YACvB,IAAAF,UAASZ,IACX,IAAAe,wBAAuBf,GAAMc,YAG/B,IAAAE,IAAG,UAGbC,WAAU,SAACrB,GACV,EAAKc,SAAS,CACZd,YAAa,IAAAsB,cAAatB,GAEtBA,EADAA,EAAWuB,a,gCAOzB,WACE,MAAqBrB,KAAKJ,MAAlBK,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,KACZF,KAAKI,YAAYM,KAAK,CAAET,KAAIC,W,kCAG9B,WACEF,KAAKM,cAAcgB,SAAQ,SAACC,GAAD,OAAkBA,EAAaC,mB,oBAG5D,WAGE,OAAQC,EAFazB,KAAKJ,MAAlB6B,UACezB,KAAKH,MAApBC,gB,GAxD+B4B,UAAMC,W,0BAA5BhC,E,eAIG,CACpBQ,eAAe,K,oXCvCnB,E,ybAAA,YACA,YACA,YAMA,eAKA,YAEA,eAGA,eACA,YACA,YACA,eACA,eACA,eAGA,eACA,Y,opCAKA,IAAMyB,GAAgB,aAAOC,WAAV,qFAAG,CAAH,MAEbC,GAAuB,aAAOC,kBAAV,4FAAG,CAAH,oBAIpBC,GAAyB,aAAOC,WAAV,8FAAG,CAAH,yBAItBC,GAAc,aAAOC,SAAV,mFAAG,CAAH,MAEXC,GAAc,aAAOC,SAAV,mFAAG,CAAH,sBAIXC,GAAqB,aAAOC,WAAV,0FAAG,CAAH,sBAgClBC,E,0CACJ,WAAY5C,GAAkC,kCAC5C,cAAMA,IADsC,gDAO7B,WACf,MAKI,EAAKA,MAJP6C,EADF,EACEA,uBACAC,EAFF,EAEEA,KACAC,EAHF,EAGEA,aACQC,EAJV,EAIEC,KAAQD,cAGV,OAAKH,EAGH,gDACE,wBAACL,EAAD,CACEU,SAAUH,EACVI,aAAcL,EACdM,MAAM,MACNC,KAAK,qBACLC,MAAON,EAAcO,UAASC,mBAGtB,QAATV,GAAkB,EAAKW,qBAExB,wBAACjB,EAAD,CACEU,SAAUH,EACVI,aAAcL,EACdM,MAAM,SACNC,KAAK,qBACLC,MAAON,EAAcO,UAASG,sBAGtB,WAATZ,GACC,wBAAC,UAAD,CACEa,gBAAgB,EAChBC,qBAAsBf,EACtBgB,SAAS,gBA1BmB,SAfQ,gDAgD7B,SAACC,GAChB,EAAK9C,SAAS,CAAE+C,eAAgBD,QAjDY,oDAoDzB,SAACV,EAAeU,GAC/BA,GAAU,EAAK9D,MAAMgE,cACvB,EAAKhE,MAAMgE,aAAX,OACK,EAAKhE,MAAMiE,oBAAoBC,eADpC,oBAEGJ,EAASV,SAxD8B,sDA6DvB,SAACA,EAAeU,GACjCA,GAAU,EAAK9D,MAAMmE,gBACvB,EAAKnE,MAAMmE,eAAX,OACK,EAAKnE,MAAMiE,oBAAoBG,iBADpC,oBAEGN,EAASV,SAjE8B,oDAsEzB,WACnB,IAOkC,IAPlC,EAII,EAAKpD,MAHCgD,EADV,EACEC,KAAQD,cACRiB,EAFF,EAEEA,oBACAI,EAHF,EAGEA,cAEMN,EAAmB,EAAK9D,MAAxB8D,eAER,OAAK,IAAAvC,cAAa6C,GAkCX,KAhCH,wBAACrC,EAAD,KACE,wBAACE,EAAD,CACEoC,uBAAwB,EAAKC,eAC7BC,QAASH,EACTN,eAAgBA,EAChBU,OAAQR,IAGV,wBAAC7B,EAAD,CACEsC,YAAa1B,EAAcO,UAASoB,yBACpCC,KAAM,EACNC,QAAQ,OACRC,WAAW,OACXC,UAAW/B,EAAcO,UAASyB,oBAClC3B,KAAK,gBACLD,OAAO,UAAAa,EAAoBC,qBAApB,eAAoCH,KAAmB,GAC9DD,OAAQC,EACRb,SAAU,EAAK+B,qBAGjB,wBAAC3C,EAAD,CACE4C,KAAK,OACL9B,OAAOa,SAAA,UAAAA,EAAqBG,uBAArB,eAAuCL,KAAmB,GACjED,OAAQC,EACRW,YAAa1B,EAAcO,UAAS4B,2BACpCJ,UAAW/B,EAAcO,UAAS6B,sBAClClC,SAAU,EAAKmC,2BAxGvB,EAAKpF,MAAQ,CACX8D,eAAgB/D,EAAMiD,KAAKa,QAHe,E,2CAmH9C,WACE,MAOI1D,KAAKJ,MANP6C,EADF,EACEA,uBACQG,EAFV,EAEEC,KAAQD,cACRsC,EAHF,EAGEA,OACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,MACAC,EANF,EAMEA,MAGF,OACE,gDACG5C,EACGzC,KAAKsF,iBACLtF,KAAKqD,qBACT,wBAACf,EAAD,CACEiD,WAAYJ,EACZK,UAAWH,EACXI,QAASP,EACTQ,QAASC,SAAOC,QAEhB,wBAAC,EAAAC,iBAAqB1C,UAAS2C,mBAEhCV,GACC,wBAAC,UAAD,CAAOW,KAAMnD,EAAcO,UAAS6C,iC,GA5IfC,iBAmJzBC,GAA0B,IAAAC,YAAW3D,GAErC4D,GAAO,IAAAC,OAA6B,CACxCpC,cAAe,wBAAC,UAAD,Q,EAGgB,SAACqC,GAAD,OAC/B,wBAACF,EAASE,GACP,SAACC,GAAD,OAAe,wBAACL,GAAD,gBAA6BK,EAAeD,Q,4QC3OhE,eACA,YACA,YACA,eACA,YAIA,YACA,Y,8cAuBqBE,E,0CAInB,WAAY5G,GAAc,kCACxB,cAAMA,IADkB,2GAExB,EAAKC,MAAQ,CACX4G,sBAAkB1G,GAHI,E,sDAO1B,WAAoB,WACVE,EAAOD,KAAKJ,MAAZK,GAERD,KAAKI,YAAc,IAAIC,kBAAgB,CAAEJ,OAEzCD,KAAKM,cAAgB,CACnBN,KAAKI,YACFG,MACC,IAAAC,uBAAqB,SAACC,EAAMC,GAAP,OAAgB,aAAeD,EAAMC,OAC1D,IAAAgG,SAAO,gBAAGzG,EAAH,EAAGA,GAAH,OAAY,IAAAa,UAASb,OAC5B,IAAAY,YAAU,YAA4B,IAAzBZ,EAAyB,EAAzBA,GACX,OAAI,IAAAa,UAASb,IACJ,IAAA0G,wBAAuB1G,GAAIe,YAG7B,IAAAE,IAAG,UAGbC,WAAU,SAACsF,GAAD,OACT,EAAK7F,SAAS,CACZ6F,kBAAmB,IAAArF,cAAaqF,GAE5B,KADAA,EAAiBpF,a,gCAO/B,WACE,IAAQpB,EAAOD,KAAKJ,MAAZK,GACRD,KAAKI,YAAYM,KAAK,CAAET,S,kCAG1B,WACED,KAAKM,cAAcgB,SAAQ,SAACC,GAAD,OAAkBA,EAAaC,mB,oBAG5D,WAGE,OAAQC,EAFazB,KAAKJ,MAAlB6B,UACqBzB,KAAKH,MAA1B4G,sB,GAlDqC/E,UAAMC,W,mDC3BlDiF,E,2EAAAA,K,iDAAAA,M,WAIUA,E,0UCTf,E,ybAAA,YAIA,YACA,eAGA,eACA,eAGA,eACA,e,ynBAYE,WAAYhH,GAAO,kCACjB,cAAMA,IADW,8FAuBX,WACN,EAAKgB,SAAS,CAAEiG,aAAc,KAAMC,YAAa,UAtBjD,EAAKjH,MAAQ,CACXgH,aAAc,KACdC,YAAa,MAEf,EAAKxG,cAAgB,GANJ,E,sDASnB,WAAoB,WAClBN,KAAKM,cAAgB,CACnByG,UACGC,aAAoCC,UAAOC,uBAC3C/F,WAAU,YAAmD,QAAhDgG,WAAcN,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,YACxC,EAAKlG,SAAS,CAAEiG,eAAcC,sB,kCAKtC,WACE9G,KAAKM,cAAcgB,SAAQ,SAACC,GAAD,OAAkBA,EAAaC,mB,oBAO5D,WACE,MAAsCxB,KAAKH,MAAnCgH,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,YAEtB,OACE,wBAAC,UAAD,CACEM,UAAWP,IAAgBC,GAC3BO,MAAOrH,KAAKqH,MACZC,qBAAqB,EACrBC,OAAQ,wBAAC,EAAA1B,iBAAqB1C,UAASqE,4BAEnCX,IAAgBC,IAClB,wBAAC,UAAD,CACED,aAAcA,EACdC,YAAaA,EACbW,WAAYzH,KAAKqH,a,GA5CGpB,iB,iYCtBhC,E,ybAAA,YACA,YACA,YAGA,eACA,YAGA,eAGA,YACA,eAGA,eAGA,eAGA,eAKA,YAMA,YAEA,eACA,e,opCAKA,IAAMyB,EAAYC,UAAOC,IAAV,qFAAGD,CAAH,iCACChC,SAAOjB,YAGjBmD,EAAcF,UAAOC,IAAV,uFAAGD,CAAH,wCAEFG,YAAUC,MAEnBC,EAAcL,UAAOM,KAAV,uFAAGN,CAAH,gBACN,qBAAGO,SA+BRC,E,0CAIJ,WAAYvI,GAAkC,kCAC5C,cAAMA,IADsC,8CAc/B,SAACwI,GACd,EAAKxH,SAAS,CAAE8B,KAAM0F,QAfsB,8CAkB/B,SAACpF,GACd,EAAKpC,UAAS,SAACf,GAAD,MAAY,CACxBgE,oBAAqB,EAAF,KACdhE,EAAMgE,qBADQ,IAEjBC,cAAed,IAEjBqF,SAAS,UAxBiC,gDA4B7B,SAACrF,GAChB,EAAKpC,UAAS,SAACf,GAAD,MAAY,CACxBgE,oBAAqB,EAAF,KACdhE,EAAMgE,qBADQ,IAEjBG,gBAAiBhB,IAEnBqF,SAAS,UAlCiC,0CAsCnC,WACT,IAAQpE,EAAkB,EAAKrE,MAAvBqE,cACR,EAAsC,EAAKpE,MAAnC6C,EAAR,EAAQA,KAAMmB,EAAd,EAAcA,oBACVyE,GAAY,EA0BhB,OAxBK,IAAAlH,cAAa6C,IAA2B,QAATvB,IAClC4F,GAAY,EAEZrE,EAAc3C,SAAQ,SAACoC,IAElB,IAAA6E,SAAQ1E,EAAoBG,gBAAgBN,MAC5C,IAAA6E,SAAQ1E,EAAoBC,cAAcJ,MAE3C4E,GAAY,MAIhBrE,EAAc3C,SAAQ,SAACoC,MAEjB,IAAA6E,SAAQ1E,EAAoBG,gBAAgBN,MAC5C,IAAA6E,SAAQ1E,EAAoBC,cAAcJ,MAC3C,IAAA6E,SAAQ1E,EAAoBG,gBAAgBN,OAC1C,IAAA6E,SAAQ1E,EAAoBC,cAAcJ,OAE7C4E,GAAY,OAKXA,MAnEqC,wCAsErC,WACP,MAKI,EAAK1I,MAJPiH,EADF,EACEA,aACAC,EAFF,EAEEA,YACAW,EAHF,EAGEA,WACAe,EAJF,EAIEA,kBAEF,EAGI,EAAK3I,MAFP6C,EADF,EACEA,KADF,IAEEmB,oBAAuBC,EAFzB,EAEyBA,cAAeE,EAFxC,EAEwCA,gBAEpC,EAAKyE,aACM,QAAT/F,GACF,EAAK9B,SAAS,CAAEuE,SAAS,KACzB,IAAAuD,mCACE7B,EACAC,EACAhD,EACAE,GAEC2E,MAAK,kBAAMlB,OACXmB,OAAM,WACL,EAAKhI,SAAS,CAAEuE,SAAS,EAAOC,OAAO,QAGlC,WAAT1C,IACC,IAAAtB,cAAaoH,EAAkBK,yBAEhC,IAAAC,4CACEjC,EACAC,EACA0B,EAAkBK,sBAAsBxH,KAAK,GAAGpB,IAE/C0I,MAAK,kBAAMlB,OACXmB,OAAM,WACL,EAAKhI,SAAS,CAAEuE,SAAS,EAAOC,OAAO,WAvG/C,EAAKvF,MAAQ,CACX6C,KAAM,MACNmB,oBAAqB,CACnBG,gBAAiB,GACjBF,cAAe,IAEjBqB,SAAS,EACTkD,SAAS,EACTjD,OAAO,GAVmC,E,2CA+G9C,WACE,MAAqDpF,KAAKJ,MAAlDE,EAAR,EAAQA,WAAYiJ,EAApB,EAAoBA,UAAWP,EAA/B,EAA+BA,kBAC/B,EAAsDxI,KAAKH,MAAnDsF,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOvB,EAAxB,EAAwBA,oBAAqBnB,EAA7C,EAA6CA,KAE7C,OACE,IAAAtB,cAAatB,KACb,IAAAsB,cAAa2H,SAC+BhJ,IAA5CyI,EAAkBK,sBAEX,KAIP,wBAACnB,EAAD,KACE,wBAACG,EAAD,KACE,wBAAC,EAAAhC,kBAAD,gBACM1C,UAAS6F,aADf,CAEE3E,OAAQ,CACN4E,gBACE,wBAACjB,EAAD,CAAaE,MAAOvC,SAAOuD,YACzB,wBAAC,UAAD,CAAGlG,MAAOlD,EAAWqJ,WAAWC,kBAGpCL,UACE,wBAACf,EAAD,CAAaE,MAAOa,EAAUI,WAAWjB,OACvC,wBAAC,UAAD,CAAGlF,MAAO+F,EAAUI,WAAWC,uBAMzC,wBAAC,UAAD,CAEIjE,UACAC,QACAvB,sBACAnB,OAEF2C,MAAOrF,KAAKyI,WACZ1E,eAAgB/D,KAAK+D,eACrBH,aAAc5D,KAAK4D,aACnBjB,aAAc3C,KAAK2C,aACnBF,wBAAwB,IAAA4G,KACtBb,EACA,gCACA,MAEFtD,OAAQlF,KAAKkF,c,GAlKee,iBAyKhCG,GAAO,IAAAC,OAA6B,CACxCpC,cAAe,wBAAC,UAAD,MACfnE,WAAY,gBAAG+G,EAAH,EAAGA,aAAcyC,EAAjB,EAAiBA,OAAjB,OACV,wBAAC,UAAD,CAAerJ,GAAI4G,GAAeyC,IAEpCP,UAAW,gBAAGjC,EAAH,EAAGA,YAAawC,EAAhB,EAAgBA,OAAhB,OACT,wBAAC,UAAD,CAAqBrJ,GAAI6G,GAAcwC,IAEzCd,kBAAmB,gBAAG3B,EAAH,EAAGA,aAAcyC,EAAjB,EAAiBA,OAAjB,OACjB,wBAAC,UAAD,CAAsBC,OAAQ1C,EAAcpD,SAAS,cAClD6F,MAKDE,GAAkC,IAAArD,YAAWgC,G,UAEpC,SAAC7B,GAAD,OACb,wBAACF,EAASE,GACP,SAACC,GAAD,OACC,wBAACiD,GAAD,gBAAqClD,EAAgBC,S,sUC9Q3D,YAEA,e,oDAqCO,WACLM,EACA4C,EACAC,GAHK,6FAKkBC,UAAQC,IAAR,UAClBC,WADkB,wBACMhD,EADN,8BAErB,CACEiD,yBAA0B,CACxBC,qBAAsBN,EACtBO,qBAAsBN,KAVvB,cAKCO,EALD,OAcLN,UAAQO,aAAa,CACnBC,YAAa,CAAC,GAAD,OACRN,WADQ,0BAERA,WAFQ,wBAEgBhD,GAFhB,UAGRgD,WAHQ,wCAIRA,WAJQ,wBAIgBhD,EAJhB,2BAfV,kBAsBEoD,GAtBF,4C,0EAyBA,WACLpD,EACA4C,EACA3F,EACAE,GAJK,6FAMkB2F,UAAQC,IAAR,UAClBC,WADkB,wBACMhD,EADN,8BAErB,CACEiD,yBAA0B,CACxBC,qBAAsBN,EACtBW,6BAA8B,CAC5BtG,gBACAE,sBAbH,cAMCiG,EAND,OAkBLN,UAAQO,aAAa,CACnBC,YAAa,CAAC,GAAD,OACRN,WADQ,0BAERA,WAFQ,wBAEgBhD,GAFhB,UAGRgD,WAHQ,wCAIRA,WAJQ,wBAIgBhD,EAJhB,gCAKRgD,WALQ,wBAKgBhD,EALhB,2BAnBV,kBA2BEoD,GA3BF,4C","file":"111.f33954638fcbded9de6a.chunk.js","sourcesContent":["import React from 'react';\nimport { isString } from 'lodash-es';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { Subscription, BehaviorSubject, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport {\n  IInitiativeData,\n  initiativeByIdStream,\n  initiativeBySlugStream,\n} from 'services/initiatives';\n\ninterface InputProps {\n  id?: string | null;\n  slug?: string | null;\n  resetOnChange?: boolean;\n}\n\ntype children = (renderProps: GetInitiativeChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  initiative: IInitiativeData | undefined | null | Error;\n}\n\nexport type GetInitiativeChildProps =\n  | IInitiativeData\n  | undefined\n  | null\n  | Error;\n\nexport default class GetInitiative extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  static defaultProps = {\n    resetOnChange: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      initiative: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { id, slug, resetOnChange } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ id, slug });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          tap(() => resetOnChange && this.setState({ initiative: undefined })),\n          switchMap(({ id, slug }) => {\n            if (isString(id)) {\n              return initiativeByIdStream(id).observable;\n            } else if (isString(slug)) {\n              return initiativeBySlugStream(slug).observable;\n            }\n\n            return of(null);\n          })\n        )\n        .subscribe((initiative) => {\n          this.setState({\n            initiative: !isNilOrError(initiative)\n              ? initiative.data\n              : initiative,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { id, slug } = this.props;\n    this.inputProps$.next({ id, slug });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { initiative } = this.state;\n    return (children as children)(initiative);\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// services\nimport { IOfficialFeedbackData } from 'services/officialFeedback';\n\n// resources\nimport GetAppConfigurationLocales, {\n  GetAppConfigurationLocalesChildProps,\n} from 'resources/GetAppConfigurationLocales';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../../messages';\n\n// components\nimport OfficialFeedbackPost from 'components/PostShowComponents/OfficialFeedback/OfficialFeedbackPost';\nimport { Radio, Input, LocaleSwitcher } from 'cl2-component-library';\nimport { Section } from 'components/admin/Section';\nimport MentionsTextArea from 'components/UI/MentionsTextArea';\nimport Error from 'components/UI/Error';\nimport Button from 'components/UI/Button';\n\n// styling\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\n\n// typings\nimport { Multiloc, Locale, MultilocFormValues } from 'typings';\n\nconst StyledSection = styled(Section)``;\n\nconst StyledLocaleSwitcher = styled(LocaleSwitcher)`\n  margin: 10px 0;\n`;\n\nconst StyledMentionsTextArea = styled(MentionsTextArea)`\n  margin-bottom: 15px;\n`;\n\nconst StyledInput = styled(Input)``;\n\nconst StyledRadio = styled(Radio)`\n  margin-top: 25px;\n`;\n\nconst ChangeStatusButton = styled(Button)`\n  margin-top: 25px;\n`;\n\nexport interface FormValues extends MultilocFormValues {\n  author_multiloc: Multiloc;\n  body_multiloc: Multiloc;\n}\n\ninterface InputProps {\n  loading: boolean;\n  error: boolean;\n  newOfficialFeedback: FormValues;\n  mode: 'latest' | 'new';\n  latestOfficialFeedback: IOfficialFeedbackData | null;\n  onChangeMode: (value) => void;\n  onChangeBody: (value: Multiloc) => void;\n  onChangeAuthor: (value: Multiloc) => void;\n  submit: () => void;\n  valid: boolean;\n}\n\ninterface DataProps {\n  tenantLocales: GetAppConfigurationLocalesChildProps;\n}\n\ninterface Props extends DataProps, InputProps {}\n\ninterface State {\n  selectedLocale: Locale;\n}\n\nclass StatusChangeForm extends PureComponent<Props & InjectedIntlProps, State> {\n  constructor(props: Props & InjectedIntlProps) {\n    super(props);\n    this.state = {\n      selectedLocale: props.intl.locale as Locale,\n    };\n  }\n\n  renderFullForm = () => {\n    const {\n      latestOfficialFeedback,\n      mode,\n      onChangeMode,\n      intl: { formatMessage },\n    } = this.props;\n\n    if (!latestOfficialFeedback) return null;\n\n    return (\n      <>\n        <StyledRadio\n          onChange={onChangeMode}\n          currentValue={mode}\n          value=\"new\"\n          name=\"statusChangeMethod\"\n          label={formatMessage(messages.newFeedbackMode)}\n        />\n\n        {mode === 'new' && this.renderFeedbackForm()}\n\n        <StyledRadio\n          onChange={onChangeMode}\n          currentValue={mode}\n          value=\"latest\"\n          name=\"statusChangeMethod\"\n          label={formatMessage(messages.latestFeedbackMode)}\n        />\n\n        {mode === 'latest' && (\n          <OfficialFeedbackPost\n            editingAllowed={false}\n            officialFeedbackPost={latestOfficialFeedback}\n            postType=\"initiative\"\n          />\n        )}\n      </>\n    );\n  };\n\n  onLocaleChange = (locale: Locale) => {\n    this.setState({ selectedLocale: locale });\n  };\n\n  handleBodyOnChange = (value: string, locale: Locale | undefined) => {\n    if (locale && this.props.onChangeBody) {\n      this.props.onChangeBody({\n        ...this.props.newOfficialFeedback.body_multiloc,\n        [locale]: value,\n      });\n    }\n  };\n\n  handleAuthorOnChange = (value: string, locale: Locale | undefined) => {\n    if (locale && this.props.onChangeAuthor) {\n      this.props.onChangeAuthor({\n        ...this.props.newOfficialFeedback.author_multiloc,\n        [locale]: value,\n      });\n    }\n  };\n\n  renderFeedbackForm = () => {\n    const {\n      intl: { formatMessage },\n      newOfficialFeedback,\n      tenantLocales,\n    } = this.props;\n    const { selectedLocale } = this.state;\n\n    if (!isNilOrError(tenantLocales)) {\n      return (\n        <StyledSection>\n          <StyledLocaleSwitcher\n            onSelectedLocaleChange={this.onLocaleChange}\n            locales={tenantLocales}\n            selectedLocale={selectedLocale}\n            values={newOfficialFeedback}\n          />\n\n          <StyledMentionsTextArea\n            placeholder={formatMessage(messages.feedbackBodyPlaceholder)}\n            rows={8}\n            padding=\"12px\"\n            background=\"#fff\"\n            ariaLabel={formatMessage(messages.officialUpdateBody)}\n            name=\"body_multiloc\"\n            value={newOfficialFeedback.body_multiloc?.[selectedLocale] || ''}\n            locale={selectedLocale}\n            onChange={this.handleBodyOnChange}\n          />\n\n          <StyledInput\n            type=\"text\"\n            value={newOfficialFeedback?.author_multiloc?.[selectedLocale] || ''}\n            locale={selectedLocale}\n            placeholder={formatMessage(messages.feedbackAuthorPlaceholder)}\n            ariaLabel={formatMessage(messages.officialUpdateAuthor)}\n            onChange={this.handleAuthorOnChange}\n          />\n        </StyledSection>\n      );\n    }\n\n    return null;\n  };\n\n  render() {\n    const {\n      latestOfficialFeedback,\n      intl: { formatMessage },\n      submit,\n      loading,\n      error,\n      valid,\n    } = this.props;\n\n    return (\n      <>\n        {latestOfficialFeedback\n          ? this.renderFullForm()\n          : this.renderFeedbackForm()}\n        <ChangeStatusButton\n          processing={loading}\n          disabled={!valid}\n          onClick={submit}\n          bgColor={colors.clBlue}\n        >\n          <FormattedMessage {...messages.statusChangeSave} />\n        </ChangeStatusButton>\n        {error && (\n          <Error text={formatMessage(messages.statusChangeGenericError)} />\n        )}\n      </>\n    );\n  }\n}\n\nconst StatusChangeFormWithHoC = injectIntl(StatusChangeForm);\n\nconst Data = adopt<DataProps, InputProps>({\n  tenantLocales: <GetAppConfigurationLocales />,\n});\n\nconst StatusChangeFormWithData = (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <StatusChangeFormWithHoC {...dataProps} {...inputProps} />}\n  </Data>\n);\n\nexport default StatusChangeFormWithData;\n","import React from 'react';\nimport { BehaviorSubject, Subscription, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, filter } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport {\n  IInitiativeStatusData,\n  initiativeStatusStream,\n} from 'services/initiativeStatuses';\nimport { isString } from 'lodash-es';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  id: string | null;\n}\n\ntype children = (\n  renderProps: GetInitiativeStatusChildProps\n) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  initiativeStatus: IInitiativeStatusData | undefined | null;\n}\n\nexport type GetInitiativeStatusChildProps =\n  | IInitiativeStatusData\n  | undefined\n  | null;\n\nexport default class GetInitiativeStatus extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      initiativeStatus: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { id } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ id });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          filter(({ id }) => isString(id)),\n          switchMap(({ id }: { id: string }) => {\n            if (isString(id)) {\n              return initiativeStatusStream(id).observable;\n            }\n\n            return of(null);\n          })\n        )\n        .subscribe((initiativeStatus) =>\n          this.setState({\n            initiativeStatus: !isNilOrError(initiativeStatus)\n              ? initiativeStatus.data\n              : null,\n          })\n        ),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { id } = this.props;\n    this.inputProps$.next({ id });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { initiativeStatus } = this.state;\n    return (children as children)(initiativeStatus);\n  }\n}\n","export interface StatusChangeModalOpen {\n  initiativeId: string;\n  newStatusId: string;\n}\n\nenum ModalEvents {\n  statusChangeModalOpen = 'initiatiateStatusChange',\n}\n\nexport default ModalEvents;\n","import React, { PureComponent } from 'react';\nimport { Subscription } from 'rxjs';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../../messages';\n\n// utils\nimport eventEmitter from 'utils/eventEmitter';\nimport events, { StatusChangeModalOpen } from '../../events';\n\n// components\nimport Modal from 'components/UI/Modal';\nimport StatusChangeFormWrapper from './StatusChangeFormWrapper';\n\nexport interface Props {}\n\ninterface State {\n  initiativeId: string | null;\n  newStatusId: string | null;\n}\n\nclass StatusChangeModal extends PureComponent<Props, State> {\n  subscriptions: Subscription[];\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      initiativeId: null,\n      newStatusId: null,\n    };\n    this.subscriptions = [];\n  }\n\n  componentDidMount() {\n    this.subscriptions = [\n      eventEmitter\n        .observeEvent<StatusChangeModalOpen>(events.statusChangeModalOpen)\n        .subscribe(({ eventValue: { initiativeId, newStatusId } }) => {\n          this.setState({ initiativeId, newStatusId });\n        }),\n    ];\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  close = () => {\n    this.setState({ initiativeId: null, newStatusId: null });\n  };\n\n  render() {\n    const { initiativeId, newStatusId } = this.state;\n\n    return (\n      <Modal\n        opened={!!(initiativeId && newStatusId)}\n        close={this.close}\n        closeOnClickOutside={false}\n        header={<FormattedMessage {...messages.changeStatusModalTitle} />}\n      >\n        {!!(initiativeId && newStatusId) && (\n          <StatusChangeFormWrapper\n            initiativeId={initiativeId}\n            newStatusId={newStatusId}\n            closeModal={this.close}\n          />\n        )}\n      </Modal>\n    );\n  }\n}\n\nexport default StatusChangeModal;\n","import React, { PureComponent } from 'react';\nimport { adopt } from 'react-adopt';\nimport { get, isEmpty } from 'lodash-es';\n\n// Styling\nimport styled from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\n\n// components\nimport StatusChangeForm from './StatusChangeForm';\n\n// resources\nimport { isNilOrError } from 'utils/helperUtils';\nimport GetAppConfigurationLocales, {\n  GetAppConfigurationLocalesChildProps,\n} from 'resources/GetAppConfigurationLocales';\nimport GetInitiative, {\n  GetInitiativeChildProps,\n} from 'resources/GetInitiative';\nimport GetInitiativeStatus, {\n  GetInitiativeStatusChildProps,\n} from 'resources/GetInitiativeStatus';\nimport GetOfficialFeedbacks, {\n  GetOfficialFeedbacksChildProps,\n} from 'resources/GetOfficialFeedbacks';\n\n// services\nimport {\n  updateInitiativeStatusWithExistingFeedback,\n  updateInitiativeStatusAddFeedback,\n} from 'services/initiativeStatusChanges';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../../messages';\nimport T from 'components/T';\n\n// Typings\nimport { Multiloc, MultilocFormValues } from 'typings';\n\nconst Container = styled.div`\n  background: ${colors.background};\n  padding: 25px;\n`;\nconst ContextLine = styled.div`\n  margin-bottom: 25px;\n  font-size: ${fontSizes.base}px;\n`;\nconst ColoredText = styled.span<{ color: string }>`\n  color: ${({ color }) => color};\n`;\n\ninterface InputProps {\n  initiativeId: string;\n  newStatusId: string;\n  closeModal: () => void;\n}\n\ninterface DataProps {\n  tenantLocales: GetAppConfigurationLocalesChildProps;\n  initiative: GetInitiativeChildProps;\n  newStatus: GetInitiativeStatusChildProps;\n  officialFeedbacks: GetOfficialFeedbacksChildProps;\n}\n\ninterface Props extends DataProps, InputProps {}\n\nexport interface FormValues extends MultilocFormValues {\n  author_multiloc: Multiloc;\n  body_multiloc: Multiloc;\n}\n\ninterface State {\n  mode: 'latest' | 'new';\n  newOfficialFeedback: FormValues;\n  loading: boolean;\n  touched: boolean;\n  error: boolean;\n}\n\nclass StatusChangeFormWrapper extends PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  constructor(props: Props & InjectedIntlProps) {\n    super(props);\n    this.state = {\n      mode: 'new',\n      newOfficialFeedback: {\n        author_multiloc: {},\n        body_multiloc: {},\n      },\n      loading: false,\n      touched: false,\n      error: false,\n    };\n  }\n\n  onChangeMode = (event) => {\n    this.setState({ mode: event });\n  };\n\n  onChangeBody = (value: Multiloc) => {\n    this.setState((state) => ({\n      newOfficialFeedback: {\n        ...state.newOfficialFeedback,\n        body_multiloc: value,\n      },\n      touched: true,\n    }));\n  };\n\n  onChangeAuthor = (value: Multiloc) => {\n    this.setState((state) => ({\n      newOfficialFeedback: {\n        ...state.newOfficialFeedback,\n        author_multiloc: value,\n      },\n      touched: true,\n    }));\n  };\n\n  validate = () => {\n    const { tenantLocales } = this.props;\n    const { mode, newOfficialFeedback } = this.state;\n    let validated = true;\n\n    if (!isNilOrError(tenantLocales) && mode === 'new') {\n      validated = false;\n\n      tenantLocales.forEach((locale) => {\n        if (\n          !isEmpty(newOfficialFeedback.author_multiloc[locale]) &&\n          !isEmpty(newOfficialFeedback.body_multiloc[locale])\n        ) {\n          validated = true;\n        }\n      });\n\n      tenantLocales.forEach((locale) => {\n        if (\n          (!isEmpty(newOfficialFeedback.author_multiloc[locale]) &&\n            isEmpty(newOfficialFeedback.body_multiloc[locale])) ||\n          (isEmpty(newOfficialFeedback.author_multiloc[locale]) &&\n            !isEmpty(newOfficialFeedback.body_multiloc[locale]))\n        ) {\n          validated = false;\n        }\n      });\n    }\n\n    return validated;\n  };\n\n  submit = () => {\n    const {\n      initiativeId,\n      newStatusId,\n      closeModal,\n      officialFeedbacks,\n    } = this.props;\n    const {\n      mode,\n      newOfficialFeedback: { body_multiloc, author_multiloc },\n    } = this.state;\n    if (this.validate()) {\n      if (mode === 'new') {\n        this.setState({ loading: true });\n        updateInitiativeStatusAddFeedback(\n          initiativeId,\n          newStatusId,\n          body_multiloc,\n          author_multiloc\n        )\n          .then(() => closeModal())\n          .catch(() => {\n            this.setState({ loading: false, error: true });\n          });\n      } else if (\n        mode === 'latest' &&\n        !isNilOrError(officialFeedbacks.officialFeedbacksList)\n      ) {\n        updateInitiativeStatusWithExistingFeedback(\n          initiativeId,\n          newStatusId,\n          officialFeedbacks.officialFeedbacksList.data[0].id\n        )\n          .then(() => closeModal())\n          .catch(() => {\n            this.setState({ loading: false, error: true });\n          });\n      }\n    }\n  };\n\n  render() {\n    const { initiative, newStatus, officialFeedbacks } = this.props;\n    const { loading, error, newOfficialFeedback, mode } = this.state;\n\n    if (\n      isNilOrError(initiative) ||\n      isNilOrError(newStatus) ||\n      officialFeedbacks.officialFeedbacksList === undefined\n    ) {\n      return null;\n    }\n\n    return (\n      <Container>\n        <ContextLine>\n          <FormattedMessage\n            {...messages.statusChange}\n            values={{\n              initiativeTitle: (\n                <ColoredText color={colors.clBlueDark}>\n                  <T value={initiative.attributes.title_multiloc} />\n                </ColoredText>\n              ),\n              newStatus: (\n                <ColoredText color={newStatus.attributes.color}>\n                  <T value={newStatus.attributes.title_multiloc} />\n                </ColoredText>\n              ),\n            }}\n          />\n        </ContextLine>\n        <StatusChangeForm\n          {...{\n            loading,\n            error,\n            newOfficialFeedback,\n            mode,\n          }}\n          valid={this.validate()}\n          onChangeAuthor={this.onChangeAuthor}\n          onChangeBody={this.onChangeBody}\n          onChangeMode={this.onChangeMode}\n          latestOfficialFeedback={get(\n            officialFeedbacks,\n            'officialFeedbacksList.data[0]',\n            null\n          )}\n          submit={this.submit}\n        />\n      </Container>\n    );\n  }\n}\n\nconst Data = adopt<DataProps, InputProps>({\n  tenantLocales: <GetAppConfigurationLocales />,\n  initiative: ({ initiativeId, render }) => (\n    <GetInitiative id={initiativeId}>{render}</GetInitiative>\n  ),\n  newStatus: ({ newStatusId, render }) => (\n    <GetInitiativeStatus id={newStatusId}>{render}</GetInitiativeStatus>\n  ),\n  officialFeedbacks: ({ initiativeId, render }) => (\n    <GetOfficialFeedbacks postId={initiativeId} postType=\"initiative\">\n      {render}\n    </GetOfficialFeedbacks>\n  ),\n});\n\nconst StatusChangeFormWrapperWithHocs = injectIntl(StatusChangeFormWrapper);\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => (\n      <StatusChangeFormWrapperWithHocs {...inputProps} {...dataProps} />\n    )}\n  </Data>\n);\n","import { API_PATH } from 'containers/App/constants';\nimport { IRelationship, Multiloc } from 'typings';\nimport streams from 'utils/streams';\n\nexport type IInitiativeStatusChange = {\n  id: string;\n  type: string;\n  attributes: {\n    created_at: string;\n    updated_at: string;\n  };\n  relationships: {\n    initiative_status: {\n      data: IRelationship;\n    };\n    initiative: {\n      data: IRelationship;\n    };\n    user: {\n      data: IRelationship;\n    };\n    official_feedback: {\n      data: IRelationship;\n    };\n  };\n};\n\n// Types accepted by initiative status changes endpoint\n// type IInitiativeStatusChangeAdd = {\n//   initiative_status_id: string;\n//   official_feedback_id: string;\n// } | {\n//   initiative_status_id: string;\n//   official_feedback_attributes: {\n//     body_multiloc: Multiloc;\n//     author_multiloc: Multiloc;\n//   }\n// };\n\nexport async function updateInitiativeStatusWithExistingFeedback(\n  initiativeId: string,\n  statusId: string,\n  feedbackId: string\n) {\n  const response = await streams.add<IInitiativeStatusChange>(\n    `${API_PATH}/initiatives/${initiativeId}/initiative_status_changes`,\n    {\n      initiative_status_change: {\n        initiative_status_id: statusId,\n        official_feedback_id: feedbackId,\n      },\n    }\n  );\n  streams.fetchAllWith({\n    apiEndpoint: [\n      `${API_PATH}/initiatives`,\n      `${API_PATH}/initiatives/${initiativeId}`,\n      `${API_PATH}/initiatives/filter_counts`,\n      `${API_PATH}/initiatives/${initiativeId}/allowed_transitions`,\n    ],\n  });\n  return response;\n}\n\nexport async function updateInitiativeStatusAddFeedback(\n  initiativeId: string,\n  statusId: string,\n  body_multiloc: Multiloc,\n  author_multiloc: Multiloc\n) {\n  const response = await streams.add<IInitiativeStatusChange>(\n    `${API_PATH}/initiatives/${initiativeId}/initiative_status_changes`,\n    {\n      initiative_status_change: {\n        initiative_status_id: statusId,\n        official_feedback_attributes: {\n          body_multiloc,\n          author_multiloc,\n        },\n      },\n    }\n  );\n  streams.fetchAllWith({\n    apiEndpoint: [\n      `${API_PATH}/initiatives`,\n      `${API_PATH}/initiatives/${initiativeId}`,\n      `${API_PATH}/initiatives/filter_counts`,\n      `${API_PATH}/initiatives/${initiativeId}/official_feedback`,\n      `${API_PATH}/initiatives/${initiativeId}/allowed_transitions`,\n    ],\n  });\n  return response;\n}\n"],"sourceRoot":""}