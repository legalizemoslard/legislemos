{"version":3,"sources":["webpack:///./app/containers/EmailSettingsPage/index.tsx","webpack:///./app/resources/GetCampaignConsentsWithToken.tsx","webpack:///./app/containers/EmailSettingsPage/InitialUnsubscribeFeedback.tsx","webpack:///./app/containers/EmailSettingsPage/messages.ts"],"names":["Container","styled","div","colors","background","StyledInitialFeedback","InitialUnsubscribeFeedback","StyledConsentForm","ConsentForm","EmailSettingPage","props","setState","initialUnsubscribeStatus","state","unsubscribedCampaignMultiloc","query","this","location","unsubscription_token","campaign_id","updateConsentByCampaignIDWithToken","then","data","attributes","campaign_type_description_multiloc","streams","fetchAllWith","apiEndpoint","API_PATH","catch","token","undefined","id","className","status","consents","isNilOrError","trackEventName","runOnSave","closeInitialUnsubscribe","PureComponent","withRouter","GetCampaignConsentsWithToken","BehaviorSubject","token$","next","subscriptions","pipe","switchMap","consentsWithTokenStream","observable","of","subscribe","forEach","subscription","unsubscribe","children","React","Component","Message","clBlueDarker","fontSizes","large","memo","FormSection","FormattedMessage","messages","initialUnsubscribeSuccess","values","campaignTitle","value","initialUnsubscribeError","initialUnsubscribeLoading","defineMessages","defaultMessage"],"mappings":"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","file":"140.2ba858273c8b481a206b.chunk.js","sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport ConsentForm from 'components/ConsentForm';\nimport InitialUnsubscribeFeedback from './InitialUnsubscribeFeedback';\n\n// Styles\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\nimport { withRouter, WithRouterProps } from 'react-router';\n\n// services\nimport { updateConsentByCampaignIDWithToken } from 'services/campaignConsents';\nimport GetCampaignConsentsWithToken from 'resources/GetCampaignConsentsWithToken';\nimport { isNilOrError } from 'utils/helperUtils';\nimport streams from 'utils/streams';\nimport { API_PATH } from 'containers/App/constants';\nimport { Multiloc } from 'typings';\n\nconst Container = styled.div`\n  width: 100%;\n  background-color: ${colors.background};\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 30px;\n  padding-bottom: 50px;\n  overflow-x: hidden;\n`;\n\nconst StyledInitialFeedback = styled(InitialUnsubscribeFeedback)`\n  flex-grow: 1;\n`;\n\nconst StyledConsentForm = styled(ConsentForm)`\n  flex-grow: 1;\n`;\n\ninterface DataProps {}\n\ninterface State {\n  initialUnsubscribeStatus: 'error' | 'success' | 'loading' | 'hidden' | null;\n  unsubscribedCampaignMultiloc: Multiloc | null;\n}\n\nexport class EmailSettingPage extends PureComponent<\n  DataProps & WithRouterProps,\n  State\n> {\n  constructor(props: DataProps & WithRouterProps) {\n    super(props);\n    this.state = {\n      initialUnsubscribeStatus: null,\n      unsubscribedCampaignMultiloc: null,\n    };\n  }\n\n  closeInitialUnsubscribe = () => {\n    this.setState({ initialUnsubscribeStatus: 'hidden' });\n  };\n\n  componentDidMount() {\n    const { query } = this.props.location;\n\n    if (\n      !(\n        typeof query.unsubscription_token === 'string' &&\n        typeof query.campaign_id === 'string'\n      )\n    ) {\n      this.setState({ initialUnsubscribeStatus: 'error' });\n    } else {\n      this.setState({ initialUnsubscribeStatus: 'loading' });\n      updateConsentByCampaignIDWithToken(\n        query.campaign_id,\n        false,\n        query.unsubscription_token\n      )\n        .then(({ data }) => {\n          this.setState({\n            initialUnsubscribeStatus: 'success',\n            unsubscribedCampaignMultiloc:\n              data.attributes.campaign_type_description_multiloc,\n          });\n          streams.fetchAllWith({\n            apiEndpoint: [\n              `${API_PATH}/consents?unsubscription_token=${query.unsubscription_token}`,\n            ],\n          });\n        })\n        .catch(() => {\n          this.setState({ initialUnsubscribeStatus: 'error' });\n        });\n    }\n  }\n\n  render() {\n    const {\n      initialUnsubscribeStatus,\n      unsubscribedCampaignMultiloc,\n    } = this.state;\n    const { location } = this.props;\n    const token =\n      typeof location?.query?.unsubscription_token === 'string'\n        ? location.query.unsubscription_token\n        : undefined;\n\n    return (\n      <Container id=\"e2e-email-settings-page\">\n        <div>\n          {initialUnsubscribeStatus &&\n            initialUnsubscribeStatus !== 'hidden' && (\n              <StyledInitialFeedback\n                className=\"e2e-unsubscribe-status\"\n                status={initialUnsubscribeStatus}\n                unsubscribedCampaignMultiloc={unsubscribedCampaignMultiloc}\n              />\n            )}\n          {initialUnsubscribeStatus &&\n            initialUnsubscribeStatus !== 'loading' && (\n              <GetCampaignConsentsWithToken\n                token={\n                  typeof location?.query?.unsubscription_token === 'string'\n                    ? location.query.unsubscription_token\n                    : null\n                }\n              >\n                {(consents) =>\n                  !isNilOrError(consents) ? (\n                    <StyledConsentForm\n                      consents={consents}\n                      trackEventName=\"Unsubcribed from unsubscribe link flow\"\n                      token={token}\n                      runOnSave={this.closeInitialUnsubscribe}\n                    />\n                  ) : null\n                }\n              </GetCampaignConsentsWithToken>\n            )}\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default withRouter(EmailSettingPage);\n","import React from 'react';\nimport { Subscription, of, BehaviorSubject } from 'rxjs';\nimport {\n  IConsentData,\n  consentsWithTokenStream,\n  IConsents,\n} from 'services/campaignConsents';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { switchMap } from 'rxjs/operators';\n\ninterface InputProps {}\n\ntype children = (\n  renderProps: GetCampaignConsentsWithTokenChildProps\n) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n  token: string | null;\n}\n\ninterface State {\n  consents: IConsentData[] | undefined | null | Error;\n}\n\nexport type GetCampaignConsentsWithTokenChildProps =\n  | IConsentData[]\n  | undefined\n  | null\n  | Error;\n\nexport default class GetCampaignConsentsWithToken extends React.Component<\n  Props,\n  State\n> {\n  private subscriptions: Subscription[];\n  private token$: BehaviorSubject<string | null> = new BehaviorSubject(null);\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      consents: undefined,\n    };\n    this.token$.next(props.token);\n  }\n\n  componentDidMount() {\n    this.subscriptions = [\n      this.token$\n        .pipe(\n          switchMap((token) => {\n            if (token) {\n              return consentsWithTokenStream(token).observable;\n            } else {\n              return of(null);\n            }\n          })\n        )\n        .subscribe((consents: IConsents) => {\n          this.setState({\n            consents: !isNilOrError(consents) ? consents.data : consents,\n          });\n        }),\n    ];\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { consents } = this.state;\n    return (children as children)(consents);\n  }\n}\n","import React, { memo } from 'react';\n\n// intl\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\n// components\nimport { FormSection } from 'components/UI/FormComponents';\n\n// styling\nimport styled from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\nimport { Multiloc } from 'typings';\nimport T from 'components/T';\n\nconst Message = styled.div<{ status: 'error' | 'success' | 'loading' }>`\n  color: ${colors.clBlueDarker};\n  font-size: ${fontSizes.large}px;\n`;\n\ninterface Props {\n  status: 'success' | 'error' | 'loading';\n  unsubscribedCampaignMultiloc: Multiloc | null;\n  className?: string;\n}\n\nconst InitialUnsubscribeFeedback = memo<Props>(\n  ({ status, unsubscribedCampaignMultiloc, className }) => {\n    return (\n      <FormSection className={className || ''}>\n        <Message status={status} aria-live=\"polite\">\n          {status === 'success' && unsubscribedCampaignMultiloc ? (\n            <FormattedMessage\n              {...messages.initialUnsubscribeSuccess}\n              values={{\n                campaignTitle: <T value={unsubscribedCampaignMultiloc} />,\n              }}\n            />\n          ) : status === 'error' ? (\n            <FormattedMessage {...messages.initialUnsubscribeError} />\n          ) : status === 'loading' ? (\n            <FormattedMessage {...messages.initialUnsubscribeLoading} />\n          ) : null}\n        </Message>\n      </FormSection>\n    );\n  }\n);\n\nexport default InitialUnsubscribeFeedback;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  initialUnsubscribeSuccess: {\n    id: 'EmailSettingsPage.initialUnsubscribeSuccess',\n    defaultMessage: 'You successfully unsubscribed from {campaignTitle}.',\n  },\n  initialUnsubscribeError: {\n    id: 'EmailSettingsPage.initialUnsubscribeError',\n    defaultMessage:\n      'There was an issue unsubscribing from this campaign, please try again.',\n  },\n  initialUnsubscribeLoading: {\n    id: 'EmailSettingsPage.initialUnsubscribeLoading',\n    defaultMessage: 'Your request is being processed, please wait...',\n  },\n});\n"],"sourceRoot":""}