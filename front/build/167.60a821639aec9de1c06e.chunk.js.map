{"version":3,"sources":["webpack:///./app/resources/GetInitiativesPermissions.tsx","webpack:///./app/hooks/useInitiativesPermissions.ts"],"names":["children","action","useState","undefined","actionPermission","setActionPermission","useEffect","subscription","combineLatest","getInitiativeActionDescriptors","observable","currentAppConfigurationStream","authUserStream","subscribe","actionDescriptors","tenant","authUser","isNilOrError","actionDescriptor","enabled","show","disabledReason","disabled_reason","unsubscribe"],"mappings":"iLAEA,mB,UAmBe,YAAiC,IAA9BA,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAE1B,OAAQD,GADuB,aAA0BC,M,6GCJ5C,SAAmCA,GAChD,OAAgD,IAAAC,eAE9CC,GAFF,qBAAOC,EAAP,KAAyBC,EAAzB,KA+DA,OA3DA,IAAAC,YAAU,WACR,IAAMC,GAAe,IAAAC,gBACnB,IAAAC,kCAAiCC,YACjC,IAAAC,iCAAgCD,YAChC,IAAAE,kBAAiBF,YACjBG,WAAU,YAA2C,yBAAzCC,EAAyC,KAAtBC,EAAsB,KAAdC,EAAc,KACrD,KAAK,IAAAC,cAAaF,MAAY,IAAAE,cAAaH,GAAoB,CAC7D,IAAMI,EAAmBJ,EAAkBb,GAE3C,GAAIiB,EAAiBC,QACnBd,EAAoB,CAClBe,MAAM,EACND,SAAS,EACTE,eAAgB,KAChBpB,OAAQ,YAGV,OAAQiB,EAAiBI,iBACvB,IAAK,gBACC,IAAAL,cAAaD,GACfX,EAAoB,CAClBe,MAAM,EACND,QAAS,QACTE,eAAgB,KAChBpB,OAAQ,0BAGVI,EAAoB,CAClBe,MAAM,EACND,QAAS,QACTE,eAAgB,KAChBpB,OAAQ,WAGZ,MACF,IAAK,gBACHI,EAAoB,CAClBe,MAAM,EACND,QAAS,QACTE,eAAgB,KAChBpB,OAAQ,eAEV,MACF,QACEI,EAAoB,CAClBe,MAAM,EACND,SAAS,EACTE,eAAgB,eAChBpB,OAAQ,YAOpB,OAAO,kBAAMM,EAAagB,iBAEzB,IAEInB,G,mBAlFT,YACA,YAIA,YAEA,YACA,YACA","file":"167.60a821639aec9de1c06e.chunk.js","sourcesContent":["import { IInitiativeAction } from 'services/initiatives';\nimport { ActionPermission } from 'services/actionTakingRules';\nimport useInitiativesPermissions, {\n  IInitiativeDisabledReason,\n} from 'hooks/useInitiativesPermissions';\n\ninterface InputProps {}\n\ntype children = (\n  renderProps: GetInitiativesPermissionsChildProps\n) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n  action: IInitiativeAction;\n}\n\nexport type GetInitiativesPermissionsChildProps =\n  | ActionPermission<IInitiativeDisabledReason>\n  | undefined;\n\nexport default ({ children, action }: Props) => {\n  const initiativesPermissions = useInitiativesPermissions(action);\n  return (children as children)(initiativesPermissions);\n};\n","import { useState, useEffect } from 'react';\nimport {\n  getInitiativeActionDescriptors,\n  IInitiativeAction,\n} from 'services/initiatives';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { ActionPermission } from 'services/actionTakingRules';\nimport { currentAppConfigurationStream } from 'services/appConfiguration';\nimport { authUserStream } from 'services/auth';\nimport { combineLatest } from 'rxjs';\n\nexport type IInitiativeDisabledReason = 'notPermitted';\n\nexport type IPreliminaryAction =\n  | 'sign_in_up'\n  | 'verify'\n  | 'sign_in_up_and_verify';\n\nexport default function useInitiativesPermissions(action: IInitiativeAction) {\n  const [actionPermission, setActionPermission] = useState<\n    ActionPermission<IInitiativeDisabledReason> | null | undefined\n  >(undefined);\n\n  useEffect(() => {\n    const subscription = combineLatest(\n      getInitiativeActionDescriptors().observable,\n      currentAppConfigurationStream().observable,\n      authUserStream().observable\n    ).subscribe(([actionDescriptors, tenant, authUser]) => {\n      if (!isNilOrError(tenant) && !isNilOrError(actionDescriptors)) {\n        const actionDescriptor = actionDescriptors[action];\n\n        if (actionDescriptor.enabled) {\n          setActionPermission({\n            show: true,\n            enabled: true,\n            disabledReason: null,\n            action: null,\n          });\n        } else {\n          switch (actionDescriptor.disabled_reason) {\n            case 'not_verified':\n              if (isNilOrError(authUser)) {\n                setActionPermission({\n                  show: true,\n                  enabled: 'maybe',\n                  disabledReason: null,\n                  action: 'sign_in_up_and_verify',\n                });\n              } else {\n                setActionPermission({\n                  show: true,\n                  enabled: 'maybe',\n                  disabledReason: null,\n                  action: 'verify',\n                });\n              }\n              break;\n            case 'not_signed_in':\n              setActionPermission({\n                show: true,\n                enabled: 'maybe',\n                disabledReason: null,\n                action: 'sign_in_up',\n              });\n              break;\n            default:\n              setActionPermission({\n                show: true,\n                enabled: false,\n                disabledReason: 'notPermitted',\n                action: null,\n              });\n          }\n        }\n      }\n    });\n\n    return () => subscription.unsubscribe();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return actionPermission as ActionPermission<IInitiativeDisabledReason>;\n}\n"],"sourceRoot":""}