{"version":3,"sources":["webpack:///./app/containers/Admin/settings/areas/messages.ts","webpack:///./app/containers/Admin/settings/areas/AreaForm/index.tsx","webpack:///./app/containers/Admin/settings/areas/Edit/index.tsx","webpack:///./app/components/UI/QuillEditor/FormikQuillMultiloc.tsx","webpack:///./app/components/UI/GoBackButton/messages.ts","webpack:///./app/resources/GetArea.tsx","webpack:///./app/components/UI/GoBackButton/index.tsx"],"names":["defineMessages","subtitleAreas","id","defaultMessage","titleAreas","subtitleTerminology","deleteButtonLabel","editButtonLabel","addAreaButton","areaDeletionConfirmation","fieldTitle","fieldTitleTooltip","fieldDescription","fieldDescriptionTooltip","editFormTitle","terminologyTooltip","areaTerm","areaTermPlaceholder","areasTerm","areasTermPlaceholder","areasTermsSave","AreaForm","this","props","isSubmitting","errors","isValid","touched","status","formatMessage","intl","Form","Section","SectionField","Field","name","component","FormikInputMultilocWithLocaleSwitcher","label","FormattedMessage","messages","labelTooltipText","title_multiloc","fieldName","apiErrors","FormikQuillMultiloc","withCTAButton","description_multiloc","React","Component","values","every","isEmpty","error","injectIntl","Edit","setErrors","setSubmitting","setStatus","area","isNilOrError","updateArea","then","clHistory","push","catch","errorResponse","isCLErrorJSON","json","onClick","goBack","SectionTitle","Formik","initialValues","attributes","render","renderFn","onSubmit","handleSubmit","validate","PureComponent","withRouter","inputProps","params","areaId","newValue","form","setFieldValue","field","setFieldTouched","valueMultiloc","value","onChange","handleOnChange","onBlur","handleOnBlur","GetArea","state","undefined","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","filter","isString","switchMap","areaByIdStream","observable","subscribe","setState","data","forEach","subscription","unsubscribe","children","Container","styled","div","GoBackButton","className","buttonStyle","icon","size","padding","text"],"mappings":"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","file":"108.7970c4718fd2ad07bb7b.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  subtitleAreas: {\n    id: 'app.containers.AdminPage.SettingsPage.subtitleAreas',\n    defaultMessage:\n      'Define the geographical areas (neighbourhoods, suburbs, â€¦) that you can ask users who register on the platform. Areas can be linked to projects and can be used to create Smart Groups and give particular groups access to certain projects.',\n  },\n  titleAreas: {\n    id: 'app.containers.AdminPage.SettingsPage.titleAreas',\n    defaultMessage: 'Areas configuration',\n  },\n  subtitleTerminology: {\n    id: 'app.containers.AdminPage.SettingsPage.subtitleTerminology',\n    defaultMessage: 'Terminology',\n  },\n  deleteButtonLabel: {\n    id: 'app.containers.AdminPage.SettingsPage.areas.deleteButtonLabel',\n    defaultMessage: 'Delete',\n  },\n  editButtonLabel: {\n    id: 'app.containers.AdminPage.SettingsPage.areas.editButtonLabel',\n    defaultMessage: 'Edit',\n  },\n  addAreaButton: {\n    id: 'app.containers.AdminPage.SettingsPage.addAreaButton',\n    defaultMessage: 'Add area',\n  },\n  areaDeletionConfirmation: {\n    id: 'app.containers.AdminPage.SettingsPage.areaDeletionConfirmation',\n    defaultMessage: 'Are you sure you want to delete this area?',\n  },\n  fieldTitle: {\n    id: 'app.containers.AdminPage.SettingsPage.fieldTitle',\n    defaultMessage: 'Area name',\n  },\n  fieldTitleTooltip: {\n    id: 'app.containers.AdminPage.SettingsPage.fieldTitleTooltip',\n    defaultMessage:\n      'The name you choose for each area will be visible for citizens during signup and when filtering projects.',\n  },\n  fieldDescription: {\n    id: 'app.containers.AdminPage.SettingsPage.fieldDescription',\n    defaultMessage: 'Area description',\n  },\n  fieldDescriptionTooltip: {\n    id: 'app.containers.AdminPage.SettingsPage.fieldDescriptionTooltip',\n    defaultMessage:\n      'This description is only for internal collaboration with other administrators, to have a clear understanding what is meant by each area.',\n  },\n  editFormTitle: {\n    id: 'app.containers.AdminPage.SettingsPage.editFormTitle',\n    defaultMessage: 'Edit area',\n  },\n  terminologyTooltip: {\n    id: 'app.containers.AdminPage.SettingsPage.terminologyTooltip',\n    defaultMessage:\n      'How should areas be called towards users? e.g. neighbourhoods, quarters, counties, ...',\n  },\n  areaTerm: {\n    id: 'app.containers.AdminPage.SettingsPage.areaTerm',\n    defaultMessage: 'Term for one area (singular)',\n  },\n  areaTermPlaceholder: {\n    id: 'app.containers.AdminPage.SettingsPage.areaTermPlaceholder',\n    defaultMessage: 'area',\n  },\n  areasTerm: {\n    id: 'app.containers.AdminPage.SettingsPage.areasTerm',\n    defaultMessage: 'Term for multiple areas (plural)',\n  },\n  areasTermPlaceholder: {\n    id: 'app.containers.AdminPage.SettingsPage.areasTermPlaceholder',\n    defaultMessage: 'areas',\n  },\n  areasTermsSave: {\n    id: 'app.containers.AdminPage.SettingsPage.areasTermsSave',\n    defaultMessage: 'Save',\n  },\n});\n","import React from 'react';\nimport { isEmpty, values as getValues, every } from 'lodash-es';\n\n// i18n\nimport { InjectedIntlProps } from 'react-intl';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport messages from '../messages';\n\n// components\nimport { Form, Field, InjectedFormikProps, FormikErrors } from 'formik';\nimport FormikInputMultilocWithLocaleSwitcher from 'components/UI/FormikInputMultilocWithLocaleSwitcher';\nimport FormikQuillMultiloc from 'components/UI/QuillEditor/FormikQuillMultiloc';\nimport FormikSubmitWrapper from 'components/admin/FormikSubmitWrapper';\nimport { Section, SectionField } from 'components/admin/Section';\nimport Error from 'components/UI/Error';\n\n// Typings\nimport { Multiloc } from 'typings';\n\nexport interface Props {}\n\nexport interface FormValues {\n  title_multiloc: Multiloc;\n  description_multiloc: Multiloc;\n}\n\nclass AreaForm extends React.Component<\n  InjectedFormikProps<Props & InjectedIntlProps, FormValues>\n> {\n  public static validate = (values: FormValues): FormikErrors<FormValues> => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (every(getValues(values.title_multiloc), isEmpty)) {\n      errors.title_multiloc = [{ error: 'blank' }] as any;\n    }\n    return errors;\n  };\n\n  render() {\n    const {\n      isSubmitting,\n      errors,\n      isValid,\n      touched,\n      status,\n      intl: { formatMessage },\n    } = this.props;\n\n    return (\n      <Form>\n        <Section>\n          <SectionField>\n            <Field\n              name=\"title_multiloc\"\n              component={FormikInputMultilocWithLocaleSwitcher}\n              label={<FormattedMessage {...messages.fieldTitle} />}\n              labelTooltipText={formatMessage(messages.fieldTitleTooltip)}\n            />\n            {touched.title_multiloc && (\n              <Error\n                fieldName=\"title_multiloc\"\n                apiErrors={errors.title_multiloc as any}\n              />\n            )}\n          </SectionField>\n          <SectionField>\n            <Field\n              component={FormikQuillMultiloc}\n              name=\"description_multiloc\"\n              label={<FormattedMessage {...messages.fieldDescription} />}\n              labelTooltipText={formatMessage(messages.fieldDescriptionTooltip)}\n              withCTAButton\n            />\n            {touched.description_multiloc && (\n              <Error\n                fieldName=\"description_multiloc\"\n                apiErrors={errors.description_multiloc as any}\n              />\n            )}\n          </SectionField>\n        </Section>\n\n        <FormikSubmitWrapper {...{ isValid, isSubmitting, status, touched }} />\n      </Form>\n    );\n  }\n}\n\nexport default injectIntl<Props>(AreaForm);\n","import React from 'react';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport { isNilOrError } from 'utils/helperUtils';\nimport clHistory from 'utils/cl-router/history';\n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\n\nimport GetArea, { GetAreaChildProps } from 'resources/GetArea';\nimport { updateArea } from 'services/areas';\n\nimport GoBackButton from 'components/UI/GoBackButton';\nimport { Section, SectionTitle } from 'components/admin/Section';\n\nimport { Formik } from 'formik';\nimport AreaForm, { FormValues } from '../AreaForm';\n\nimport { CLErrorsJSON } from 'typings';\nimport { isCLErrorJSON } from 'utils/errorUtils';\ninterface InputProps {}\ninterface DataProps {\n  area: GetAreaChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nclass Edit extends React.PureComponent<Props> {\n  handleSubmit = (\n    values: FormValues,\n    { setErrors, setSubmitting, setStatus }\n  ) => {\n    const { area } = this.props;\n\n    if (isNilOrError(area)) return;\n\n    updateArea(area.id, {\n      ...values,\n    })\n      .then(() => {\n        clHistory.push('/admin/settings/areas');\n      })\n      .catch((errorResponse) => {\n        if (isCLErrorJSON(errorResponse)) {\n          const apiErrors = (errorResponse as CLErrorsJSON).json.errors;\n          setErrors(apiErrors);\n        } else {\n          setStatus('error');\n        }\n        setSubmitting(false);\n      });\n  };\n\n  renderFn = (props) => {\n    return <AreaForm {...props} />;\n  };\n\n  goBack = () => {\n    clHistory.push('/admin/settings/areas');\n  };\n\n  render() {\n    const { area } = this.props;\n    return (\n      <Section>\n        <GoBackButton onClick={this.goBack} />\n        <SectionTitle>\n          <FormattedMessage {...messages.editFormTitle} />\n        </SectionTitle>\n        {!isNilOrError(area) && (\n          <Formik\n            initialValues={{\n              title_multiloc: area.attributes.title_multiloc,\n              description_multiloc: area.attributes.description_multiloc,\n            }}\n            render={this.renderFn}\n            onSubmit={this.handleSubmit}\n            validate={(AreaForm as any).validate}\n          />\n        )}\n      </Section>\n    );\n  }\n}\n\nexport default withRouter((inputProps: InputProps & WithRouterProps) => (\n  <GetArea id={inputProps.params.areaId}>\n    {(area) => <Edit area={area} />}\n  </GetArea>\n));\n","import React, { PureComponent } from 'react';\nimport { FieldProps } from 'formik';\n\n// components\nimport QuillMultilocWithLocaleSwitcher, {\n  Props,\n} from 'components/UI/QuillEditor/QuillMultilocWithLocaleSwitcher';\n\n// typings\nimport { Multiloc } from 'typings';\n\nexport default class FormikQuillMultiloc extends PureComponent<\n  FieldProps & Props\n> {\n  handleOnChange = (newValue: Multiloc) => {\n    this.props.form.setFieldValue(this.props.field.name, newValue);\n    this.props.form.setStatus('enabled');\n  };\n\n  handleOnBlur = () => {\n    this.props.form.setFieldTouched(this.props.field.name);\n  };\n\n  render() {\n    const { field } = this.props;\n\n    return (\n      <QuillMultilocWithLocaleSwitcher\n        {...this.props}\n        valueMultiloc={field.value}\n        onChange={this.handleOnChange}\n        onBlur={this.handleOnBlur}\n      />\n    );\n  }\n}\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  goBack: {\n    id: 'app.components.GoBackButton.group.edit.goBack',\n    defaultMessage: 'Go back',\n  },\n});\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, switchMap, filter } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport { IAreaData, areaByIdStream } from 'services/areas';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  id: string;\n}\n\ntype children = (renderProps: GetAreaChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  area: IAreaData | undefined | null | Error;\n}\n\nexport type GetAreaChildProps = IAreaData | undefined | null | Error;\n\nexport default class GetArea extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      area: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { id } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ id });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          filter(({ id }) => isString(id)),\n          switchMap(({ id }) => areaByIdStream(id).observable)\n        )\n        .subscribe((area) =>\n          this.setState({ area: !isNilOrError(area) ? area.data : area })\n        ),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { id } = this.props;\n    this.inputProps$.next({ id });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { area } = this.state;\n    return (children as children)(area);\n  }\n}\n","import React, { PureComponent, FormEvent } from 'react';\nimport styled from 'styled-components';\nimport Button from 'components/UI/Button';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\nconst Container = styled.div`\n  display: inline-block;\n`;\n\ntype Props = {\n  onClick: (arg: FormEvent) => void;\n  className?: string;\n};\n\ninterface State {}\n\nexport default class GoBackButton extends PureComponent<Props, State> {\n  render() {\n    const { onClick, className } = this.props;\n\n    return (\n      <Container className={className || ''}>\n        <Button\n          onClick={onClick}\n          buttonStyle=\"text\"\n          icon=\"arrow-back\"\n          size=\"2\"\n          padding=\"0px\"\n          text={<FormattedMessage {...messages.goBack} />}\n        />\n      </Container>\n    );\n  }\n}\n"],"sourceRoot":""}