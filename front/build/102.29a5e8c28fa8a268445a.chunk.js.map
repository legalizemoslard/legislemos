{"version":3,"sources":["webpack:///./app/components/admin/PostManager/components/PostTable/TopicsSelector.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/ProjectSelector.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/InitiativesStatusSelector.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/WrappedRow.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/SubRow.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/IdeasStatusSelector.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/IdeaRow.tsx","webpack:///./app/components/admin/PostManager/components/PostTable/PhasesSelector.tsx"],"names":["StyledLabel","Label","memo","selectedTopics","onUpdateTopics","topics","topicIds","processedTopics","isNilOrError","filter","topic","handleTopicDelete","useCallback","topicId","event","stopPropagation","newSelectedTopics","pull","map","key","id","color","basic","value","attributes","title_multiloc","Icon","name","onClick","LabelText","styled","span","props","projectId","project","Error","Container","div","ColorIndicator","theme","borderRadius","disabled","active","statusId","selectedStatus","allowedTransitions","undefined","isAllowed","onUpdateStatus","statuses","this","status","Popup","trigger","isActive","handleStatusClick","content","position","React","PureComponent","WrappedRow","Table","Row","Component","className","activeFilterMenu","selectedPhases","phases","onUpdatePhases","postType","Cell","as","FilterCell","collapsing","colSpan","IdeaRow","updateIdea","idea","phase_ids","topic_ids","ideaId","idea_status_id","trackEventByName","tracks","ideaStatusChange","location","method","selection","cellProps","onChange","featureFlag","handlers","Content","insertCellOptions","setState","cells","insertConfiguration","onClickCheckbox","onClickTitle","state","checked","has","size","TitleLink","FormattedRelative","published_at","singleLine","upvotes_count","downvotes_count","baskets_count","connectDragSource","get","relationships","data","p","onData","handleData","StyledRow","ref","instance","findDOMNode","cellConfiguration","renderCell","onUpdateIdeaPhases","onUpdateIdeaTopics","onUpdateIdeaStatus","ideaSource","beginDrag","type","endDrag","monitor","item","getItem","dropResult","getDropResult","forEach","observables","ideaByIdStream","observable","combineLatest","pipe","take","subscribe","ideas","currentTopics","d","newTopics","uniq","concat","currentPhases","newPhases","newProject","isEmpty","ideaTitle","localize","message","intl","formatMessage","messages","losePhaseInfoConfirmation","window","confirm","project_id","injectIntl","DragSource","connect","dragSource","isDragging","phaseId","indexOf","phase","isEnabled","newSelectedPhases","xor","canContainIdeas","index","handlePhaseClick","circular"],"mappings":"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","file":"102.29a5e8c28fa8a268445a.chunk.js","sourcesContent":["import React, { memo, useCallback, FormEvent } from 'react';\nimport { pull } from 'lodash-es';\nimport { Label, Icon } from 'semantic-ui-react';\nimport T from 'components/T';\nimport useTopics from 'hooks/useTopics';\nimport { isNilOrError } from 'utils/helperUtils';\nimport styled from 'styled-components';\nimport { ITopicData } from 'services/topics';\n\nconst StyledLabel = styled(Label)`\n  white-space: nowrap;\n`;\n\ninterface Props {\n  selectedTopics: string[];\n  onUpdateTopics: (topicIds: string[]) => void;\n}\n\nconst TopicsSelector = memo<Props>(({ selectedTopics, onUpdateTopics }) => {\n  const topics = useTopics({ topicIds: selectedTopics });\n  const processedTopics = !isNilOrError(topics)\n    ? (topics.filter((topic) => !isNilOrError(topic)) as ITopicData[])\n    : null;\n\n  const handleTopicDelete = useCallback(\n    (topicId: string) => (event: FormEvent) => {\n      event.stopPropagation();\n      const newSelectedTopics = pull(selectedTopics, topicId);\n      onUpdateTopics(newSelectedTopics);\n    },\n    [selectedTopics, onUpdateTopics]\n  );\n\n  if (processedTopics) {\n    return (\n      <>\n        {processedTopics.map((topic) => {\n          return (\n            <StyledLabel key={topic.id} color=\"teal\" basic={true}>\n              <T value={topic.attributes.title_multiloc} />\n              <Icon name=\"delete\" onClick={handleTopicDelete(topic.id)} />\n            </StyledLabel>\n          );\n        })}\n      </>\n    );\n  }\n\n  return null;\n});\n\nexport default TopicsSelector;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Label } from 'semantic-ui-react';\nimport T from 'components/T';\nimport GetProject from 'resources/GetProject';\n\nconst LabelText = styled.span`\n  font-weight: 600;\n`;\n\nconst StyledLabel = styled(Label)`\n  white-space: nowrap;\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 175px;\n`;\n\nexport default (props: { projectId: string }) => (\n  <GetProject projectId={props.projectId}>\n    {(project) => {\n      if (!project || project instanceof Error) return null;\n\n      return (\n        <StyledLabel key={project.id} color=\"teal\" basic={true}>\n          <LabelText>\n            <T value={project.attributes.title_multiloc} />\n          </LabelText>\n        </StyledLabel>\n      );\n    }}\n  </GetProject>\n);\n","import React from 'react';\nimport { Popup } from 'semantic-ui-react';\nimport { IInitiativeAllowedTransitions } from 'services/initiatives';\nimport { IInitiativeStatusData } from 'services/initiativeStatuses';\nimport T from 'components/T';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst ColorIndicator = styled.div<{ active: boolean; disabled: boolean }>`\n  width: 1rem;\n  height: 1rem;\n  border: 1px solid ${(props) => props.color};\n  border-radius: ${(props) => props.theme.borderRadius};\n  margin-right: 0.5rem;\n  cursor: pointer;\n  margin: 0 0.25rem;\n  ${(props) => (props.disabled ? 'cursor: not-allowed;' : '')}\n  ${(props) => (props.active ? `background-color: ${props.color};` : '')}\n`;\n\ntype Props = {\n  selectedStatus?: string;\n  statuses: IInitiativeStatusData[];\n  onUpdateStatus: (statusId: string) => void;\n  allowedTransitions: IInitiativeAllowedTransitions | null;\n};\n\nclass InitiativesStatusSelector extends React.PureComponent<Props> {\n  isActive = (statusId) => {\n    return this.props.selectedStatus === statusId;\n  };\n\n  isAllowed = (statusId) => {\n    return (\n      this.props.allowedTransitions &&\n      this.props.allowedTransitions[statusId] !== undefined\n    );\n  };\n\n  handleStatusClick = (statusId) => (event) => {\n    event.stopPropagation();\n    if (this.isAllowed(statusId)) {\n      this.props.onUpdateStatus(statusId);\n    }\n  };\n\n  render() {\n    const { statuses } = this.props;\n    return (\n      <Container>\n        {statuses.map((status) => (\n          <Popup\n            key={status.id}\n            basic\n            trigger={\n              <ColorIndicator\n                disabled={!this.isAllowed(status.id)}\n                color={status.attributes.color}\n                active={this.isActive(status.id)}\n                onClick={this.handleStatusClick(status.id)}\n              />\n            }\n            content={<T value={status.attributes.title_multiloc} />}\n            position=\"top center\"\n          />\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default InitiativesStatusSelector;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\n\n// Little hack needed to apply react DnD to the custom component\nexport default class WrappedRow extends React.Component<any> {\n  render() {\n    return <Table.Row {...this.props} />;\n  }\n}\n","import React from 'react';\n\nimport PhasesSelector from './PhasesSelector';\nimport TopicsSelector from './TopicsSelector';\nimport ProjectSelector from './ProjectSelector';\nimport IdeasStatusSelector from './IdeasStatusSelector';\nimport InitiativesStatusSelector from './InitiativesStatusSelector';\n\nimport { Table } from 'semantic-ui-react';\nimport { FilterCell } from './Row';\nimport { TFilterMenu } from '../..';\nimport { IPhaseData } from 'services/phases';\nimport { IIdeaStatusData } from 'services/ideaStatuses';\nimport { IInitiativeStatusData } from 'services/initiativeStatuses';\nimport { GetInitiativeAllowedTransitionsChildProps } from 'resources/GetInitiativeAllowedTransitions';\n\ninterface Props {\n  active: boolean;\n  className?: string;\n  activeFilterMenu: TFilterMenu;\n  selectedPhases?: string[];\n  phases?: IPhaseData[];\n  selectedTopics?: string[];\n  projectId?: string;\n  statuses?: IIdeaStatusData[] | IInitiativeStatusData[] | undefined;\n  selectedStatus: string | undefined;\n  onUpdatePhases: (id: string[]) => void;\n  onUpdateTopics: (id: string[]) => void;\n  onUpdateStatus: (id: string) => void;\n  allowedTransitions: GetInitiativeAllowedTransitionsChildProps;\n  /* set allowedTransitions to null to allow all */\n  postType: 'idea' | 'initiative';\n}\n\nexport default ({\n  active,\n  className,\n  activeFilterMenu,\n  selectedPhases,\n  phases,\n  selectedTopics,\n  projectId,\n  statuses,\n  selectedStatus,\n  onUpdatePhases,\n  onUpdateTopics,\n  onUpdateStatus,\n  allowedTransitions,\n  postType,\n}: Props) => {\n  return (\n    <Table.Row active={active} className={className}>\n      <Table.Cell as={FilterCell} collapsing={true} />\n      <Table.Cell colSpan={6} as={FilterCell}>\n        {activeFilterMenu === 'phases' && phases && (\n          <PhasesSelector\n            selectedPhases={selectedPhases || []}\n            phases={phases}\n            onUpdatePhases={onUpdatePhases}\n          />\n        )}\n        {activeFilterMenu === 'topics' && (\n          <TopicsSelector\n            selectedTopics={selectedTopics || []}\n            onUpdateTopics={onUpdateTopics}\n          />\n        )}\n        {activeFilterMenu === 'projects' && projectId && (\n          <ProjectSelector projectId={projectId} />\n        )}\n        {activeFilterMenu === 'statuses' &&\n          postType === 'initiative' &&\n          statuses &&\n          allowedTransitions !== undefined && (\n            <InitiativesStatusSelector\n              statuses={statuses as IInitiativeStatusData[]}\n              selectedStatus={selectedStatus}\n              onUpdateStatus={onUpdateStatus}\n              allowedTransitions={allowedTransitions}\n            />\n          )}\n        {activeFilterMenu === 'statuses' && postType === 'idea' && statuses && (\n          <IdeasStatusSelector\n            statuses={statuses as IIdeaStatusData[]}\n            selectedStatus={selectedStatus}\n            onUpdateStatus={onUpdateStatus}\n          />\n        )}\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n","import React from 'react';\nimport { Popup } from 'semantic-ui-react';\nimport { IIdeaStatusData } from 'services/ideaStatuses';\nimport T from 'components/T';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst ColorIndicator = styled.div<{ active: boolean }>`\n  width: 1rem;\n  height: 1rem;\n  border: 1px solid ${(props) => props.color};\n  border-radius: ${(props) => props.theme.borderRadius};\n  margin-right: 0.5rem;\n  cursor: pointer;\n  margin: 0 0.25rem;\n  ${(props) => (props.active ? `background-color: ${props.color};` : '')}\n`;\n\ntype Props = {\n  selectedStatus?: string;\n  statuses: IIdeaStatusData[];\n  onUpdateStatus: (statusId: string) => void;\n};\n\nclass IdeasStatusSelector extends React.PureComponent<Props> {\n  isActive = (statusId) => {\n    return this.props.selectedStatus === statusId;\n  };\n\n  handleStatusClick = (statusId) => (event) => {\n    event.stopPropagation();\n    this.props.onUpdateStatus(statusId);\n  };\n\n  render() {\n    const { statuses } = this.props;\n    return (\n      <Container>\n        {statuses.map((status) => (\n          <Popup\n            key={status.id}\n            basic\n            trigger={\n              <ColorIndicator\n                color={status.attributes.color}\n                active={this.isActive(status.id)}\n                onClick={this.handleStatusClick(status.id)}\n              />\n            }\n            content={<T value={status.attributes.title_multiloc} />}\n            position=\"top center\"\n          />\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default IdeasStatusSelector;\n","import React, { ChangeEvent } from 'react';\nimport { combineLatest } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { uniq, isEmpty, get } from 'lodash-es';\nimport { findDOMNode } from 'react-dom';\nimport { DragSource } from 'react-dnd-cjs';\n\n// services\nimport { IIdeaData, updateIdea, ideaByIdStream } from 'services/ideas';\nimport { IPhaseData } from 'services/phases';\nimport { IIdeaStatusData } from 'services/ideaStatuses';\n\n// components\nimport { Table, Icon } from 'semantic-ui-react';\nimport WrappedRow from './WrappedRow';\nimport T from 'components/T';\n\nimport Checkbox from 'components/UI/Checkbox';\nimport FeatureFlag from 'components/FeatureFlag';\n\n// utils\nimport localize, { InjectedLocalized } from 'utils/localize';\n\n// i18n\nimport { FormattedRelative, InjectedIntlProps } from 'react-intl';\nimport { injectIntl } from 'utils/cl-intl';\nimport messages from '../../messages';\n\n// analytics\nimport { trackEventByName } from 'utils/analytics';\nimport tracks from '../../tracks';\nimport { TFilterMenu, ManagerType } from '../..';\nimport { TitleLink, StyledRow } from './Row';\nimport SubRow from './SubRow';\nimport {\n  CellConfiguration,\n  InsertConfigurationOptions,\n  Override,\n} from 'typings';\nimport { insertConfiguration } from 'utils/moduleUtils';\nimport Outlet from 'components/Outlet';\n\ntype InputProps = {\n  type: ManagerType;\n  idea: IIdeaData;\n  phases?: IPhaseData[];\n  statuses?: IIdeaStatusData[];\n  /** A set of ids of ideas/initiatives that are currently selected */\n  selection: Set<string>;\n  activeFilterMenu: TFilterMenu;\n  className?: string;\n  onClickCheckbox: (event) => void;\n  onClickTitle: (event) => void;\n  nothingHappens: (event) => void;\n};\n\nexport type IdeaCellComponentProps = {\n  idea: IIdeaData;\n  selection: Set<string>;\n  onChange?: (event: unknown) => void;\n  onClick?: (event: unknown) => void;\n};\n\ntype Props = InputProps & {\n  connectDragSource: any;\n};\n\ntype State = {\n  cells: CellConfiguration<IdeaCellComponentProps>[];\n};\n\nclass IdeaRow extends React.PureComponent<\n  Props & InjectedIntlProps & InjectedLocalized,\n  State\n> {\n  constructor(props) {\n    super(props);\n\n    const { onClickCheckbox, onClickTitle } = props;\n\n    this.state = {\n      cells: [\n        {\n          name: 'selection',\n          cellProps: { collapsing: true },\n          onChange: onClickCheckbox,\n          Component: ({\n            selection,\n            idea,\n            onChange,\n          }: Override<\n            IdeaCellComponentProps,\n            {\n              onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n            }\n          >) => {\n            return (\n              <Checkbox\n                checked={!!selection.has(idea.id)}\n                onChange={onChange}\n                size=\"21px\"\n              />\n            );\n          },\n        },\n        {\n          name: 'title',\n          onClick: onClickTitle,\n          Component: ({ idea, onClick }) => {\n            return (\n              <TitleLink\n                className=\"e2e-idea-manager-idea-title\"\n                onClick={onClick}\n              >\n                <T value={idea.attributes.title_multiloc} />\n              </TitleLink>\n            );\n          },\n        },\n        {\n          name: 'published_on',\n          Component: ({ idea }) => {\n            return <FormattedRelative value={idea.attributes.published_at} />;\n          },\n        },\n        {\n          name: 'up',\n          cellProps: { singleLine: true },\n          Component: ({ idea }) => {\n            return (\n              <>\n                <Icon name=\"thumbs up\" />\n                {idea.attributes.upvotes_count}\n              </>\n            );\n          },\n        },\n        {\n          name: 'down',\n          cellProps: { singleLine: true },\n          Component: ({ idea }: IdeaCellComponentProps) => {\n            return (\n              <>\n                <Icon name=\"thumbs down\" />\n                {idea.attributes.downvotes_count}\n              </>\n            );\n          },\n        },\n        {\n          name: 'picks',\n          cellProps: { singleLine: true },\n          featureFlag: 'participatory_budgeting',\n          Component: ({ idea }: IdeaCellComponentProps) => {\n            return <>{idea.attributes.baskets_count}</>;\n          },\n        },\n      ],\n    };\n  }\n\n  onUpdateIdeaPhases = (selectedPhases) => {\n    updateIdea(this.props.idea.id, {\n      phase_ids: selectedPhases,\n    });\n  };\n\n  onUpdateIdeaTopics = (selectedTopics) => {\n    updateIdea(this.props.idea.id, {\n      topic_ids: selectedTopics,\n    });\n  };\n\n  onUpdateIdeaStatus = (statusId) => {\n    const { idea } = this.props;\n    const ideaId = idea.id;\n\n    updateIdea(ideaId, {\n      idea_status_id: statusId,\n    });\n\n    trackEventByName(tracks.ideaStatusChange, {\n      location: 'Idea overview',\n      method: 'Clicked on the squares representing the statuses',\n      idea: ideaId,\n    });\n  };\n\n  renderCell = (\n    { idea, selection }: IdeaCellComponentProps,\n    {\n      cellProps = {},\n      name,\n      Component,\n      onChange,\n      onClick,\n      featureFlag,\n    }: CellConfiguration<IdeaCellComponentProps>\n  ) => {\n    const handlers = {\n      ...(onChange ? { onChange } : {}),\n      ...(onClick ? { onClick } : {}),\n    };\n\n    const Content = (\n      <Table.Cell {...cellProps} key={name}>\n        <Component idea={idea} selection={selection} {...handlers} />\n      </Table.Cell>\n    );\n\n    if (!featureFlag) return Content;\n    return (\n      <FeatureFlag name={featureFlag} key={name}>\n        {Content}\n      </FeatureFlag>\n    );\n  };\n\n  handleData = (\n    insertCellOptions: InsertConfigurationOptions<\n      CellConfiguration<IdeaCellComponentProps>\n    >\n  ) => {\n    this.setState(({ cells }) => ({\n      cells: insertConfiguration(insertCellOptions)(cells),\n    }));\n  };\n\n  render() {\n    const {\n      idea,\n      selection,\n      connectDragSource,\n      activeFilterMenu,\n      phases,\n      statuses,\n      className,\n    } = this.props;\n\n    const { cells } = this.state;\n\n    const selectedStatus: string | undefined = get(\n      idea,\n      'relationships.idea_status.data.id'\n    );\n    const selectedPhases = idea.relationships.phases.data.map((p) => p.id);\n    const selectedTopics = idea.relationships.topics?.data.map((p) => p.id);\n    const active = selection.has(idea.id);\n    const projectId = get(idea, 'relationships.project.data.id');\n\n    return (\n      <>\n        <Outlet\n          id=\"app.components.admin.PostManager.components.PostTable.IdeaRow.cells\"\n          onData={this.handleData}\n        />\n        <WrappedRow\n          className={`${className} e2e-idea-manager-idea-row`}\n          as={StyledRow}\n          active={active}\n          ref={(instance) => {\n            // eslint-disable-next-line react/no-find-dom-node\n            instance && connectDragSource(findDOMNode(instance));\n          }}\n        >\n          {cells.map((cellConfiguration) =>\n            this.renderCell({ idea, selection }, cellConfiguration)\n          )}\n        </WrappedRow>\n        <SubRow\n          {...{\n            active,\n            className,\n            activeFilterMenu,\n            selectedPhases,\n            phases,\n            selectedTopics,\n            projectId,\n            statuses,\n            selectedStatus,\n          }}\n          allowedTransitions={null}\n          onUpdatePhases={this.onUpdateIdeaPhases}\n          onUpdateTopics={this.onUpdateIdeaTopics}\n          onUpdateStatus={this.onUpdateIdeaStatus}\n          postType=\"idea\"\n        />\n      </>\n    );\n  }\n}\n\nconst ideaSource = {\n  beginDrag(props: Props) {\n    return {\n      type: 'idea',\n      id: props.idea.id,\n    };\n  },\n  endDrag(props: Props & InjectedIntlProps & InjectedLocalized, monitor) {\n    const item = monitor.getItem();\n    const dropResult = monitor.getDropResult();\n    const { selection } = props;\n\n    if (dropResult && dropResult.type === 'status') {\n      selection.has(item.id) &&\n        selection.forEach((ideaId) => {\n          updateIdea(ideaId, {\n            idea_status_id: dropResult.id,\n          });\n        });\n\n      !selection.has(item.id) &&\n        updateIdea(item.id, {\n          idea_status_id: dropResult.id,\n        });\n\n      trackEventByName(tracks.ideaStatusChange, {\n        location: 'Idea overview',\n        method: 'Dragged and dropped idea(s) in manager',\n      });\n    } else if (dropResult && dropResult.type) {\n      const observables = selection.has(item.id)\n        ? [...selection].map((id) => ideaByIdStream(id).observable)\n        : [ideaByIdStream(item.id).observable];\n\n      if (dropResult.type === 'topic') {\n        combineLatest(observables)\n          .pipe(take(1))\n          .subscribe((ideas) => {\n            ideas.map((idea) => {\n              const currentTopics = idea.data.relationships.topics?.data.map(\n                (d) => d.id\n              );\n              const newTopics = uniq(currentTopics?.concat(dropResult.id));\n              updateIdea(idea.data.id, {\n                topic_ids: newTopics,\n              });\n            });\n          });\n      }\n\n      if (dropResult.type === 'phase') {\n        combineLatest(observables)\n          .pipe(take(1))\n          .subscribe((ideas) => {\n            ideas.map((idea) => {\n              const currentPhases = idea.data.relationships.phases.data.map(\n                (d) => d.id\n              );\n              const newPhases = uniq(currentPhases.concat(dropResult.id));\n              updateIdea(idea.data.id, {\n                phase_ids: newPhases,\n              });\n            });\n          });\n      }\n\n      if (dropResult.type === 'project') {\n        combineLatest(observables)\n          .pipe(take(1))\n          .subscribe((ideas) => {\n            ideas.map((idea) => {\n              const newProject = dropResult.id;\n              const hasPhases = !isEmpty(idea.data.relationships.phases.data);\n\n              if (hasPhases) {\n                const ideaTitle = props.localize(\n                  idea.data.attributes.title_multiloc\n                );\n                const message = props.intl.formatMessage(\n                  messages.losePhaseInfoConfirmation,\n                  { ideaTitle }\n                );\n\n                if (window.confirm(message)) {\n                  updateIdea(idea.data.id, {\n                    project_id: newProject,\n                    phase_ids: [],\n                  });\n                }\n              } else {\n                updateIdea(idea.data.id, {\n                  project_id: newProject,\n                  phase_ids: [],\n                });\n              }\n            });\n          });\n      }\n    }\n  },\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  };\n}\n\nexport default injectIntl(\n  localize(DragSource('IDEA', ideaSource, collect)(IdeaRow))\n);\n","import React from 'react';\nimport { xor } from 'lodash-es';\nimport { IPhaseData, canContainIdeas } from 'services/phases';\nimport { Label, Popup } from 'semantic-ui-react';\nimport T from 'components/T';\n\ntype Props = {\n  selectedPhases: string[];\n  phases: IPhaseData[];\n  onUpdatePhases: (phasesIds: string[]) => void;\n};\n\nclass PhasesSelector extends React.PureComponent<Props> {\n  isActive = (phaseId) => {\n    return this.props.selectedPhases.indexOf(phaseId) >= 0;\n  };\n\n  handlePhaseClick = (phase: IPhaseData) => (event) => {\n    event.stopPropagation();\n    if (this.isEnabled(phase)) {\n      const newSelectedPhases = xor(this.props.selectedPhases, [phase.id]);\n      this.props.onUpdatePhases(newSelectedPhases);\n    }\n  };\n\n  isEnabled = (phase: IPhaseData) => {\n    return canContainIdeas(phase);\n  };\n\n  render() {\n    const { phases } = this.props;\n    return (\n      <div>\n        {phases.map((phase, index) => (\n          <Popup\n            basic\n            key={phase.id}\n            trigger={\n              <Label\n                as={this.isEnabled(phase) ? 'a' : undefined}\n                color={this.isActive(phase.id) ? 'teal' : undefined}\n                active={this.isActive(phase.id)}\n                onClick={this.handlePhaseClick(phase)}\n                circular\n                basic\n              >\n                {index + 1}\n              </Label>\n            }\n            content={<T value={phase.attributes.title_multiloc} />}\n            position=\"top center\"\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default PhasesSelector;\n"],"sourceRoot":""}