{"version":3,"sources":["webpack:///./app/modules/commercial/geographic_dashboard/admin/containers/dashboard/tracks.ts","webpack:///./app/resources/GetGeotaggedIdeas.tsx","webpack:///./app/modules/commercial/geographic_dashboard/admin/containers/dashboard/IdeaPane.tsx","webpack:///./app/components/Map/index.tsx","webpack:///./app/components/UI/LeafletMap/events.ts","webpack:///./app/components/Author/messages.ts","webpack:///./app/modules/commercial/geographic_dashboard/admin/containers/dashboard/index.tsx","webpack:///./app/modules/commercial/geographic_dashboard/admin/containers/dashboard/messages.ts","webpack:///./app/components/admin/ServerError/index.tsx","webpack:///./app/components/admin/ServerError/messages.ts","webpack:///./app/components/Author/index.tsx"],"names":["clickIdeaOnMap","name","clickedIdeaLink","GetGeotaggedIdeas","props","state","geotaggedIdeas","undefined","this","projectIds","phaseId","pageNumber","pageSize","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","switchMap","geotaggedIdeasStream","queryParameters","projects","phase","observable","subscribe","setState","isNilOrError","data","forEach","subscription","unsubscribe","children","React","Component","Container","styled","div","theme","borderRadius","colors","adminBorder","fontSizes","medium","TextContainer","CloseIcon","Icon","mediumGrey","StyledAuthor","Author","CloseButton","button","clBlueDark","IdeaPane","slug","idea","attributes","trackEventByName","tracks","extra","className","onClose","onClick","to","target","trackLinkClick","as","value","title_multiloc","authorId","relationships","author","id","createdAt","published_at","size","body_multiloc","supportHtml","PureComponent","inputProps","ideaId","LeafletMap","lazy","defaultCardStyle","MapWrapper","BoxContainer","defaultOutline","media","smallerThanMinTablet","memo","projectId","centerLatLng","zoomLevel","mapHeight","points","noMarkerClustering","zoomControlPosition","layersControlPosition","boxContent","onInit","onBoxClose","hideLegend","appConfig","useState","additionalLeafletConfig","setAdditionalLeafletConfig","center","useMemo","getCenter","zoom","getZoomLevel","tileProvider","getTileProvider","tileOptions","getTileOptions","leafletConfig","handleLeafletConfigChange","useCallback","event","preventDefault","Suspense","fallback","map","onLeafletConfigChange","eventEmitter","emit","events","leafletMapCenterChange","leafletMapZoomChange","markerId","leafletMapHoveredMarkerChange","leafletMapSelectedMarkerChange","latLng","leafletMapClicked","leafletMapCenter$","observeEvent","eventValue","x","y","isEqual","publishReplay","refCount","leafletMapZoom$","leafletMapHoveredMarker$","leafletMapSelectedMarker$","leafletMapClicked$","debounceTime","defineMessages","a11y_postedBy","defaultMessage","SpinnerContainer","adminSecondaryTextColor","Placeholder","span","StyledWarning","Warning","StyledMap","Map","Panel","DashboardMap","ideas","filter","location_point_geojson","title","localize","panelOpened","selectedIdeaId","loadingMessage","handleIdeaMarkerSelected","setTimeout","FormattedMessage","messages","automaticLoadingMessage","thenLoadingMessage","lastLoadingMessage","Spinner","text","mapExplanationText","getPoints","closePanel","DashboardMapMapWithLoc","clRedError","genericServerError","isRtl","smallPhone","AuthorContainer","StyledAvatar","Avatar","AuthorMeta","AuthorNameContainer","label","base","TimeAgo","small","isLinkToProfile","showAvatar","showModeration","avatarBadgeBgColor","fontWeight","fontSize","horizontalLayout","color","underline","userId","authorCanModerate","canModerateProject","moderator","bgColor","ScreenReaderOnly","canModerate","FormattedRelative"],"mappings":"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","file":"85.b737e641003af412e9d0.chunk.js","sourcesContent":["export default {\n  clickIdeaOnMap: {\n    name: 'Clicked Idea marker on map',\n  },\n  clickedIdeaLink: {\n    name: 'Clicked idea link in panel',\n  },\n};\n","import React from 'react';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport { IGeotaggedIdeaData, geotaggedIdeasStream } from 'services/ideas';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  phaseId?: string;\n  projectIds?: string[];\n  pageNumber?: number;\n  pageSize?: number;\n}\n\ntype children = (\n  renderProps: GetGeotaggedIdeasChildProps\n) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children: children;\n}\n\ninterface State {\n  geotaggedIdeas: GetGeotaggedIdeasChildProps;\n}\n\nexport type GetGeotaggedIdeasChildProps =\n  | IGeotaggedIdeaData[]\n  | undefined\n  | null;\n\nexport default class GetGeotaggedIdeas extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      geotaggedIdeas: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { projectIds, phaseId, pageNumber, pageSize } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({\n      projectIds,\n      phaseId,\n      pageNumber,\n      pageSize,\n    });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          switchMap(({ projectIds, phaseId }) => {\n            return geotaggedIdeasStream({\n              queryParameters: {\n                projects: projectIds,\n                phase: phaseId,\n                'page[number]': pageNumber,\n                'page[size]': pageSize,\n              },\n            }).observable;\n          })\n        )\n        .subscribe((geotaggedIdeas) => {\n          this.setState({\n            geotaggedIdeas: !isNilOrError(geotaggedIdeas)\n              ? geotaggedIdeas.data\n              : null,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { projectIds, phaseId, pageNumber, pageSize } = this.props;\n    this.inputProps$.next({ projectIds, phaseId, pageNumber, pageSize });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { geotaggedIdeas } = this.state;\n    return (children as children)(geotaggedIdeas);\n  }\n}\n","import React, { PureComponent } from 'react';\n\n// dataloading\nimport { isNilOrError } from 'utils/helperUtils';\nimport GetIdea, { GetIdeaChildProps } from 'resources/GetIdea';\n\n// components\nimport { Icon } from 'cl2-component-library';\nimport Author from 'components/Author';\nimport Link from 'utils/cl-router/Link';\n\n// intl\nimport T from 'components/T';\n\n// tracking\nimport { trackEventByName } from 'utils/analytics';\nimport tracks from './tracks';\n\n// styling\nimport styled from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\n\nconst Container = styled.div`\n  width: 300px;\n  height: 600px;\n  overflow: hidden;\n  padding: 15px;\n  padding-top: 30px;\n  border-radius: ${(props: any) => props.theme.borderRadius};\n  border: 1px solid ${colors.adminBorder};\n  position: relative;\n  display: flex;\n  flex-direction: column;\n\n  h4 {\n    font-size: ${fontSizes.medium}px;\n  }\n`;\n\nconst TextContainer = styled.div`\n  overflow-y: auto;\n  margin-top: 22px;\n  margin-bottom: 20px;\n  flex-grow: 1;\n  min-height: 0;\n`;\nconst CloseIcon = styled(Icon)`\n  flex: 0 0 15px;\n  width: 15px;\n  fill: ${colors.mediumGrey};\n`;\nconst StyledAuthor = styled(Author)`\n  margin-top: 25px;\n`;\n\nconst CloseButton = styled.button`\n  height: 15px;\n  width: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  cursor: pointer;\n  top: 10px;\n  right: 10px;\n  outline: none;\n\n  &:hover,\n  &:focus,\n  &:active {\n    svg {\n      fill: ${colors.clBlueDark};\n    }\n  }\n`;\n\ninterface DataProps {\n  idea: GetIdeaChildProps;\n}\n\ninterface InputProps {\n  ideaId: string;\n  className?: string;\n  onClose: () => void;\n}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface State {}\n\nclass IdeaPane extends PureComponent<Props, State> {\n  trackLinkClick = () => {\n    const slug =\n      !isNilOrError(this.props.idea) && this.props.idea.attributes.slug;\n    trackEventByName(tracks.clickIdeaOnMap.name, { extra: { slug } });\n  };\n\n  render() {\n    const { idea, className, onClose } = this.props;\n\n    if (isNilOrError(idea)) return null;\n\n    return (\n      <Container className={className}>\n        <CloseButton onClick={onClose}>\n          <CloseIcon name=\"close\" />\n        </CloseButton>\n\n        <Link\n          to={`/ideas/${idea.attributes.slug}`}\n          target=\"_blank\"\n          onClick={this.trackLinkClick}\n        >\n          <T as=\"h4\" value={idea.attributes.title_multiloc} />\n        </Link>\n\n        <StyledAuthor\n          authorId={\n            idea.relationships.author.data\n              ? idea.relationships.author.data.id\n              : null\n          }\n          createdAt={idea.attributes.published_at}\n          size={34}\n        />\n        <TextContainer>\n          <T value={idea.attributes.body_multiloc} supportHtml />\n        </TextContainer>\n      </Container>\n    );\n  }\n}\n\nexport default (inputProps: InputProps) => (\n  <GetIdea ideaId={inputProps.ideaId}>\n    {(idea) => <IdeaPane {...inputProps} idea={idea} />}\n  </GetIdea>\n);\n","import React, {\n  memo,\n  useMemo,\n  useState,\n  lazy,\n  Suspense,\n  useCallback,\n} from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport { Icon } from 'cl2-component-library';\nimport Outlet from 'components/Outlet';\nconst LeafletMap = lazy(() => import('components/UI/LeafletMap'));\n\n// hooks\nimport useAppConfiguration from 'hooks/useAppConfiguration';\n\n// utils\nimport {\n  getCenter,\n  getZoomLevel,\n  getTileProvider,\n  getTileOptions,\n} from 'utils/map';\nimport { ILeafletMapConfig } from 'components/UI/LeafletMap/useLeaflet';\n\n// styling\nimport styled from 'styled-components';\nimport { media, defaultOutline, defaultCardStyle } from 'utils/styleUtils';\n\n// typings\nimport { LatLngTuple, Map as ILeafletMap } from 'leaflet';\n\nexport interface Point extends GeoJSON.Point {\n  data?: any;\n  id: string;\n  title?: string;\n}\n\nconst Container = styled.div`\n  ${defaultCardStyle};\n  background: transparent;\n  border: solid 1px #ccc;\n`;\n\nconst MapWrapper = styled.div`\n  flex: 1;\n  display: flex;\n  position: relative;\n`;\n\nconst BoxContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  position: absolute;\n  top: 0;\n  z-index: 1001;\n  background: #fff;\n  width: 100%;\n  height: 80%;\n  max-height: 550px;\n`;\n\nconst CloseButton = styled.button`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  cursor: pointer;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2;\n  border-radius: 50%;\n  border: solid 1px transparent;\n  background: #fff;\n  transition: all 100ms ease-out;\n  outline: none !important;\n\n  &:hover {\n    background: #ececec;\n  }\n\n  &.focus-visible {\n    ${defaultOutline};\n  }\n\n  ${media.smallerThanMinTablet`\n    top: 4px;\n    right: 4px;\n  `}\n`;\n\nconst CloseIcon = styled(Icon)`\n  width: 12px;\n  height: 12px;\n  fill: #000;\n`;\n\nexport interface IMapConfigProps {\n  centerLatLng?: LatLngTuple;\n  points?: Point[];\n  zoomLevel?: number;\n  areas?: GeoJSON.Polygon[];\n  mapHeight?: string;\n  noMarkerClustering?: boolean;\n  zoomControlPosition?: 'topleft' | 'topright' | 'bottomleft' | 'bottomright';\n  layersControlPosition?: 'topleft' | 'topright' | 'bottomleft' | 'bottomright';\n}\n\nexport interface IMapProps {\n  onInit?: (map: ILeafletMap) => void;\n  onBoxClose?: (event: React.FormEvent) => void;\n  className?: string;\n  projectId?: string | null;\n  hideLegend?: boolean;\n  boxContent?: JSX.Element | null;\n}\n\nconst Map = memo<IMapProps & IMapConfigProps>(\n  ({\n    projectId,\n    centerLatLng,\n    zoomLevel,\n    mapHeight,\n    points,\n    noMarkerClustering,\n    zoomControlPosition,\n    layersControlPosition,\n    boxContent,\n    onInit,\n    onBoxClose,\n    className,\n    hideLegend,\n  }) => {\n    const appConfig = useAppConfiguration();\n\n    const [\n      additionalLeafletConfig,\n      setAdditionalLeafletConfig,\n    ] = useState<ILeafletMapConfig | null>(null);\n\n    const center = useMemo(() => {\n      return getCenter(centerLatLng, appConfig);\n    }, [centerLatLng, appConfig]);\n\n    const zoom = useMemo(() => {\n      return getZoomLevel(zoomLevel, appConfig);\n    }, [zoomLevel, appConfig]);\n\n    const tileProvider = useMemo(() => {\n      return getTileProvider(appConfig);\n    }, [appConfig]);\n\n    const tileOptions = useMemo(() => {\n      return getTileOptions();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [tileProvider]);\n\n    const leafletConfig = useMemo(() => {\n      return {\n        points,\n        noMarkerClustering,\n        zoom,\n        center,\n        tileProvider,\n        tileOptions,\n        zoomControlPosition,\n        layersControlPosition,\n        ...additionalLeafletConfig,\n      };\n    }, [\n      points,\n      noMarkerClustering,\n      zoom,\n      center,\n      tileProvider,\n      tileOptions,\n      zoomControlPosition,\n      layersControlPosition,\n      additionalLeafletConfig,\n    ]);\n\n    const handleLeafletConfigChange = useCallback(\n      (leafletConfig: ILeafletMapConfig) => {\n        setAdditionalLeafletConfig(leafletConfig);\n      },\n      []\n    );\n\n    const handleBoxOnClose = (event: React.FormEvent) => {\n      event.preventDefault();\n      onBoxClose?.(event);\n    };\n\n    const handleOnInit = (map: L.Map) => {\n      onInit?.(map);\n    };\n\n    return (\n      <Container className={className || ''}>\n        <MapWrapper>\n          {!isNilOrError(boxContent) && (\n            <BoxContainer>\n              <CloseButton onClick={handleBoxOnClose}>\n                <CloseIcon name=\"close\" />\n              </CloseButton>\n\n              {boxContent}\n            </BoxContainer>\n          )}\n\n          <Suspense fallback={false}>\n            <LeafletMap\n              id=\"mapid\"\n              className=\"e2e-leafletmap\"\n              mapHeight={mapHeight}\n              onInit={handleOnInit}\n              {...leafletConfig}\n            />\n          </Suspense>\n          <Outlet\n            id=\"app.components.Map.leafletConfig\"\n            projectId={projectId}\n            onLeafletConfigChange={handleLeafletConfigChange}\n            centerLatLng={centerLatLng}\n            zoomLevel={zoomLevel}\n            points={points}\n          />\n        </MapWrapper>\n\n        {!hideLegend && (\n          <Outlet id=\"app.components.Map.Legend\" projectId={projectId} />\n        )}\n      </Container>\n    );\n  }\n);\n\nexport default Map;\n","import {\n  distinctUntilChanged,\n  map,\n  publishReplay,\n  refCount,\n  debounceTime,\n} from 'rxjs/operators';\nimport { isEqual } from 'lodash-es';\nimport eventEmitter from 'utils/eventEmitter';\nimport { LatLngTuple } from 'leaflet';\n\nenum events {\n  leafletMapCenterChange = 'leafletMapCenterChange',\n  leafletMapZoomChange = 'leafletMapZoomChange',\n  leafletMapLatLngZoomChange = 'leafletMapLatLngZoomChange',\n  leafletMapHoveredMarkerChange = 'leafletMapHoveredMarkerChange',\n  leafletMapSelectedMarkerChange = 'leafletMapSelectedMarkerChange',\n  leafletMapClicked = 'leafletMapClicked',\n}\n\n// ----------------------------------------------------------------------------------------------\n\nexport function setLeafletMapCenter(center: LatLngTuple | null) {\n  eventEmitter.emit<LatLngTuple | null>(events.leafletMapCenterChange, center);\n}\n\nexport const leafletMapCenter$ = eventEmitter\n  .observeEvent<LatLngTuple | null>(events.leafletMapCenterChange)\n  .pipe(\n    map(({ eventValue }) => eventValue),\n    distinctUntilChanged((x, y) => isEqual(x, y)),\n    publishReplay(1),\n    refCount()\n  );\n\n// ----------------------------------------------------------------------------------------------\n\nexport function setLeafletMapZoom(zoom: number | null) {\n  eventEmitter.emit<number | null>(events.leafletMapZoomChange, zoom);\n}\n\nexport const leafletMapZoom$ = eventEmitter\n  .observeEvent<number | null>(events.leafletMapZoomChange)\n  .pipe(\n    map(({ eventValue }) => eventValue),\n    distinctUntilChanged((x, y) => isEqual(x, y)),\n    publishReplay(1),\n    refCount()\n  );\n\n// ----------------------------------------------------------------------------------------------\n\nexport function setLeafletMapHoveredMarker(markerId: string | null) {\n  eventEmitter.emit<string | null>(\n    events.leafletMapHoveredMarkerChange,\n    markerId\n  );\n}\n\nexport const leafletMapHoveredMarker$ = eventEmitter\n  .observeEvent<string | null>(events.leafletMapHoveredMarkerChange)\n  .pipe(\n    map(({ eventValue }) => eventValue),\n    distinctUntilChanged((x, y) => isEqual(x, y))\n  );\n\n// ----------------------------------------------------------------------------------------------\n\nexport function setLeafletMapSelectedMarker(markerId: string | null) {\n  eventEmitter.emit<string | null>(\n    events.leafletMapSelectedMarkerChange,\n    markerId\n  );\n}\n\nexport const leafletMapSelectedMarker$ = eventEmitter\n  .observeEvent<string | null>(events.leafletMapSelectedMarkerChange)\n  .pipe(\n    map(({ eventValue }) => eventValue),\n    distinctUntilChanged((x, y) => isEqual(x, y))\n  );\n\n// ----------------------------------------------------------------------------------------------\n\nexport function setLeafletMapClicked(latLng: L.LatLng) {\n  eventEmitter.emit<L.LatLng>(events.leafletMapClicked, latLng);\n}\n\nexport const leafletMapClicked$ = eventEmitter\n  .observeEvent<L.LatLng>(events.leafletMapClicked)\n  .pipe(\n    map(({ eventValue }) => eventValue),\n    distinctUntilChanged((x, y) => isEqual(x, y)),\n    debounceTime(50)\n  );\n\n// ----------------------------------------------------------------------------------------------\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  a11y_postedBy: {\n    id: 'app.components.Author.a11y_postedBy',\n    defaultMessage: 'Posted by: ',\n  },\n});\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { Subscription } from 'rxjs';\n\n// Data loading\nimport GetGeotaggedIdeas, {\n  GetGeotaggedIdeasChildProps,\n} from 'resources/GetGeotaggedIdeas';\nimport { IGeotaggedIdeaData } from 'services/ideas';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// events\nimport { leafletMapSelectedMarker$ } from 'components/UI/LeafletMap/events';\n\n// Components\nimport { Spinner } from 'cl2-component-library';\nimport Map from 'components/Map';\nimport IdeaPane from './IdeaPane';\nimport Warning from 'components/UI/Warning';\n\n// intl\nimport { FormattedMessage } from 'utils/cl-intl';\nimport injectLocalize, { InjectedLocalized } from 'utils/localize';\nimport messages from './messages';\n\n// tracking\nimport { trackEventByName } from 'utils/analytics';\nimport tracks from './tracks';\nimport { colors } from 'utils/styleUtils';\nimport ServerError from 'components/admin/ServerError';\n\n// styles\nconst SpinnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  & > :not(:last-child) {\n    margin-bottom: 10px;\n  }\n  color: ${colors.adminSecondaryTextColor};\n  align-items: center;\n  justify-content: center;\n  height: 600px;\n`;\n\nconst Placeholder = styled.span`\n  height: 19px;\n`;\n\nconst MapWrapper = styled.div`\n  display: flex;\n  align-items: stretch;\n  height: 600px;\n`;\n\nconst StyledWarning = styled(Warning)`\n  margin-bottom: 30px;\n`;\n\nconst StyledMap = styled(Map)`\n  width: 100%;\n`;\n\nconst Panel = styled.div`\n  flex: 0 0 300px;\n  height: 600px;\n  margin-left: 20px;\n`;\n\n// typings\ninterface InputProps {}\ninterface DataProps {\n  ideas: GetGeotaggedIdeasChildProps;\n}\ninterface Props extends DataProps, InputProps {}\n\ninterface State {\n  selectedIdeaId: string | null;\n  panelOpened: boolean;\n  loadingMessage: JSX.Element | null;\n}\n\nclass DashboardMap extends PureComponent<Props & InjectedLocalized, State> {\n  subscriptions: Subscription[];\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIdeaId: null,\n      panelOpened: false,\n      loadingMessage: null,\n    };\n    this.subscriptions = [];\n  }\n\n  componentDidMount() {\n    this.subscriptions = [\n      leafletMapSelectedMarker$.subscribe((ideaId) => {\n        if (ideaId) {\n          this.handleIdeaMarkerSelected(ideaId);\n        }\n      }),\n    ];\n\n    setTimeout(() => {\n      this.setState({\n        loadingMessage: (\n          <FormattedMessage {...messages.automaticLoadingMessage} />\n        ),\n      });\n      setTimeout(() => {\n        this.setState({\n          loadingMessage: <FormattedMessage {...messages.thenLoadingMessage} />,\n        });\n        setTimeout(() => {\n          this.setState({\n            loadingMessage: (\n              <FormattedMessage {...messages.lastLoadingMessage} />\n            ),\n          });\n        }, 30000);\n      }, 30000);\n    }, 2000);\n  }\n\n  componentWillUnmount() {\n    this.subscriptions?.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  getPoints = (ideas: IGeotaggedIdeaData[]) => {\n    return ideas\n      .filter((idea) => idea.attributes.location_point_geojson)\n      .map((idea) => ({\n        ...idea.attributes.location_point_geojson,\n        id: idea.id,\n        title: this.props.localize(idea.attributes.title_multiloc),\n      }));\n  };\n\n  handleIdeaMarkerSelected = (ideaId: string) => {\n    const { panelOpened, selectedIdeaId } = this.state;\n    if (ideaId === selectedIdeaId) {\n      if (panelOpened) {\n        this.setState({ selectedIdeaId: null });\n      }\n      this.setState({ panelOpened: !panelOpened });\n    } else {\n      trackEventByName(tracks.clickIdeaOnMap.name, { extra: { id: ideaId } });\n      this.setState({ selectedIdeaId: ideaId });\n      if (!panelOpened) {\n        this.setState({ panelOpened: true });\n      }\n    }\n  };\n\n  closePanel = () => {\n    this.setState({ panelOpened: false });\n  };\n\n  render() {\n    const { ideas } = this.props;\n    const { selectedIdeaId, panelOpened } = this.state;\n\n    if (ideas === undefined) {\n      return (\n        <SpinnerContainer>\n          <Spinner />\n          {this.state.loadingMessage || <Placeholder />}\n        </SpinnerContainer>\n      );\n    }\n    if (isNilOrError(ideas)) {\n      return <ServerError />;\n    }\n    return (\n      <div>\n        <StyledWarning\n          text={<FormattedMessage {...messages.mapExplanationText} />}\n        />\n        <MapWrapper>\n          <StyledMap points={this.getPoints(ideas)} mapHeight=\"600px\" />\n          {panelOpened && (\n            <Panel>\n              {selectedIdeaId && (\n                <IdeaPane onClose={this.closePanel} ideaId={selectedIdeaId} />\n              )}\n            </Panel>\n          )}\n        </MapWrapper>\n      </div>\n    );\n  }\n}\n\nconst DashboardMapMapWithLoc = injectLocalize(DashboardMap);\n\nexport default (inputProps: InputProps) => (\n  <GetGeotaggedIdeas>\n    {(ideas) => <DashboardMapMapWithLoc ideas={ideas} {...inputProps} />}\n  </GetGeotaggedIdeas>\n);\n","/*\n * AdminPage.DashboardPage Messages\n *\n * This contains all the text for the AdminPage.DashboardPage component.\n */\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  mapExplanationText: {\n    id: 'app.containers.AdminPage.DashboardPage.mapExplanationText',\n    defaultMessage:\n      'This map automatically detects locations from the title and description of the input. The location data may not be accurate; inputs where no locational data is detected are not displayed.',\n  },\n  automaticLoadingMessage: {\n    id: 'app.containers.AdminPage.DashboardPage.automaticLoadingMessage',\n    defaultMessage:\n      'Automatic location detection underway. Please wait until the processing is complete.',\n  },\n  thenLoadingMessage: {\n    id: 'app.containers.AdminPage.DashboardPage.thenLoadingMessage',\n    defaultMessage:\n      'Fun Fact: it will probably be way faster the next time you come here!',\n  },\n  lastLoadingMessage: {\n    id: 'app.containers.AdminPage.DashboardPage.lastLoadingMessage',\n    defaultMessage: 'It should be almost ready, hang on!',\n  },\n});\n","import React, { memo } from 'react';\nimport messages from './messages';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\n\nconst Container = styled.div`\n  color: ${colors.clRedError};\n  flex-grow: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ServerError = memo(() => (\n  <Container>\n    <FormattedMessage {...messages.genericServerError} />\n  </Container>\n));\n\nexport default ServerError;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  genericServerError: {\n    id: 'components.admin.ServerError.genericServerError',\n    defaultMessage:\n      'There was an issue loading this content, please try again later.',\n  },\n});\n","import React, { memo } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport Avatar from 'components/Avatar';\nimport UserName from 'components/UI/UserName';\n\n// services\nimport { canModerateProject } from 'services/permissions/rules/projectPermissions';\n\n// hooks\nimport useUser from 'hooks/useUser';\n\n// i18n\nimport { FormattedRelative } from 'react-intl';\n\n// style\nimport styled from 'styled-components';\nimport { media, colors, fontSizes, isRtl } from 'utils/styleUtils';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\nimport { ScreenReaderOnly } from 'utils/a11y';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  ${isRtl`\n    justify-content: flex-end;\n  `}\n\n  ${media.smallPhone`\n    flex-direction: column;\n  `}\n`;\n\nconst AuthorContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0;\n  padding: 0;\n\n  ${isRtl`\n    flex-direction: row-reverse;\n  `}\n`;\n\nconst StyledAvatar = styled(Avatar)`\n  margin-right: 6px;\n  margin-bottom: 1px;\n\n  ${isRtl`\n    margin-right: 0;\n    margin-left: 6px;\n  `}\n`;\n\nconst AuthorMeta = styled.div`\n  &.horizontalLayout {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n\n    ${isRtl`\n        flex-direction: row-reverse;\n    `}\n  }\n`;\n\nconst AuthorNameContainer = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${colors.label};\n  font-size: ${fontSizes.base}px;\n  line-height: 16px;\n  text-decoration: none;\n\n  &.horizontalLayout {\n    margin-right: 10px;\n\n    ${isRtl`\n        margin-right: 0;\n        margin-left: 10px;\n    `}\n  }\n`;\n\nconst TimeAgo = styled.div`\n  color: ${colors.label};\n  font-size: ${fontSizes.small}px;\n  line-height: 16px;\n  margin-top: 3px;\n\n  &.horizontalLayout {\n    margin-top: 2px;\n  }\n`;\n\nexport interface Props {\n  authorId: string | null;\n  createdAt?: string;\n  size: number;\n  isLinkToProfile?: boolean;\n  projectId?: string | null;\n  showAvatar?: boolean;\n  avatarBadgeBgColor?: string;\n  showModeration?: boolean; // will show red styling on admins and moderators of projectId\n  fontWeight?: number;\n  fontSize?: number;\n  className?: string;\n  horizontalLayout?: boolean;\n  underline?: boolean;\n  color?: string;\n}\n\nconst Author = memo(\n  ({\n    authorId,\n    createdAt,\n    size,\n    isLinkToProfile,\n    projectId,\n    showAvatar = true,\n    showModeration,\n    className,\n    avatarBadgeBgColor,\n    fontWeight,\n    fontSize,\n    horizontalLayout,\n    color,\n    underline,\n  }: Props) => {\n    const author = useUser({ userId: authorId });\n    const authorCanModerate =\n      !isNilOrError(author) &&\n      showModeration &&\n      canModerateProject(projectId, { data: author });\n\n    return (\n      <Container className={className}>\n        <AuthorContainer>\n          {showAvatar && (\n            <StyledAvatar\n              userId={authorId}\n              size={size}\n              isLinkToProfile={isLinkToProfile}\n              moderator={authorCanModerate}\n              bgColor={avatarBadgeBgColor}\n            />\n          )}\n\n          <AuthorMeta className={horizontalLayout ? 'horizontalLayout' : ''}>\n            <AuthorNameContainer\n              className={horizontalLayout ? 'horizontalLayout' : ''}\n            >\n              <ScreenReaderOnly>\n                <FormattedMessage {...messages.a11y_postedBy} />:\n              </ScreenReaderOnly>\n              <UserName\n                userId={authorId}\n                isLinkToProfile={isLinkToProfile}\n                canModerate={authorCanModerate}\n                fontWeight={fontWeight}\n                fontSize={fontSize}\n                color={color}\n                underline={underline}\n              />\n            </AuthorNameContainer>\n\n            {createdAt && (\n              <TimeAgo className={horizontalLayout ? 'horizontalLayout' : ''}>\n                <FormattedRelative value={createdAt} />\n              </TimeAgo>\n            )}\n          </AuthorMeta>\n        </AuthorContainer>\n      </Container>\n    );\n  }\n);\n\nexport default Author;\n"],"sourceRoot":""}