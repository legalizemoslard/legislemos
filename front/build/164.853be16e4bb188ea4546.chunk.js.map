{"version":3,"sources":["webpack:///./app/containers/PasswordReset/index.tsx","webpack:///./app/containers/PasswordReset/messages.ts"],"names":["Container","styled","div","props","theme","menuHeight","footerHeight","colors","background","StyledContentContainer","ContentContainer","Title","h1","fontSizes","xxxxl","StyledButton","Button","Form","form","LabelContainer","StyledFormLabel","FormLabel","StyledPasswordIconTooltip","PasswordIconTooltip","PasswordReset","tenant","password","state","hasPasswordMinimumLength","isNilOrError","attributes","settings","password_login","undefined","minimum_length","minimumLengthError","hasPasswordMinimumLengthError","setState","passwordInputElement","focus","submitError","apiErrors","element","event","token","preventDefault","validate","processing","success","resetPassword","json","errors","tokenErrors","length","invalidTokenErrorIndex","map","tokenError","error","indexOf","payload","passwordResetLink","to","FormattedMessage","messages","requestNewPasswordReset","Object","keys","query","clHistory","getCurrentLocation","isString","this","push","formatMessage","intl","helmetTitle","helmetDescription","title","passwordPlaceholder","updatePassword","successMessage","Helmet","meta","name","content","onSubmit","handleOnSubmit","labelMessage","passwordLabel","htmlFor","id","placeholder","onChange","handlePasswordOnChange","setRef","handlePasswordInputSetRef","errorField","key","fieldName","size","text","onClick","Success","React","PureComponent","PasswordResetWithHocs","injectIntl","Data","adopt","inputProps","dataProps","defineMessages","defaultMessage","passwordError"],"mappings":"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","file":"164.853be16e4bb188ea4546.chunk.js","sourcesContent":["import React from 'react';\nimport { adopt } from 'react-adopt';\nimport { isString } from 'lodash-es';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// router\nimport clHistory from 'utils/cl-router/history';\nimport Link from 'utils/cl-router/Link';\n\n// components\nimport { Success } from 'cl2-component-library';\nimport Button from 'components/UI/Button';\nimport PasswordInput, {\n  hasPasswordMinimumLength,\n} from 'components/UI/PasswordInput';\nimport PasswordIconTooltip from 'components/UI/PasswordInput/PasswordInputIconTooltip';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from 'components/ContentContainer';\nimport { FormLabel } from 'components/UI/FormComponents';\nimport Error from 'components/UI/Error';\n\n// services\nimport { resetPassword } from 'services/auth';\nimport { CLError } from 'typings';\n\n// i18n\nimport { InjectedIntlProps } from 'react-intl';\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\n\n// style\nimport styled from 'styled-components';\nimport messages from './messages';\nimport { fontSizes, colors } from 'utils/styleUtils';\n\n// resources\nimport GetAppConfiguration, {\n  GetAppConfigurationChildProps,\n} from 'resources/GetAppConfiguration';\n\nconst Container = styled.div`\n  width: 100%;\n  min-height: calc(\n    100vh - ${(props) => props.theme.menuHeight + props.theme.footerHeight}px\n  );\n  background: ${colors.background};\n`;\n\nconst StyledContentContainer = styled(ContentContainer)`\n  padding-bottom: 100px;\n`;\n\nconst Title = styled.h1`\n  width: 100%;\n  color: #333;\n  font-size: ${fontSizes.xxxxl}px;\n  line-height: 40px;\n  font-weight: 500;\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  padding-top: 60px;\n  margin-bottom: 50px;\n`;\n\nconst StyledButton = styled(Button)`\n  margin-top: 20px;\n  margin-bottom: 10px;\n`;\n\nconst Form = styled.form`\n  width: 100%;\n  max-width: 380px;\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst LabelContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledFormLabel = styled(FormLabel)`\n  width: max-content;\n  margin-right: 5px;\n`;\n\nconst StyledPasswordIconTooltip = styled(PasswordIconTooltip)`\n  margin-bottom: 6px;\n`;\n\ninterface DataProps {\n  tenant: GetAppConfigurationChildProps;\n}\n\ninterface InputProps {}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface IApiErrors {\n  token?: CLError[];\n  password?: CLError[];\n}\n\ntype ApiErrorFieldName = keyof IApiErrors;\n\ntype State = {\n  token: string | null;\n  password: string | null;\n  minimumLengthError: boolean;\n  submitError: boolean;\n  processing: boolean;\n  success: boolean;\n  apiErrors: IApiErrors | null;\n};\n\nclass PasswordReset extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  passwordInputElement: HTMLInputElement | null;\n\n  constructor(props) {\n    super(props);\n    const query = clHistory.getCurrentLocation().query;\n    const token = isString(query.token) ? query.token : null;\n    this.state = {\n      token,\n      password: null,\n      minimumLengthError: false,\n      submitError: false,\n      processing: false,\n      success: false,\n      apiErrors: null,\n    };\n\n    this.passwordInputElement = null;\n  }\n\n  componentDidMount() {\n    const { token } = this.state;\n\n    if (!isString(token)) {\n      clHistory.push('/');\n    } else if (this.passwordInputElement) {\n      this.passwordInputElement.focus();\n    }\n  }\n\n  hasPasswordMinimumLengthError = () => {\n    const { tenant } = this.props;\n    const { password } = this.state;\n\n    return typeof password === 'string'\n      ? hasPasswordMinimumLength(\n          password,\n          !isNilOrError(tenant)\n            ? tenant.attributes.settings.password_login?.minimum_length\n            : undefined\n        )\n      : true;\n  };\n\n  validate = () => {\n    const minimumLengthError = this.hasPasswordMinimumLengthError();\n    this.setState({ minimumLengthError });\n\n    if (this.passwordInputElement && minimumLengthError) {\n      this.passwordInputElement.focus();\n    }\n\n    return !minimumLengthError;\n  };\n\n  handlePasswordOnChange = (password: string) => {\n    this.setState({\n      password,\n      minimumLengthError: false,\n      submitError: false,\n      apiErrors: null,\n    });\n  };\n\n  handlePasswordInputSetRef = (element: HTMLInputElement) => {\n    this.passwordInputElement = element;\n  };\n\n  handleOnSubmit = async (event) => {\n    const { password, token } = this.state;\n\n    event.preventDefault();\n\n    if (this.validate() && password && token) {\n      try {\n        this.setState({ processing: true, success: false });\n        await resetPassword(password, token);\n        this.setState({ password: null, processing: false, success: true });\n      } catch (errors) {\n        const apiErrors = errors.json.errors;\n        const tokenErrors: CLError[] = apiErrors.token;\n\n        if (tokenErrors && tokenErrors.length > 0) {\n          const invalidTokenErrorIndex = tokenErrors\n            .map((tokenError) => tokenError.error)\n            .indexOf('invalid');\n\n          // -1 if no element was found\n          if (invalidTokenErrorIndex !== -1) {\n            const invalidTokenError = tokenErrors[invalidTokenErrorIndex];\n\n            invalidTokenError.payload = {\n              passwordResetLink: (\n                <Link to=\"/password-recovery\">\n                  <FormattedMessage {...messages.requestNewPasswordReset} />\n                </Link>\n              ),\n            };\n          }\n        }\n\n        if (Object.keys(apiErrors).length > 0) {\n          this.passwordInputElement?.focus();\n        }\n\n        this.setState({\n          apiErrors,\n          processing: false,\n          success: false,\n          submitError: true,\n        });\n      }\n    }\n  };\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const {\n      password,\n      processing,\n      success,\n      apiErrors,\n      minimumLengthError,\n    } = this.state;\n    const helmetTitle = formatMessage(messages.helmetTitle);\n    const helmetDescription = formatMessage(messages.helmetDescription);\n    const title = formatMessage(messages.title);\n    const passwordPlaceholder = formatMessage(messages.passwordPlaceholder);\n    const updatePassword = formatMessage(messages.updatePassword);\n    const successMessage = success\n      ? formatMessage(messages.successMessage)\n      : null;\n\n    return (\n      <Container>\n        <Helmet\n          title={helmetTitle}\n          meta={[{ name: 'description', content: helmetDescription }]}\n        />\n\n        <main>\n          <StyledContentContainer>\n            <Title>{title}</Title>\n\n            <Form onSubmit={this.handleOnSubmit}>\n              <LabelContainer>\n                <StyledFormLabel\n                  labelMessage={messages.passwordLabel}\n                  htmlFor=\"password-reset-input\"\n                />\n                <StyledPasswordIconTooltip />\n              </LabelContainer>\n              <PasswordInput\n                id=\"password\"\n                password={password}\n                placeholder={passwordPlaceholder}\n                onChange={this.handlePasswordOnChange}\n                setRef={this.handlePasswordInputSetRef}\n                errors={{ minimumLengthError }}\n              />\n              {apiErrors &&\n                Object.keys(apiErrors).map((errorField: ApiErrorFieldName) => (\n                  <Error\n                    key={errorField}\n                    apiErrors={apiErrors[errorField]}\n                    fieldName={errorField}\n                  />\n                ))}\n\n              <StyledButton\n                size=\"2\"\n                processing={processing}\n                text={updatePassword}\n                onClick={this.handleOnSubmit}\n              />\n\n              <Success text={successMessage} />\n            </Form>\n          </StyledContentContainer>\n        </main>\n      </Container>\n    );\n  }\n}\n\nconst PasswordResetWithHocs = injectIntl<Props>(PasswordReset);\n\nconst Data = adopt({\n  tenant: <GetAppConfiguration />,\n});\n\nexport default (inputProps: InputProps) => (\n  <Data>\n    {(dataProps: DataProps) => (\n      <PasswordResetWithHocs {...inputProps} {...dataProps} />\n    )}\n  </Data>\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  helmetTitle: {\n    id: 'app.containers.PasswordReset.helmetTitle',\n    defaultMessage: 'Reset your password',\n  },\n  helmetDescription: {\n    id: 'app.containers.PasswordReset.helmetDescription',\n    defaultMessage: 'Reset your password page',\n  },\n  title: {\n    id: 'app.containers.PasswordReset.title',\n    defaultMessage: 'Reset your password',\n  },\n  passwordPlaceholder: {\n    id: 'app.containers.PasswordReset.passwordPlaceholder',\n    defaultMessage: 'New password',\n  },\n  passwordLabel: {\n    id: 'app.containers.PasswordReset.passwordLabel',\n    defaultMessage: 'Password',\n  },\n  passwordError: {\n    id: 'app.containers.PasswordReset.passwordError',\n    defaultMessage: 'Your password must contain at least 8 characters',\n  },\n  submitError: {\n    id: 'app.containers.PasswordReset.submitError',\n    defaultMessage: 'Something went wrong. Please try again later.',\n  },\n  successMessage: {\n    id: 'app.containers.PasswordReset.successMessage',\n    defaultMessage: 'Your password has been successfully updated',\n  },\n  updatePassword: {\n    id: 'app.containers.PasswordReset.updatePassword',\n    defaultMessage: 'Confirm new password',\n  },\n  requestNewPasswordReset: {\n    id: 'app.containers.PasswordReset.requestNewPasswordReset',\n    defaultMessage: 'Request a new password reset',\n  },\n});\n"],"sourceRoot":""}