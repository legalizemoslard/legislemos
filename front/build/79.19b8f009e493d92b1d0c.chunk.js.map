{"version":3,"sources":["webpack:///./app/containers/Admin/projects/edit/poll/FormQuestionRow.tsx","webpack:///./app/resources/GetPollQuestions.tsx","webpack:///./app/containers/Admin/projects/edit/poll/OptionForm.tsx","webpack:///./app/services/pollResponses.ts","webpack:///./app/containers/Admin/projects/edit/poll/FormOptionRow.tsx","webpack:///./app/resources/GetPollOptions.tsx","webpack:///./app/containers/Admin/projects/edit/poll/messages.ts","webpack:///./app/services/pollOptions.ts","webpack:///./app/containers/Admin/projects/edit/poll/WrongMaxChoiceIndicator.tsx","webpack:///./app/containers/Admin/projects/edit/poll/QuestionDetailsForm.tsx","webpack:///./app/containers/Admin/projects/edit/poll/ExportPollButton.tsx","webpack:///./app/containers/Admin/projects/edit/poll/tracks.ts","webpack:///./app/containers/Admin/projects/edit/poll/index.tsx","webpack:///./app/containers/Admin/projects/edit/poll/PollAdminForm.tsx","webpack:///./app/containers/Admin/projects/edit/poll/QuestionRow.tsx","webpack:///./app/services/pollQuestions.ts","webpack:///./app/containers/Admin/projects/edit/poll/OptionRow.tsx","webpack:///./app/containers/Admin/projects/edit/poll/WrongOptionsIndicator.tsx"],"names":["FormQuestionRow","props","selectedLocale","setState","value","locale","titleMultiloc","onChange","state","this","onSave","onCancel","tenantLocales","Row","className","TextCell","LocaleSwitcher","onSelectedLocaleChange","onChangeLocale","locales","isNilOrError","values","Input","autoFocus","type","onChangeTitle","buttonStyle","onClick","FormattedMessage","messages","saveQuestion","cancelFormQuestion","PureComponent","Data","adopt","inputProps","dataProps","GetPollQuestions","pollQuestions","undefined","participationContextType","participationContextId","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","tap","filter","isString","includes","switchMap","pollQuestionsStream","observable","subscribe","data","forEach","subscription","unsubscribe","children","React","Component","Container","styled","div","OptionsContainer","StyledButton","Button","DisabledDragHandle","colors","clGreyOnGreyBackground","OptionForm","editingId","optionId","deletePollOption","question","collapse","pollOptions","key","id","Icon","name","optionsFormHeader","questionTitle","attributes","title_multiloc","editOptionSave","List","length","map","pollOption","mode","closeRow","pollOptionId","pollOptionTitle","deleteOption","editOption","questionId","icon","addOption","addAnswerChoice","render","streams","get","apiEndpoint","API_PATH","optionIds","projectId","add","response","response_options_attributes","option_id","fetchAllWith","dataId","fileName","requestBlob","blob","saveAs","FormOptionRow","addPollOption","then","updatePollOption","prevProps","saveOption","cancelOption","GetPollOptions","pollOptionsStream","defineMessages","titlePollTab","defaultMessage","pollTabSubtitle","deleteQuestion","editPollAnswersButtonLabel","noOptions","noOptionsTooltip","wrongMax","maxOverTheMaxTooltip","maxUnderTheMinTooltip","oneOption","oneOptionsTooltip","addPollQuestion","exportPollResults","pollExportFileName","singleOption","multipleOption","applyQuestionSettings","delete","update","StyledIndicator","Indicator","WrongMaxChoiceIndicator","options","maxAnswers","StyledIconTooltip","content","isWarning","dataprops","FormContainer","StyledInput","QuestionDetailsForm","Number","option","newType","questionType","diff","question_type","max_options","isValid","Object","keys","validate","updatePollQuestion","typeOptions","formatMessage","intl","label","Select","changeQuestionType","changeMaxAnswers","String","min","disabled","injectIntl","ExportPollButton","trackEventByName","tracks","clickExportPoll","extra","formatDate","participationContextName","trackExportPoll","exporting","exportPollResponses","snakeCase","Date","now","handleExportPollResults","processing","PhaseContainer","HeaderContainer","Left","AdminProjectPoll","project","phases","localize","process_type","participation_method","SectionTitle","SectionDescription","isError","pollPhases","phase","AdminProjectPollWithHoc","params","withRouter","StyledList","PollAdminForm","fromIndex","toIndex","isProcessing","listItems","itemsWhileDragging","clone","splice","fieldId","field","find","listItem","ordering","reorderPollQuestion","newQuestionTitle","editingOptionsId","res","currentTitle","editingQuestionId","editingQuestionTitle","deletePollQuestion","prevCustomFieldsIds","customField","nextCustomFieldsIds","isEqual","index","Fragment","changeEditingQuestion","saveEditingQuestion","cancelEditQuestion","closeEditingOptions","isLastItem","onDelete","onEdit","editQuestion","onEditOptions","editOptions","handleDragRow","handleDropRow","changeNewQuestion","saveNewQuestion","cancelNewQuestion","startNewQuestion","DragDropContext","HTML5Backend","EditTitleButton","SortableRow","lastItem","moveRow","dropRow","ariaLabel","newPosition","participation_context_id","participation_context_type","capitalizeParticipationContextType","adminOrangeIcons","clRed","IconTooltip","WrongOptionsIndicator"],"mappings":"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","file":"79.19b8f009e493d92b1d0c.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// Components\nimport { Input, LocaleSwitcher } from 'cl2-component-library';\nimport { TextCell, Row } from 'components/admin/ResourceList';\nimport Button from 'components/UI/Button';\n\n// Resources\nimport GetLocale, { GetLocaleChildProps } from 'resources/GetLocale';\nimport GetAppConfigurationLocales, {\n  GetAppConfigurationLocalesChildProps,\n} from 'resources/GetAppConfigurationLocales';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\n// Typings\nimport { Multiloc, Locale } from 'typings';\n\ninterface InputProps {\n  titleMultiloc: Multiloc;\n  onChange: (value: Multiloc) => void;\n  onSave: () => void;\n  onCancel: () => void;\n}\n\ninterface DataProps {\n  locale: GetLocaleChildProps;\n  tenantLocales: GetAppConfigurationLocalesChildProps;\n}\n\nexport interface Props extends DataProps, InputProps {}\n\nexport interface State {\n  selectedLocale: Locale | null;\n}\n\nexport class FormQuestionRow extends PureComponent<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLocale: null,\n    };\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (!isNilOrError(props.locale) && !state.selectedLocale) {\n      return {\n        selectedLocale: props.locale,\n      };\n    }\n\n    return null;\n  }\n\n  onChangeLocale = (selectedLocale: Locale) => {\n    this.setState({ selectedLocale });\n  };\n\n  onChangeTitle = (value: string, locale: Locale | undefined) => {\n    if (locale) {\n      const titleMultiloc = {\n        ...this.props.titleMultiloc,\n        [locale]: value,\n      };\n\n      this.props.onChange(titleMultiloc);\n    }\n  };\n\n  render() {\n    const { selectedLocale } = this.state;\n    const { titleMultiloc, onSave, onCancel, tenantLocales } = this.props;\n    return (\n      <Row className=\"e2e-form-question-row\">\n        <TextCell>\n          {selectedLocale && (\n            <LocaleSwitcher\n              onSelectedLocaleChange={this.onChangeLocale}\n              locales={!isNilOrError(tenantLocales) ? tenantLocales : []}\n              selectedLocale={selectedLocale}\n              values={{ titleMultiloc }}\n            />\n          )}\n        </TextCell>\n\n        <TextCell className=\"expand\">\n          {selectedLocale && (\n            <Input\n              autoFocus\n              value={titleMultiloc[selectedLocale]}\n              locale={selectedLocale}\n              type=\"text\"\n              onChange={this.onChangeTitle}\n            />\n          )}\n        </TextCell>\n\n        <Button\n          className=\"e2e-form-question-save\"\n          buttonStyle=\"secondary\"\n          onClick={onSave}\n        >\n          <FormattedMessage {...messages.saveQuestion} />\n        </Button>\n        <Button\n          className=\"e2e-form-question-cancel\"\n          buttonStyle=\"secondary\"\n          onClick={onCancel}\n        >\n          <FormattedMessage {...messages.cancelFormQuestion} />\n        </Button>\n      </Row>\n    );\n  }\n}\n\nconst Data = adopt<DataProps, InputProps>({\n  locale: <GetLocale />,\n  tenantLocales: <GetAppConfigurationLocales />,\n});\n\nconst FormQuestionRowWithData = (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <FormQuestionRow {...dataProps} {...inputProps} />}\n  </Data>\n);\n\nexport default FormQuestionRowWithData;\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { Subscription, BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap, filter } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\n\nimport { IPollQuestion, pollQuestionsStream } from 'services/pollQuestions';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { IParticipationContextType } from 'typings';\n\ninterface InputProps {\n  participationContextId: string;\n  participationContextType: IParticipationContextType;\n}\n\ntype children = (renderProps: GetPollQuestionsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  pollQuestions: IPollQuestion[] | undefined | null | Error;\n}\n\nexport type GetPollQuestionsChildProps =\n  | IPollQuestion[]\n  | undefined\n  | null\n  | Error;\n\nexport default class GetPollQuestions extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      pollQuestions: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { participationContextType, participationContextId } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({\n      participationContextType,\n      participationContextId,\n    });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          tap(() => this.setState({ pollQuestions: undefined })),\n          filter(\n            ({ participationContextType, participationContextId }) =>\n              isString(participationContextId) &&\n              ['project', 'phase'].includes(participationContextType)\n          ),\n          switchMap(\n            ({\n              participationContextType,\n              participationContextId,\n            }: {\n              participationContextId: string;\n              participationContextType: IParticipationContextType;\n            }) =>\n              pollQuestionsStream(\n                participationContextId,\n                participationContextType\n              ).observable\n          )\n        )\n        .subscribe((pollQuestions) =>\n          this.setState({\n            pollQuestions: !isNilOrError(pollQuestions)\n              ? pollQuestions.data\n              : pollQuestions,\n          })\n        ),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { participationContextId, participationContextType } = this.props;\n    this.inputProps$.next({ participationContextId, participationContextType });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { pollQuestions } = this.state;\n    return (children as children)(pollQuestions);\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// Services / Data loading\nimport GetPollOptions, {\n  GetPollOptionsChildProps,\n} from 'resources/GetPollOptions';\nimport { IPollQuestion } from 'services/pollQuestions';\nimport { IPollOption, deletePollOption } from 'services/pollOptions';\n\n// Components\nimport T from 'components/T';\nimport Button from 'components/UI/Button';\nimport { Icon } from 'semantic-ui-react';\nimport { Row, TextCell, List } from 'components/admin/ResourceList';\nimport FormOptionRow from './FormOptionRow';\nimport OptionRow from './OptionRow';\nimport QuestionDetailsForm from './QuestionDetailsForm';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\n// Style\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\n\nconst Container = styled.div``;\n\nconst OptionsContainer = styled.div`\n  margin-left: 67px;\n`;\n\nconst StyledButton = styled(Button)`\n  margin-bottom: 20px;\n`;\n\nconst DisabledDragHandle = styled.div`\n  color: ${colors.clGreyOnGreyBackground};\n  padding: 1rem;\n`;\n\ninterface InputProps {\n  question: IPollQuestion;\n  collapse: () => void;\n}\n\ninterface DataProps {\n  pollOptions: GetPollOptionsChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface State {\n  editingId: string | null;\n}\n\nexport class OptionForm extends PureComponent<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editingId: null,\n    };\n  }\n\n  closeRow = () => {\n    this.setState({ editingId: null });\n  };\n\n  editOption = (optionId: string) => () => {\n    this.setState({ editingId: optionId });\n  };\n\n  addOption = () => {\n    this.setState({ editingId: 'new' });\n  };\n\n  deleteOption = (optionId: string) => () => {\n    deletePollOption(optionId);\n  };\n\n  render() {\n    const { question, collapse, pollOptions } = this.props;\n    const { editingId } = this.state;\n    return (\n      <Container\n        key={question.id}\n        id={question.id}\n        className=\"e2e-options-form\"\n      >\n        <Row>\n          <DisabledDragHandle>\n            <Icon name=\"sort\" />\n          </DisabledDragHandle>\n          <TextCell className=\"expand\">\n            <FormattedMessage\n              {...messages.optionsFormHeader}\n              values={{\n                questionTitle: <T value={question.attributes.title_multiloc} />,\n              }}\n            />\n          </TextCell>\n          <Button\n            className=\"e2e-collapse-option-form\"\n            onClick={collapse}\n            buttonStyle=\"secondary\"\n          >\n            <FormattedMessage {...messages.editOptionSave} />\n          </Button>\n        </Row>\n        <OptionsContainer>\n          <List\n            key={\n              isNilOrError(pollOptions)\n                ? 0\n                : pollOptions.length + (editingId === 'new' ? 1 : 0)\n            }\n          >\n            {!isNilOrError(pollOptions) && (\n              <>\n                <QuestionDetailsForm question={question} />\n                {pollOptions.map((pollOption: IPollOption) =>\n                  editingId === pollOption.id ? (\n                    <FormOptionRow\n                      key={pollOption.id}\n                      mode=\"edit\"\n                      closeRow={this.closeRow}\n                      optionId={pollOption.id}\n                      titleMultiloc={pollOption.attributes.title_multiloc}\n                    />\n                  ) : (\n                    <OptionRow\n                      key={pollOption.id}\n                      pollOptionId={pollOption.id}\n                      pollOptionTitle={pollOption.attributes.title_multiloc}\n                      deleteOption={this.deleteOption(pollOption.id)}\n                      editOption={this.editOption(pollOption.id)}\n                    />\n                  )\n                )}\n              </>\n            )}\n            {editingId === 'new' ? (\n              <FormOptionRow\n                key=\"new\"\n                mode=\"new\"\n                questionId={question.id}\n                closeRow={this.closeRow}\n              />\n            ) : (\n              <StyledButton\n                className=\"e2e-add-option\"\n                buttonStyle=\"secondary\"\n                icon=\"create\"\n                onClick={this.addOption}\n                autoFocus\n              >\n                <FormattedMessage {...messages.addAnswerChoice} />\n              </StyledButton>\n            )}\n          </List>\n        </OptionsContainer>\n      </Container>\n    );\n  }\n}\n\nconst Data = adopt<DataProps, InputProps>({\n  pollOptions: ({ question, render }) => (\n    <GetPollOptions questionId={question.id}>{render}</GetPollOptions>\n  ),\n});\n\nconst OptionFormWithData = (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <OptionForm {...inputProps} {...dataProps} />}\n  </Data>\n);\n\nexport default OptionFormWithData;\n","import { API_PATH } from 'containers/App/constants';\nimport streams from 'utils/streams';\nimport { requestBlob } from 'utils/request';\nimport { saveAs } from 'file-saver';\nimport { IParticipationContextType } from 'typings';\n\nexport interface IPollResponseAttributes {\n  series: { [key: string]: number };\n}\n\nexport async function addPollResponse(\n  participationContextId: string,\n  participationContextType: IParticipationContextType,\n  optionIds: string[],\n  projectId?: string\n) {\n  const response = await streams.add(\n    `${API_PATH}/${participationContextType}s/${participationContextId}/poll_responses`,\n    {\n      response: {\n        response_options_attributes: optionIds.map((optionId) => ({\n          option_id: optionId,\n        })),\n      },\n    }\n  );\n  projectId && streams.fetchAllWith({ dataId: [projectId] });\n  return response;\n}\n\nexport async function exportPollResponses(\n  participationContextId: string,\n  participationContextType: IParticipationContextType,\n  fileName: string\n) {\n  const blob = await requestBlob(\n    `${API_PATH}/${participationContextType}s/${participationContextId}/poll_responses/as_xlsx`,\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n  );\n  saveAs(blob, fileName);\n}\nexport function getPollResponses(\n  participationContextId: string,\n  participationContextType: IParticipationContextType\n) {\n  const response = streams.get<IPollResponseAttributes>({\n    apiEndpoint: `${API_PATH}/${participationContextType}s/${participationContextId}/poll_responses/responses_count`,\n  });\n  return response;\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// Components\nimport { Input, LocaleSwitcher } from 'cl2-component-library';\nimport { TextCell, Row } from 'components/admin/ResourceList';\nimport Button from 'components/UI/Button';\n\n// Resources\nimport GetLocale, { GetLocaleChildProps } from 'resources/GetLocale';\nimport GetAppConfigurationLocales, {\n  GetAppConfigurationLocalesChildProps,\n} from 'resources/GetAppConfigurationLocales';\n\n// Typings\nimport { Multiloc, Locale } from 'typings';\n\n// Services\nimport { addPollOption, updatePollOption } from 'services/pollOptions';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\n/*\n * edit mode : titleMultiloc and optionId defined, question Id not used\n * new mode : question Id defined, titleMultiloc and optionId not used\n */\ninterface InputProps {\n  titleMultiloc?: Multiloc;\n  mode: 'new' | 'edit';\n  questionId?: string;\n  closeRow: () => void;\n  optionId?: string;\n}\n\ninterface DataProps {\n  locale: GetLocaleChildProps;\n  tenantLocales: GetAppConfigurationLocalesChildProps;\n}\n\nexport interface Props extends DataProps, InputProps {}\n\nexport interface State {\n  selectedLocale: Locale | null;\n  titleMultiloc: Multiloc;\n}\n\nexport class FormOptionRow extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      selectedLocale: props.locale || null,\n      titleMultiloc: props.titleMultiloc || {},\n    };\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (!isNilOrError(props.locale) && !state.selectedLocale) {\n      return {\n        selectedLocale: props.locale,\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.optionId !== this.props.optionId) {\n      this.setState({ titleMultiloc: this.props.titleMultiloc || {} });\n    }\n  }\n\n  onSelectedLocaleChange = (selectedLocale: Locale) => {\n    this.setState({ selectedLocale });\n  };\n\n  onChangeTitle = (value: string, locale: Locale | undefined) => {\n    if (locale) {\n      this.setState((state) => ({\n        titleMultiloc: {\n          ...state.titleMultiloc,\n          [locale]: value,\n        },\n      }));\n    }\n  };\n\n  onSave = () => {\n    const { mode, questionId, closeRow, optionId } = this.props;\n    const { titleMultiloc } = this.state;\n\n    if (mode === 'new' && questionId) {\n      addPollOption(questionId, titleMultiloc).then(() => {\n        closeRow();\n      });\n    }\n\n    if (mode === 'edit' && optionId) {\n      updatePollOption(optionId, titleMultiloc).then(() => {\n        closeRow();\n      });\n    }\n  };\n\n  render() {\n    const { selectedLocale, titleMultiloc } = this.state;\n    const { closeRow, tenantLocales } = this.props;\n\n    return (\n      <Row className=\"e2e-form-option-row\">\n        <TextCell>\n          {selectedLocale && (\n            <LocaleSwitcher\n              onSelectedLocaleChange={this.onSelectedLocaleChange}\n              locales={!isNilOrError(tenantLocales) ? tenantLocales : []}\n              selectedLocale={selectedLocale}\n              values={{ titleMultiloc }}\n            />\n          )}\n        </TextCell>\n\n        <TextCell className=\"expand\">\n          {selectedLocale && (\n            <Input\n              autoFocus\n              value={titleMultiloc?.[selectedLocale]}\n              locale={selectedLocale}\n              type=\"text\"\n              onChange={this.onChangeTitle}\n            />\n          )}\n        </TextCell>\n\n        <Button\n          className=\"e2e-form-option-save\"\n          buttonStyle=\"secondary\"\n          onClick={this.onSave}\n        >\n          <FormattedMessage {...messages.saveOption} />\n        </Button>\n\n        <Button\n          className=\"e2e-form-option-cancel\"\n          buttonStyle=\"secondary\"\n          onClick={closeRow}\n        >\n          <FormattedMessage {...messages.cancelOption} />\n        </Button>\n      </Row>\n    );\n  }\n}\n\nconst Data = adopt<DataProps, InputProps>({\n  locale: <GetLocale />,\n  tenantLocales: <GetAppConfigurationLocales />,\n});\n\nconst FormOptionRowWithData = (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <FormOptionRow {...dataProps} {...inputProps} />}\n  </Data>\n);\n\nexport default FormOptionRowWithData;\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { Subscription, BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap, filter } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\n\nimport { IPollOption, pollOptionsStream } from 'services/pollOptions';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  questionId: string;\n}\n\ntype children = (renderProps: GetPollOptionsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  pollOptions: IPollOption[] | undefined | null | Error;\n}\n\nexport type GetPollOptionsChildProps = IPollOption[] | undefined | null | Error;\n\nexport default class GetPollOptions extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      pollOptions: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { questionId } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ questionId });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          tap(() => this.setState({ pollOptions: undefined })),\n          filter(({ questionId }) => isString(questionId)),\n          switchMap(\n            ({ questionId }) => pollOptionsStream(questionId).observable\n          )\n        )\n        .subscribe((pollOptions) =>\n          this.setState({\n            pollOptions: !isNilOrError(pollOptions)\n              ? pollOptions.data\n              : pollOptions,\n          })\n        ),\n    ];\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { pollOptions } = this.state;\n    return (children as children)(pollOptions);\n  }\n}\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  titlePollTab: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.titlePollTab',\n    defaultMessage: 'Polls settings and results',\n  },\n  pollTabSubtitle: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.pollTabSubtitle',\n    defaultMessage:\n      'Here you can create poll questions, set the answer choices for participants to choose from for each question, decide whether you want participants to only be able to select one answer choice (single choice) or multiple answer choices (multiple choice), and export the poll results. You can create multiple poll questions within one poll.',\n  },\n  deleteQuestion: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.deleteQuestion',\n    defaultMessage: 'Delete',\n  },\n  editPollAnswersButtonLabel: {\n    id:\n      'app.containers.AdminPage.ProjectEdit.PollTab.editPollAnswersButtonLabel',\n    defaultMessage: 'Answer choices',\n  },\n  noOptions: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.noOptions',\n    defaultMessage: 'No options',\n  },\n  noOptionsTooltip: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.noOptionsTooltip',\n    defaultMessage:\n      'The poll will not be answerable as it is, all questions must have options',\n  },\n  wrongMax: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.wrongMax',\n    defaultMessage: 'Wrong maximum',\n  },\n  maxOverTheMaxTooltip: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.maxOverTheMaxTooltip',\n    defaultMessage:\n      'The maximum number of choices is greater than the number of options',\n  },\n  maxUnderTheMinTooltip: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.maxUnderTheMinTooltip',\n    defaultMessage:\n      'A multiple answer question should allow at least two answers.',\n  },\n  oneOption: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.oneOption',\n    defaultMessage: 'Only one option',\n  },\n  oneOptionsTooltip: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.oneOptionsTooltip',\n    defaultMessage: 'Poll respondents have only one choice',\n  },\n  addPollQuestion: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.addPollQuestion',\n    defaultMessage: 'Add a poll question',\n  },\n  cancelFormQuestion: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.cancelFormQuestion',\n    defaultMessage: 'Cancel',\n  },\n  saveQuestion: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.saveQuestion',\n    defaultMessage: 'Save',\n  },\n  optionsFormHeader: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.optionsFormHeader',\n    defaultMessage: 'Manage options for: {questionTitle}',\n  },\n  editOptionSave: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.editOptionSave',\n    defaultMessage: 'Save',\n  },\n  deleteOption: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.deleteOption',\n    defaultMessage: 'Delete',\n  },\n  editOption: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.editOption',\n    defaultMessage: 'Edit',\n  },\n  addAnswerChoice: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.addAnswerChoice',\n    defaultMessage: 'Add an answer choice',\n  },\n  saveOption: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.saveOption',\n    defaultMessage: 'Save',\n  },\n  cancelOption: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.cancelOption',\n    defaultMessage: 'Cancel',\n  },\n  exportPollResults: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.exportPollResults',\n    defaultMessage: 'Export poll results',\n  },\n  pollExportFileName: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.pollExportFileName',\n    defaultMessage: 'poll_export',\n  },\n  singleOption: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.singleOption',\n    defaultMessage: 'Single choice',\n  },\n  multipleOption: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.multipleOption',\n    defaultMessage: 'Multiple choice',\n  },\n  applyQuestionSettings: {\n    id: 'app.containers.AdminPage.ProjectEdit.PollTab.applyQuestionSettings',\n    defaultMessage: 'Apply',\n  },\n});\n","import { API_PATH } from 'containers/App/constants';\nimport streams from 'utils/streams';\nimport { Multiloc } from 'typings';\n\nexport interface IPollOption {\n  id: string;\n  type: string;\n  attributes: {\n    title_multiloc: Multiloc;\n    ordering: number;\n  };\n}\n\nexport function pollOptionsStream(questionId: string) {\n  return streams.get<{ data: IPollOption[] }>({\n    apiEndpoint: `${API_PATH}/poll_questions/${questionId}/poll_options`,\n  });\n}\n\nexport function addPollOption(questionId: string, titleMultiloc: Multiloc) {\n  return streams.add<{ data: IPollOption }>(\n    `${API_PATH}/poll_questions/${questionId}/poll_options`,\n    {\n      title_multiloc: titleMultiloc,\n    }\n  );\n}\n\nexport function pollOptionStream(optionId: string) {\n  return streams.get<{ data: IPollOption }>({\n    apiEndpoint: `${API_PATH}/poll_options/${optionId}`,\n  });\n}\n\nexport function deletePollOption(optionId: string) {\n  return streams.delete(`${API_PATH}/poll_options/${optionId}`, optionId);\n}\n\nexport function updatePollOption(optionId: string, titleMultiloc: Multiloc) {\n  return streams.update(`${API_PATH}/poll_options/${optionId}`, optionId, {\n    title_multiloc: titleMultiloc,\n  });\n}\n","import React from 'react';\nimport GetPollOptions, {\n  GetPollOptionsChildProps,\n} from 'resources/GetPollOptions';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\nimport messages from './messages';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport { StyledIconTooltip, Indicator } from './WrongOptionsIndicator';\nimport styled from 'styled-components';\n\nconst StyledIndicator = styled(Indicator)`\n  margin-right: 15px;\n`;\n\ninterface InputProps {\n  questionId: string;\n  maxAnswers: number | null;\n}\n\ninterface DataProps {\n  options: GetPollOptionsChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nexport const WrongMaxChoiceIndicator = ({ options, maxAnswers }: Props) =>\n  typeof maxAnswers === 'number' && maxAnswers < 2 ? (\n    <StyledIndicator>\n      <StyledIconTooltip\n        content={<FormattedMessage {...messages.maxUnderTheMinTooltip} />}\n      />\n      <FormattedMessage {...messages.wrongMax} />\n    </StyledIndicator>\n  ) : !isNilOrError(options) && maxAnswers && options.length < maxAnswers ? (\n    <StyledIndicator isWarning>\n      <StyledIconTooltip\n        content={<FormattedMessage {...messages.maxOverTheMaxTooltip} />}\n      />\n      <FormattedMessage {...messages.wrongMax} />\n    </StyledIndicator>\n  ) : null;\n\nconst Data = adopt<DataProps, InputProps>({\n  options: ({ questionId, render }) => (\n    <GetPollOptions questionId={questionId}>{render}</GetPollOptions>\n  ),\n});\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataprops) => <WrongMaxChoiceIndicator {...inputProps} {...dataprops} />}\n  </Data>\n);\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Services / Data loading\nimport { IPollQuestion, updatePollQuestion } from 'services/pollQuestions';\n\n// Components\nimport Button from 'components/UI/Button';\nimport { Row } from 'components/admin/ResourceList';\nimport { Select, Input } from 'cl2-component-library';\nimport WrongMaxChoiceIndicator from './WrongMaxChoiceIndicator';\n\n// Typings\nimport { IOption } from 'typings';\n\n// i18n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport messages from './messages';\n\n// Style\nimport styled from 'styled-components';\nimport { InjectedIntlProps } from 'react-intl';\n\nconst FormContainer = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst StyledInput = styled(Input)`\n  max-width: 100px;\n  input {\n    padding: 10px;\n  }\n  margin-left: 5px;\n`;\n\ninterface InputProps {\n  question: IPollQuestion;\n}\n\ninterface DataProps {}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface State {\n  maxAnswers: number | null;\n  questionType: 'single_option' | 'multiple_options';\n  typeOptions: IOption[];\n}\n\nexport class QuestionDetailsForm extends PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  typeOptions: IOption[];\n\n  constructor(props: Props & InjectedIntlProps) {\n    super(props);\n    this.state = {\n      maxAnswers: props.question.attributes.max_options,\n      questionType: props.question.attributes.question_type,\n      typeOptions: [],\n    };\n  }\n\n  componentDidMount() {\n    const { formatMessage } = this.props.intl;\n    this.setState({\n      typeOptions: [\n        {\n          label: formatMessage(messages.singleOption),\n          value: 'single_option',\n        },\n        {\n          label: formatMessage(messages.multipleOption),\n          value: 'multiple_options',\n        },\n      ],\n    });\n  }\n\n  changeMaxAnswers = (maxAnswers: string) => {\n    this.setState({ maxAnswers: Number(maxAnswers) });\n  };\n\n  changeQuestionType = (option: IOption) => {\n    const newType = option.value;\n    this.setState({\n      questionType: newType,\n      maxAnswers: newType === 'single_option' ? null : 2,\n    });\n  };\n\n  validate = () => {\n    const { question } = this.props;\n    const { questionType, maxAnswers } = this.state;\n    const diff = {\n      ...(questionType !== question.attributes.question_type\n        ? { question_type: questionType }\n        : {}),\n      ...(maxAnswers !== question.attributes.max_options\n        ? { max_options: maxAnswers }\n        : {}),\n    };\n    return {\n      diff,\n      isValid:\n        Object.keys(diff).length > 0 &&\n        ((questionType === 'multiple_options' &&\n          typeof maxAnswers === 'number' &&\n          maxAnswers >= 2) ||\n          (questionType === 'single_option' && maxAnswers === null)),\n    };\n  };\n\n  onSave = () => {\n    const { question } = this.props;\n    const { diff, isValid } = this.validate();\n    if (isValid) {\n      updatePollQuestion(question.id, diff);\n    }\n  };\n\n  render() {\n    const { question } = this.props;\n    const { maxAnswers, questionType, typeOptions } = this.state;\n    const { isValid } = this.validate();\n    return (\n      <Row>\n        <FormContainer>\n          <Select\n            options={typeOptions}\n            value={questionType}\n            onChange={this.changeQuestionType}\n          />\n          {questionType === 'multiple_options' && (\n            <StyledInput\n              type=\"number\"\n              onChange={this.changeMaxAnswers}\n              value={String(maxAnswers)}\n              min=\"2\"\n            />\n          )}\n        </FormContainer>\n        <FormContainer>\n          <WrongMaxChoiceIndicator\n            questionId={question.id}\n            maxAnswers={maxAnswers}\n          />\n          <Button\n            className=\"e2e-form-question-settings-save\"\n            buttonStyle=\"secondary\"\n            onClick={this.onSave}\n            disabled={!isValid}\n          >\n            <FormattedMessage {...messages.applyQuestionSettings} />\n          </Button>\n        </FormContainer>\n      </Row>\n    );\n  }\n}\n\nexport default injectIntl(QuestionDetailsForm);\n","// Libraries\nimport React from 'react';\n\n// analytics\nimport { trackEventByName } from 'utils/analytics';\nimport tracks from './tracks';\n\n// typings\nimport { IParticipationContextType } from 'typings';\n\n// components\nimport Button from 'components/UI/Button';\nimport { exportPollResponses } from 'services/pollResponses';\n\n// i18n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport messages from './messages';\nimport { InjectedIntlProps } from 'react-intl';\nimport { snakeCase } from 'lodash-es';\n\ninterface Props {\n  participationContextType: IParticipationContextType;\n  participationContextId: string;\n  participationContextName: string;\n  className?: string;\n}\n\ninterface State {\n  exporting: boolean;\n}\n\nclass ExportPollButton extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  constructor(props: Props & InjectedIntlProps) {\n    super(props);\n    this.state = {\n      exporting: false,\n    };\n  }\n\n  trackExportPoll = () => {\n    trackEventByName(tracks.clickExportPoll.name, { extra: { ...this.props } });\n  };\n\n  handleExportPollResults = async () => {\n    const {\n      intl: { formatMessage, formatDate },\n      participationContextName,\n      participationContextId,\n      participationContextType,\n    } = this.props;\n    this.trackExportPoll();\n\n    this.setState({ exporting: true });\n    await exportPollResponses(\n      participationContextId,\n      participationContextType,\n      `${formatMessage(messages.pollExportFileName)}_${snakeCase(\n        participationContextName\n      )}_${formatDate(Date.now())}.xlsx`\n    );\n    this.setState({ exporting: false });\n  };\n\n  render() {\n    const { className } = this.props;\n    const { exporting } = this.state;\n    return (\n      <Button\n        buttonStyle=\"secondary\"\n        icon=\"download\"\n        onClick={this.handleExportPollResults}\n        processing={exporting}\n        className={className}\n      >\n        <FormattedMessage {...messages.exportPollResults} />\n      </Button>\n    );\n  }\n}\n\nexport default injectIntl(ExportPollButton);\n","export default {\n  clickExportPoll: {\n    name: 'Export Poll results clicked',\n  },\n};\n","// Libraries\nimport React from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport { adopt } from 'react-adopt';\nimport styled from 'styled-components';\nimport { isError } from 'lodash-es';\n\n// Services / Data loading\nimport GetProject, { GetProjectChildProps } from 'resources/GetProject';\nimport GetPhases, { GetPhasesChildProps } from 'resources/GetPhases';\nimport GetPollQuestions, {\n  GetPollQuestionsChildProps,\n} from 'resources/GetPollQuestions';\nimport GetLocale, { GetLocaleChildProps } from 'resources/GetLocale';\n\n// Components\nimport FeatureFlag from 'components/FeatureFlag';\nimport ExportPollButton from './ExportPollButton';\nimport PollAdminForm from './PollAdminForm';\nimport T from 'components/T';\nimport { SectionTitle, SectionDescription } from 'components/admin/Section';\n\n// i18n\nimport messages from './messages';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport injectLocalize, { InjectedLocalized } from 'utils/localize';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst PhaseContainer = styled.div`\n  &:not(:last-child) {\n    margin-bottom: 50px;\n  }\n`;\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  padding: 0;\n  margin: 0;\n  margin-bottom: 30px;\n`;\n\nconst Left = styled.div`\n  margin-right: 80px;\n`;\n\ninterface InputProps {}\n\ninterface DataProps {\n  project: GetProjectChildProps;\n  phases: GetPhasesChildProps;\n  locale: GetLocaleChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nexport class AdminProjectPoll extends React.PureComponent<\n  Props & InjectedLocalized\n> {\n  render() {\n    const { project, phases, locale, localize } = this.props;\n    if (isNilOrError(project) || isNilOrError(locale)) return null;\n\n    if (\n      project.attributes.process_type === 'continuous' &&\n      project.attributes.participation_method === 'poll'\n    ) {\n      return (\n        <FeatureFlag name=\"polls\">\n          <Container>\n            <HeaderContainer>\n              <Left>\n                <SectionTitle>\n                  <FormattedMessage {...messages.titlePollTab} />\n                </SectionTitle>\n                <SectionDescription>\n                  <FormattedMessage {...messages.pollTabSubtitle} />\n                </SectionDescription>\n              </Left>\n              <ExportPollButton\n                participationContextType=\"project\"\n                participationContextId={project.id}\n                participationContextName={localize(\n                  project.attributes.title_multiloc\n                )}\n              />\n            </HeaderContainer>\n            <GetPollQuestions\n              participationContextId={project.id}\n              participationContextType=\"project\"\n            >\n              {(pollQuestions: GetPollQuestionsChildProps) => (\n                <PollAdminForm\n                  participationContextType=\"project\"\n                  participationContextId={project.id}\n                  pollQuestions={isError(pollQuestions) ? null : pollQuestions}\n                />\n              )}\n            </GetPollQuestions>\n          </Container>\n        </FeatureFlag>\n      );\n    }\n\n    if (\n      project.attributes.process_type === 'timeline' &&\n      !isNilOrError(phases)\n    ) {\n      const pollPhases = phases.filter(\n        (phase) => phase.attributes.participation_method === 'poll'\n      );\n      if (pollPhases.length === 0) return null;\n      return (\n        <FeatureFlag name=\"polls\">\n          <Container>\n            <SectionTitle>\n              <FormattedMessage {...messages.titlePollTab} />\n            </SectionTitle>\n            <SectionDescription>\n              <FormattedMessage {...messages.pollTabSubtitle} />\n            </SectionDescription>\n            {pollPhases.map((phase) => (\n              <PhaseContainer key={phase.id}>\n                <HeaderContainer>\n                  <Left>\n                    <h3>\n                      <T value={phase.attributes.title_multiloc} />\n                    </h3>\n                  </Left>\n                  <ExportPollButton\n                    participationContextId={phase.id}\n                    participationContextType=\"phase\"\n                    participationContextName={localize(\n                      phase.attributes.title_multiloc\n                    )}\n                  />\n                </HeaderContainer>\n                <GetPollQuestions\n                  participationContextId={phase.id}\n                  participationContextType=\"phase\"\n                >\n                  {(pollQuestions: GetPollQuestionsChildProps) => (\n                    <PollAdminForm\n                      participationContextType=\"phase\"\n                      participationContextId={phase.id}\n                      pollQuestions={\n                        isError(pollQuestions) ? null : pollQuestions\n                      }\n                    />\n                  )}\n                </GetPollQuestions>\n              </PhaseContainer>\n            ))}\n          </Container>\n        </FeatureFlag>\n      );\n    }\n    return null;\n  }\n}\n\nconst AdminProjectPollWithHoc = injectLocalize(AdminProjectPoll);\n\nconst Data = adopt<DataProps, InputProps & WithRouterProps>({\n  phases: ({ params, render }) => (\n    <GetPhases projectId={params.projectId}>{render}</GetPhases>\n  ),\n  project: ({ params, render }) => (\n    <GetProject projectId={params.projectId}>{render}</GetProject>\n  ),\n  locale: <GetLocale />,\n});\n\nexport default withRouter<InputProps>(\n  (inputProps: InputProps & WithRouterProps) => (\n    <Data {...inputProps}>\n      {(dataProps) => (\n        <AdminProjectPollWithHoc {...inputProps} {...dataProps} />\n      )}\n    </Data>\n  )\n);\n","// Libraries\nimport React, { PureComponent, Fragment } from 'react';\nimport { DragDropContext } from 'react-dnd-cjs';\nimport HTML5Backend from 'react-dnd-html5-backend-cjs';\nimport { isEqual, clone } from 'lodash-es';\nimport styled from 'styled-components';\n\n// Services / Data loading\nimport {\n  addPollQuestion,\n  deletePollQuestion,\n  updatePollQuestion,\n  reorderPollQuestion,\n  IPollQuestion,\n} from 'services/pollQuestions';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// Components\nimport { List } from 'components/admin/ResourceList';\nimport Button from 'components/UI/Button';\nimport QuestionRow from './QuestionRow';\nimport FormQuestionRow from './FormQuestionRow';\nimport OptionForm from './OptionForm';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\n// Typings\nimport { Multiloc, IParticipationContextType } from 'typings';\n\nconst StyledList = styled(List)`\n  margin: 10px 0;\n`;\n\ninterface Props {\n  participationContextId: string;\n  participationContextType: IParticipationContextType;\n  pollQuestions: IPollQuestion[] | null | undefined;\n}\n\ninterface State {\n  newQuestionTitle: Multiloc | null;\n  editingQuestionTitle: Multiloc;\n  editingQuestionId: string | null;\n  editingOptionsId: string | null;\n  itemsWhileDragging: IPollQuestion[] | null;\n  isProcessing: boolean;\n}\n\nexport class PollAdminForm extends PureComponent<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newQuestionTitle: null,\n      editingQuestionId: null,\n      editingQuestionTitle: {},\n      editingOptionsId: null,\n      itemsWhileDragging: null,\n      isProcessing: false,\n    };\n  }\n\n  // Drag and drop handling\n  componentDidUpdate(prevProps: Props) {\n    const { itemsWhileDragging } = this.state;\n    const prevCustomFieldsIds =\n      prevProps.pollQuestions &&\n      prevProps.pollQuestions.map((customField) => customField.id);\n    const nextCustomFieldsIds =\n      this.props.pollQuestions &&\n      this.props.pollQuestions.map((customField) => customField.id);\n\n    if (\n      itemsWhileDragging &&\n      !isEqual(prevCustomFieldsIds, nextCustomFieldsIds)\n    ) {\n      this.setState({ itemsWhileDragging: null });\n    }\n  }\n\n  handleDragRow = (fromIndex, toIndex) => {\n    if (!this.state.isProcessing) {\n      const listItems = this.listItems();\n\n      if (!listItems) return;\n\n      const itemsWhileDragging = clone(listItems);\n      itemsWhileDragging.splice(fromIndex, 1);\n      itemsWhileDragging.splice(toIndex, 0, listItems[fromIndex]);\n      this.setState({ itemsWhileDragging });\n    }\n  };\n\n  handleDropRow = (fieldId: string, toIndex: number) => {\n    const listItems = this.listItems();\n\n    if (!listItems) return;\n\n    const field = listItems.find((listItem) => listItem.id === fieldId);\n\n    if (field && field.attributes.ordering !== toIndex) {\n      this.setState({ isProcessing: true });\n      reorderPollQuestion(fieldId, toIndex).then(() =>\n        this.setState({ isProcessing: false })\n      );\n    } else {\n      this.setState({ itemsWhileDragging: null });\n    }\n  };\n\n  listItems = () => {\n    const { itemsWhileDragging } = this.state;\n    const { pollQuestions } = this.props;\n    return itemsWhileDragging || pollQuestions;\n  };\n\n  // New question\n  startNewQuestion = () => {\n    this.setState({ newQuestionTitle: {}, editingOptionsId: null });\n  };\n\n  changeNewQuestion = (value) => {\n    this.setState({ newQuestionTitle: value });\n  };\n\n  saveNewQuestion = () => {\n    const { participationContextId, participationContextType } = this.props;\n    const { newQuestionTitle } = this.state;\n\n    if (\n      participationContextType &&\n      participationContextId &&\n      newQuestionTitle\n    ) {\n      addPollQuestion(\n        participationContextId,\n        participationContextType,\n        newQuestionTitle\n      ).then((res) => {\n        this.setState({\n          newQuestionTitle: null,\n          editingOptionsId: res.data.id,\n        });\n      });\n    }\n  };\n  cancelNewQuestion = () => {\n    this.setState({ newQuestionTitle: null });\n  };\n\n  // Edit question\n  editQuestion = (questionId: string, currentTitle: Multiloc) => () => {\n    this.setState({\n      editingQuestionId: questionId,\n      editingQuestionTitle: currentTitle,\n      editingOptionsId: null,\n    });\n  };\n\n  changeEditingQuestion = (value) => {\n    this.setState({ editingQuestionTitle: value });\n  };\n\n  saveEditingQuestion = () => {\n    const { editingQuestionTitle, editingQuestionId } = this.state;\n    editingQuestionId &&\n      updatePollQuestion(editingQuestionId, {\n        title_multiloc: editingQuestionTitle,\n      }).then(() => {\n        this.setState({ editingQuestionId: null, editingQuestionTitle: {} });\n      });\n  };\n  cancelEditQuestion = () => {\n    this.setState({ editingQuestionId: null, editingQuestionTitle: {} });\n  };\n\n  // Delete question\n  deleteQuestion = (questionId: string) => () => {\n    const { participationContextId, participationContextType } = this.props;\n    deletePollQuestion(\n      questionId,\n      participationContextId,\n      participationContextType\n    );\n  };\n\n  // Option edition\n  editOptions = (questionId) => () => {\n    this.setState({ editingOptionsId: questionId });\n  };\n\n  closeEditingOptions = () => {\n    this.setState({ editingOptionsId: null });\n  };\n\n  render() {\n    const listItems = this.listItems() || [];\n    const {\n      newQuestionTitle,\n      editingQuestionId,\n      editingQuestionTitle,\n      editingOptionsId,\n    } = this.state;\n    return (\n      <>\n        <StyledList key={listItems.length + (newQuestionTitle ? 1 : 0)}>\n          {!isNilOrError(listItems) &&\n            listItems.map((question, index) => (\n              <Fragment key={question.id}>\n                {editingQuestionId === question.id ? (\n                  <FormQuestionRow\n                    titleMultiloc={editingQuestionTitle}\n                    onChange={this.changeEditingQuestion}\n                    onSave={this.saveEditingQuestion}\n                    onCancel={this.cancelEditQuestion}\n                  />\n                ) : editingOptionsId === question.id ? (\n                  <OptionForm\n                    question={question}\n                    collapse={this.closeEditingOptions}\n                  />\n                ) : (\n                  <QuestionRow\n                    question={question}\n                    isLastItem={\n                      index === listItems.length - 1 && !newQuestionTitle\n                    }\n                    index={index}\n                    onDelete={this.deleteQuestion(question.id)}\n                    onEdit={this.editQuestion(\n                      question.id,\n                      question.attributes.title_multiloc\n                    )}\n                    onEditOptions={this.editOptions(question.id)}\n                    handleDragRow={this.handleDragRow}\n                    handleDropRow={this.handleDropRow}\n                  />\n                )}\n              </Fragment>\n            ))}\n          {newQuestionTitle && (\n            <FormQuestionRow\n              key=\"new\"\n              titleMultiloc={newQuestionTitle}\n              onChange={this.changeNewQuestion}\n              onSave={this.saveNewQuestion}\n              onCancel={this.cancelNewQuestion}\n            />\n          )}\n        </StyledList>\n        {!newQuestionTitle && !editingOptionsId && (\n          <Button\n            className=\"e2e-add-question-btn\"\n            buttonStyle=\"cl-blue\"\n            icon=\"plus-circle\"\n            onClick={this.startNewQuestion}\n          >\n            <FormattedMessage {...messages.addPollQuestion} />\n          </Button>\n        )}\n      </>\n    );\n  }\n}\n\nexport default DragDropContext(HTML5Backend)(PollAdminForm);\n","// Libraries\nimport React from 'react';\n\n// Services & Resources\nimport { IPollQuestion } from 'services/pollQuestions';\n\n// Components\nimport Button from 'components/UI/Button';\nimport { SortableRow, TextCell } from 'components/admin/ResourceList';\n\nimport T from 'components/T';\n\nimport styled from 'styled-components';\n\n// Inline block so the button acts as a character and is stuck to the end of the title to make it clear it will edit the title text\nconst EditTitleButton = styled(Button)`\n  display: inline-block;\n`;\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\nimport WrongOptionsIndicator from './WrongOptionsIndicator';\n\nconst QuestionRow = ({\n  question,\n  isLastItem,\n  index,\n  onDelete,\n  onEdit,\n  onEditOptions,\n  handleDropRow,\n  handleDragRow,\n}: {\n  question: IPollQuestion;\n  isLastItem: boolean;\n  index: number;\n  onDelete: () => void;\n  onEdit: () => void;\n  onEditOptions: () => void;\n  handleDragRow;\n  handleDropRow;\n}) => (\n  <SortableRow\n    key={question.id}\n    id={question.id}\n    className=\"e2e-question-row\"\n    index={index}\n    lastItem={isLastItem}\n    moveRow={handleDragRow}\n    dropRow={handleDropRow}\n  >\n    <TextCell className=\"expand\">\n      <T value={question.attributes.title_multiloc} />\n      <EditTitleButton\n        className=\"e2e-edit-question\"\n        onClick={onEdit}\n        buttonStyle=\"text\"\n        icon=\"edit\"\n        ariaLabel=\"edit\"\n      />\n    </TextCell>\n\n    <WrongOptionsIndicator questionId={question.id} />\n\n    <Button\n      className=\"e2e-delete-question\"\n      onClick={onDelete}\n      buttonStyle=\"text\"\n      icon=\"delete\"\n    >\n      <FormattedMessage {...messages.deleteQuestion} />\n    </Button>\n    <Button\n      className=\"e2e-edit-options\"\n      onClick={onEditOptions}\n      buttonStyle=\"secondary\"\n    >\n      <FormattedMessage {...messages.editPollAnswersButtonLabel} />\n    </Button>\n  </SortableRow>\n);\n\nexport default QuestionRow;\n","import { API_PATH } from 'containers/App/constants';\nimport streams from 'utils/streams';\nimport { Multiloc, IParticipationContextType } from 'typings';\nimport { capitalizeParticipationContextType } from 'utils/helperUtils';\n\ntype IPollQuestionAttributes = {\n  question_type: 'multiple_options' | 'single_option';\n  max_options: number | null;\n  title_multiloc: Multiloc;\n  ordering: number;\n};\n\nexport interface IPollQuestion {\n  id: string;\n  type: string;\n  attributes: IPollQuestionAttributes;\n  relationships: {\n    options: {\n      data: {\n        id: string;\n      }[];\n    };\n  };\n}\n\nexport function pollQuestionsStream(\n  participationContextId: string,\n  participationContextType: IParticipationContextType\n) {\n  return streams.get<{ data: IPollQuestion[] }>({\n    apiEndpoint: `${API_PATH}/${participationContextType}s/${participationContextId}/poll_questions`,\n  });\n}\n\nexport async function addPollQuestion(\n  participationContextId: string,\n  participationContextType: IParticipationContextType,\n  titleMultiloc: Multiloc\n) {\n  const response = await streams.add<{ data: IPollQuestion }>(\n    `${API_PATH}/poll_questions`,\n    {\n      participation_context_id: participationContextId,\n      participation_context_type: capitalizeParticipationContextType(\n        participationContextType\n      ),\n      title_multiloc: titleMultiloc,\n    }\n  );\n  streams.fetchAllWith({\n    apiEndpoint: [\n      `${API_PATH}/${participationContextType}s/${participationContextId}/poll_questions`,\n    ],\n  });\n  return response;\n}\n\nexport function pollQuestionStream(questionId: string) {\n  return streams.get<IPollQuestion>({\n    apiEndpoint: `${API_PATH}/poll_questions/${questionId}`,\n  });\n}\n\nexport async function deletePollQuestion(\n  questionId: string,\n  participationContextId?: string,\n  participationContextType?: IParticipationContextType\n) {\n  const response = await streams.delete(\n    `${API_PATH}/poll_questions/${questionId}`,\n    questionId\n  );\n  streams.fetchAllWith({\n    apiEndpoint: [\n      `${API_PATH}/${participationContextType}s/${participationContextId}/poll_questions`,\n    ],\n  });\n  return response;\n}\n\nexport function reorderPollQuestion(questionId: string, newPosition: number) {\n  return streams.update(\n    `${API_PATH}/poll_questions/${questionId}/reorder`,\n    questionId,\n    {\n      ordering: newPosition,\n    }\n  );\n}\nexport function updatePollQuestion(\n  questionId: string,\n  diff: Partial<IPollQuestionAttributes>\n) {\n  return streams.update<{ data: IPollQuestion }>(\n    `${API_PATH}/poll_questions/${questionId}`,\n    questionId,\n    diff\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\n// Components\nimport T from 'components/T';\nimport Button from 'components/UI/Button';\nimport { Row, TextCell } from 'components/admin/ResourceList';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\n// Typings\nimport { Multiloc } from 'typings';\n\nconst StyledButton = styled(Button)`\n  display: inline-block;\n`;\n\nconst OptionRow = ({\n  pollOptionId,\n  pollOptionTitle,\n  deleteOption,\n  editOption,\n}: {\n  pollOptionId: string;\n  pollOptionTitle: Multiloc;\n  deleteOption: () => void;\n  editOption: () => void;\n}) => (\n  <Row key={pollOptionId}>\n    <TextCell className=\"expand\">\n      <T value={pollOptionTitle} />\n      <StyledButton\n        className=\"e2e-edit-option\"\n        onClick={editOption}\n        buttonStyle=\"text\"\n        icon=\"edit\"\n      />\n    </TextCell>\n    <Button\n      className=\"e2e-delete-option\"\n      onClick={deleteOption}\n      buttonStyle=\"text\"\n      icon=\"delete\"\n    >\n      <FormattedMessage {...messages.deleteOption} />\n    </Button>\n  </Row>\n);\n\nexport default OptionRow;\n","import React from 'react';\nimport GetPollOptions, {\n  GetPollOptionsChildProps,\n} from 'resources/GetPollOptions';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\nimport messages from './messages';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport styled from 'styled-components';\nimport { TextCell } from 'components/admin/ResourceList';\nimport { IconTooltip } from 'cl2-component-library';\nimport { colors } from 'utils/styleUtils';\n\nexport const Indicator = styled(TextCell)<{ isWarning?: boolean }>`\n  display: flex;\n  color: ${({ isWarning }) =>\n    isWarning ? colors.adminOrangeIcons : colors.clRed};\n`;\n\nexport const StyledIconTooltip = styled(IconTooltip)`\n  margin-right: 5px;\n`;\n\ninterface InputProps {\n  questionId: string;\n}\n\ninterface DataProps {\n  options: GetPollOptionsChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nconst WrongOptionsIndicator = ({ options }: Props) =>\n  !isNilOrError(options) ? (\n    options.length === 0 ? (\n      <Indicator>\n        <StyledIconTooltip\n          content={<FormattedMessage {...messages.noOptionsTooltip} />}\n        />\n        <FormattedMessage {...messages.noOptions} />\n      </Indicator>\n    ) : options.length === 1 ? (\n      <Indicator>\n        <StyledIconTooltip\n          content={<FormattedMessage {...messages.oneOptionsTooltip} />}\n        />\n        <FormattedMessage {...messages.oneOption} />\n      </Indicator>\n    ) : null\n  ) : null;\n\nconst Data = adopt<DataProps, InputProps>({\n  options: ({ questionId, render }) => (\n    <GetPollOptions questionId={questionId}>{render}</GetPollOptions>\n  ),\n});\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataprops) => <WrongOptionsIndicator {...inputProps} {...dataprops} />}\n  </Data>\n);\n"],"sourceRoot":""}