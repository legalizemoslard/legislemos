{"version":3,"sources":["webpack:///./app/modules/commercial/clusterings/admin/containers/New/LevelsInput.tsx","webpack:///./app/modules/commercial/clusterings/services/clusterings.ts","webpack:///./app/modules/commercial/clusterings/admin/containers/New/index.tsx","webpack:///./app/components/UI/FormikToggle/index.tsx","webpack:///./app/modules/commercial/clusterings/admin/containers/New/ClusteringForm.tsx","webpack:///./app/components/UI/FormikMultipleSelect/index.tsx","webpack:///./app/components/UI/GoBackButton/messages.ts","webpack:///./app/resources/GetIdeaStatuses.tsx","webpack:///./app/resources/GetTopics.tsx","webpack:///./app/components/UI/FormikInput/index.tsx","webpack:///./app/components/UI/GoBackButton/index.tsx"],"names":["Level","styled","div","props","depth","AddLevel","AddButton","Button","allLevels","newValue","form","setFieldValue","field","name","level","value","slice","filter","includes","this","map","v","i","key","buttonStyle","icon","onClick","handleRemoveLevel","FormattedMessage","messages","firstGroup","thenLevel","values","length","availableLevels","index","handleAddLevel","project","level_project","topic","level_topic","area","level_area","clustering","level_description","PureComponent","clusteringId","streams","get","apiEndpoint","streamParams","object","add","update","delete","API_PATH","ideasUnder","node","type","id","flatten","children","c","New","errors","every","title_multiloc","isEmpty","error","setErrors","setSubmitting","setStatus","addClustering","then","clHistory","push","data","catch","errorResponse","isCLErrorJSON","apiErrors","json","levels","drop_empty","projects","topics","areas","idea_statuses","Formik","initialValues","render","renderFn","onSubmit","handleSubmit","validate","Toggle","checked","onChange","handleOnChange","React","ClusteringForm","resources","resource","label","localize","attributes","isSubmitting","isValid","touched","status","goBack","SectionTitle","titleClusterInformation","Form","Section","SectionField","Field","component","FormikInputMultilocWithLocaleSwitcher","fieldTitle","fieldName","Label","fieldAttributes","LevelsInput","FormikToggle","fieldExcludeEmptyCluster","titleInputFilters","fieldProjects","publicationStatuses","isNilOrError","FormikMultipleSelect","options","resourcesToOptionList","projectsList","fieldTopics","fieldStatuses","ideaStatuses","fieldSearch","FormikInput","fieldMinimalTotalVotes","fieldMinimalUpvotes","fieldMinimalDownvotes","injectIntl","newOption","o","Component","defineMessages","defaultMessage","GetIdeaStatuses","state","undefined","subscriptions","ideaStatusesStream","observable","subscribe","setState","forEach","subscription","unsubscribe","GetTopics","topicIds","code","exclude_code","sort","projectId","inputProps$","BehaviorSubject","pipe","distinctUntilChanged","prev","next","isEqual","switchMap","queryParameters","projectTopicsStream","relationships","combineLatest","topicId","topicByIdStream","of","topicsStream","_locale","Input","Container","GoBackButton","className","size","padding","text"],"mappings":"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","file":"88.8166f61004236abbb901.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { includes } from 'lodash-es';\n\nimport { FieldProps } from 'formik';\nimport Button from 'components/UI/Button';\n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../../messages';\n\nconst Level = styled.div<{ depth: number }>`\n  margin-left: ${(props) => props.depth * 20}px;\n  display: flex;\n  align-items: center;\n`;\n\nconst AddLevel = styled(Level)`\n  * {\n    margin: 0 5px;\n  }\n`;\n\nconst AddButton = styled(Button)`\n  font-size: 10px;\n`;\n\ninterface State {}\n\nconst allLevels: TLevel[] = ['project', 'topic', 'area', 'clustering'];\ntype TLevel = 'project' | 'topic' | 'area' | 'clustering';\n\nclass FormikInput extends PureComponent<FieldProps<TLevel[]>, State> {\n  handleOnChange = (newValue) => {\n    this.props.form.setFieldValue(this.props.field.name, newValue);\n  };\n\n  handleAddLevel = (level: TLevel) => () => {\n    const {\n      form: { setFieldValue },\n      field: { name, value },\n    } = this.props;\n    setFieldValue(name, [...value, level]);\n  };\n\n  handleRemoveLevel = (depth: number) => () => {\n    const {\n      form: { setFieldValue },\n      field: { name, value },\n    } = this.props;\n    setFieldValue(name, [...value.slice(0, depth), ...value.slice(depth + 1)]);\n  };\n\n  availableLevels = (): TLevel[] => {\n    const value: TLevel[] = this.props.field.value;\n\n    return allLevels.filter((level) => {\n      switch (level) {\n        case 'clustering':\n          return true;\n        default:\n          return !includes(value, level);\n      }\n    });\n  };\n\n  render() {\n    const value: TLevel[] = this.props.field.value;\n\n    return (\n      <div>\n        {value.map((v, i) => (\n          <Level depth={i} key={`${i}-${v}`}>\n            <Button\n              buttonStyle=\"text\"\n              icon=\"close\"\n              onClick={this.handleRemoveLevel(i)}\n            />\n            <FormattedMessage\n              {...(i === 0 ? messages.firstGroup : messages.thenLevel)}\n              values={{\n                level: (\n                  <b>\n                    <FormattedMessage {...messages[`level_${v}`]} />\n                  </b>\n                ),\n              }}\n            />\n          </Level>\n        ))}\n        <AddLevel key=\"new-level\" depth={value.length + 1}>\n          {this.availableLevels().map((level: TLevel, index) => (\n            <AddButton\n              key={`level_${level}_${index}`}\n              onClick={this.handleAddLevel(level)}\n              buttonStyle=\"secondary-outlined\"\n              icon=\"plus-circle\"\n            >\n              <FormattedMessage\n                {...{\n                  project: messages.level_project,\n                  topic: messages.level_topic,\n                  area: messages.level_area,\n                  clustering: messages.level_description,\n                }[level]}\n              />\n            </AddButton>\n          ))}\n        </AddLevel>\n      </div>\n    );\n  }\n}\n\nexport default FormikInput;\n","import { flatten } from 'lodash-es';\nimport { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { Multiloc } from 'typings';\n\nconst apiEndpoint = `${API_PATH}/clusterings`;\n\ninterface BaseNode {\n  id: string;\n}\n\nexport interface ProjectNode extends BaseNode {\n  type: 'project';\n  children: Node[];\n}\n\nexport interface TopicNode extends BaseNode {\n  type: 'topic';\n  children: Node[];\n}\n\nexport interface CustomNode extends BaseNode {\n  type: 'custom';\n  title?: string;\n  children: Node[];\n  keywords?: {\n    name: string;\n  }[];\n}\n\nexport interface IdeaNode extends BaseNode {\n  type: 'idea';\n}\n\nexport type ParentNode = ProjectNode | TopicNode | CustomNode;\n\nexport type Node = ParentNode | IdeaNode;\n\nexport const ideasUnder = (node: Node): string[] => {\n  if (node.type === 'idea') {\n    return [node.id];\n  } else {\n    return flatten(node.children.map((c) => ideasUnder(c)));\n  }\n};\n\nexport interface IClusteringData {\n  id: string;\n  type: string;\n  attributes: {\n    title_multiloc: Multiloc;\n    structure: ParentNode;\n    created_at: string;\n    updated_at: string;\n  };\n}\n\nexport interface IClusteringLinks {\n  self: string;\n  first: string;\n  prev: string;\n  next: string;\n  last: string;\n}\n\nexport interface IClusterings {\n  data: IClusteringData[];\n  links: IClusteringLinks;\n}\n\nexport interface IClustering {\n  data: IClusteringData;\n}\n\nexport function clusteringByIdStream(clusteringId: string) {\n  return streams.get<IClustering>({\n    apiEndpoint: `${apiEndpoint}/${clusteringId}`,\n  });\n}\n\nexport function clusteringsStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IClusterings>({ apiEndpoint, ...streamParams });\n}\n\nexport function addClustering(object) {\n  return streams.add<IClustering>(apiEndpoint, { clustering: object });\n}\n\nexport function updateClustering(clusteringId: string, object) {\n  return streams.update<IClustering>(\n    `${apiEndpoint}/${clusteringId}`,\n    clusteringId,\n    { clustering: object }\n  );\n}\n\nexport function deleteClustering(clusteringId: string) {\n  return streams.delete(`${apiEndpoint}/${clusteringId}`, clusteringId);\n}\n","import React, { PureComponent } from 'react';\nimport clHistory from 'utils/cl-router/history';\nimport { addClustering } from '../../../services/clusterings';\nimport { Formik, FormikErrors } from 'formik';\nimport ClusteringForm, { FormValues } from './ClusteringForm';\nimport { CLErrorsJSON } from 'typings';\nimport { isEmpty, values as getValues, every } from 'lodash-es';\nimport { isCLErrorJSON } from 'utils/errorUtils';\n\ninterface Props {}\n\nexport default class New extends PureComponent<Props> {\n  validate = (values: FormValues): FormikErrors<FormValues> => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (every(getValues(values.title_multiloc), isEmpty)) {\n      errors.title_multiloc = [{ error: 'blank' }] as any;\n    }\n    return errors;\n  };\n  handleSubmit = (\n    values: FormValues,\n    { setErrors, setSubmitting, setStatus }\n  ) => {\n    addClustering({\n      ...values,\n    })\n      .then((clustering) => {\n        clHistory.push(`/admin/dashboard/insights/${clustering.data.id}`);\n      })\n      .catch((errorResponse) => {\n        if (isCLErrorJSON(errorResponse)) {\n          const apiErrors = (errorResponse as CLErrorsJSON).json.errors;\n          setErrors(apiErrors);\n        } else {\n          setStatus('error');\n        }\n        setSubmitting(false);\n      });\n  };\n\n  renderFn = (props) => {\n    return <ClusteringForm {...props} />;\n  };\n\n  initialValues = (): FormValues => ({\n    title_multiloc: {},\n    levels: ['project', 'topic'],\n    drop_empty: true,\n    projects: [],\n    topics: [],\n    areas: [],\n    idea_statuses: [],\n  });\n\n  render() {\n    return (\n      <Formik\n        initialValues={this.initialValues()}\n        render={this.renderFn}\n        onSubmit={this.handleSubmit}\n        validate={this.validate}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport { Toggle } from 'cl2-component-library';\nimport { FieldProps } from 'formik';\n\nclass FormikToggle extends React.PureComponent<FieldProps> {\n  handleOnChange = () => {\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      !this.props.field.value\n    );\n  };\n\n  render() {\n    const { value } = this.props.field;\n\n    return (\n      <Toggle {...this.props} checked={value} onChange={this.handleOnChange} />\n    );\n  }\n}\n\nexport default FormikToggle;\n","import React, { PureComponent } from 'react';\nimport { Form, Field, InjectedFormikProps } from 'formik';\n\n// Components\nimport FormikInputMultilocWithLocaleSwitcher from 'components/UI/FormikInputMultilocWithLocaleSwitcher';\nimport FormikMultipleSelect from 'components/UI/FormikMultipleSelect';\nimport FormikToggle from 'components/UI/FormikToggle';\nimport FormikSubmitWrapper from 'components/admin/FormikSubmitWrapper';\nimport { Section, SectionField, SectionTitle } from 'components/admin/Section';\nimport Error from 'components/UI/Error';\nimport FormikInput from 'components/UI/FormikInput';\nimport { Label } from 'cl2-component-library';\nimport LevelsInput from './LevelsInput';\nimport GoBackButton from 'components/UI/GoBackButton';\nimport PageWrapper from 'components/admin/PageWrapper';\n\n// I18n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport localize, { InjectedLocalized } from 'utils/localize';\nimport messages from '../../messages';\n\n// Resources\nimport GetTopics from 'resources/GetTopics';\nimport GetIdeaStatuses from 'resources/GetIdeaStatuses';\nimport GetProjects from 'resources/GetProjects';\n\n// Utils\nimport { isNilOrError } from 'utils/helperUtils';\nimport clHistory from 'utils/cl-router/history';\n\n// Typings\nimport { Multiloc } from 'typings';\n\nexport interface Props {}\n\nexport interface FormValues {\n  title_multiloc: Multiloc;\n  levels: string[];\n  drop_empty: boolean;\n  topics: string[];\n  areas: string[];\n  projects: string[];\n  idea_statuses: string[];\n  minimal_total_votes?: number;\n  minimal_upvotes?: number;\n  minimal_downvotes?: number;\n  search?: string;\n}\n\nclass ClusteringForm extends PureComponent<\n  InjectedFormikProps<Props & InjectedLocalized & InjectedIntlProps, FormValues>\n> {\n  resourcesToOptionList = (resources) => {\n    return (\n      resources &&\n      resources.map((resource) => ({\n        label: this.props.localize(resource.attributes.title_multiloc),\n        value: resource.id,\n      }))\n    );\n  };\n\n  goBack = () => {\n    clHistory.push('/admin/dashboard/insights');\n  };\n\n  render() {\n    const { isSubmitting, errors, isValid, touched, status } = this.props;\n\n    return (\n      <>\n        <GoBackButton onClick={this.goBack} />\n        <SectionTitle>\n          <FormattedMessage {...messages.titleClusterInformation} />\n        </SectionTitle>\n        <PageWrapper>\n          <Form>\n            <Section>\n              <SectionField>\n                <Field\n                  name=\"title_multiloc\"\n                  component={FormikInputMultilocWithLocaleSwitcher}\n                  label={<FormattedMessage {...messages.fieldTitle} />}\n                />\n                {touched.title_multiloc && (\n                  <Error\n                    fieldName=\"title_multiloc\"\n                    apiErrors={errors.title_multiloc as any}\n                  />\n                )}\n              </SectionField>\n\n              <SectionField>\n                <Label>\n                  <FormattedMessage {...messages.fieldAttributes} />\n                </Label>\n                <Field name=\"levels\" component={LevelsInput} />\n              </SectionField>\n\n              <SectionField>\n                <Field\n                  name=\"drop_empty\"\n                  component={FormikToggle}\n                  label={\n                    <FormattedMessage {...messages.fieldExcludeEmptyCluster} />\n                  }\n                />\n              </SectionField>\n            </Section>\n\n            <Section>\n              <SectionTitle>\n                <FormattedMessage {...messages.titleInputFilters} />\n              </SectionTitle>\n\n              <SectionField>\n                <Label>\n                  <FormattedMessage {...messages.fieldProjects} />\n                </Label>\n                <GetProjects publicationStatuses={['published', 'archived']}>\n                  {(projects) =>\n                    projects && isNilOrError(projects) ? null : (\n                      <Field\n                        name=\"projects\"\n                        component={FormikMultipleSelect}\n                        options={this.resourcesToOptionList(\n                          projects.projectsList\n                        )}\n                      />\n                    )\n                  }\n                </GetProjects>\n              </SectionField>\n\n              <SectionField>\n                <Label>\n                  <FormattedMessage {...messages.fieldTopics} />\n                </Label>\n                <GetTopics>\n                  {(topics) =>\n                    topics && isNilOrError(topics) ? null : (\n                      <Field\n                        name=\"topics\"\n                        component={FormikMultipleSelect}\n                        options={this.resourcesToOptionList(topics)}\n                      />\n                    )\n                  }\n                </GetTopics>\n              </SectionField>\n\n              <SectionField>\n                <Label>\n                  <FormattedMessage {...messages.fieldStatuses} />\n                </Label>\n                <GetIdeaStatuses>\n                  {(ideaStatuses) =>\n                    ideaStatuses && isNilOrError(ideaStatuses) ? null : (\n                      <Field\n                        name=\"ideaStatuses\"\n                        component={FormikMultipleSelect}\n                        options={this.resourcesToOptionList(ideaStatuses)}\n                      />\n                    )\n                  }\n                </GetIdeaStatuses>\n              </SectionField>\n\n              <SectionField>\n                <Label>\n                  <FormattedMessage {...messages.fieldSearch} />\n                </Label>\n                <Field name=\"search\" component={FormikInput} type=\"text\" />\n              </SectionField>\n\n              <SectionField>\n                <Label>\n                  <FormattedMessage {...messages.fieldMinimalTotalVotes} />\n                </Label>\n                <Field\n                  name=\"minimal_total_votes\"\n                  component={FormikInput}\n                  type=\"number\"\n                />\n              </SectionField>\n\n              <SectionField>\n                <Label>\n                  <FormattedMessage {...messages.fieldMinimalUpvotes} />\n                </Label>\n                <Field\n                  name=\"minimal_upvotes\"\n                  component={FormikInput}\n                  type=\"number\"\n                />\n              </SectionField>\n\n              <SectionField>\n                <Label>\n                  <FormattedMessage {...messages.fieldMinimalDownvotes} />\n                </Label>\n                <Field\n                  name=\"minimal_downvotes\"\n                  component={FormikInput}\n                  type=\"number\"\n                />\n              </SectionField>\n            </Section>\n\n            <FormikSubmitWrapper\n              {...{ isValid, isSubmitting, status, touched }}\n            />\n          </Form>\n        </PageWrapper>\n      </>\n    );\n  }\n}\n\nexport default injectIntl(localize(ClusteringForm));\n","import React from 'react';\nimport MultipleSelect, {\n  Props as VanillaInputProps,\n} from 'components/UI/MultipleSelect';\nimport { FieldProps } from 'formik';\nimport { IOption } from 'typings';\n\ninterface State {}\n\nclass FormikMultipleSelect extends React.Component<\n  FieldProps & VanillaInputProps,\n  State\n> {\n  handleOnChange = (newOption: IOption[]) => {\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      newOption.map((o) => o.value)\n    );\n  };\n\n  render() {\n    const { value } = this.props.field;\n    return (\n      <MultipleSelect\n        {...this.props}\n        value={value}\n        onChange={this.handleOnChange}\n      />\n    );\n  }\n}\n\nexport default FormikMultipleSelect;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  goBack: {\n    id: 'app.components.GoBackButton.group.edit.goBack',\n    defaultMessage: 'Go back',\n  },\n});\n","import React from 'react';\nimport { Subscription } from 'rxjs';\nimport { IIdeaStatusData, ideaStatusesStream } from 'services/ideaStatuses';\n\ninterface InputProps {}\n\ntype children = (renderProps: GetIdeaStatusesChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  ideaStatuses: IIdeaStatusData[] | undefined | null;\n}\n\nexport type GetIdeaStatusesChildProps = IIdeaStatusData[] | undefined | null;\n\nexport default class GetIdeaStatuses extends React.Component<Props, State> {\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      ideaStatuses: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.subscriptions = [\n      ideaStatusesStream().observable.subscribe((ideaStatuses) => {\n        this.setState({\n          ideaStatuses: ideaStatuses ? ideaStatuses.data : null,\n        });\n      }),\n    ];\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { ideaStatuses } = this.state;\n    return (children as children)(ideaStatuses);\n  }\n}\n","import React from 'react';\nimport { isEqual } from 'lodash-es';\nimport { Subscription, BehaviorSubject, of, combineLatest } from 'rxjs';\nimport { distinctUntilChanged, switchMap, map } from 'rxjs/operators';\nimport {\n  ITopicData,\n  topicByIdStream,\n  topicsStream,\n  Code,\n} from 'services/topics';\nimport { projectTopicsStream } from 'services/projectTopics';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  // Don't use projectId, ids or the query parameters (code, exclude_code, sort) together\n  // Only one of the three at a time.\n  projectId?: string;\n  topicIds?: string[];\n  code?: Code;\n  exclude_code?: Code;\n  sort?: 'new' | 'custom';\n}\n\ntype children = (renderProps: GetTopicsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  topics: (ITopicData | Error)[] | undefined | null | Error;\n}\n\nexport type GetTopicsChildProps =\n  | (ITopicData | Error)[]\n  | undefined\n  | null\n  | Error;\n\nexport default class GetTopics extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      topics: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { topicIds, code, exclude_code, sort, projectId } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({\n      topicIds,\n      code,\n      exclude_code,\n      sort,\n      projectId,\n    });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => isEqual(prev, next)),\n          switchMap(({ topicIds, code, exclude_code, sort, projectId }) => {\n            const queryParameters = { code, exclude_code, sort };\n\n            if (projectId) {\n              return projectTopicsStream(projectId).observable.pipe(\n                map((topics) =>\n                  topics.data\n                    .filter((topic) => topic)\n                    .map((topic) => topic.relationships.topic.data.id)\n                ),\n                switchMap((topicIds) => {\n                  return combineLatest(\n                    topicIds.map((topicId) =>\n                      topicByIdStream(topicId).observable.pipe(\n                        map((topic) =>\n                          !isNilOrError(topic) ? topic.data : topic\n                        )\n                      )\n                    )\n                  );\n                })\n              );\n            } else if (topicIds) {\n              if (topicIds.length > 0) {\n                return combineLatest(\n                  topicIds.map((id) => {\n                    return topicByIdStream(id).observable.pipe(\n                      map((topic) =>\n                        !isNilOrError(topic) ? topic.data : topic\n                      )\n                    );\n                  })\n                );\n              }\n\n              return of(null);\n            } else {\n              return topicsStream({ queryParameters }).observable.pipe(\n                map((topics) => topics.data)\n              );\n            }\n          })\n        )\n        .subscribe((topics) => {\n          this.setState({ topics });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { topicIds, code, exclude_code, sort, projectId } = this.props;\n    this.inputProps$.next({\n      topicIds,\n      code,\n      exclude_code,\n      sort,\n      projectId,\n    });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { topics } = this.state;\n    return (children as children)(topics);\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { Input, InputProps } from 'cl2-component-library';\nimport { FieldProps } from 'formik';\nimport { Locale } from 'typings';\n\nclass FormikInput extends PureComponent<FieldProps & InputProps> {\n  handleOnChange = (newValue: string, _locale: Locale | undefined) => {\n    this.props.form.setFieldValue(this.props.field.name, newValue);\n  };\n\n  render() {\n    const { name, value } = this.props.field;\n    return (\n      <Input\n        {...this.props}\n        name={name}\n        value={value}\n        onChange={this.handleOnChange}\n      />\n    );\n  }\n}\n\nexport default FormikInput;\n","import React, { PureComponent, FormEvent } from 'react';\nimport styled from 'styled-components';\nimport Button from 'components/UI/Button';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\nconst Container = styled.div`\n  display: inline-block;\n`;\n\ntype Props = {\n  onClick: (arg: FormEvent) => void;\n  className?: string;\n};\n\ninterface State {}\n\nexport default class GoBackButton extends PureComponent<Props, State> {\n  render() {\n    const { onClick, className } = this.props;\n\n    return (\n      <Container className={className || ''}>\n        <Button\n          onClick={onClick}\n          buttonStyle=\"text\"\n          icon=\"arrow-back\"\n          size=\"2\"\n          padding=\"0px\"\n          text={<FormattedMessage {...messages.goBack} />}\n        />\n      </Container>\n    );\n  }\n}\n"],"sourceRoot":""}