{"version":3,"sources":["webpack:///./app/components/ConsentForm/messages.ts","webpack:///./app/components/ConsentForm/index.tsx","webpack:///./app/components/UI/CheckboxWithPartialCheck/index.tsx","webpack:///./app/services/campaignConsents.ts"],"names":["defineMessages","buttonSuccessLabel","id","defaultMessage","messageError","messageSuccess","submit","notificationsTitle","notificationsSubTitle","ownCategory","officialCategory","weeklyCategory","votedCategory","commentedCategory","mentionCategory","adminCategory","collapse","expand","ally_categoryLabel","CategoryCheckboxContainer","styled","div","StyledCheckboxWithPartialCheck","CheckboxWithPartialCheck","ArrowIcon","Icon","AnimatedFieldset","fieldset","CheckboxContainer","ConsentList","colors","separation","StyledSubmitWrapper","SubmitWrapper","ConsentForm","props","consent","becomesConsented","isConsented","setState","prevState","consentChanges","saveButtonStatus","category","categorizedConsents","state","every","forEach","unconsent","isCategoryOpen","event","stopPropagation","consentId","consents","find","attributes","consented","trackEventName","token","runOnSave","consentUpdates","trackEventByName","extra","isSaving","Object","keys","map","updateConsentWithToken","updateConsent","Promise","all","then","catch","getCategorizedConsents","this","prevProps","FormSection","action","FormSectionTitle","message","messages","subtitleMessage","entries","index","key","className","length","checked","isConsentedCategory","onChange","handleOnChangeCategory","label","FormattedMessage","onClick","handleToggleOpenCategory","buttonStyle","type","ariaExpanded","padding","name","ariaHidden","CSSTransition","classNames","in","appear","timeout","mounOnEnter","unmountOnExit","enter","exit","ScreenReaderOnly","size","handleOnChange","value","campaign_type_description_multiloc","status","loading","handleOnSubmit","buttonSave","buttonSuccess","PureComponent","Container","isRtl","parseInt","CustomInputWrapper","separationDark","theme","borderRadius","clGreen","clBlueLightest","CheckmarkIcon","Label","fontSizes","base","disabled","targetElement","get","parentElement","targetElementIsLink","hasAttribute","parentElementIsLink","preventDefault","keyCode","notFocusable","testid","onMouseDown","removeFocus","handleOnClick","onKeyDown","handleOnKeyDown","role","tabIndex","res","CATEGORIES","categoryConsents","filter","streams","apiEndpoint","API_PATH","update","campaignId","unsubscription_token"],"mappings":"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","file":"49.099a2ac18a14b5b1a6f2.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  buttonSuccessLabel: {\n    id: 'app.containers.CampaignsConsentForm.buttonSuccessLabel',\n    defaultMessage: 'Success',\n  },\n  messageError: {\n    id: 'app.containers.CampaignsConsentForm.messageError',\n    defaultMessage: 'There was an error saving your email preferences.',\n  },\n  messageSuccess: {\n    id: 'app.containers.CampaignsConsentForm.messageSuccess',\n    defaultMessage: 'Your email preferences have been saved.',\n  },\n  /*\n   * Notifications\n   */\n  submit: {\n    id: 'app.containers.CampaignsConsentForm.submit',\n    defaultMessage: 'Save',\n  },\n  notificationsTitle: {\n    id: 'app.containers.CampaignsConsentForm.notificationsTitle',\n    defaultMessage: 'Notifications',\n  },\n  notificationsSubTitle: {\n    id: 'app.containers.CampaignsConsentForm.notificationsSubTitle',\n    defaultMessage: 'When do you want us to send you an email to notify you?',\n  },\n\n  /*\n   * Categories Titles\n   */\n  ownCategory: {\n    id: 'app.containers.CampaignsConsentForm.ownCategory',\n    defaultMessage: 'Linked to your own input',\n  },\n  officialCategory: {\n    id: 'app.containers.CampaignsConsentForm.officialCategory',\n    defaultMessage: 'Official Messages',\n  },\n  weeklyCategory: {\n    id: 'app.containers.CampaignsConsentForm.weeklyCategory',\n    defaultMessage: 'Weekly Overviews',\n  },\n  votedCategory: {\n    id: 'app.containers.CampaignsConsentForm.votedCategory',\n    defaultMessage: 'Linked to input you voted for',\n  },\n  commentedCategory: {\n    id: 'app.containers.CampaignsConsentForm.commentedCategory',\n    defaultMessage: 'Linked to input you commented on',\n  },\n  mentionCategory: {\n    id: 'app.containers.CampaignsConsentForm.mentionCategory',\n    defaultMessage: 'Mentions',\n  },\n  adminCategory: {\n    id: 'app.containers.CampaignsConsentForm.adminCategory',\n    defaultMessage: 'Admin',\n  },\n\n  /*\n   * Categories Details\n   */\n  collapse: {\n    id: 'app.containers.CampaignsConsentForm.collapse',\n    defaultMessage: 'Collapse',\n  },\n  expand: {\n    id: 'app.containers.CampaignsConsentForm.expand',\n    defaultMessage: 'Expand',\n  },\n  ally_categoryLabel: {\n    id: 'app.containers.CampaignsConsentForm.ally_categoryLabel',\n    defaultMessage: 'Emails in this category',\n  },\n});\n","import React, { PureComponent } from 'react';\nimport {\n  IConsentData,\n  updateConsent,\n  IConsent,\n  updateConsentWithToken,\n  getCategorizedConsents,\n} from 'services/campaignConsents';\n\n// components\nimport SubmitWrapper from 'components/admin/SubmitWrapper';\nimport T from 'components/T';\nimport Button from 'components/UI/Button';\nimport CheckboxWithPartialCheck from 'components/UI/CheckboxWithPartialCheck';\nimport Checkbox from 'components/UI/Checkbox';\nimport { ScreenReaderOnly } from 'utils/a11y';\n\n// analytics\nimport { trackEventByName } from 'utils/analytics';\nimport { FormSectionTitle, FormSection } from 'components/UI/FormComponents';\n\n// i18n\nimport messages from './messages';\nimport { FormattedMessage } from 'utils/cl-intl';\n\n// styling\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\nimport { Icon } from 'cl2-component-library';\nimport { CSSTransition } from 'react-transition-group';\n\nconst timeout = 400;\n\nconst CategoryCheckboxContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst StyledCheckboxWithPartialCheck = styled(CheckboxWithPartialCheck)``;\n\nconst ArrowIcon = styled(Icon)`\n  flex: 0 0 12px;\n  width: 12px;\n  height: 12px;\n  transform: rotate(90deg);\n  transition: all 0.2s linear;\n  margin-left: 5px;\n\n  &.open {\n    transform: rotate(0deg);\n  }\n`;\n\nconst AnimatedFieldset = styled.fieldset`\n  border: none;\n  margin: 0;\n  padding: 0;\n  opacity: 0;\n  display: none;\n  transition: all ${timeout}ms cubic-bezier(0.165, 0.84, 0.44, 1);\n  will-change: opacity, height;\n\n  &.collapse-enter {\n    opacity: 0;\n    max-height: 0px;\n    overflow: hidden;\n    display: block;\n\n    &.collapse-enter-active {\n      opacity: 1;\n      max-height: 350px;\n      overflow: hidden;\n      display: block;\n    }\n  }\n\n  &.collapse-enter-done {\n    opacity: 1;\n    overflow: visible;\n    display: block;\n  }\n\n  &.collapse-exit {\n    opacity: 1;\n    max-height: 350px;\n    overflow: hidden;\n    display: block;\n\n    &.collapse-exit-active {\n      opacity: 0;\n      max-height: 0px;\n      overflow: hidden;\n      display: block;\n    }\n  }\n\n  &.collapse-exit-done {\n    display: none;\n  }\n`;\n\nconst CheckboxContainer = styled.div`\n  margin-bottom: 12px;\n  margin-left: 34px;\n\n  &.first {\n    margin-top: 15px;\n  }\n`;\n\nconst ConsentList = styled.div`\n  padding-top: 14px;\n  padding-bottom: 14px;\n  border-bottom: 1px solid ${colors.separation};\n\n  &.first {\n    border-top: 1px solid ${colors.separation};\n  }\n\n  &.last {\n    margin-bottom: 20px;\n  }\n`;\n\nconst StyledSubmitWrapper = styled(SubmitWrapper)``;\n\ntype Props = {\n  consents: IConsentData[];\n  trackEventName: string;\n  token?: string;\n  runOnSave?: () => void;\n};\n\ninterface State {\n  consentChanges: Record<string, any>;\n  isSaving: boolean;\n  saveButtonStatus: 'enabled' | 'disabled' | 'error' | 'success';\n  categorizedConsents: { [category: string]: IConsentData[] };\n  isCategoryOpen: { [category: string]: boolean }; // whether the list of campaigns in this category is open or collapsed.\n}\n\nexport default class ConsentForm extends PureComponent<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      categorizedConsents: {},\n      isCategoryOpen: {},\n      consentChanges: {},\n      isSaving: false,\n      saveButtonStatus: 'disabled',\n    };\n  }\n\n  componentDidMount() {\n    const categorizedConsents = getCategorizedConsents(this.props.consents);\n    const isCategoryOpen = {} as { [category: string]: boolean };\n\n    Object.keys(categorizedConsents).forEach(\n      (category) =>\n        (isCategoryOpen[category] =\n          !categorizedConsents[category].every(\n            (consent) => consent.attributes.consented\n          ) &&\n          !categorizedConsents[category].every(\n            (consent) => !consent.attributes.consented\n          ))\n    );\n\n    this.setState({ categorizedConsents, isCategoryOpen });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { consents } = this.props;\n    if (prevProps.consents !== consents) {\n      this.setState({ categorizedConsents: getCategorizedConsents(consents) });\n    }\n  }\n\n  handleOnChange = (consent: IConsentData) => () => {\n    const becomesConsented = this.isConsented(consent.id);\n    this.setState((prevState) => ({\n      consentChanges: {\n        ...prevState.consentChanges,\n        [consent.id]: !becomesConsented,\n      },\n      saveButtonStatus: 'enabled',\n    }));\n  };\n\n  consent = (consent: IConsentData) => {\n    this.setState((prevState) => ({\n      consentChanges: {\n        ...prevState.consentChanges,\n        [consent.id]: true,\n      },\n      saveButtonStatus: 'enabled',\n    }));\n  };\n\n  unconsent = (consent: IConsentData) => {\n    this.setState((prevState) => ({\n      consentChanges: {\n        ...prevState.consentChanges,\n        [consent.id]: false,\n      },\n      saveButtonStatus: 'enabled',\n    }));\n  };\n\n  handleOnChangeCategory = (category) => () => {\n    const { categorizedConsents } = this.state;\n\n    if (\n      categorizedConsents[category].every((consent) =>\n        this.isConsented(consent.id)\n      )\n    ) {\n      categorizedConsents[category].forEach((consent) =>\n        this.unconsent(consent)\n      );\n    } else {\n      categorizedConsents[category].forEach((consent) => this.consent(consent));\n      this.setState(({ isCategoryOpen }) => ({\n        isCategoryOpen: { ...isCategoryOpen, [category]: false },\n      }));\n    }\n  };\n\n  handleToggleOpenCategory = (category) => (event) => {\n    event.stopPropagation();\n    this.setState(({ isCategoryOpen }) => ({\n      isCategoryOpen: {\n        ...isCategoryOpen,\n        [category]: !isCategoryOpen[category],\n      },\n    }));\n  };\n\n  isConsented = (consentId) => {\n    const { consents } = this.props;\n    const consent = consents.find((consent) => consent.id === consentId);\n    if (typeof this.state.consentChanges[consentId] === 'undefined') {\n      return consent && consent.attributes.consented;\n    } else {\n      return this.state.consentChanges[consentId];\n    }\n  };\n\n  isConsentedCategory = (category) => {\n    const { categorizedConsents } = this.state;\n    if (\n      categorizedConsents[category].find((consent) =>\n        this.isConsented(consent.id)\n      )\n    ) {\n      return (\n        categorizedConsents[category].every((consent) =>\n          this.isConsented(consent.id)\n        ) || 'mixed'\n      );\n    } else {\n      return false;\n    }\n  };\n\n  handleOnSubmit = () => {\n    const { trackEventName, token, runOnSave } = this.props;\n    const { consentChanges } = this.state;\n    let consentUpdates: Promise<IConsent>[] = [];\n\n    // analytics\n    trackEventByName(trackEventName, { extra: { consentChanges } });\n\n    this.setState({ isSaving: true, saveButtonStatus: 'disabled' });\n    if (consentChanges) {\n      consentUpdates = Object.keys(consentChanges).map((consentId) => {\n        return token\n          ? updateConsentWithToken(\n              consentId,\n              this.isConsented(consentId),\n              token\n            )\n          : updateConsent(consentId, this.isConsented(consentId));\n      });\n    }\n\n    Promise.all(consentUpdates)\n      .then(() => {\n        this.setState({\n          consentChanges: {},\n          isSaving: false,\n          saveButtonStatus: 'success',\n        });\n        runOnSave && runOnSave();\n      })\n      .catch(() => {\n        this.setState({ saveButtonStatus: 'error' });\n      });\n  };\n\n  render() {\n    const {\n      isSaving,\n      saveButtonStatus,\n      categorizedConsents,\n      isCategoryOpen,\n    } = this.state;\n\n    return (\n      <FormSection id=\"e2e-consent-form\">\n        <form action=\"\">\n          <FormSectionTitle\n            message={messages.notificationsTitle}\n            subtitleMessage={messages.notificationsSubTitle}\n          />\n\n          {Object.entries(categorizedConsents).map(\n            ([category, consents], index) => (\n              <ConsentList\n                key={category}\n                className={`${index === 0 ? 'first' : ''} ${\n                  index === Object.entries(categorizedConsents).length - 1\n                    ? 'last'\n                    : ''\n                }`}\n              >\n                <CategoryCheckboxContainer>\n                  <StyledCheckboxWithPartialCheck\n                    id={category}\n                    checked={this.isConsentedCategory(category)}\n                    onChange={this.handleOnChangeCategory(category)}\n                    label={\n                      <FormattedMessage {...messages[`${category}Category`]} />\n                    }\n                  />\n                  {consents.length > 1 && (\n                    <Button\n                      onClick={this.handleToggleOpenCategory(category)}\n                      buttonStyle=\"text\"\n                      type=\"button\"\n                      ariaExpanded={isCategoryOpen[category]}\n                      padding=\"0px\"\n                    >\n                      {isCategoryOpen[category] ? (\n                        <FormattedMessage {...messages.collapse} />\n                      ) : (\n                        <FormattedMessage {...messages.expand} />\n                      )}\n                      <ArrowIcon\n                        name=\"dropdown\"\n                        className={isCategoryOpen[category] ? 'open' : ''}\n                        ariaHidden\n                      />\n                    </Button>\n                  )}\n                </CategoryCheckboxContainer>\n                <CSSTransition\n                  classNames=\"collapse\"\n                  in={isCategoryOpen[category]}\n                  appear={isCategoryOpen[category]}\n                  timeout={timeout}\n                  mounOnEnter={false}\n                  unmountOnExit={false}\n                  enter={true}\n                  exit={true}\n                >\n                  <AnimatedFieldset>\n                    <ScreenReaderOnly>\n                      <legend>\n                        <FormattedMessage {...messages.ally_categoryLabel} />\n                      </legend>\n                    </ScreenReaderOnly>\n\n                    {consents.length > 1 &&\n                      consents.map((consent, index) => (\n                        <CheckboxContainer\n                          key={consent.id}\n                          className={`${index === 0 ? 'first' : ''} ${\n                            index === consents.length - 1 ? 'last' : ''\n                          }`}\n                        >\n                          <Checkbox\n                            size=\"20px\"\n                            checked={this.isConsented(consent.id)}\n                            onChange={this.handleOnChange(consent)}\n                            label={\n                              <T\n                                value={\n                                  consent.attributes\n                                    .campaign_type_description_multiloc\n                                }\n                              />\n                            }\n                          />\n                        </CheckboxContainer>\n                      ))}\n                  </AnimatedFieldset>\n                </CSSTransition>\n              </ConsentList>\n            )\n          )}\n\n          <StyledSubmitWrapper\n            status={saveButtonStatus}\n            buttonStyle=\"primary\"\n            loading={isSaving}\n            onClick={this.handleOnSubmit}\n            messages={{\n              buttonSave: messages.submit,\n              buttonSuccess: messages.buttonSuccessLabel,\n              messageSuccess: messages.messageSuccess,\n              messageError: messages.messageError,\n            }}\n          />\n        </form>\n      </FormSection>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { colors, fontSizes, isRtl } from 'utils/styleUtils';\nimport { Icon } from 'cl2-component-library';\nimport { get } from 'lodash-es';\n// https://www.w3.org/TR/2016/WD-wai-aria-practices-1.1-20160317/examples/checkbox/checkbox-2.html\n\nconst Container = styled.div<{ size: string }>`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n\n  ${isRtl`\n    flex-direction: row-reverse;\n  `}\n\n  &.hasNoLabel {\n    flex: 0 0 ${({ size }) => parseInt(size, 10) + 2}px;\n    width: ${({ size }) => parseInt(size, 10) + 2}px;\n    height: ${({ size }) => parseInt(size, 10) + 2}px;\n  }\n\n  label {\n    cursor: pointer;\n  }\n\n  &.disabled {\n    cursor: not-allowed;\n    label {\n      cursor: not-allowed;\n    }\n  }\n`;\n\nconst CustomInputWrapper = styled.div<{\n  checked: boolean | 'mixed';\n  size: string;\n}>`\n  position: relative;\n  flex: 0 0 ${({ size }) => parseInt(size, 10)}px;\n  width: ${({ size }) => parseInt(size, 10)}px;\n  height: ${({ size }) => parseInt(size, 10)}px;\n  color: #fff;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: solid 1px ${colors.separationDark};\n  border-radius: ${(props) => props.theme.borderRadius};\n  background: ${(props) => (props.checked ? colors.clGreen : '#fff')};\n  border-color: ${(props) => (props.checked ? colors.clGreen : '#aaa')};\n  box-shadow: inset 0px 1px 1px rgba(0, 0, 0, 0.15);\n\n  &:hover {\n    border-color: ${(props) =>\n      props.checked === 'mixed'\n        ? colors.clBlueLightest\n        : props.checked\n        ? colors.clGreen\n        : '#333'};\n  }\n`;\n\nconst CheckmarkIcon = styled(Icon)`\n  fill: #fff;\n  width: 15px;\n`;\n\nconst Label = styled.label`\n  color: ${colors.label};\n  font-size: ${fontSizes.base}px;\n  line-height: normal;\n  margin-left: 10px;\n\n  ${isRtl`\n    margin-left: 0;\n    margin-right: 10px;\n  `}\n`;\n\ntype DefaultProps = {\n  size?: string;\n};\n\n/**\n * If we have a label, an id is required. Otherwise id is optional.\n */\ntype LabelProps =\n  | {\n      label: string | JSX.Element | null;\n      id: string;\n    }\n  | {\n      label?: undefined;\n      id?: string | undefined;\n    };\n\ntype Props = DefaultProps &\n  LabelProps & {\n    checked: boolean | 'mixed';\n    onChange: (event: React.MouseEvent | React.KeyboardEvent) => void;\n    className?: string;\n    notFocusable?: boolean;\n    disabled?: boolean;\n    'data-testid'?: string;\n  };\n\nexport default class CheckboxWithPartialCheck extends PureComponent<Props> {\n  static defaultProps: DefaultProps = {\n    size: '22px',\n  };\n\n  handleOnClick = (event: React.MouseEvent) => {\n    const { disabled } = this.props;\n    if (!disabled) {\n      const targetElement = get(event, 'target') as any;\n      const parentElement = get(event, 'target.parentElement');\n      const targetElementIsLink =\n        targetElement &&\n        targetElement.hasAttribute &&\n        targetElement.hasAttribute('href');\n      const parentElementIsLink =\n        parentElement &&\n        parentElement.hasAttribute &&\n        parentElement.hasAttribute('href');\n\n      if (!targetElementIsLink && !parentElementIsLink) {\n        event && event.preventDefault();\n        this.props.onChange(event);\n      }\n    }\n  };\n\n  handleOnKeyDown = (event: React.KeyboardEvent) => {\n    const { disabled } = this.props;\n    if (!disabled) {\n      const targetElement = get(event, 'target') as any;\n      const parentElement = get(event, 'target.parentElement');\n      const targetElementIsLink =\n        targetElement &&\n        targetElement.hasAttribute &&\n        targetElement.hasAttribute('href');\n      const parentElementIsLink =\n        parentElement &&\n        parentElement.hasAttribute &&\n        parentElement.hasAttribute('href');\n\n      // if key = Space\n      if (\n        !targetElementIsLink &&\n        !parentElementIsLink &&\n        event.keyCode === 32\n      ) {\n        event && event.preventDefault();\n        this.props.onChange(event);\n      }\n    }\n  };\n\n  removeFocus = (event: React.FormEvent) => {\n    event.preventDefault();\n  };\n\n  render() {\n    const {\n      label,\n      size,\n      checked,\n      className,\n      notFocusable,\n      'data-testid': testid,\n    } = this.props;\n\n    return (\n      <Container\n        size={size as string}\n        onMouseDown={this.removeFocus}\n        onClick={this.handleOnClick}\n        onKeyDown={this.handleOnKeyDown}\n        className={`${className ? className : ''} ${\n          label ? 'hasLabel' : 'hasNoLabel'\n        }`}\n        role=\"checkbox\"\n        aria-checked={checked}\n        tabIndex={notFocusable ? -1 : 0}\n        data-testid={testid}\n      >\n        <CustomInputWrapper size={size as string} checked={checked}>\n          {checked === 'mixed' ? (\n            <CheckmarkIcon ariaHidden name=\"more-options\" />\n          ) : (\n            checked && <CheckmarkIcon ariaHidden name=\"checkmark\" />\n          )}\n        </CustomInputWrapper>\n\n        <Label>{label}</Label>\n      </Container>\n    );\n  }\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams from 'utils/streams';\nimport { Multiloc } from 'typings';\n\nconst CATEGORIES = [\n  'own',\n  'official',\n  'weekly',\n  'mention',\n  'commented',\n  'voted',\n  'admin',\n];\n\nexport interface IConsentData {\n  id: string;\n  type: string;\n  attributes: {\n    campaign_name: string;\n    campaign_type_description_multiloc: Multiloc;\n    consented: boolean;\n    category:\n      | 'own'\n      | 'official'\n      | 'weekly'\n      | 'mention'\n      | 'commented'\n      | 'voted'\n      | 'admin';\n  };\n}\n\ninterface ILinks {\n  self: string;\n  first: string;\n  prev: string;\n  next: string;\n  last: string;\n}\n\nexport interface IConsents {\n  data: IConsentData[];\n  links: ILinks;\n}\n\nexport interface IConsent {\n  data: IConsentData;\n}\n\nexport function getCategorizedConsents(consents: IConsentData[]) {\n  const res = {} as { [category: string]: IConsentData[] };\n  CATEGORIES.forEach((category) => {\n    const categoryConsents = consents.filter(\n      (consent) => consent.attributes.category === category\n    );\n    if (categoryConsents.length > 0) {\n      res[category] = categoryConsents;\n    }\n  });\n  return res;\n}\n\nexport function consentsStream() {\n  return streams.get<IConsents>({ apiEndpoint: `${API_PATH}/consents` });\n}\n\nexport function updateConsent(consentId: string, consented: boolean) {\n  return streams.update<IConsent>(\n    `${API_PATH}/consents/${consentId}`,\n    consentId,\n    { consent: { consented } }\n  );\n}\nexport function updateConsentWithToken(\n  consentId: string,\n  consented: boolean,\n  token: string\n) {\n  return streams.update<IConsent>(\n    `${API_PATH}/consents/${consentId}?unsubscription_token=${token}`,\n    consentId,\n    { consent: { consented } }\n  );\n}\n\nexport function updateConsentByCampaignIDWithToken(\n  campaignId: string,\n  consented: boolean,\n  token: string\n) {\n  return streams.update<IConsent>(\n    `${API_PATH}/consents/by_campaign_id/${campaignId}`,\n    campaignId,\n    { consent: { consented }, unsubscription_token: token }\n  );\n}\n\nexport function consentsWithTokenStream(token: string) {\n  return streams.get<IConsents>({\n    apiEndpoint: `${API_PATH}/consents?unsubscription_token=${token}`,\n  });\n}\n"],"sourceRoot":""}