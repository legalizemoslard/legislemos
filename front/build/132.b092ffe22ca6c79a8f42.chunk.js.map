{"version":3,"sources":["webpack:///./app/modules/commercial/idea_custom_fields/admin/containers/projects/edit/ideaform/index.tsx","webpack:///./app/modules/commercial/idea_custom_fields/admin/containers/projects/edit/ideaform/IdeaCustomField.tsx","webpack:///./app/modules/commercial/idea_custom_fields/services/ideaCustomFields.ts","webpack:///./app/modules/commercial/idea_custom_fields/hooks/useIdeaCustomFields.ts","webpack:///./app/modules/commercial/idea_custom_fields/admin/containers/projects/edit/ideaform/messages.ts"],"names":["Container","styled","div","Header","TitleContainer","StyledSectionTitle","SectionTitle","StyledSubSectionTitle","SubSectionTitle","CollapseExpandAllButton","Button","Content","Footer","ErrorWrapper","IdeaForm","memo","params","className","formatMessage","intl","projectId","useState","changes","setChanges","collapsed","setCollapsed","processing","setProcessing","success","setSuccess","error","setError","ideaCustomFields","allExpanded","Object","getOwnPropertyNames","every","key","useEffect","isNilOrError","isEmpty","newCollapsed","data","forEach","ideaCustomField","id","handleIdeaCustomFieldOnCollapseExpand","useCallback","ideaCustomFieldId","handleCollapseExpandAll","keys","handleIdeaCustomFieldOnChange","updatedProperties","fieldChanges","handleOnSubmit","promises","map","ideaCustomFieldCode","find","item","attributes","code","updateIdeaCustomField","Promise","resolve","all","FormattedMessage","messages","inputForm","SectionDescription","postDescription","Section","buttonStyle","padding","onClick","text","collapseAll","expandAll","index","first","onCollapseExpand","onChange","disabled","saved","save","Success","saveSuccessMessage","showBackground","showIcon","errorMessage","withRouter","injectIntl","QuillMutilocWithLocaleSwitcher","lazy","colors","separation","CustomFieldTitle","adminTextColor","fontSizes","large","ChevronIcon","Icon","label","CollapsedContent","CollapseContainer","CollapseContainerInner","Toggles","LocaleSwitcherLabelText","span","medium","ToggleContainer","StyledToggle","Toggle","disablableFields","alwaysRequiredFields","IdeaCustomField","localize","canSetEnabled","field","canSetRequired","includes","description_multiloc","descriptionMultiloc","setDescriptionMultiloc","enabled","fieldEnabled","setFieldEnabled","required","fieldRequired","setFieldRequired","handleDescriptionOnChange","handleEnabledOnChange","handleRequiredOnChange","removeFocus","event","preventDefault","handleCollapseExpand","onMouseDown","title_multiloc","toLowerCase","value","name","classNames","in","timeout","mounOnEnter","unmountOnExit","enter","exit","checked","labelTextColor","IconTooltip","content","enabledTooltipContent","requiredTooltipContent","Suspense","fallback","Spinner","noImages","noVideos","noAlign","valueMultiloc","descriptionLabel","streamParams","apiEndpoint","API_PATH","streams","get","customFieldCode","object","updateObject","custom_field","update","undefined","setIdeaCustomFields","subscription","ideaCustomFieldsStream","observable","subscribe","unsubscribe","defineMessages","defaultMessage"],"mappings":"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","file":"132.b092ffe22ca6c79a8f42.chunk.js","sourcesContent":["import React, { memo, useState, useCallback, useEffect } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport { isEmpty } from 'lodash-es';\n\n// module specific\nimport useIdeaCustomFields from 'modules/commercial/idea_custom_fields/hooks/useIdeaCustomFields';\nimport {\n  updateIdeaCustomField,\n  IUpdatedIdeaCustomFieldProperties,\n} from 'modules/commercial/idea_custom_fields/services/ideaCustomFields';\n\nimport IdeaCustomField from '../../../../../admin/containers/projects/edit/ideaform/IdeaCustomField';\n\n// components\nimport Button from 'components/UI/Button';\nimport Error from 'components/UI/Error';\nimport { Success } from 'cl2-component-library';\n\nimport {\n  Section,\n  SectionTitle,\n  SectionDescription,\n  SubSectionTitle,\n} from 'components/admin/Section';\n\n// i18n\nimport messages from './messages';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\n\n// styling\nimport styled from 'styled-components';\n\n// typings\nimport { Multiloc } from 'typings';\n\nconst Container = styled.div``;\n\nconst Header = styled.div`\n  width: 100%;\n  max-width: 600px;\n  margin-bottom: 40px;\n`;\n\nconst TitleContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\n\nconst StyledSectionTitle = styled(SectionTitle)`\n  padding: 0;\n  margin: 0;\n`;\n\nconst StyledSubSectionTitle = styled(SubSectionTitle)`\n  font-weight: 500;\n  margin-bottom: 20px;\n`;\n\nconst CollapseExpandAllButton = styled(Button)``;\n\nconst Content = styled.div`\n  width: 100%;\n  max-width: 600px;\n  margin-bottom: 30px;\n`;\n\nconst Footer = styled.div`\n  min-height: 50px;\n  display: flex;\n  align-items: center;\n`;\n\nconst ErrorWrapper = styled.div`\n  flex-grow: 1;\n`;\n\ninterface Props {\n  className?: string;\n}\n\ninterface IChanges {\n  [key: string]: {\n    description_multiloc?: Multiloc;\n    enabled?: boolean;\n  };\n}\n\nconst IdeaForm = memo<Props & WithRouterProps & InjectedIntlProps>(\n  ({ params, className, intl: { formatMessage } }) => {\n    const projectId = params.projectId;\n\n    const [changes, setChanges] = useState<IChanges>({});\n    const [collapsed, setCollapsed] = useState<{ [key: string]: boolean }>({});\n    const [processing, setProcessing] = useState(false);\n    const [success, setSuccess] = useState(false);\n    const [error, setError] = useState(false);\n\n    const ideaCustomFields = useIdeaCustomFields({ projectId });\n\n    const allExpanded = Object.getOwnPropertyNames(collapsed).every(\n      (key) => collapsed[key] === false\n    );\n\n    useEffect(() => {\n      if (!isNilOrError(ideaCustomFields) && isEmpty(collapsed)) {\n        const newCollapsed = {};\n        ideaCustomFields.data.forEach((ideaCustomField) => {\n          newCollapsed[ideaCustomField.id] = true;\n        });\n        setCollapsed(newCollapsed);\n      }\n    }, [ideaCustomFields, collapsed]);\n\n    const handleIdeaCustomFieldOnCollapseExpand = useCallback(\n      (ideaCustomFieldId: string) => {\n        setSuccess(false);\n        setError(false);\n        setCollapsed((collapsed) => ({\n          ...collapsed,\n          [ideaCustomFieldId]: !collapsed[ideaCustomFieldId],\n        }));\n      },\n      []\n    );\n\n    const handleCollapseExpandAll = useCallback(() => {\n      const newCollapsed = {};\n\n      if (!allExpanded) {\n        Object.keys(collapsed).forEach((key) => (newCollapsed[key] = false));\n      } else {\n        Object.keys(collapsed).forEach((key) => (newCollapsed[key] = true));\n      }\n\n      setCollapsed(newCollapsed);\n    }, [collapsed, allExpanded]);\n\n    const handleIdeaCustomFieldOnChange = useCallback(\n      (\n        ideaCustomFieldId: string,\n        updatedProperties: IUpdatedIdeaCustomFieldProperties\n      ) => {\n        setSuccess(false);\n        setError(false);\n        setChanges((changes) => {\n          const fieldChanges = changes[ideaCustomFieldId]\n            ? {\n                ...changes[ideaCustomFieldId],\n                ...updatedProperties,\n              }\n            : {\n                ...updatedProperties,\n              };\n\n          return {\n            ...changes,\n            [ideaCustomFieldId]: {\n              ...fieldChanges,\n            },\n          };\n        });\n      },\n      []\n    );\n\n    const handleOnSubmit = useCallback(async () => {\n      if (!isNilOrError(ideaCustomFields)) {\n        setProcessing(true);\n\n        try {\n          const promises: Promise<any>[] = Object.keys(changes).map(\n            (ideaCustomFieldId) => {\n              const ideaCustomFieldCode = ideaCustomFields.data.find(\n                (item) => item.id === ideaCustomFieldId\n              )?.attributes?.code;\n              return ideaCustomFieldCode\n                ? updateIdeaCustomField(\n                    projectId,\n                    ideaCustomFieldId,\n                    ideaCustomFieldCode,\n                    changes[ideaCustomFieldId]\n                  )\n                : Promise.resolve();\n            }\n          );\n\n          await Promise.all(promises);\n          setChanges({});\n          setProcessing(false);\n          setSuccess(true);\n          setError(false);\n        } catch (error) {\n          setProcessing(false);\n          setSuccess(false);\n          setError(true);\n        }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [changes, ideaCustomFields]);\n\n    if (!isNilOrError(ideaCustomFields)) {\n      return (\n        <Container className={className || ''}>\n          <Header>\n            <TitleContainer>\n              <StyledSectionTitle>\n                <FormattedMessage {...messages.inputForm} />\n              </StyledSectionTitle>\n            </TitleContainer>\n            <SectionDescription>\n              <FormattedMessage {...messages.postDescription} />\n            </SectionDescription>\n          </Header>\n\n          <Content>\n            <Section>\n              <StyledSubSectionTitle>\n                <CollapseExpandAllButton\n                  buttonStyle=\"secondary\"\n                  padding=\"7px 10px\"\n                  onClick={handleCollapseExpandAll}\n                  text={\n                    !allExpanded\n                      ? formatMessage(messages.expandAll)\n                      : formatMessage(messages.collapseAll)\n                  }\n                />\n              </StyledSubSectionTitle>\n              {ideaCustomFields.data.map((ideaCustomField, index) => {\n                return (\n                  <IdeaCustomField\n                    key={ideaCustomField.id}\n                    collapsed={collapsed[ideaCustomField.id]}\n                    first={index === 0}\n                    ideaCustomField={ideaCustomField}\n                    onCollapseExpand={handleIdeaCustomFieldOnCollapseExpand}\n                    onChange={handleIdeaCustomFieldOnChange}\n                  />\n                );\n              })}\n            </Section>\n          </Content>\n\n          <Footer>\n            <Button\n              buttonStyle=\"admin-dark\"\n              onClick={handleOnSubmit}\n              processing={processing}\n              disabled={isEmpty(changes)}\n              id=\"e2e-ideaform-settings-submit\"\n            >\n              {success ? (\n                <FormattedMessage {...messages.saved} />\n              ) : (\n                <FormattedMessage {...messages.save} />\n              )}\n            </Button>\n\n            {success && (\n              <Success\n                text={formatMessage(messages.saveSuccessMessage)}\n                showBackground={false}\n                showIcon={false}\n              />\n            )}\n\n            {error && (\n              <ErrorWrapper>\n                <Error\n                  text={formatMessage(messages.errorMessage)}\n                  showBackground={false}\n                  showIcon={false}\n                />\n              </ErrorWrapper>\n            )}\n          </Footer>\n        </Container>\n      );\n    }\n\n    return null;\n  }\n);\n\nexport default withRouter(injectIntl(IdeaForm));\n","import React, {\n  memo,\n  useCallback,\n  useEffect,\n  useState,\n  lazy,\n  Suspense,\n} from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport CSSTransition from 'react-transition-group/CSSTransition';\n\n// services\nimport {\n  IIdeaCustomFieldData,\n  IUpdatedIdeaCustomFieldProperties /* Visibility */,\n} from 'modules/commercial/idea_custom_fields/services/ideaCustomFields';\n\n// components\nimport { Icon, IconTooltip, Spinner, Toggle } from 'cl2-component-library';\nconst QuillMutilocWithLocaleSwitcher = lazy(() =>\n  import('components/UI/QuillEditor/QuillMultilocWithLocaleSwitcher')\n);\n\n// i18n\nimport T from 'components/T';\nimport messages from './messages';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport injectLocalize, { InjectedLocalized } from 'utils/localize';\n\n// styling\nimport styled from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\n\n// typings\nimport { Multiloc } from 'typings';\n\nconst timeout = 250;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  border-bottom: solid 1px ${colors.separation};\n\n  &.first {\n    border-top: solid 1px ${colors.separation};\n  }\n`;\n\nconst CustomFieldTitle = styled.div`\n  flex: 1;\n  color: ${colors.adminTextColor};\n  font-size: ${fontSizes.large}px;\n  line-height: normal;\n  font-weight: 500;\n`;\n\nconst ChevronIcon = styled(Icon)`\n  width: 12px;\n  height: 12px;\n  fill: ${colors.label};\n  margin-left: 20px;\n  transition: fill 80ms ease-out, transform 200ms ease-out;\n`;\n\nconst CollapsedContent = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-top: 15px;\n  padding-bottom: 15px;\n  cursor: pointer;\n\n  &.expanded {\n    ${ChevronIcon} {\n      transform: rotate(90deg);\n    }\n  }\n\n  &:hover {\n    ${ChevronIcon} {\n      fill: #000;\n    }\n  }\n`;\n\nconst CollapseContainer = styled.div`\n  opacity: 0;\n  display: none;\n  transition: all ${timeout}ms cubic-bezier(0.165, 0.84, 0.44, 1);\n  will-change: opacity, height;\n\n  &.collapse-enter {\n    opacity: 0;\n    max-height: 0px;\n    overflow: hidden;\n    display: block;\n\n    &.collapse-enter-active {\n      opacity: 1;\n      max-height: 600px;\n      overflow: hidden;\n      display: block;\n    }\n  }\n\n  &.collapse-enter-done {\n    opacity: 1;\n    overflow: visible;\n    display: block;\n  }\n\n  &.collapse-exit {\n    opacity: 1;\n    max-height: 600px;\n    overflow: hidden;\n    display: block;\n\n    &.collapse-exit-active {\n      opacity: 0;\n      max-height: 0px;\n      overflow: hidden;\n      display: block;\n    }\n  }\n\n  &.collapse-exit-done {\n    display: none;\n  }\n`;\n\nconst CollapseContainerInner = styled.div`\n  padding-top: 10px;\n  margin-bottom: 25px;\n`;\n\nconst Toggles = styled.div`\n  margin-bottom: 30px;\n`;\n\nconst LocaleSwitcherLabelText = styled.span`\n  font-weight: 500;\n  color: ${colors.adminTextColor};\n  font-size: ${fontSizes.medium}px;\n`;\n\nconst ToggleContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nconst StyledToggle = styled(Toggle)`\n  margin-right: 10px;\n`;\n\ninterface Props {\n  ideaCustomField: IIdeaCustomFieldData;\n  collapsed: boolean;\n  first?: boolean;\n  onCollapseExpand: (ideaCustomFieldId: string) => void;\n  onChange: (\n    ideaCustomFieldId: string,\n    updatedProperties: IUpdatedIdeaCustomFieldProperties\n  ) => void;\n  className?: string;\n}\n\nconst disablableFields = [\n  'topic_ids',\n  'location',\n  'attachments',\n  'proposed_budget',\n];\nconst alwaysRequiredFields = ['title', 'body'];\n\nconst IdeaCustomField = memo<Props & InjectedLocalized>(\n  ({\n    ideaCustomField,\n    collapsed,\n    first,\n    onChange,\n    onCollapseExpand,\n    className,\n    localize,\n  }) => {\n    const canSetEnabled = disablableFields.find(\n      (field) => field === ideaCustomField.attributes.key\n    );\n    const canSetRequired = !alwaysRequiredFields.includes(\n      ideaCustomField.attributes.key\n    );\n\n    const [descriptionMultiloc, setDescriptionMultiloc] = useState(\n      ideaCustomField.attributes.description_multiloc\n    );\n    const [fieldEnabled, setFieldEnabled] = useState(\n      ideaCustomField.attributes.enabled\n    );\n    const [fieldRequired, setFieldRequired] = useState(\n      ideaCustomField.attributes.required\n    );\n\n    const handleDescriptionOnChange = useCallback(\n      (description_multiloc: Multiloc) => {\n        setDescriptionMultiloc(description_multiloc);\n      },\n      []\n    );\n\n    useEffect(() => {\n      onChange(ideaCustomField.id, {\n        description_multiloc: descriptionMultiloc,\n      });\n    }, [descriptionMultiloc, ideaCustomField, onChange]);\n\n    const handleEnabledOnChange = useCallback(() => {\n      setFieldEnabled((fieldEnabled) => !fieldEnabled);\n    }, []);\n\n    useEffect(() => {\n      onChange(ideaCustomField.id, { enabled: fieldEnabled });\n    }, [fieldEnabled, ideaCustomField, onChange]);\n\n    const handleRequiredOnChange = useCallback(() => {\n      setFieldRequired((fieldRequired) => !fieldRequired);\n    }, []);\n\n    useEffect(() => {\n      onChange(ideaCustomField.id, { required: fieldRequired });\n    }, [fieldRequired, ideaCustomField, onChange]);\n\n    const removeFocus = useCallback((event: React.MouseEvent) => {\n      event.preventDefault();\n    }, []);\n\n    const handleCollapseExpand = useCallback(() => {\n      onCollapseExpand(ideaCustomField.id);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ideaCustomField]);\n\n    if (!isNilOrError(ideaCustomField)) {\n      return (\n        <Container className={`${className || ''} ${first ? 'first' : ''}`}>\n          <CollapsedContent\n            onMouseDown={removeFocus}\n            onClick={handleCollapseExpand}\n            className={`\n            ${collapsed ? 'collapsed' : 'expanded'}\n            e2e-${localize(\n              ideaCustomField.attributes.title_multiloc\n            ).toLowerCase()}-setting-collapsed\n          `}\n          >\n            <CustomFieldTitle>\n              <T value={ideaCustomField.attributes.title_multiloc} />\n            </CustomFieldTitle>\n            <ChevronIcon name=\"chevron-right\" />\n          </CollapsedContent>\n\n          <CSSTransition\n            classNames=\"collapse\"\n            in={collapsed === false}\n            timeout={timeout}\n            mounOnEnter={true}\n            unmountOnExit={true}\n            enter={true}\n            exit={true}\n          >\n            <CollapseContainer>\n              <CollapseContainerInner>\n                <Toggles>\n                  {canSetEnabled && (\n                    <ToggleContainer>\n                      <StyledToggle\n                        checked={fieldEnabled}\n                        onChange={handleEnabledOnChange}\n                        label={<FormattedMessage {...messages.enabled} />}\n                        labelTextColor={colors.adminTextColor}\n                        className={`\n                        e2e-${localize(\n                          ideaCustomField.attributes.title_multiloc\n                        ).toLowerCase()}-enabled-toggle-label\n                      `}\n                      />\n                      <IconTooltip\n                        content={\n                          <FormattedMessage\n                            {...messages.enabledTooltipContent}\n                          />\n                        }\n                      />\n                    </ToggleContainer>\n                  )}\n                  {fieldEnabled && canSetRequired && (\n                    <ToggleContainer>\n                      <StyledToggle\n                        checked={fieldRequired}\n                        onChange={handleRequiredOnChange}\n                        label={<FormattedMessage {...messages.required} />}\n                        labelTextColor={colors.adminTextColor}\n                        className={`\n                        e2e-${localize(\n                          ideaCustomField.attributes.title_multiloc\n                        ).toLowerCase()}-required-toggle-label\n                      `}\n                      />\n                      <IconTooltip\n                        content={\n                          <FormattedMessage\n                            {...messages.requiredTooltipContent}\n                          />\n                        }\n                      />\n                    </ToggleContainer>\n                  )}\n                </Toggles>\n\n                {fieldEnabled && (\n                  <Suspense fallback={<Spinner />}>\n                    <QuillMutilocWithLocaleSwitcher\n                      id={`${ideaCustomField.id}-description`}\n                      noImages={true}\n                      noVideos={true}\n                      noAlign={true}\n                      valueMultiloc={descriptionMultiloc}\n                      onChange={handleDescriptionOnChange}\n                      label={\n                        <LocaleSwitcherLabelText>\n                          <FormattedMessage {...messages.descriptionLabel} />\n                        </LocaleSwitcherLabelText>\n                      }\n                    />\n                  </Suspense>\n                )}\n              </CollapseContainerInner>\n            </CollapseContainer>\n          </CSSTransition>\n        </Container>\n      );\n    }\n\n    return null;\n  }\n);\n\nexport default injectLocalize(IdeaCustomField);\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { Multiloc } from 'typings';\nimport { CustomFieldCodes } from 'services/ideaCustomFieldsSchemas';\n\nexport type Visibility = 'admins' | 'public';\ntype CustomFieldKeys = CustomFieldCodes;\n\nexport interface IIdeaCustomFieldData {\n  id: string;\n  type: 'custom_field';\n  attributes: {\n    key: CustomFieldKeys;\n    input_type: 'text' | 'multiselect' | 'custom';\n    title_multiloc: Multiloc;\n    description_multiloc: Multiloc;\n    required: boolean;\n    ordering: null;\n    enabled: boolean;\n    code: CustomFieldCodes;\n    created_at: null;\n    updated_at: null;\n    visible_to: Visibility;\n  };\n}\n\nexport interface IIdeaCustomField {\n  data: IIdeaCustomFieldData;\n}\n\nexport interface IIdeaCustomFields {\n  data: IIdeaCustomFieldData[];\n}\n\nexport interface IUpdatedIdeaCustomFieldProperties {\n  description_multiloc?: Multiloc;\n  enabled?: boolean;\n  required?: boolean;\n  visible_to?: Visibility;\n}\n\nexport function ideaCustomFieldsStream(\n  projectId: string,\n  streamParams: IStreamParams | null = null\n) {\n  const apiEndpoint = `${API_PATH}/projects/${projectId}/custom_fields`;\n  return streams.get<IIdeaCustomFields>({ apiEndpoint, ...streamParams });\n}\n\nexport function ideaCustomFieldByCodeStream(\n  projectId: string,\n  customFieldCode: CustomFieldCodes,\n  streamParams: IStreamParams | null = null\n) {\n  const apiEndpoint = `${API_PATH}/projects/${projectId}/custom_fields/by_code/${customFieldCode}`;\n  return streams.get<IIdeaCustomField>({ apiEndpoint, ...streamParams });\n}\n\nexport function ideaCustomFieldStream(\n  projectId: string,\n  ideaCustomFieldId: string,\n  streamParams: IStreamParams | null = null\n) {\n  const apiEndpoint = `${API_PATH}/projects/${projectId}/custom_fields/${ideaCustomFieldId}`;\n  return streams.get<IIdeaCustomField>({ apiEndpoint, ...streamParams });\n}\n\nexport function updateIdeaCustomField(\n  projectId: string,\n  ideaCustomFieldId: string,\n  code: string,\n  object: IUpdatedIdeaCustomFieldProperties\n) {\n  const apiEndpoint = `${API_PATH}/projects/${projectId}/custom_fields/by_code/${code}`;\n  const updateObject = { custom_field: object };\n  return streams.update<IIdeaCustomField>(\n    apiEndpoint,\n    ideaCustomFieldId,\n    updateObject\n  );\n}\n","import { useState, useEffect } from 'react';\nimport {\n  ideaCustomFieldsStream,\n  IIdeaCustomFields,\n} from '../services/ideaCustomFields';\n\ninterface Props {\n  projectId: string;\n}\n\nexport default function useIdeaCustomFields({ projectId }: Props) {\n  const [ideaCustomFields, setIdeaCustomFields] = useState<\n    IIdeaCustomFields | undefined | null | Error\n  >(undefined);\n\n  useEffect(() => {\n    const subscription = ideaCustomFieldsStream(projectId).observable.subscribe(\n      (ideaCustomFields) => {\n        setIdeaCustomFields(ideaCustomFields);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, [projectId]);\n\n  return ideaCustomFields;\n}\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  inputForm: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.inputForm',\n    defaultMessage: 'Input form',\n  },\n  postDescription: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.postDescription',\n    defaultMessage:\n      'Specify what information should be provided, add short descriptions or instructions to guide participant responses and specify whether each field is optional or required',\n  },\n  save: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.save',\n    defaultMessage: 'Save',\n  },\n  saved: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.saved',\n    defaultMessage: 'Saved!',\n  },\n  saveSuccessMessage: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.saveSuccessMessage',\n    defaultMessage: 'Your changes have been saved successfully.',\n  },\n  errorMessage: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.errorMessage',\n    defaultMessage: 'Something went wrong, please try again later',\n  },\n  descriptionLabel: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.descriptionLabel',\n    defaultMessage: 'Field description',\n  },\n  collapseAll: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.collapseAll',\n    defaultMessage: 'Collapse all fields',\n  },\n  expandAll: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.expandAll',\n    defaultMessage: 'Expand all fields',\n  },\n  enabled: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.enabled',\n    defaultMessage: 'Enabled',\n  },\n  required: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.required',\n    defaultMessage: 'Required',\n  },\n  enabledTooltipContent: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.enabledTooltipContent',\n    defaultMessage: 'Include this field.',\n  },\n  requiredTooltipContent: {\n    id: 'app.containers.AdminPage.ProjectIdeaForm.requiredTooltipContent',\n    defaultMessage: 'Require this field to be filled in.',\n  },\n});\n"],"sourceRoot":""}