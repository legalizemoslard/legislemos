{"version":3,"sources":["webpack:///./app/resources/GetComments.tsx"],"names":["GetComments","props","pageNumber","pageSize","sort","state","hasMore","loadMore$","next","sort$","commentsList","undefined","loadingInital","loadingMore","this","postId$","BehaviorSubject","postId","postType$","postType","initialQueryParameters","subscription","combineLatest","pipe","distinctUntilChanged","switchMap","tap","setState","mergeScan","commentsForIdeaStream","commentsForInitiativeStream","queryParameters","observable","map","comments","selfLink","get","lastLink","isString","isNilOrError","data","unionBy","subscribe","unsubscribe","children","onLoadMore","loadMore","onChangeSort","changeSort","React","Component"],"mappings":"qYAAA,eACA,YACA,YAOA,YAMA,YACA,Y,yhCA4BqBA,E,0CAYnB,WAAYC,GAAc,kCACxB,cAAMA,IADkB,mTANyB,CACjDC,WAAY,EACZC,SAAU,GACVC,KAAM,UAGkB,0CA0Ff,WACL,EAAKC,MAAMC,SACb,EAAKC,UAAUC,KAAK,UA5FE,4CAgGb,SAACJ,GACZ,EAAKK,MAAMD,KAAKJ,MA/FhB,EAAKC,MAAQ,CACXK,kBAAcC,EACdC,eAAe,EACfC,aAAa,EACbP,SAAS,GANa,E,sDAU1B,WAAoB,WAClBQ,KAAKC,QAAU,IAAIC,kBAAgBF,KAAKb,MAAMgB,QAC9CH,KAAKI,UAAY,IAAIF,kBAAgBF,KAAKb,MAAMkB,UAChDL,KAAKL,MAAQ,IAAIO,kBAAgBF,KAAKM,uBAAuBhB,MAC7DU,KAAKP,UAAY,IAAIS,kBAAgB,MAErCF,KAAKO,cAAe,IAAAC,eAClBR,KAAKC,QAAQQ,MAAK,IAAAC,yBAClBV,KAAKI,UAAUK,MAAK,IAAAC,yBACpBV,KAAKL,MAAMc,MAAK,IAAAC,0BAEfD,MACC,IAAAE,YAAU,YAA8B,yBAA5BR,EAA4B,KAApBE,EAAoB,KAAVf,EAAU,KAClCM,OAIQC,EACRT,EAAa,EAAKkB,uBAAuBlB,WACvCC,EAAW,EAAKiB,uBAAuBjB,SACzCG,GAAU,EAEd,OAAO,EAAKC,UAAUgB,MACpB,IAAAG,MAAI,kBACF,EAAKC,SAAS,CACZf,cAA8B,IAAfV,EACfW,YAAaX,EAAa,QAG9B,IAAA0B,YAAU,WAQR,OAPA1B,GAA0B,GAGX,SAAbiB,EACIU,wBACAC,+BAEgBb,EAAQ,CAC5Bc,gBAAiB,CACf3B,OACA,eAAgBF,EAChB,aAAcC,KAEf6B,WAAWT,MACZ,IAAAU,MAAI,SAACC,GACH,IAAMC,GAAW,IAAAC,KAAIF,EAAU,cACzBG,GAAW,IAAAD,KAAIF,EAAU,cAQ/B,OAPA5B,GACE,IAAAgC,UAASH,KACT,IAAAG,UAASD,IACTF,IAAaE,EACf3B,GAAgB,IAAA6B,cAAa7B,GAEzBwB,EAASM,MADT,IAAAC,SAAQ/B,EAAcwB,EAASM,KAAM,MAElC,WAGV,OACH,IAAAP,MAAI,iBAAO,CAAE/B,aAAYQ,eAAcJ,mBAI5CoC,WAAU,YAA+B,IAA5BhC,EAA4B,EAA5BA,aAAcJ,EAAc,EAAdA,QAC1B,EAAKqB,SAAS,CACZjB,eACAJ,UACAM,eAAe,EACfC,aAAa,S,gCAKrB,WACEC,KAAKC,QAAQP,KAAKM,KAAKb,MAAMgB,U,kCAG/B,WACEH,KAAKO,aAAasB,gB,oBAapB,WAEE,OAAQC,EADa9B,KAAKb,MAAlB2C,UACA,EAAD,KACF9B,KAAKT,OADH,IAELwC,WAAY/B,KAAKgC,SACjBC,aAAcjC,KAAKkC,kB,GArHgBC,UAAMC,W","file":"188.32c1d0c1d462c89c079d.chunk.js","sourcesContent":["import React from 'react';\nimport { BehaviorSubject, Subscription, combineLatest } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  mergeScan,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport {\n  ICommentData,\n  commentsForIdeaStream,\n  commentsForInitiativeStream,\n  CommentsSort,\n} from 'services/comments';\nimport { unionBy, isString, get } from 'lodash-es';\nimport { isNilOrError } from 'utils/helperUtils';\n\ntype children = (renderProps: GetCommentsChildProps) => JSX.Element | null;\n\ninterface Props {\n  postId: string;\n  children?: children;\n  postType: 'idea' | 'initiative';\n}\n\ninterface State {\n  commentsList: ICommentData[] | undefined | null | Error;\n  loadingInital: boolean;\n  loadingMore: boolean;\n  hasMore: boolean;\n}\n\ninterface IQueryParameters {\n  pageNumber: number;\n  pageSize: number;\n  sort: CommentsSort;\n}\n\nexport interface GetCommentsChildProps extends State {\n  onLoadMore: () => void;\n  onChangeSort: (sort: CommentsSort) => void;\n}\n\nexport default class GetComments extends React.Component<Props, State> {\n  private postId$: BehaviorSubject<string>;\n  private postType$: BehaviorSubject<string>;\n  private sort$: BehaviorSubject<CommentsSort>;\n  private loadMore$: BehaviorSubject<null>;\n  private subscription: Subscription;\n  private initialQueryParameters: IQueryParameters = {\n    pageNumber: 0,\n    pageSize: 15,\n    sort: '-new',\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      commentsList: undefined,\n      loadingInital: false,\n      loadingMore: false,\n      hasMore: true,\n    };\n  }\n\n  componentDidMount() {\n    this.postId$ = new BehaviorSubject(this.props.postId);\n    this.postType$ = new BehaviorSubject(this.props.postType);\n    this.sort$ = new BehaviorSubject(this.initialQueryParameters.sort);\n    this.loadMore$ = new BehaviorSubject(null);\n\n    this.subscription = combineLatest(\n      this.postId$.pipe(distinctUntilChanged()),\n      this.postType$.pipe(distinctUntilChanged()),\n      this.sort$.pipe(distinctUntilChanged())\n    )\n      .pipe(\n        switchMap(([postId, postType, sort]) => {\n          let commentsList:\n            | ICommentData[]\n            | undefined\n            | null\n            | Error = undefined;\n          let pageNumber = this.initialQueryParameters.pageNumber;\n          const pageSize = this.initialQueryParameters.pageSize;\n          let hasMore = true;\n\n          return this.loadMore$.pipe(\n            tap(() =>\n              this.setState({\n                loadingInital: pageNumber === 0,\n                loadingMore: pageNumber > 0,\n              })\n            ),\n            mergeScan(() => {\n              pageNumber = pageNumber + 1;\n\n              const commentsStream =\n                postType === 'idea'\n                  ? commentsForIdeaStream\n                  : commentsForInitiativeStream;\n\n              return commentsStream(postId, {\n                queryParameters: {\n                  sort,\n                  'page[number]': pageNumber,\n                  'page[size]': pageSize,\n                },\n              }).observable.pipe(\n                map((comments) => {\n                  const selfLink = get(comments, 'links.self');\n                  const lastLink = get(comments, 'links.last');\n                  hasMore =\n                    isString(selfLink) &&\n                    isString(lastLink) &&\n                    selfLink !== lastLink;\n                  commentsList = !isNilOrError(commentsList)\n                    ? unionBy(commentsList, comments.data, 'id')\n                    : comments.data;\n                  return null;\n                })\n              );\n            }, null),\n            map(() => ({ pageNumber, commentsList, hasMore }))\n          );\n        })\n      )\n      .subscribe(({ commentsList, hasMore }) => {\n        this.setState({\n          commentsList,\n          hasMore,\n          loadingInital: false,\n          loadingMore: false,\n        });\n      });\n  }\n\n  componentDidUpdate() {\n    this.postId$.next(this.props.postId);\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  loadMore = () => {\n    if (this.state.hasMore) {\n      this.loadMore$.next(null);\n    }\n  };\n\n  changeSort = (sort: CommentsSort) => {\n    this.sort$.next(sort);\n  };\n\n  render() {\n    const { children } = this.props;\n    return (children as children)({\n      ...this.state,\n      onLoadMore: this.loadMore,\n      onChangeSort: this.changeSort,\n    });\n  }\n}\n"],"sourceRoot":""}