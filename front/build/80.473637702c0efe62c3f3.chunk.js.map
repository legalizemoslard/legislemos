{"version":3,"sources":["webpack:///./app/modules/commercial/insights/hooks/useInsightsInputsLoadMore.ts","webpack:///./app/modules/commercial/insights/hooks/useInsightsCategories.tsx","webpack:///./app/modules/commercial/insights/admin/components/Navigation/index.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Insights/Details/Categories/index.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Insights/Details/Inputs/index.tsx","webpack:///./app/modules/commercial/insights/admin/components/Category/index.tsx","webpack:///./app/modules/commercial/insights/services/insightsNetwork.ts","webpack:///./app/modules/commercial/insights/hooks/useInsightsInput.ts","webpack:///./app/modules/commercial/insights/admin/components/Idea/index.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Insights/Details/Network/index.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Insights/Details/Inputs/InputCard.tsx","webpack:///./app/hooks/useKeyPress.ts","webpack:///./app/modules/commercial/insights/admin/containers/Insights/Details/Inputs/Empty.tsx","webpack:///./app/modules/commercial/insights/services/insightsInputs.ts","webpack:///./app/modules/commercial/insights/admin/containers/Insights/Details/index.tsx","webpack:///./app/modules/commercial/insights/hooks/useInsightsNetwork.ts","webpack:///./app/modules/commercial/insights/hooks/useInsightsCategory.tsx","webpack:///./app/modules/commercial/insights/admin/containers/Insights/Details/Preview/index.tsx"],"names":["viewId","queryParameters","useState","undefined","insightsInputs","setInsightsInputs","hasMore","setHasMore","loading","setLoading","pageNumber","setPageNumber","category","search","useEffect","subscription","insightsInputsStream","observable","subscribe","prevInsightsInputs","isNilOrError","data","unionBy","links","next","unsubscribe","onLoadMore","list","insightsCategories","setInsightsCategories","insightsCategoriesStream","StyledNavigation","styled","div","StyledChevronButton","Button","moveUp","moveDown","isMoveUpDisabled","isMoveDownDisabled","upArrow","downArrow","iconSize","locale","icon","buttonStyle","onClick","disabled","id","CategoriesTitle","h1","colors","adminTextColor","fontSizes","large","StyledTag","Tag","EmptyStateTitle","p","base","withRouter","injectIntl","location","pathname","query","params","formatMessage","intl","children","seeAllCategories","setSeeAllCategories","categories","Box","display","flexDirection","w","h","bgColor","padding","messages","categoriesTitle","IconTooltip","className","content","categoriesTitleTooltip","length","justifyContent","alignItems","filter","_","i","map","key","label","attributes","name","variant","count","inputs_count","clHistory","push","stringify","addQueryPrefix","categoriesSeeLess","categoriesSeeAll","linkTo","iconPos","editCategories","clBlueLightest","color","borderRadius","categoriesEmptyTitle","categoriesEmptyDescription","categoriesEmptyButton","InputsContainer","emailBg","separation","StyledSearch","Search","onPreviewInput","inputs","previewedInputId","onSearch","useCallback","replace","onChange","size","input","onReadMore","processing","textColor","inputsLoadMore","inputId","withAction","handleCategoryAction","deleteInsightsInputCategory","addInsightsInputCategory","onIconClick","insightsViewId","streamParams","streams","get","apiEndpoint","API_PATH","getInsightsInputsEndpoint","insightsInput","setInsightsInput","insightsInputStream","IdeaTitle","h2","xl","IdeaBody","ideaId","idea","value","title_multiloc","body_multiloc","supportHtml","zoomStep","initialCenter","setInitialCenter","height","setHeight","width","setWidth","zoomLevel","setZoomLevel","collapsedClusters","setCollapsedClusters","forceRef","useRef","network","current","d3Force","strength","distance","distanceMax","d3","forceCollide","radius","node","cluster_id","val","clusterIds","useMemo","nodes","networkAttributes","cloneDeep","containerRef","getBoundingClientRect","ref","position","cooldownTicks","nodeRelSize","onNodeClick","clusterId","includes","zoom","centerAt","x","y","graphData","onEngineStop","zoomToFit","nodeCanvasObjectMode","nodeCanvasObject","ctx","globalScale","isClusterNode","fontSize","font","textAlign","textBaseline","fillStyle","lineHeight","lines","split","fillText","enableNodeDrag","nodeVisibility","linkVisibility","link","source","target","onZoomEnd","k","minHeight","bottom","right","Container","isActive","border","InputTitle","text","InputBody","small","relationships","maxLength","fontWeight","inputsReadMore","targetKey","keyPressed","setKeyPressed","downHandler","upHandler","window","addEventListener","removeEventListener","inputsEmptyTitle","inputsEmptyDescription","skipSanitizationFor","cacheStream","insightsInputId","insightsCategoryId","delete","response","fetchAllWith","partialApiEndpoint","add","type","stylingConsts","menuHeight","topBarHeight","media","smallerThan1280px","Left","isPreviewOpen","setIsPreviewOpen","previewedInputIndex","setPreviewedInputIndex","movedUpDown","setMovedUpDown","prevSelectedIndex","closePreview","indexOf","insightsNetwork","setInsightsNetwork","insightsNetworkStream","insightsCategory","setInsightsCategory","insightsCategoryStream","CloseButton","CategoryList","previewedInput","previewRef","scrollTo","Spinner","boxShadow","boxShadowHover"],"mappings":"uNAAA,YACA,YAIA,YACA,Y,EASkC,SAChCA,EACAC,GAEA,OAA4C,IAAAC,eAE1CC,GAFF,qBAAOC,EAAP,KAAuBC,EAAvB,KAGA,GAA8B,IAAAH,UAAyB,MAAvD,qBAAOI,EAAP,KAAgBC,EAAhB,KACA,GAA8B,IAAAL,WAAkB,GAAhD,qBAAOM,EAAP,KAAgBC,EAAhB,KACA,GAAoC,IAAAP,UAAS,GAA7C,qBAAOQ,EAAP,KAAmBC,EAAnB,KAEMC,EAAWX,aAAH,EAAGA,EAAiBW,SAC5BC,EAASZ,aAAH,EAAGA,EAAiBY,QAGhC,IAAAC,YAAU,WACRH,EAAc,KACb,CAACC,EAAUC,KAEd,IAAAC,YAAU,WACRL,GAAW,GACX,IAAMM,GAAe,IAAAC,sBAAqBhB,EAAQ,CAChDC,gBAAiB,CACfW,WACAC,SACA,eAAgBH,GAAc,EAC9B,aAjCgB,MAmCjBO,WAAWC,WAAU,SAACd,GAAmB,MAC1CC,GAAkB,SAACc,GAAD,OACf,IAAAC,cAAaD,IAAsC,IAAfT,EAEjCN,EAAeiB,MADf,IAAAC,SAAQH,EAAoBf,EAAeiB,KAAM,SAGvDd,IAAY,IAAAa,cAAA,UAAahB,EAAemB,aAA5B,aAAa,EAAsBC,OAC/Cf,GAAW,MAGb,OAAO,kBAAMM,EAAaU,iBACzB,CAACzB,EAAQU,EAAYE,EAAUC,IAMlC,MAAO,CACLP,UACAE,UACAkB,WAPiB,WACjBf,EAAcD,EAAa,IAO3BiB,KAAMvB,I,sJChEV,YACA,Y,EAK8B,SAACJ,GAC7B,OAAoD,IAAAE,eAElDC,GAFF,qBAAOyB,EAAP,KAA2BC,EAA3B,KAcA,OAVA,IAAAf,YAAU,WACR,IAAMC,GAAe,IAAAe,0BAAyB9B,GAAQiB,WAAWC,WAC/D,SAACU,GACCC,EAAsBD,EAAmBP,SAI7C,OAAO,kBAAMN,EAAaU,iBACzB,CAACzB,IAEG4B,G,2MCrBT,M,ybAAA,YACA,eAEA,YAGA,e,+HAEA,IAAMG,EAAmBC,UAAOC,IAAV,mFAAGD,CAAH,8CAMhBE,GAAsB,aAAOC,UAAV,sFAAG,CAAH,mE,EAeN,SAAC,GAKG,IAJrBC,EAIqB,EAJrBA,OACAC,EAGqB,EAHrBA,SACAC,EAEqB,EAFrBA,iBACAC,EACqB,EADrBA,mBAEMC,GAAU,aAAY,WACtBC,GAAY,aAAY,aAe9B,OAZA,IAAA3B,YAAU,WACJ0B,IAAYF,GACdF,MAED,CAACI,EAASJ,EAAQE,KAErB,IAAAxB,YAAU,WACJ2B,IAAcF,GAChBF,MAED,CAACI,EAAWJ,EAAUE,IAGvB,wBAACR,EAAD,CAAkB,cAAY,iCAC5B,wBAACG,EAAD,CACEQ,SAAS,MACTC,OAAO,KACPC,KAAK,aACLC,YAAY,qBACZC,QAASV,EACTW,SAAUT,EACVU,GAAG,oCAEL,wBAACd,EAAD,CACEQ,SAAS,MACTC,OAAO,KACPC,KAAK,eACLC,YAAY,qBACZC,QAAST,EACTU,SAAUR,EACVS,GAAG,wC,6UCrEX,E,ybAAA,YACA,YAGA,YACA,eACA,YAGA,eAGA,eACA,YACA,eAGA,eACA,YAGA,eAEA,Y,0sBAIA,IAAMC,EAAkBjB,UAAOkB,GAAV,kFAAGlB,CAAH,8FACVmB,SAAOC,eACHC,YAAUC,OAQnBC,GAAY,aAAOC,WAAV,4EAAG,CAAH,yCAKTC,EAAkBzB,UAAO0B,EAAV,kFAAG1B,CAAH,yDAGNqB,YAAUM,M,0BAIc,EAEvC,I,GA0He,IAAAC,aAAW,IAAAC,aA1HkB,SAAC,GAKvC,QAJJC,SAAYC,EAIR,EAJQA,SAAUC,EAIlB,EAJkBA,MACZhE,EAGN,EAHJiE,OAAUjE,OACFkE,EAEJ,EAFJC,KAAQD,cACRE,EACI,EADJA,SAEA,GAAgD,IAAAlE,WAAS,GAAzD,qBAAOmE,EAAP,KAAyBC,EAAzB,KACMC,GAAa,aAAsBvE,GAEzC,IAAI,IAAAoB,cAAamD,GACf,OAAO,KAkBT,OACE,wBAAC,EAAAC,IAAD,CAAKC,QAAQ,OAAOC,cAAc,SAASC,EAAE,OAAOC,EAAE,QACpD,wBAAC,EAAAJ,IAAD,CACEK,QAAQ,OACRC,QAAQ,OACR,cAAY,6BAEZ,wBAAC7B,EAAD,KACGiB,EAAca,UAASC,iBACxB,wBAAC,EAAAC,YAAD,CACEC,UAAU,cACVC,QAASjB,EAAca,UAASK,2BAGnCb,EAAWc,OAAS,EACnB,wBAAC,EAAAb,IAAD,CACEC,QAAQ,OACRa,eAAe,gBACfC,WAAW,cAEX,wBAAC,EAAAf,IAAD,CAAKG,EAAE,OACJJ,EAEEiB,QAAO,SAACC,EAAGC,GAAJ,QACLrB,GAAmBqB,EAtDC,KAwDtBC,KAAI,SAAC/E,GAAD,OACH,wBAAC2C,EAAD,CACEqC,IAAKhF,EAASoC,GACd6C,MAAOjF,EAASkF,WAAWC,KAC3BC,QACEhC,EAAMpD,WAAaA,EAASoC,GAAK,UAAY,UAE/CiD,MAAOrF,EAASkF,WAAWI,aAC3BpD,SAjDWE,EAiDkBpC,EAASoC,GAjDZ,WAC1C,IAAMpC,EAAWoD,EAAMpD,WAAaoC,OAAK7C,EAAY6C,EACrDmD,UAAUC,KAAK,CACbrC,WACAlD,QAAQ,IAAAwF,WAAA,OACDrC,GADC,IACMpD,WAAUF,WAAY,IAClC,CAAE4F,gBAAgB,UANI,IAACtD,KAoDjB,wBAAC,EAAAwB,IAAD,CAAKC,QAAQ,QACVF,EAAWc,OApEW,GAqErB,wBAAC,UAAD,CACExC,YAAY,OACZiC,QAAQ,MACRhC,QA9Ca,WAC7BwB,GAAqBD,KAgDDH,EADHG,EACiBU,UAASwB,kBACTxB,UAASyB,qBAKnC,wBAAC,UAAD,CACE3D,YAAY,aACZ4D,OAAM,UAAK1C,EAAL,SACNnB,KAAK,aACL8D,QAAQ,SAEPxC,EAAca,UAAS4B,kBAI5B,wBAAC,EAAAnC,IAAD,CACEC,QAAQ,OACRa,eAAe,gBACfC,WAAW,SACXT,QAAQ,YACRD,QAAS1B,SAAOyD,eAChBC,MAAO1D,SAAOC,eACd0D,aAAa,MACb,cAAY,kCAEZ,wBAAC,EAAAtC,IAAD,CAAKG,EAAE,OACL,wBAAClB,EAAD,CAAiByB,UAAU,SACxBhB,EAAca,UAASgC,uBAE1B,qCAAK7C,EAAca,UAASiC,8BAG9B,wBAAC,UAAD,CACEnE,YAAY,aACZ4D,OAAM,UAAK1C,EAAL,SACNnB,KAAK,aACL8D,QAAQ,SAEPxC,EAAca,UAASkC,0BAK/B7C,O,yOCxKP,M,ybAAA,YACA,YAGA,eACA,YAGA,eACA,YAGA,eACA,eACA,eACA,eAGA,YAEA,e,+HAKA,IAAM8C,EAAkBlF,UAAOC,IAAV,0EAAGD,CAAH,gGAICmB,SAAOgE,QACFhE,SAAOiE,YAG5BC,GAAe,aAAOC,WAAV,uEAAG,CAAH,yB,GAgEH,IAAA1D,aAAW,IAAAC,aAnDX,SAAC,GAQG,QAPjBC,SAAYC,EAOK,EAPLA,SAAUC,EAOL,EAPKA,MACdE,EAMS,EANjBC,KAAQD,cACRqD,EAKiB,EALjBA,eACAC,EAIiB,EAJjBA,OACAlH,EAGiB,EAHjBA,QACAoB,EAEiB,EAFjBA,WACAlB,EACiB,EADjBA,QAEMI,EAAWoD,EAAMpD,SACjB6G,EAAmBzD,EAAMyD,iBAEzBC,GAAW,IAAAC,cACf,SAAC9G,GACCsF,UAAUyB,QAAQ,CAChB7D,WACAlD,QAAQ,IAAAwF,WACN,CAAEoB,mBAAkB7G,WAAUC,UAC9B,CAAEyF,gBAAgB,QAIxB,CAACmB,EAAkB7G,EAAUmD,IAG/B,OACE,wBAACmD,EAAD,CAAiB,cAAY,yBAC3B,wBAACG,EAAD,CAAcQ,SAAUH,EAAUI,KAAK,UACpB,IAAlBN,EAAOnC,OACN,wBAAC,UAAD,MAEAmC,EAAO7B,KAAI,SAACoC,GAAD,OACT,wBAAC,UAAD,CAAWnC,IAAKmC,EAAM/E,GAAI+E,MAAOA,EAAOC,WAAYT,OAGvDjH,GACC,+BAAK,cAAY,2BACf,wBAAC,UAAD,CACE2H,WAAYzH,EACZsC,QAASpB,EACTmB,YAAY,QACZqF,UAAW/E,SAAOC,gBAEjBc,EAAca,UAASoD,uB,sQCzFpC,E,ybAAA,YACA,YAEA,eACA,eAGA,Y,+HAeA,I,GAsCe,EAhDf,UAgDevE,aAtCE,SAAC,GAOG,IANnBZ,EAMmB,EANnBA,GACAoF,EAKmB,EALnBA,QACApC,EAImB,EAJnBA,QACA8B,EAGmB,EAHnBA,KACU9H,EAES,EAFnBiE,OAAUjE,OAES,IADnBqI,kBACmB,SACnB,GAA8B,IAAAnI,WAAS,GAAvC,qBAAOM,EAAP,KAAgBC,EAAhB,KACMG,GAAW,aAAYZ,EAAQgD,GAErC,IAAI,IAAA5B,cAAaR,GACf,OAAO,KAET,IAAM0H,EAAoB,+CAAG,uFAC3B7H,GAAW,GADgB,SAGT,aAAZuF,EAHqB,iCAIjB,IAAAuC,6BAA4BvI,EAAQoI,EAASpF,GAJ5B,iCAKF,cAAZgD,EALc,mCAMjB,IAAAwC,0BAAyBxI,EAAQoI,EAASpF,GANzB,oHAAH,qDAa1B,OACE,wBAAC,UAAD,CACEgD,QAAqB,cAAZA,EAA0B,UAAY,UAC/CH,MAAOjF,EAASkF,WAAWC,KAC3B0C,YAAaJ,EAAaC,OAAuBnI,EACjDK,QAASA,EACTsH,KAAMA,O,oMCvBL,SACLY,GAEA,IADAC,EACA,uDADqC,KAErC,OAAOC,UAAQC,IAAR,GACLC,YAAa,GAAF,OAAKC,WAAL,YAAiBC,EAA0BN,KACnDC,K,6BAtCP,YACA,e,2kBAEA,IAAMK,EAA4B,SAAChJ,GAAD,+BACdA,EADc,c,uICHlC,YACA,Y,EAKyB,SAACA,EAAgBoI,GACxC,OAA0C,IAAAlI,eAExCC,GAFF,qBAAO8I,EAAP,KAAsBC,EAAtB,KAeA,OAXA,IAAApI,YAAU,WACR,IAAMC,GAAe,IAAAoI,qBACnBnJ,EACAoI,GACAnH,WAAWC,WAAU,SAAC+H,GACtBC,EAAiBD,EAAc5H,SAGjC,OAAO,kBAAMN,EAAaU,iBACzB,CAACzB,EAAQoI,IAELa,G,iICtBT,mBAGA,YAGA,eAGA,eAGA,eACA,YAMMG,EAAYpH,UAAOqH,GAAV,sEAAGrH,CAAH,kEACJmB,SAAOC,eACHC,YAAUiG,IAKnBC,EAAWvH,UAAOC,IAAV,qEAAGD,CAAH,mDACHmB,SAAOC,eACHC,YAAUM,M,EAIZ,SAAC,GAA0B,IAAxB6F,EAAwB,EAAxBA,OACRC,GAAO,aAAQ,CAAED,WAEvB,OAAI,IAAApI,cAAaqI,GACR,KAIP,+BAAK,cAAY,gBACf,wBAACL,EAAD,CAAW,cAAY,qBACrB,wBAAC,UAAD,CAAGM,MAAOD,EAAK3D,WAAW6D,kBAE5B,wBAACJ,EAAD,CAAU,cAAY,oBACpB,wBAAC,UAAD,CAAGG,MAAOD,EAAK3D,WAAW8D,cAAeC,aAAW,O,2TC7C5D,YACA,eASA,eACA,eAMA,eAMA,YACA,YACA,YAGA,YACA,e,0jBAKA,IAAMC,EAAW,G,GAkMF,IAAAlG,aA7LC,SAAC,GAA4C,IAAhC5D,EAAgC,EAA1CiE,OAAUjE,OAC3B,GAA0C,IAAAE,WAAS,GAAnD,qBAAO6J,EAAP,KAAsBC,EAAtB,KACA,GAA4B,IAAA9J,UAAS,GAArC,qBAAO+J,EAAP,KAAeC,EAAf,KACA,GAA0B,IAAAhK,UAAS,GAAnC,qBAAOiK,EAAP,KAAcC,EAAd,KACA,GAAkC,IAAAlK,UAAS,GAA3C,qBAAOmK,EAAP,KAAkBC,EAAlB,KAEA,GAAkD,IAAApK,UAAmB,IAArE,qBAAOqK,EAAP,KAA0BC,EAA1B,KACMC,GAAW,IAAAC,UACXC,GAAU,aAAW3K,IAE3B,IAAAc,YAAU,WACc,UAAlB2J,EAASG,UACX,UAAAH,EAASG,QAAQC,QAAQ,iBAAzB,SAAoCC,UAhBnB,IAiBjB,UAAAL,EAASG,QAAQC,QAAQ,eAAzB,SAAkCE,SAfnB,IAgBf,UAAAN,EAASG,QAAQC,QAAQ,iBAAzB,SAAoCG,YAjBhB,IAkBpBP,EAASG,QAAQC,QACf,UAEAI,EAAGC,eAAeC,QAAO,SAACC,GAIxB,OAH0C,OAApBA,EAAKC,WAGJD,EAAKE,IAAM,EAAe,EAAXF,EAAKE,IAAU,UAM7D,IAAMC,GAAa,IAAAC,UAAQ,WACzB,OAAK,IAAApK,cAAauJ,GAIJ,GAHLA,EAAQ7E,WAAW2F,MACvBjG,QAAO,SAAC4F,GAAD,OAA8B,OAApBA,EAAKC,cACtB1F,KAAI,SAACyF,GAAD,OAAUA,EAAKpI,QAEvB,CAAC2H,KAEJ,IAAA7J,YAAU,WACR0J,EAAqBe,GACrBvB,GAAiB,KAChB,CAACuB,IAEJ,IAAMG,GAAoB,IAAAF,UAAQ,WAChC,OAAK,IAAApK,cAAauJ,GAEJ,CAAEc,MAAO,GAAIlK,MAAO,KADzB,IAAAoK,WAAUhB,EAAQ7E,cAE1B,CAAC6E,IAEEiB,GAAe,IAAAjE,cAAY,SAACyD,GACnB,OAATA,IACFlB,EAAUkB,EAAKS,wBAAwB5B,QACvCG,EAASgB,EAAKS,wBAAwB1B,UAEvC,IAEH,IAAI,IAAA/I,cAAauJ,GACf,OAAO,KAoFT,OACE,wBAAC,EAAAnG,IAAD,CAAKsH,IAAKF,EAAchH,EAAE,OAAOmH,SAAS,YACxC,wBAAC,UAAD,CACE9B,OAAQA,EACRE,MAAOA,EACP6B,cAAe,GACfC,YAAa,EACbH,IAAKrB,EACLyB,YApCkB,SAACd,GARK,IAACe,EAUY,KAVZA,EASPf,EAAKpI,GARvBuH,EAAkB6B,SAASD,GAC7B3B,EAAqBD,EAAkB/E,QAAO,SAACxC,GAAD,OAAQA,IAAOmJ,MAE7D3B,EAAqB,GAAD,qBAAKD,GAAL,CAAwB4B,KAM1C5B,EAAkB6B,SAAShB,EAAKpI,OAClC,UAAAyH,EAASG,eAAT,SAAkByB,KAAK,EAAG,KAC1B,UAAA5B,EAASG,eAAT,SAAkB0B,SAASlB,EAAKmB,EAAGnB,EAAKoB,EAAG,OAiCzCC,UAAWf,EACXgB,aA3FmB,WACnB3C,GAAiBU,EAASG,SAC5BH,EAASG,QAAQ+B,YAEnB3C,GAAiB,IAwFb4C,qBArFuB,iBAAM,SAsF7BC,iBArFmB,SACvBzB,EACA0B,EACAC,GAEA,GAAI3B,EAAKmB,GAAKnB,EAAKoB,EAAG,CACpB,IAAMQ,EAAoC,OAApB5B,EAAKC,WACrBxF,EAAQuF,EAAKrF,KACbkH,EAAWD,EACP5B,EAAKE,IAAM,IAAjB,GACA,IAAoB,IAAdyB,GAMV,GALAD,EAAII,KAAJ,UAAcD,EAAd,iBACAH,EAAIK,UAAY,SAChBL,EAAIM,aAAe,SACnBN,EAAIO,UAAYL,EAAgB,OAAS,OAErCA,EAKF,IAJA,IAAMM,EAAwB,IAAXL,EACbM,EAAQ1H,EAAM2H,MAAM,KACpBjB,EAAInB,EAAKmB,EACXC,EAAIpB,EAAKoB,EAAIc,EACR5H,EAAI,EAAGA,EAAI6H,EAAMlI,OAAQK,GAAQ,EACxCoH,EAAIW,SAASF,EAAM7H,GAAI6G,EAAGC,GAC1BA,GAAKc,OAEEP,GAAe,GACxBD,EAAIW,SAAS5H,EAAOuF,EAAKmB,EAAGnB,EAAKoB,EAAIpB,EAAKE,IAAM,KA4DhDoC,gBAAgB,EAChBC,eAxDiB,SAACvC,GACtB,OAAIA,EAAKC,aAAcd,EAAkB6B,SAAShB,EAAKC,aAwDnDuC,eAnCiB,SAACC,GAAyC,MAC/D,OACEtD,EAAkB6B,SAAlB,UAA2ByB,EAAKC,cAAhC,aAA2B,EAAa9K,KACb,OAA3B6K,EAAKE,OAAO1C,YAiCV2C,UA3BY,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAH,OAA0B3D,EAAa2D,MA6BrD,wBAAC,EAAAzJ,IAAD,CACEC,QAAQ,OACRC,cAAc,SACdwJ,UAAU,OACV5I,eAAe,gBACfyG,SAAS,WACToC,OAAO,MACPC,MAAM,OAEN,wBAAC,UAAD,CACEvL,YAAY,QACZqF,UAAW/E,SAAOC,eAClBN,QAvCS,WAAM,MACrB,UAAA2H,EAASG,eAAT,SAAkByB,KAAKhC,EAAYP,IAuC7BK,MAAM,OACNF,OAAO,QALT,KASA,wBAAC,UAAD,CACEpH,YAAY,QACZqF,UAAW/E,SAAOC,eAClBN,QA5CU,WAAM,QACtBuH,EAAYP,EAAWA,EAAvB,UACIW,EAASG,eADb,OACI,EAAkByB,KAAKhC,EAAYP,GADvC,UAEIW,EAASG,eAFb,OAEI,EAAkByB,KAAKvC,IA0CrBK,MAAM,OACNF,OAAO,QALT,U,2ICtNR,mBACA,YAGA,eACA,YAGA,YAEA,eAGA,YAGA,eACA,eAGA,eAKMoE,EAAYrM,UAAOC,IAAV,2EAAGD,CAAH,sIAIT,qBAAGsM,SAA2BnL,SAAOoL,OAASpL,SAAOiE,cAQrDoH,EAAaxM,UAAOqH,GAAV,4EAAGrH,CAAH,mFACLmB,SAAOsL,KACHpL,YAAUM,MAMnB+K,EAAY1M,UAAOC,IAAV,2EAAGD,CAAH,+BACJmB,SAAO0C,MACHxC,YAAUsL,O,GAmDV,IAAA/K,aAAW,IAAAC,aA1CR,SAAC,GAKG,MAJpBkE,EAIoB,EAJpBA,MACQ7D,EAGY,EAHpBC,KAAQD,cACIF,EAEQ,EAFpBF,SAAYE,MACZgE,EACoB,EADpBA,WAEMyB,GAAO,aAAQ,CAAED,OAAM,UAAEzB,EAAM6G,qBAAR,aAAE,EAAqBd,OAAOzM,KAAK2B,KAEhE,IAAI,IAAA5B,cAAaqI,GACf,OAAO,KAOT,OACE,wBAAC4E,EAAD,CACE,cAAY,oBACZC,SAAUtK,EAAMyD,mBAAqBgC,EAAKzG,IAE1C,wBAACwL,EAAD,KACE,wBAAC,UAAD,CAAG9E,MAAOD,EAAK3D,WAAW6D,kBAE5B,wBAAC+E,EAAD,KACE,wBAAC,UAAD,CAAGhF,MAAOD,EAAK3D,WAAW8D,cAAeC,aAAW,EAACgF,UAAW,OAElE,+BAAK3J,UAAU,mBACb,wBAAC,UAAD,CACErC,YAAY,OACZiM,WAAW,OACXhK,QAAQ,MACRmI,SAAQ,UAAK5J,YAAUsL,MAAf,MACR7L,QArBoB,WAC1BkF,EAAWD,KAsBJ7D,EAAca,UAASgK,uB,oJC3FlC,Y,EAGoB,SAACC,GAEnB,OAAoC,IAAA9O,WAAS,GAA7C,qBAAO+O,EAAP,KAAmBC,EAAnB,KAGA,SAASC,EAAT,GAA8B,EAAPvJ,MACToJ,GACVE,GAAc,GAKlB,IAAME,EAAY,SAAC,GAAY,EAAVxJ,MACPoJ,GACVE,GAAc,IAgBlB,OAXA,IAAApO,YAAU,WAIR,OAHAuO,OAAOC,iBAAiB,UAAWH,GACnCE,OAAOC,iBAAiB,QAASF,GAE1B,WACLC,OAAOE,oBAAoB,UAAWJ,GACtCE,OAAOE,oBAAoB,QAASH,MAGrC,IAEIH,G,iICjCT,mBAGA,YAEA,eAGA,eACA,YAEMZ,EAAYrM,UAAOC,IAAV,sEAAGD,CAAH,uEAEJmB,SAAO0C,MAGDxC,YAAUM,M,GAaZ,IAAAE,aATD,SAAC,GAAmD,IAAzCK,EAAyC,EAAjDC,KAAQD,cACvB,OACE,wBAACmK,EAAD,CAAW,cAAY,wBACrB,kCAAKnK,EAAca,UAASyK,mBAC5B,iCAAItL,EAAca,UAAS0K,6B,mMCY1B,SACL/G,GAEA,IADAC,EACA,uDADqC,KAErC,OAAOC,UAAQC,IAAR,KACLC,YAAa,GAAF,OAAKC,WAAL,YAAiBC,EAA0BN,KACnDC,GAFE,IAGL+G,oBAAqB,CAAC,YACtBC,aAAa,M,sBAIV,SACLjH,EACAkH,GAEA,IADAjH,EACA,uDADqC,KAErC,OAAOC,UAAQC,IAAR,KACLC,YAAa,GAAF,OAAKC,WAAL,YAAiBC,EAC1BN,GADS,YAENkH,GACLF,oBAAqB,CAAC,aACnB/G,GALE,IAMLgH,aAAa,M,qSA3DjB,YACA,e,2kBAgCA,IAAM3G,EAA4B,SAAChJ,GAAD,+BACdA,EADc,Y,oDA8B3B,WACL0I,EACAkH,EACAC,GAHK,6FAKkBjH,UAAQkH,OAAR,UAClB/G,WADkB,YACNC,EACbN,GAFmB,YAGhBkH,EAHgB,uBAGcC,GACnCA,GATG,cAKCE,EALD,OAYLnH,UAAQoH,aAAa,CACnBC,mBAAoB,CAAC,GAAD,OACflH,WADe,YACHC,EAA0BN,IADvB,yBAEAA,EAFA,wCAGAA,EAHA,0BAbjB,kBAoBEqH,GApBF,4C,0EAuBA,WACLrH,EACAkH,EACAC,GAHK,6FAKkBjH,UAAQsH,IAAR,UAClBnH,WADkB,YACNC,EACbN,GAFmB,YAGhBkH,EAHgB,eAIrB,CAAEvO,KAAM,CAAC,CAAE2B,GAAI6M,EAAoBM,KAAM,eATtC,cAKCJ,EALD,OAYLnH,UAAQoH,aAAa,CACnBC,mBAAoB,CAAC,GAAD,OACflH,WADe,YACHC,EAA0BN,IADvB,yBAEAA,EAFA,wCAGAA,EAHA,0BAbjB,kBAoBEqH,GApBF,4C,0EAuBA,WACLrH,EACAkH,EACAhO,GAHK,6FAKkBgH,UAAQsH,IAAR,UAClBnH,WADkB,YACNC,EACbN,GAFmB,YAGhBkH,EAHgB,eAIrB,CAAEvO,KAAMO,IATL,cAKCmO,EALD,gBAYCnH,UAAQoH,aAAa,CACzBC,mBAAoB,CAAC,GAAD,OACflH,WADe,YACHC,EAA0BN,IADvB,yBAEAA,EAFA,wCAGAA,EAHA,0BAbjB,gCAoBEqH,GApBF,4C,uVC7GP,eACA,YAGA,YACA,eACA,YAGA,YACA,eAGA,eAGA,eACA,eACA,eACA,eACA,eAGA,e,qoCAKA,IAAM1B,EAAYrM,UAAOC,IAAV,qEAAGD,CAAH,qGACUoO,gBAAcC,WAAaC,eAI3CF,gBAAcC,WAAaC,eAGhCC,QAAMC,kBARK,kDAaTC,EAAOzO,UAAOC,IAAV,gEAAGD,CAAH,mC,GA0HK,IAAA4B,aArHa,SAAC,GAGN,IAFX5D,EAEW,EAFrBiE,OAAUjE,OAEW,IADrB8D,SAAYC,EACS,EADTA,SAAUC,EACD,EADCA,MAEtB,GAA0C,IAAA9D,WAAS,GAAnD,qBAAOwQ,EAAP,KAAsBC,EAAtB,KACA,GAAsD,IAAAzQ,UACpD,MADF,qBAAO0Q,EAAP,KAA4BC,EAA5B,KAIA,GAAsC,IAAA3Q,WAAS,GAA/C,qBAAO4Q,EAAP,KAAoBC,EAApB,KAEMnQ,EAAWoD,EAAMpD,SACjBC,EAASmD,EAAMnD,OAErB,GAKI,aAA0Bb,EAAQ,CACpCY,WACAC,WANM2G,EADR,EACE7F,KACAnB,EAFF,EAEEA,QACAF,EAHF,EAGEA,QACAoB,EAJF,EAIEA,YAOF,IAAAZ,YAAU,YAEL,IAAAM,cAAaoG,KACb,IAAApG,cAAawP,KACdE,IAEA3K,UAAUyB,QAAQ,CAChB7D,WACAlD,QAAQ,IAAAwF,WAAA,OAEDrC,GAFC,IAGJyD,iBAAkBD,EAAOoJ,GAAqB5N,KAEhD,CAAEsD,gBAAgB,MAGtByK,GAAe,MAEhB,CAACvJ,EAAQzD,EAAU6M,EAAqB5M,EAAO8M,IAGlD,IAAM1O,GAAS,IAAAuF,cAAY,WACzBkJ,GAAuB,SAACG,GAAD,OACpB,IAAA5P,cAAa4P,GAEVA,EADAA,EAAoB,KAG1BD,GAAe,KACd,IAEG1O,GAAW,IAAAsF,cAAY,WAC3BkJ,GAAuB,SAACG,GAAD,OACpB,IAAA5P,cAAa4P,GAEVA,EADAA,EAAoB,KAI1BD,GAAe,KACd,IAIH,IAAI,IAAA3P,cAAaoG,GACf,OAAO,KAgBT,OACE,gDACE,wBAAC,UAAD,MACA,wBAAC6G,EAAD,CAAW,cAAY,mBACrB,wBAACoC,EAAD,KACGC,EACC,gDACE,wBAAC,UAAD,CAASO,aA1BA,kBAAMN,GAAiB,MA2BhC,wBAAC,UAAD,CACEvO,OAAQA,EACRC,SAAUA,EACVC,iBAA0C,IAAxBsO,EAClBrO,mBAAoBqO,IAAwBpJ,EAAOnC,OAAS,KAIhE,wBAAC,UAAD,KACE,wBAAC,UAAD,QAIN,wBAAC,UAAD,CACE/E,QAASA,EACTkH,OAAQA,EACRhH,QAASA,EACTkB,WAAYA,EACZ6F,eAvCe,SAACQ,GACtB8I,EAAuBrJ,EAAO0J,QAAQnJ,IAEtC5B,UAAUyB,QAAQ,CAChB7D,WACAlD,QAAQ,IAAAwF,WAAA,OACDrC,GADC,IACMyD,iBAAkBM,EAAM/E,KACpC,CAAEsD,gBAAgB,MAGtBqK,GAAiB,W,oJC/HrB,YACA,Y,EAK2B,SAAC3Q,GAC1B,OAA8C,IAAAE,eAE5CC,GAFF,qBAAOgR,EAAP,KAAwBC,EAAxB,KAcA,OAVA,IAAAtQ,YAAU,WACR,IAAMC,GAAe,IAAAsQ,uBAAsBrR,GAAQiB,WAAWC,WAC5D,SAACiQ,GACCC,EAAmBD,EAAgB9P,SAIvC,OAAO,kBAAMN,EAAaU,iBACzB,CAACzB,IAEGmR,G,oJCrBT,YACA,Y,EAK4B,SAACnR,EAAgBgD,GAC3C,OAAgD,IAAA9C,eAE9CC,GAFF,qBAAOmR,EAAP,KAAyBC,EAAzB,KAeA,OAXA,IAAAzQ,YAAU,WACR,IAAMC,GAAe,IAAAyQ,wBACnBxR,EACAgD,GACA/B,WAAWC,WAAU,SAACoQ,GACtBC,EAAoBD,EAAiBjQ,SAGvC,OAAO,kBAAMN,EAAaU,iBACzB,CAACzB,EAAQgD,IAELsO,G,wRCtBT,E,ybAAA,YACA,YACA,eACA,YACA,eACA,YACA,YAGA,eAGA,eACA,eACA,e,0sBAEA,IAAMjD,EAAYrM,UAAOC,IAAV,yEAAGD,CAAH,iFAQTyP,GAAc,aAAOtP,WAAV,2EAAG,CAAH,4CAMXuP,EAAe1P,UAAOC,IAAV,4EAAGD,CAAH,iE,GA+EH,IAAA4B,aAnEC,SAAC,GAIG,MAHR5D,EAGQ,EAHlBiE,OAAUjE,OAGQ,IAFlB8D,SAAYE,EAEM,EAFNA,MAAOD,EAED,EAFCA,SACnBkN,EACkB,EADlBA,aAEMU,GAAiB,aAAiB3R,EAAQgE,EAAMyD,kBAChDmK,GAAa,IAAAlH,QAAuB,MAO1C,IALA,IAAA5J,YAAU,WACR8Q,EAAWhH,SAAWgH,EAAWhH,QAAQiH,SAAS,EAAG,KACpD,CAAC7N,EAAMyD,wBAGatH,IAAnBwR,EACF,OACE,wBAACtD,EAAD,CAAW,cAAY,iCACrB,wBAAC,EAAAyD,QAAD,OAKN,IAAI,IAAA1Q,cAAauQ,GACf,OAAO,KAcT,OACE,wBAACtD,EAAD,CAAWvC,IAAK8F,EAAY,cAAY,0BACtC,+BAAK,cAAY,+BACf,wBAACH,EAAD,CACEtH,MAAM,OACNF,OAAO,OACPnF,QAAQ,MACRjC,YAAY,QACZD,KAAK,QACLF,SAAS,OACTqP,UAAU,OACVC,eAAe,OACflP,QAvBc,WACpBqD,UAAUC,KAAK,CACbrC,WACAlD,QAAQ,IAAAwF,WAAA,OACDrC,GADC,IACMyD,sBAAkBtH,IAC9B,CAAEmG,gBAAgB,MAGtB2K,QAkBE,wBAACS,EAAD,eACGC,EAAe/C,qBADlB,aACG,EAA8BrK,WAAWlD,KAAKsE,KAAI,SAAC/E,GAAD,OACjD,wBAAC,UAAD,CACEoC,GAAIpC,EAASoC,GACb4C,IAAKhF,EAASoC,GACdoF,QAASuJ,EAAe3O,GACxBgD,QAAQ,WACRqC,YAAY,QAIlB,wBAAC,UAAD,CAAMmB,OAAQxF,EAAMyD,uB","file":"80.473637702c0efe62c3f3.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport {\n  insightsInputsStream,\n  IInsightsInputData,\n} from '../services/insightsInputs';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { unionBy } from 'lodash-es';\n\nconst defaultPageSize = 20;\n\nexport type QueryParameters = {\n  category: string;\n  search: string;\n};\n\nconst useInsightsInputsLoadMore = (\n  viewId: string,\n  queryParameters?: Partial<QueryParameters>\n) => {\n  const [insightsInputs, setInsightsInputs] = useState<\n    IInsightsInputData[] | undefined | null | Error\n  >(undefined);\n  const [hasMore, setHasMore] = useState<boolean | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [pageNumber, setPageNumber] = useState(1);\n\n  const category = queryParameters?.category;\n  const search = queryParameters?.search;\n\n  // Reset page number on search and category change\n  useEffect(() => {\n    setPageNumber(1);\n  }, [category, search]);\n\n  useEffect(() => {\n    setLoading(true);\n    const subscription = insightsInputsStream(viewId, {\n      queryParameters: {\n        category,\n        search,\n        'page[number]': pageNumber || 1,\n        'page[size]': defaultPageSize,\n      },\n    }).observable.subscribe((insightsInputs) => {\n      setInsightsInputs((prevInsightsInputs) =>\n        !isNilOrError(prevInsightsInputs) && pageNumber !== 1\n          ? unionBy(prevInsightsInputs, insightsInputs.data, 'id')\n          : insightsInputs.data\n      );\n      setHasMore(!isNilOrError(insightsInputs.links?.next));\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, [viewId, pageNumber, category, search]);\n\n  const onLoadMore = () => {\n    setPageNumber(pageNumber + 1);\n  };\n\n  return {\n    hasMore,\n    loading,\n    onLoadMore,\n    list: insightsInputs,\n  };\n};\n\nexport default useInsightsInputsLoadMore;\n","import { useState, useEffect } from 'react';\nimport {\n  insightsCategoriesStream,\n  IInsightsCategoryData,\n} from '../services/insightsCategories';\n\nconst useInsightsCategories = (viewId: string) => {\n  const [insightsCategories, setInsightsCategories] = useState<\n    IInsightsCategoryData[] | undefined | null | Error\n  >(undefined);\n\n  useEffect(() => {\n    const subscription = insightsCategoriesStream(viewId).observable.subscribe(\n      (insightsCategories) => {\n        setInsightsCategories(insightsCategories.data);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, [viewId]);\n\n  return insightsCategories;\n};\n\nexport default useInsightsCategories;\n","import React, { useEffect } from 'react';\nimport useKeyPress from 'hooks/useKeyPress';\n\nimport { Button } from 'cl2-component-library';\n\n// styles\nimport styled from 'styled-components';\n\nconst StyledNavigation = styled.div`\n  position: absolute;\n  bottom: 10px;\n  left: 20px;\n`;\n\nconst StyledChevronButton = styled(Button)`\n  max-width: 8px;\n  margin: 2px;\n  button {\n    padding: 8px 12px !important;\n  }\n`;\n\nexport type NavigationProps = {\n  moveUp: () => void;\n  moveDown: () => void;\n  isMoveUpDisabled: boolean;\n  isMoveDownDisabled: boolean;\n};\n\nconst Navigation = ({\n  moveUp,\n  moveDown,\n  isMoveUpDisabled,\n  isMoveDownDisabled,\n}: NavigationProps) => {\n  const upArrow = useKeyPress('ArrowUp');\n  const downArrow = useKeyPress('ArrowDown');\n\n  // Keyboard navigations\n  useEffect(() => {\n    if (upArrow && !isMoveUpDisabled) {\n      moveUp();\n    }\n  }, [upArrow, moveUp, isMoveUpDisabled]);\n\n  useEffect(() => {\n    if (downArrow && !isMoveDownDisabled) {\n      moveDown();\n    }\n  }, [downArrow, moveDown, isMoveDownDisabled]);\n\n  return (\n    <StyledNavigation data-testid=\"insightsInputDetailNavigation\">\n      <StyledChevronButton\n        iconSize=\"8px\"\n        locale=\"en\"\n        icon=\"chevron-up\"\n        buttonStyle=\"secondary-outlined\"\n        onClick={moveUp}\n        disabled={isMoveUpDisabled}\n        id=\"insightsInputDetailNavigationUp\"\n      />\n      <StyledChevronButton\n        iconSize=\"8px\"\n        locale=\"en\"\n        icon=\"chevron-down\"\n        buttonStyle=\"secondary-outlined\"\n        onClick={moveDown}\n        disabled={isMoveDownDisabled}\n        id=\"insightsInputDetailNavigationDown\"\n      />\n    </StyledNavigation>\n  );\n};\n\nexport default Navigation;\n","import React, { useState } from 'react';\nimport { withRouter, WithRouterProps } from 'react-router';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\nimport clHistory from 'utils/cl-router/history';\nimport { stringify } from 'qs';\n\n// hooks\nimport useInsightsCategories from 'modules/commercial/insights/hooks/useInsightsCategories';\n\n// components\nimport Tag from 'modules/commercial/insights/admin/components/Tag';\nimport { Box, IconTooltip } from 'cl2-component-library';\nimport Button from 'components/UI/Button';\n\n// styles\nimport styled from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\n\n// intl\nimport messages from '../../messages';\nimport { InjectedIntlProps } from 'react-intl';\nimport { injectIntl } from 'utils/cl-intl';\n\ntype CategoryProps = WithRouterProps & InjectedIntlProps;\n\nconst CategoriesTitle = styled.h1`\n  color: ${colors.adminTextColor};\n  font-size: ${fontSizes.large}px;\n  display: flex;\n  align-items: center;\n  .iconTooltip {\n    margin-left: 10px;\n  }\n`;\n\nconst StyledTag = styled(Tag)`\n  margin-right: 8px;\n  margin-bottom: 8px;\n`;\n\nconst EmptyStateTitle = styled.p`\n  margin: 0;\n  padding: 0;\n  font-size: ${fontSizes.base}px;\n  font-weight: bold;\n`;\n\nexport const visibleCategoriesNumber = 6;\n\nconst Categories: React.FC<CategoryProps> = ({\n  location: { pathname, query },\n  params: { viewId },\n  intl: { formatMessage },\n  children,\n}) => {\n  const [seeAllCategories, setSeeAllCategories] = useState(false);\n  const categories = useInsightsCategories(viewId);\n\n  if (isNilOrError(categories)) {\n    return null;\n  }\n\n  const handleCategoryClick = (id: string) => () => {\n    const category = query.category === id ? undefined : id;\n    clHistory.push({\n      pathname,\n      search: stringify(\n        { ...query, category, pageNumber: 1 },\n        { addQueryPrefix: true }\n      ),\n    });\n  };\n\n  const toggleSeeAllCategories = () => {\n    setSeeAllCategories(!seeAllCategories);\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" w=\"100%\" h=\"100%\">\n      <Box\n        bgColor=\"#fff\"\n        padding=\"28px\"\n        data-testid=\"insightsDetailsCategories\"\n      >\n        <CategoriesTitle>\n          {formatMessage(messages.categoriesTitle)}\n          <IconTooltip\n            className=\"iconTooltip\"\n            content={formatMessage(messages.categoriesTitleTooltip)}\n          />\n        </CategoriesTitle>\n        {categories.length > 0 ? (\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Box w=\"70%\">\n              {categories\n                // Filter visible categories\n                .filter((_, i) =>\n                  !seeAllCategories ? i < visibleCategoriesNumber : true\n                )\n                .map((category) => (\n                  <StyledTag\n                    key={category.id}\n                    label={category.attributes.name}\n                    variant={\n                      query.category === category.id ? 'primary' : 'default'\n                    }\n                    count={category.attributes.inputs_count}\n                    onClick={handleCategoryClick(category.id)}\n                  />\n                ))}\n              <Box display=\"flex\">\n                {categories.length > visibleCategoriesNumber && (\n                  <Button\n                    buttonStyle=\"text\"\n                    padding=\"0px\"\n                    onClick={toggleSeeAllCategories}\n                  >\n                    {seeAllCategories\n                      ? formatMessage(messages.categoriesSeeLess)\n                      : formatMessage(messages.categoriesSeeAll)}\n                  </Button>\n                )}\n              </Box>\n            </Box>\n            <Button\n              buttonStyle=\"admin-dark\"\n              linkTo={`${pathname}/edit`}\n              icon=\"categories\"\n              iconPos=\"right\"\n            >\n              {formatMessage(messages.editCategories)}\n            </Button>\n          </Box>\n        ) : (\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            padding=\"16px 24px\"\n            bgColor={colors.clBlueLightest}\n            color={colors.adminTextColor}\n            borderRadius=\"3px\"\n            data-testid=\"insightsDetailsCategoriesEmpty\"\n          >\n            <Box w=\"80%\">\n              <EmptyStateTitle className=\"title\">\n                {formatMessage(messages.categoriesEmptyTitle)}\n              </EmptyStateTitle>\n              <p> {formatMessage(messages.categoriesEmptyDescription)}</p>\n            </Box>\n\n            <Button\n              buttonStyle=\"admin-dark\"\n              linkTo={`${pathname}/edit`}\n              icon=\"categories\"\n              iconPos=\"right\"\n            >\n              {formatMessage(messages.categoriesEmptyButton)}\n            </Button>\n          </Box>\n        )}\n      </Box>\n      {children}\n    </Box>\n  );\n};\n\nexport default withRouter(injectIntl(Categories));\n","import React, { useCallback } from 'react';\nimport { withRouter, WithRouterProps } from 'react-router';\n\n// utils\nimport clHistory from 'utils/cl-router/history';\nimport { stringify } from 'qs';\n\n// styles\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\n\n// components\nimport Search from 'components/UI/SearchInput';\nimport InputCard from './InputCard';\nimport Empty from './Empty';\nimport Button from 'components/UI/Button';\n\n// intl\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../../messages';\n\n// types\nimport { IInsightsInputData } from 'modules/commercial/insights/services/insightsInputs';\n\nconst InputsContainer = styled.div`\n  flex: 0 0 420px;\n  overflow-x: auto;\n  padding: 20px;\n  background-color: ${colors.emailBg};\n  border-left: 1px solid ${colors.separation};\n`;\n\nconst StyledSearch = styled(Search)`\n  margin-bottom: 20px;\n`;\n\ntype InputsProps = {\n  onPreviewInput: (input: IInsightsInputData) => void;\n  inputs: IInsightsInputData[];\n  loading: boolean;\n  hasMore: boolean | null;\n  onLoadMore: () => void;\n} & WithRouterProps &\n  InjectedIntlProps;\n\nconst Inputs = ({\n  location: { pathname, query },\n  intl: { formatMessage },\n  onPreviewInput,\n  inputs,\n  hasMore,\n  onLoadMore,\n  loading,\n}: InputsProps) => {\n  const category = query.category;\n  const previewedInputId = query.previewedInputId;\n\n  const onSearch = useCallback(\n    (search: string) => {\n      clHistory.replace({\n        pathname,\n        search: stringify(\n          { previewedInputId, category, search },\n          { addQueryPrefix: true }\n        ),\n      });\n    },\n    [previewedInputId, category, pathname]\n  );\n\n  return (\n    <InputsContainer data-testid=\"insightsDetailsInputs\">\n      <StyledSearch onChange={onSearch} size=\"small\" />\n      {inputs.length === 0 ? (\n        <Empty />\n      ) : (\n        inputs.map((input) => (\n          <InputCard key={input.id} input={input} onReadMore={onPreviewInput} />\n        ))\n      )}\n      {hasMore && (\n        <div data-testid=\"insightsDetailsLoadMore\">\n          <Button\n            processing={loading}\n            onClick={onLoadMore}\n            buttonStyle=\"white\"\n            textColor={colors.adminTextColor}\n          >\n            {formatMessage(messages.inputsLoadMore)}\n          </Button>\n        </div>\n      )}\n    </InputsContainer>\n  );\n};\n\nexport default withRouter(injectIntl(Inputs));\n","import React, { useState } from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\n\nimport useCategory from 'modules/commercial/insights/hooks/useInsightsCategory';\nimport Tag, {\n  TagProps,\n} from 'modules/commercial/insights/admin/components/Tag';\nimport {\n  deleteInsightsInputCategory,\n  addInsightsInputCategory,\n} from 'modules/commercial/insights/services/insightsInputs';\n\nimport { withRouter, WithRouterProps } from 'react-router';\n\nexport type CategoryProps = {\n  id: string;\n  inputId: string;\n  variant: 'suggested' | 'approved';\n  size?: TagProps['size'];\n  withAction?: boolean;\n} & WithRouterProps;\n\nconst Category = ({\n  id,\n  inputId,\n  variant,\n  size,\n  params: { viewId },\n  withAction = true,\n}: CategoryProps) => {\n  const [loading, setLoading] = useState(false);\n  const category = useCategory(viewId, id);\n\n  if (isNilOrError(category)) {\n    return null;\n  }\n  const handleCategoryAction = async () => {\n    setLoading(true);\n    try {\n      if (variant === 'approved') {\n        await deleteInsightsInputCategory(viewId, inputId, id);\n      } else if (variant === 'suggested') {\n        await addInsightsInputCategory(viewId, inputId, id);\n      }\n    } catch {\n      // Do nothing\n    }\n  };\n\n  return (\n    <Tag\n      variant={variant === 'suggested' ? 'default' : 'primary'}\n      label={category.attributes.name}\n      onIconClick={withAction ? handleCategoryAction : undefined}\n      loading={loading}\n      size={size}\n    />\n  );\n};\n\nexport default withRouter(Category);\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\n\nconst getInsightsInputsEndpoint = (viewId: string) =>\n  `insights/views/${viewId}/network`;\n\nexport interface IInsightsNetwork {\n  data: IInsightsNetworkData;\n}\n\nexport interface IInsightsNetworkNode {\n  id: string;\n  name: string;\n  val: number;\n  cluster_id: string | null;\n  color: string;\n}\n\nexport interface IInsightsNetworkLink {\n  target: string;\n  source: string;\n}\n\nexport type IInsightsNetworkData = {\n  id: string;\n  type: 'network';\n  attributes: {\n    nodes: IInsightsNetworkNode[];\n    links: IInsightsNetworkLink[];\n  };\n};\n\nexport function insightsNetworkStream(\n  insightsViewId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IInsightsNetwork>({\n    apiEndpoint: `${API_PATH}/${getInsightsInputsEndpoint(insightsViewId)}`,\n    ...streamParams,\n  });\n}\n","import { useState, useEffect } from 'react';\nimport {\n  insightsInputStream,\n  IInsightsInputData,\n} from '../services/insightsInputs';\n\nconst useInsightsInput = (viewId: string, inputId: string) => {\n  const [insightsInput, setInsightsInput] = useState<\n    IInsightsInputData | undefined | null | Error\n  >(undefined);\n\n  useEffect(() => {\n    const subscription = insightsInputStream(\n      viewId,\n      inputId\n    ).observable.subscribe((insightsInput) => {\n      setInsightsInput(insightsInput.data);\n    });\n\n    return () => subscription.unsubscribe();\n  }, [viewId, inputId]);\n\n  return insightsInput;\n};\n\nexport default useInsightsInput;\n","import React from 'react';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport T from 'components/T';\n\n// hooks\nimport useIdea from 'hooks/useIdea';\n\n// styles\nimport styled from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\n\ntype IdeaProps = {\n  ideaId: string;\n};\n\nconst IdeaTitle = styled.h2`\n  color: ${colors.adminTextColor};\n  font-size: ${fontSizes.xl}px;\n  margin-top: 16px;\n  margin-bottom: 24px;\n`;\n\nconst IdeaBody = styled.div`\n  color: ${colors.adminTextColor};\n  font-size: ${fontSizes.base}px;\n  padding-bottom: 24px;\n`;\n\nconst Idea = ({ ideaId }: IdeaProps) => {\n  const idea = useIdea({ ideaId });\n\n  if (isNilOrError(idea)) {\n    return null;\n  }\n\n  return (\n    <div data-testid=\"insightsIdea\">\n      <IdeaTitle data-testid=\"insightsIdeaTitle\">\n        <T value={idea.attributes.title_multiloc} />\n      </IdeaTitle>\n      <IdeaBody data-testid=\"insightsIdeaBody\">\n        <T value={idea.attributes.body_multiloc} supportHtml />\n      </IdeaBody>\n    </div>\n  );\n};\n\nexport default Idea;\n","import { withRouter, WithRouterProps } from 'react-router';\nimport React, {\n  useEffect,\n  useRef,\n  useState,\n  useMemo,\n  useCallback,\n} from 'react';\n\n// graph\nimport * as d3 from 'd3';\nimport ForceGraph2D, {\n  ForceGraphMethods,\n  NodeObject,\n} from 'react-force-graph-2d';\n\n// hooks\nimport useNetwork from 'modules/commercial/insights/hooks/useInsightsNetwork';\n\n// types\nimport { IInsightsNetworkNode } from 'modules/commercial/insights/services/insightsNetwork';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\nimport { cloneDeep } from 'lodash-es';\nimport { colors } from 'utils/styleUtils';\n\n// components\nimport { Box } from 'cl2-component-library';\nimport Button from 'components/UI/Button';\n\ntype CanvasCustomRenderMode = 'replace' | 'before' | 'after';\ntype Node = NodeObject & IInsightsNetworkNode;\n\nconst zoomStep = 0.2;\nconst chargeStrength = -25;\nconst chargeDistanceMax = 80;\nconst linkDistance = 40;\n\nconst Network = ({ params: { viewId } }: WithRouterProps) => {\n  const [initialCenter, setInitialCenter] = useState(true);\n  const [height, setHeight] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [zoomLevel, setZoomLevel] = useState(0);\n\n  const [collapsedClusters, setCollapsedClusters] = useState<string[]>([]);\n  const forceRef = useRef<ForceGraphMethods>();\n  const network = useNetwork(viewId);\n\n  useEffect(() => {\n    if (forceRef.current) {\n      forceRef.current.d3Force('charge')?.strength(chargeStrength);\n      forceRef.current.d3Force('link')?.distance(linkDistance);\n      forceRef.current.d3Force('charge')?.distanceMax(chargeDistanceMax);\n      forceRef.current.d3Force(\n        'collide',\n        // @ts-ignore\n        d3.forceCollide().radius((node: IInsightsNetworkNode) => {\n          const isClusterNode = node.cluster_id === null;\n          // This value determines the collision force. For clusters, it depends on the cluster size only.\n          // For keywords, it includes a constant in order to give more weight to small key words and avoid overlap\n          return isClusterNode ? node.val / 4 : node.val * 3 + 8;\n        })\n      );\n    }\n  });\n\n  const clusterIds = useMemo(() => {\n    if (!isNilOrError(network)) {\n      return network.attributes.nodes\n        .filter((node) => node.cluster_id === null)\n        .map((node) => node.id);\n    } else return [];\n  }, [network]);\n\n  useEffect(() => {\n    setCollapsedClusters(clusterIds);\n    setInitialCenter(true);\n  }, [clusterIds]);\n\n  const networkAttributes = useMemo(() => {\n    if (!isNilOrError(network)) {\n      return cloneDeep(network.attributes);\n    } else return { nodes: [], links: [] };\n  }, [network]);\n\n  const containerRef = useCallback((node) => {\n    if (node !== null) {\n      setHeight(node.getBoundingClientRect().height);\n      setWidth(node.getBoundingClientRect().width);\n    }\n  }, []);\n\n  if (isNilOrError(network)) {\n    return null;\n  }\n\n  const handleEngineStop = () => {\n    if (initialCenter && forceRef.current) {\n      forceRef.current.zoomToFit();\n    }\n    setInitialCenter(false);\n  };\n\n  const nodeCanvasObjectMode = () => 'after' as CanvasCustomRenderMode;\n  const nodeCanvasObject = (\n    node: Node,\n    ctx: CanvasRenderingContext2D,\n    globalScale: number\n  ) => {\n    if (node.x && node.y) {\n      const isClusterNode = node.cluster_id === null;\n      const label = node.name;\n      const fontSize = isClusterNode\n        ? 14 * (node.val / 500)\n        : 12 / (globalScale * 1.2);\n      ctx.font = `${fontSize}px Sans-Serif`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = isClusterNode ? '#fff' : '#000';\n\n      if (isClusterNode) {\n        const lineHeight = fontSize * 1.2;\n        const lines = label.split(',');\n        const x = node.x;\n        let y = node.y - lineHeight;\n        for (let i = 0; i < lines.length; i = i + 1) {\n          ctx.fillText(lines[i], x, y);\n          y += lineHeight;\n        }\n      } else if (globalScale >= 2) {\n        ctx.fillText(label, node.x, node.y - node.val - 3);\n      }\n    }\n  };\n\n  const nodeVisibility = (node: Node) => {\n    if (node.cluster_id && collapsedClusters.includes(node.cluster_id)) {\n      return false;\n    } else return true;\n  };\n\n  const toggleClusterCollapse = (clusterId: string) => {\n    if (collapsedClusters.includes(clusterId)) {\n      setCollapsedClusters(collapsedClusters.filter((id) => id !== clusterId));\n    } else {\n      setCollapsedClusters([...collapsedClusters, clusterId]);\n    }\n  };\n\n  const handleNodeClick = (node: Node) => {\n    toggleClusterCollapse(node.id);\n    if (collapsedClusters.includes(node.id)) {\n      forceRef.current?.zoom(2, 400);\n      forceRef.current?.centerAt(node.x, node.y, 400);\n    }\n  };\n\n  const linkVisibility = (link: { source: Node; target: Node }) => {\n    if (\n      collapsedClusters.includes(link.source?.id) &&\n      link.target.cluster_id !== null\n    ) {\n      return false;\n    } else return true;\n  };\n\n  const onZoomEnd = ({ k }: { k: number }) => setZoomLevel(k);\n\n  const onZoomIn = () => {\n    forceRef.current?.zoom(zoomLevel + zoomStep);\n  };\n\n  const onZoomOut = () => {\n    zoomLevel - zoomStep > zoomStep\n      ? forceRef.current?.zoom(zoomLevel - zoomStep)\n      : forceRef.current?.zoom(zoomStep);\n  };\n  return (\n    <Box ref={containerRef} h=\"100%\" position=\"relative\">\n      <ForceGraph2D\n        height={height}\n        width={width}\n        cooldownTicks={50}\n        nodeRelSize={2}\n        ref={forceRef}\n        onNodeClick={handleNodeClick}\n        graphData={networkAttributes}\n        onEngineStop={handleEngineStop}\n        nodeCanvasObjectMode={nodeCanvasObjectMode}\n        nodeCanvasObject={nodeCanvasObject}\n        enableNodeDrag={false}\n        nodeVisibility={nodeVisibility}\n        linkVisibility={linkVisibility}\n        onZoomEnd={onZoomEnd}\n      />\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        minHeight=\"76px\"\n        justifyContent=\"space-between\"\n        position=\"absolute\"\n        bottom=\"8px\"\n        right=\"8px\"\n      >\n        <Button\n          buttonStyle=\"white\"\n          textColor={colors.adminTextColor}\n          onClick={onZoomIn}\n          width=\"36px\"\n          height=\"36px\"\n        >\n          +\n        </Button>\n        <Button\n          buttonStyle=\"white\"\n          textColor={colors.adminTextColor}\n          onClick={onZoomOut}\n          width=\"36px\"\n          height=\"36px\"\n        >\n          -\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default withRouter(Network);\n","import React from 'react';\nimport { withRouter, WithRouterProps } from 'react-router';\n\n// styles\nimport styled from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\n\n// intl\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../../messages';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport T from 'components/T';\nimport Button from 'components/UI/Button';\n\n// hooks\nimport useIdea from 'hooks/useIdea';\n\n// types\nimport { IInsightsInputData } from 'modules/commercial/insights/services/insightsInputs';\n\nconst Container = styled.div<{ isActive: boolean }>`\n  border-radius: 3px;\n  background-color: #fff;\n  border: 1px solid\n    ${({ isActive }) => (isActive ? colors.border : colors.separation)};\n  padding: 12px 28px;\n  margin-bottom: 8px;\n  .buttonContainer {\n    display: flex;\n  }\n`;\n\nconst InputTitle = styled.h2`\n  color: ${colors.text};\n  font-size: ${fontSizes.base}px;\n  font-weight: bold;\n  margin-top: 16px;\n  margin-bottom: 12px;\n`;\n\nconst InputBody = styled.div`\n  color: ${colors.label};\n  font-size: ${fontSizes.small}px;\n`;\n\ntype InputCardProps = {\n  onReadMore: (input: IInsightsInputData) => void;\n  input: IInsightsInputData;\n} & InjectedIntlProps &\n  WithRouterProps;\n\nconst InputCard = ({\n  input,\n  intl: { formatMessage },\n  location: { query },\n  onReadMore,\n}: InputCardProps) => {\n  const idea = useIdea({ ideaId: input.relationships?.source.data.id });\n\n  if (isNilOrError(idea)) {\n    return null;\n  }\n\n  const handleReadMoreClick = () => {\n    onReadMore(input);\n  };\n\n  return (\n    <Container\n      data-testid=\"insightsInputCard\"\n      isActive={query.previewedInputId === idea.id}\n    >\n      <InputTitle>\n        <T value={idea.attributes.title_multiloc} />\n      </InputTitle>\n      <InputBody>\n        <T value={idea.attributes.body_multiloc} supportHtml maxLength={200} />\n      </InputBody>\n      <div className=\"buttonContainer\">\n        <Button\n          buttonStyle=\"text\"\n          fontWeight=\"bold\"\n          padding=\"0px\"\n          fontSize={`${fontSizes.small}px`}\n          onClick={handleReadMoreClick}\n        >\n          {formatMessage(messages.inputsReadMore)}\n        </Button>\n      </div>\n    </Container>\n  );\n};\n\nexport default withRouter(injectIntl(InputCard));\n","import { useState, useEffect } from 'react';\n\n// Hook\nconst useKeyPress = (targetKey: string) => {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n};\n\nexport default useKeyPress;\n","import React from 'react';\n\n// intl\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../../messages';\n\n// styles\nimport styled from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\n\nconst Container = styled.div`\n  text-align: center;\n  color: ${colors.label};\n  h2 {\n    padding-top: 200px;\n    font-size: ${fontSizes.base}px;\n  }\n`;\n\nconst Empty = ({ intl: { formatMessage } }: InjectedIntlProps) => {\n  return (\n    <Container data-testid=\"insightsDetailsEmpty\">\n      <h2>{formatMessage(messages.inputsEmptyTitle)}</h2>\n      <p>{formatMessage(messages.inputsEmptyDescription)}</p>\n    </Container>\n  );\n};\n\nexport default injectIntl(Empty);\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { IRelationship } from 'typings';\n\nexport interface IInsightsInputData {\n  id: string;\n  type: string;\n  relationships: {\n    categories: { data: IRelationship[] };\n    suggested_categories: { data: IRelationship[] };\n    source: {\n      data: IRelationship;\n    };\n  };\n}\n\nexport interface IInsightsInput {\n  data: IInsightsInputData;\n}\n\nexport interface IInsightsInputLinks {\n  self: string;\n  first: string;\n  prev: string | null;\n  next: string | null;\n  last: string;\n}\n\nexport interface IInsightsInputs {\n  data: IInsightsInputData[];\n  links: IInsightsInputLinks;\n}\n\nconst getInsightsInputsEndpoint = (viewId: string) =>\n  `insights/views/${viewId}/inputs`;\n\nexport function insightsInputsStream(\n  insightsViewId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IInsightsInputs>({\n    apiEndpoint: `${API_PATH}/${getInsightsInputsEndpoint(insightsViewId)}`,\n    ...streamParams,\n    skipSanitizationFor: ['category'],\n    cacheStream: false,\n  });\n}\n\nexport function insightsInputStream(\n  insightsViewId: string,\n  insightsInputId: string,\n  streamParams: IStreamParams | null = null\n) {\n  return streams.get<IInsightsInput>({\n    apiEndpoint: `${API_PATH}/${getInsightsInputsEndpoint(\n      insightsViewId\n    )}/${insightsInputId}`,\n    skipSanitizationFor: ['category'],\n    ...streamParams,\n    cacheStream: false,\n  });\n}\n\nexport async function deleteInsightsInputCategory(\n  insightsViewId: string,\n  insightsInputId: string,\n  insightsCategoryId: string\n) {\n  const response = await streams.delete(\n    `${API_PATH}/${getInsightsInputsEndpoint(\n      insightsViewId\n    )}/${insightsInputId}/categories/${insightsCategoryId}`,\n    insightsCategoryId\n  );\n\n  streams.fetchAllWith({\n    partialApiEndpoint: [\n      `${API_PATH}/${getInsightsInputsEndpoint(insightsViewId)}`,\n      `insights/views/${insightsViewId}/categories`,\n      `insights/views/${insightsViewId}/stats/inputs_count`,\n    ],\n  });\n\n  return response;\n}\n\nexport async function addInsightsInputCategory(\n  insightsViewId: string,\n  insightsInputId: string,\n  insightsCategoryId: string\n) {\n  const response = await streams.add(\n    `${API_PATH}/${getInsightsInputsEndpoint(\n      insightsViewId\n    )}/${insightsInputId}/categories`,\n    { data: [{ id: insightsCategoryId, type: 'category' }] }\n  );\n\n  streams.fetchAllWith({\n    partialApiEndpoint: [\n      `${API_PATH}/${getInsightsInputsEndpoint(insightsViewId)}`,\n      `insights/views/${insightsViewId}/categories`,\n      `insights/views/${insightsViewId}/stats/inputs_count`,\n    ],\n  });\n\n  return response;\n}\n\nexport async function addInsightsInputCategories(\n  insightsViewId: string,\n  insightsInputId: string,\n  insightsCategories: { id: string; type: string }[]\n) {\n  const response = await streams.add(\n    `${API_PATH}/${getInsightsInputsEndpoint(\n      insightsViewId\n    )}/${insightsInputId}/categories`,\n    { data: insightsCategories }\n  );\n\n  await streams.fetchAllWith({\n    partialApiEndpoint: [\n      `${API_PATH}/${getInsightsInputsEndpoint(insightsViewId)}`,\n      `insights/views/${insightsViewId}/categories`,\n      `insights/views/${insightsViewId}/stats/inputs_count`,\n    ],\n  });\n\n  return response;\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { withRouter, WithRouterProps } from 'react-router';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\nimport clHistory from 'utils/cl-router/history';\nimport { stringify } from 'qs';\n\n// styles\nimport { stylingConsts, media } from 'utils/styleUtils';\nimport styled from 'styled-components';\n\n// components\nimport TopBar, {\n  topBarHeight,\n} from 'modules/commercial/insights/admin/components/TopBar';\nimport Categories from './Categories';\nimport Network from './Network';\nimport Inputs from './Inputs';\nimport Preview from './Preview';\nimport Navigation from 'modules/commercial/insights/admin/components/Navigation';\n\n// hooks\nimport useInsightsInputsLoadMore from 'modules/commercial/insights/hooks/useInsightsInputsLoadMore';\n\n// types\nimport { IInsightsInputData } from 'modules/commercial/insights/services/insightsInputs';\n\nconst Container = styled.div`\n  height: calc(100vh - ${stylingConsts.menuHeight + topBarHeight}px);\n  display: flex;\n  position: fixed;\n  right: 0;\n  top: ${stylingConsts.menuHeight + topBarHeight}px;\n  left: 210px;\n  bottom: 0;\n  ${media.smallerThan1280px`\n    left: 80px;\n  `}\n`;\n\nconst Left = styled.div`\n  position: relative;\n  width: 100%;\n`;\n\nconst DetailsInsightsView = ({\n  params: { viewId },\n  location: { pathname, query },\n}: WithRouterProps) => {\n  const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n  const [previewedInputIndex, setPreviewedInputIndex] = useState<number | null>(\n    null\n  );\n\n  const [movedUpDown, setMovedUpDown] = useState(false);\n\n  const category = query.category;\n  const search = query.search;\n\n  const {\n    list: inputs,\n    loading,\n    hasMore,\n    onLoadMore,\n  } = useInsightsInputsLoadMore(viewId, {\n    category,\n    search,\n  });\n\n  // Navigate to correct index when moving up and down\n  useEffect(() => {\n    if (\n      !isNilOrError(inputs) &&\n      !isNilOrError(previewedInputIndex) &&\n      movedUpDown\n    ) {\n      clHistory.replace({\n        pathname,\n        search: stringify(\n          {\n            ...query,\n            previewedInputId: inputs[previewedInputIndex].id,\n          },\n          { addQueryPrefix: true }\n        ),\n      });\n      setMovedUpDown(false);\n    }\n  }, [inputs, pathname, previewedInputIndex, query, movedUpDown]);\n\n  // Use callback to keep references for moveUp and moveDown stable\n  const moveUp = useCallback(() => {\n    setPreviewedInputIndex((prevSelectedIndex) =>\n      !isNilOrError(prevSelectedIndex)\n        ? prevSelectedIndex - 1\n        : prevSelectedIndex\n    );\n    setMovedUpDown(true);\n  }, []);\n\n  const moveDown = useCallback(() => {\n    setPreviewedInputIndex((prevSelectedIndex) =>\n      !isNilOrError(prevSelectedIndex)\n        ? prevSelectedIndex + 1\n        : prevSelectedIndex\n    );\n\n    setMovedUpDown(true);\n  }, []);\n\n  const closePreview = () => setIsPreviewOpen(false);\n\n  if (isNilOrError(inputs)) {\n    return null;\n  }\n\n  const onPreviewInput = (input: IInsightsInputData) => {\n    setPreviewedInputIndex(inputs.indexOf(input));\n\n    clHistory.replace({\n      pathname,\n      search: stringify(\n        { ...query, previewedInputId: input.id },\n        { addQueryPrefix: true }\n      ),\n    });\n    setIsPreviewOpen(true);\n  };\n\n  return (\n    <>\n      <TopBar />\n      <Container data-testid=\"insightsDetails\">\n        <Left>\n          {isPreviewOpen ? (\n            <>\n              <Preview closePreview={closePreview} />\n              <Navigation\n                moveUp={moveUp}\n                moveDown={moveDown}\n                isMoveUpDisabled={previewedInputIndex === 0}\n                isMoveDownDisabled={previewedInputIndex === inputs.length - 1}\n              />\n            </>\n          ) : (\n            <Categories>\n              <Network />\n            </Categories>\n          )}\n        </Left>\n        <Inputs\n          hasMore={hasMore}\n          inputs={inputs}\n          loading={loading}\n          onLoadMore={onLoadMore}\n          onPreviewInput={onPreviewInput}\n        />\n      </Container>\n    </>\n  );\n};\n\nexport default withRouter(DetailsInsightsView);\n","import { useState, useEffect } from 'react';\nimport {\n  insightsNetworkStream,\n  IInsightsNetworkData,\n} from '../services/insightsNetwork';\n\nconst useInsightsNetwork = (viewId: string) => {\n  const [insightsNetwork, setInsightsNetwork] = useState<\n    IInsightsNetworkData | undefined | null | Error\n  >(undefined);\n\n  useEffect(() => {\n    const subscription = insightsNetworkStream(viewId).observable.subscribe(\n      (insightsNetwork) => {\n        setInsightsNetwork(insightsNetwork.data);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, [viewId]);\n\n  return insightsNetwork;\n};\n\nexport default useInsightsNetwork;\n","import { useState, useEffect } from 'react';\nimport {\n  insightsCategoryStream,\n  IInsightsCategoryData,\n} from '../services/insightsCategories';\n\nconst useInsightsCategory = (viewId: string, id: string) => {\n  const [insightsCategory, setInsightsCategory] = useState<\n    IInsightsCategoryData | undefined | null | Error\n  >(undefined);\n\n  useEffect(() => {\n    const subscription = insightsCategoryStream(\n      viewId,\n      id\n    ).observable.subscribe((insightsCategory) => {\n      setInsightsCategory(insightsCategory.data);\n    });\n\n    return () => subscription.unsubscribe();\n  }, [viewId, id]);\n\n  return insightsCategory;\n};\n\nexport default useInsightsCategory;\n","import React, { useRef, useEffect } from 'react';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport clHistory from 'utils/cl-router/history';\nimport { stringify } from 'qs';\nimport useInsightsInput from 'modules/commercial/insights/hooks/useInsightsInput';\nimport { Spinner } from 'cl2-component-library';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// styles\nimport styled from 'styled-components';\n\n// components\nimport Button from 'components/UI/Button';\nimport Idea from 'modules/commercial/insights/admin/components/Idea';\nimport Category from 'modules/commercial/insights/admin/components/Category';\n\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n  background-color: #fff;\n  overflow-y: auto;\n  padding: 120px;\n`;\n\nconst CloseButton = styled(Button)`\n  position: absolute;\n  top: 12px;\n  right: 12px;\n`;\n\nconst CategoryList = styled.div`\n  margin-bottom: 12px;\n  > * {\n    margin-right: 8px;\n    margin-bottom: 8px;\n  }\n`;\n\ntype PreviewProps = {\n  closePreview: () => void;\n} & WithRouterProps;\n\nconst Preview = ({\n  params: { viewId },\n  location: { query, pathname },\n  closePreview,\n}: PreviewProps) => {\n  const previewedInput = useInsightsInput(viewId, query.previewedInputId);\n  const previewRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    previewRef.current && previewRef.current.scrollTo(0, 0);\n  }, [query.previewedInputId]);\n\n  // Loading state\n  if (previewedInput === undefined) {\n    return (\n      <Container data-testid=\"insightsDetailsPreviewLoading\">\n        <Spinner />\n      </Container>\n    );\n  }\n\n  if (isNilOrError(previewedInput)) {\n    return null;\n  }\n\n  const handleOnClose = () => {\n    clHistory.push({\n      pathname,\n      search: stringify(\n        { ...query, previewedInputId: undefined },\n        { addQueryPrefix: true }\n      ),\n    });\n    closePreview();\n  };\n\n  return (\n    <Container ref={previewRef} data-testid=\"insightsDetailsPreview\">\n      <div data-testid=\"insightsDetailsPreviewClose\">\n        <CloseButton\n          width=\"26px\"\n          height=\"26px\"\n          padding=\"0px\"\n          buttonStyle=\"white\"\n          icon=\"close\"\n          iconSize=\"12px\"\n          boxShadow=\"none\"\n          boxShadowHover=\"none\"\n          onClick={handleOnClose}\n        />\n      </div>\n      <CategoryList>\n        {previewedInput.relationships?.categories.data.map((category) => (\n          <Category\n            id={category.id}\n            key={category.id}\n            inputId={previewedInput.id}\n            variant=\"approved\"\n            withAction={false}\n          />\n        ))}\n      </CategoryList>\n      <Idea ideaId={query.previewedInputId} />\n    </Container>\n  );\n};\n\nexport default withRouter(Preview);\n"],"sourceRoot":""}