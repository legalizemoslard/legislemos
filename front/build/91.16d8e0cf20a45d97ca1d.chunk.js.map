{"version":3,"sources":["webpack:///./app/containers/Admin/dashboard/reports/QuestionReport.tsx","webpack:///./app/containers/Admin/dashboard/reports/charts/IdeasByStatusChart.tsx","webpack:///./app/containers/Admin/dashboard/reports/charts/LineBarChartVotesByTime.tsx","webpack:///./app/containers/Admin/dashboard/reports/charts/LineBarChart.tsx","webpack:///./app/containers/Admin/dashboard/reports/charts/ResponseGraph.tsx","webpack:///./app/containers/Admin/dashboard/reports/charts/BarChartActiveUsersByTime.tsx","webpack:///./app/containers/Admin/dashboard/reports/charts/HorizontalBarChartWithoutStream.tsx","webpack:///./app/containers/Admin/dashboard/reports/charts/ParticipationPerTopic.tsx","webpack:///./app/containers/Admin/dashboard/reports/PollReport.tsx","webpack:///./app/containers/Admin/dashboard/reports/ProjectReport.tsx","webpack:///./app/containers/Admin/dashboard/reports/messages.ts"],"names":["QuestionReport","memo","question","participationContextId","participationContextType","localize","pollOptions","id","pollResponses","key","serie","isNilOrError","undefined","relationships","options","data","map","relOption","option","find","fullOption","attributes","title_multiloc","code","value","series","name","getPollResponsesSerie","graphTitleString","graphUnit","className","injectIntl","IdeasByStatusChart","props","currentChart","React","createRef","this","chartFill","chartLabelSize","chartLabelColor","barHoverColor","animationBegin","animationDuration","currentGroupFilterLabel","currentGroupFilter","formatMessage","intl","noData","every","item","isEmpty","length","unitName","messages","inputs","CustomizedLabel","x","y","dx","dy","fontFamily","fill","fontSize","textAnchor","GraphCard","GraphCardInner","GraphCardHeader","GraphCardTitle","FormattedMessage","inputsByStatusTitle","svgNode","xlsxEndpoint","ideasByStatusXlsxEndpoint","NoDataContainer","ResponsiveContainer","height","BarChart","layout","ref","Bar","dataKey","label","barSize","entry","index","Cell","color","opacity","YAxis","type","width","stroke","tickLine","XAxis","tick","transform","Tooltip","isAnimationActive","cursor","PureComponent","IdeasByStatusChartWithHoCs","withTheme","inputProps","stream","ideasByStatusStream","convertToGraphFormat","ideas","idea_status","Object","keys","status","ordering","LineBarChartVotesByTime","date","resolution","formatDate","day","month","year","serieChange","toString","state","startAt","endAt","currentTopicFilter","currentProjectFilter","resubscribe","prevProps","combined$","unsubscribe","barSerie","lineSerie","up","down","total","cumulatedTotal","queryParameters","start_at","end_at","interval","project","group","topic","barStreamObservable","votesByTimeStream","observable","lineStreamObservable","votesByTimeCumulativeStream","combineLatest","subscribe","convertedAndMergedSeries","convertAndMergeSeries","setState","firstSerieValue","lastSerieValue","typeOfChange","totalNumber","formattedSerieChange","formatSerieChange","newLineColor","cartesianGridColor","newBarFill","formattedNumbers","getFormattedNumbers","votes","GraphCardFigureContainer","GraphCardFigure","GraphCardFigureChange","votesByTimeXlsxEndpoint","ComposedChart","margin","right","CartesianGrid","strokeWidth","tickFormatter","formatTick","yAxisId","Label","angle","position","orientation","perPeriod","period","labelFormatter","formatLabel","numberOfVotesUp","rgba","stackId","numberOfVotesDown","Line","dot","Legend","wrapperStyle","paddingTop","InfoIcon","Icon","StyledResponsiveContainer","LineBarChart","barValue","barStream","lineStream","graphTitle","infoMessage","Popup","basic","trigger","content","reverseStackOrder","allowDecimals","fillOpacity","totalForPeriod","activeDot","Boolean","StyledGraphCardInner","ResponseGraph","theme","useTheme","chartCategorySize","NameLabel","style","pointerEvents","ValueLabel","fontWeight","top","LabelList","offset","hide","BarChartActiveUsersByTime","subscription","convertedSerie","HorizontalBarChartWithoutStream","includes","onClick","slug","window","open","location","origin","sort","a","b","rowGap","Column","styled","div","Row","TopicName","fontSizes","small","ParticipationType","base","cellColor","colors","background","Value","p","xs","getCellColor","participationType","saturation","maxParticipationValue","luminosity","topics","mapped","topicId","nameMultiloc","res","sortBy","Data","adopt","ideasByTopic","projectId","render","ideasByTopicStream","commentsByTopic","commentsByTopicStream","votesByTopic","votesByTopicStream","ParticipationPerTopicWithHOCs","participationPerTopic","comments","PollReport","pollQuestions","participationContextTitle","SubSectionTitle","GraphsContainer","PollReportWithHoc","dataProps","Section","Phase","isCurrentPhase","border","adminBorder","borderRadius","RowSection","TimelineSection","ProjectReport","phases","mostVotedIdeas","isTimelineProject","process_type","useState","setResolution","setStartAt","setEndAt","useEffect","getResolution","created_at","toISOString","start","end","timeDiff","moment","duration","diff","asMonths","asWeeks","formatDateLabel","mostVotedIdeasSerie","list","idea","upvotes_count","downvotes_count","participationMethods","phase","participation_method","filter","el","i","arr","indexOf","projectTitle","participationMethodMessages","ideation","ideationAndFeedback","information","survey","budgeting","poll","volunteering","PageTitle","onChange","current_phase","fromTo","values","from","to","noPhase","SectionTitle","sectionWho","activeUsersByTimeStream","graphUnitMessageKey","participantsOverTimeTitle","activeUsersByTimeCumulativeXlsxEndpoint","currentProjectFilterLabel","sectionWhatInput","ideasByTimeCumulativeXlsxEndpoint","ideasByTimeCumulativeStream","ideasByTimeStream","commentsByTimeTitle","commentsByTimeCumulativeXlsxEndpoint","commentsByTimeCumulativeStream","commentsByTimeStream","fiveInputsWithMostVotes","ProjectReportWithHoc","params","pageNumber","pageSize","projectIds","withRouter","defineMessages","selectAProject","defaultMessage","timelineType","continuousType","projectType","customFieldTitleExport","week","seeReportButton"],"mappings":"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","file":"91.16d8e0cf20a45d97ca1d.chunk.js","sourcesContent":["import { IGraphPoint } from 'cl2-component-library/dist/utils/typings';\nimport useLocalize from 'hooks/useLocalize';\nimport usePollOptions from 'hooks/usePollOptions';\nimport usePollResponses from 'hooks/usePollResponses';\nimport React, { memo } from 'react';\nimport { InjectedIntlProps } from 'react-intl';\nimport { IPollQuestion } from 'services/pollQuestions';\nimport { injectIntl } from 'utils/cl-intl';\nimport { isNilOrError } from 'utils/helperUtils';\nimport ResponseGraph from './charts/ResponseGraph';\n\ninterface Props {\n  question: IPollQuestion;\n  participationContextId: string;\n  participationContextType: 'phase' | 'project';\n}\n\nconst QuestionReport = memo(\n  ({\n    question,\n    participationContextId,\n    participationContextType,\n  }: Props & InjectedIntlProps) => {\n    const localize = useLocalize();\n\n    const pollOptions = usePollOptions(question.id);\n\n    const getPollResponsesSerie = (question: IPollQuestion) => {\n      const serie: IGraphPoint[] | undefined =\n        isNilOrError(pollResponses) || isNilOrError(pollOptions)\n          ? undefined\n          : question.relationships.options.data.map((relOption) => {\n              const option = pollOptions.data.find(\n                (fullOption) => fullOption && relOption.id === fullOption.id\n              )?.attributes.title_multiloc;\n              return {\n                code: relOption.id,\n                value: pollResponses.series.options[relOption.id],\n                name: option ? localize(option) : 'TODOfallbacksomehow',\n              };\n            });\n      return serie;\n    };\n\n    const pollResponses = usePollResponses({\n      participationContextId,\n      participationContextType,\n    });\n\n    return (\n      <ResponseGraph\n        key={question.id}\n        serie={getPollResponsesSerie(question)}\n        graphTitleString={localize(question.attributes.title_multiloc)}\n        graphUnit=\"responses\"\n        className=\"dynamicHeight\"\n      />\n    );\n  }\n);\n\nexport default injectIntl(QuestionReport);\n","// libraries\nimport React from 'react';\nimport { isEmpty, map } from 'lodash-es';\n\n// intl\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// styling\nimport { withTheme } from 'styled-components';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  BarChart,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Cell,\n} from 'recharts';\nimport {\n  NoDataContainer,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCard,\n  GraphCardInner,\n} from 'components/admin/Chart';\n\n// resources\nimport GetSerieFromStream from 'resources/GetSerieFromStream';\n\n// types\nimport { ideasByStatusStream, ideasByStatusXlsxEndpoint } from 'services/stats';\nimport { IGraphFormat } from 'typings';\nimport injectLocalize, { InjectedLocalized } from 'utils/localize';\n\ninterface DataProps {\n  serie: IGraphFormat;\n}\n\ninterface InputProps {\n  startAt: string | null | undefined;\n  endAt: string | null;\n  currentProjectFilter?: string | undefined;\n  currentGroupFilter?: string | undefined;\n  currentGroupFilterLabel?: string | undefined;\n  className?: string;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nexport class IdeasByStatusChart extends React.PureComponent<\n  Props & InjectedIntlProps\n> {\n  currentChart: React.RefObject<any>;\n  constructor(props: Props & InjectedIntlProps) {\n    super(props as any);\n    this.currentChart = React.createRef();\n  }\n\n  render() {\n    const {\n      chartFill,\n      chartLabelSize,\n      chartLabelColor,\n      barHoverColor,\n      animationBegin,\n      animationDuration,\n    } = this.props['theme'];\n    const {\n      currentGroupFilterLabel,\n      currentGroupFilter,\n      className,\n      serie,\n      intl: { formatMessage },\n    } = this.props;\n\n    const noData =\n      !serie || serie.every((item) => isEmpty(item)) || serie.length <= 0;\n\n    const unitName = formatMessage(messages.inputs);\n\n    const CustomizedLabel = (props) => {\n      const { x, y, value } = props;\n      return (\n        <text\n          x={x}\n          y={y}\n          dx={20}\n          dy={-6}\n          fontFamily=\"sans-serif\"\n          fill={chartLabelColor}\n          fontSize={chartLabelSize}\n          textAnchor=\"middle\"\n        >\n          {' '}\n          {value}{' '}\n        </text>\n      );\n    };\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              <FormattedMessage {...messages.inputsByStatusTitle} />\n            </GraphCardTitle>\n            {!noData && (\n              <ReportExportMenu\n                name={formatMessage(messages.inputsByStatusTitle)}\n                svgNode={this.currentChart}\n                xlsxEndpoint={ideasByStatusXlsxEndpoint}\n                currentGroupFilterLabel={currentGroupFilterLabel}\n                currentGroupFilter={currentGroupFilter}\n              />\n            )}\n          </GraphCardHeader>\n          {noData ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <ResponsiveContainer\n              height={serie.length > 1 ? serie.length * 50 : 100}\n            >\n              <BarChart data={serie} layout=\"vertical\" ref={this.currentChart}>\n                <Bar\n                  dataKey=\"value\"\n                  name={unitName}\n                  fill={chartFill}\n                  label={<CustomizedLabel />}\n                  barSize={5}\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                >\n                  {serie.map((entry, index) => {\n                    return (\n                      <Cell\n                        key={`cell-${index}`}\n                        fill={(entry.color && entry.color) || chartFill}\n                        opacity={0.8}\n                      />\n                    );\n                  })}\n                </Bar>\n                <YAxis\n                  dataKey=\"name\"\n                  type=\"category\"\n                  width={150}\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tickLine={false}\n                />\n                <XAxis\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  type=\"number\"\n                  tick={{ transform: 'translate(0, 7)' }}\n                />\n                <Tooltip\n                  isAnimationActive={false}\n                  cursor={{ fill: barHoverColor }}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nconst IdeasByStatusChartWithHoCs = injectIntl<Props>(\n  withTheme(IdeasByStatusChart as any) as any\n);\n\nconst WrappedIdeasByStatusChart = (\n  inputProps: InputProps & InjectedLocalized\n) => {\n  const convertToGraphFormat = ({ series: { ideas }, idea_status }) => {\n    if (Object.keys(ideas).length <= 0) {\n      return null;\n    }\n\n    return map(idea_status, (status, id) => ({\n      value: ideas[id] || 0,\n      name: inputProps.localize(status.title_multiloc),\n      code: id,\n      color: status.color,\n      ordering: status.ordering,\n    }));\n  };\n  return (\n    <GetSerieFromStream\n      {...inputProps}\n      stream={ideasByStatusStream}\n      convertToGraphFormat={convertToGraphFormat}\n    >\n      {(serie) => <IdeasByStatusChartWithHoCs {...serie} {...inputProps} />}\n    </GetSerieFromStream>\n  );\n};\n\nexport default injectLocalize(WrappedIdeasByStatusChart);\n","// libraries\nimport React from 'react';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map, isEmpty } from 'lodash-es';\n\n// styling\nimport { withTheme } from 'styled-components';\nimport { rgba } from 'polished';\n\n// services\nimport {\n  votesByTimeStream,\n  votesByTimeCumulativeStream,\n  votesByTimeXlsxEndpoint,\n  IVotesByTime,\n} from 'services/stats';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  Line,\n  Label,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  CartesianGrid,\n  Legend,\n  ComposedChart,\n} from 'recharts';\nimport {\n  GraphCard,\n  NoDataContainer,\n  GraphCardInner,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCardFigureContainer,\n  GraphCardFigure,\n  GraphCardFigureChange,\n} from 'components/admin/Chart';\nimport { IResolution } from 'components/admin/ResolutionControl';\n\n// i18n\nimport messages from '../messages';\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\n\ntype ISerie = {\n  cumulatedTotal: number;\n  date: string | number;\n  up: number;\n  down: number;\n  total: number;\n  code: string;\n}[];\n\ntype State = {\n  serie: ISerie | null;\n};\n\ntype Props = {\n  className?: string;\n  startAt: string | null | undefined;\n  endAt: string | null;\n  resolution: IResolution;\n  currentProjectFilter?: string;\n  currentGroupFilter?: string;\n  currentTopicFilter?: string;\n  currentProjectFilterLabel?: string;\n  currentGroupFilterLabel?: string;\n  currentTopicFilterLabel?: string;\n};\n\nclass LineBarChartVotesByTime extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  combined$: Subscription;\n  currentChart: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      serie: null,\n    };\n\n    this.currentChart = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    this.resubscribe(\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    if (\n      startAt !== prevProps.startAt ||\n      endAt !== prevProps.endAt ||\n      resolution !== prevProps.resolution ||\n      currentGroupFilter !== prevProps.currentGroupFilter ||\n      currentTopicFilter !== prevProps.currentTopicFilter ||\n      currentProjectFilter !== prevProps.currentProjectFilter\n    ) {\n      this.resubscribe(\n        startAt,\n        endAt,\n        resolution,\n        currentGroupFilter,\n        currentTopicFilter,\n        currentProjectFilter\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.combined$.unsubscribe();\n  }\n\n  convertAndMergeSeries(barSerie: IVotesByTime, lineSerie: IVotesByTime) {\n    const { up, down, total } = barSerie.series;\n    let convertedSerie;\n\n    if (!isEmpty(total) && !isEmpty(lineSerie.series.total)) {\n      convertedSerie = map(total, (value, key) => ({\n        total: value,\n        down: down[key],\n        up: up[key],\n        date: key,\n        code: key,\n        cumulatedTotal: lineSerie.series.total[key],\n      }));\n    } else {\n      return null;\n    }\n\n    return convertedSerie;\n  }\n\n  resubscribe(\n    startAt: string | null | undefined,\n    endAt: string | null,\n    resolution: IResolution,\n    currentGroupFilter: string | undefined,\n    currentTopicFilter: string | undefined,\n    currentProjectFilter: string | undefined\n  ) {\n    if (this.combined$) {\n      this.combined$.unsubscribe();\n    }\n\n    const queryParameters = {\n      queryParameters: {\n        start_at: startAt,\n        end_at: endAt,\n        interval: resolution,\n        project: currentProjectFilter,\n        group: currentGroupFilter,\n        topic: currentTopicFilter,\n      },\n    };\n\n    const barStreamObservable = votesByTimeStream(queryParameters).observable;\n    const lineStreamObservable = votesByTimeCumulativeStream(queryParameters)\n      .observable;\n    this.combined$ = combineLatest(\n      barStreamObservable,\n      lineStreamObservable\n    ).subscribe(([barSerie, lineSerie]) => {\n      const convertedAndMergedSeries = this.convertAndMergeSeries(\n        barSerie,\n        lineSerie\n      );\n      this.setState({ serie: convertedAndMergedSeries });\n    });\n  }\n\n  formatTick = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'short',\n    });\n  };\n\n  formatLabel = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'long',\n      year: 'numeric',\n    });\n  };\n\n  formatSerieChange = (serieChange: number) => {\n    if (serieChange > 0) {\n      return `(+${serieChange.toString()})`;\n    } else if (serieChange < 0) {\n      return `(${serieChange.toString()})`;\n    }\n    return null;\n  };\n\n  getFormattedNumbers(serie: ISerie | null) {\n    if (serie && serie.length > 0) {\n      const firstSerieValue = serie[0].cumulatedTotal;\n      const lastSerieValue = serie[serie.length - 1].cumulatedTotal;\n      const serieChange = lastSerieValue - firstSerieValue;\n      let typeOfChange: 'increase' | 'decrease' | '' = '';\n\n      if (serieChange > 0) {\n        typeOfChange = 'increase';\n      } else if (serieChange < 0) {\n        typeOfChange = 'decrease';\n      }\n\n      return {\n        typeOfChange,\n        totalNumber: lastSerieValue,\n        formattedSerieChange: this.formatSerieChange(serieChange),\n      };\n    }\n\n    return {\n      totalNumber: null,\n      formattedSerieChange: null,\n      typeOfChange: '',\n    };\n  }\n\n  render() {\n    const {\n      chartLabelSize,\n      chartLabelColor,\n      newLineColor,\n      animationBegin,\n      animationDuration,\n      cartesianGridColor,\n      newBarFill,\n    } = this.props['theme'];\n    const { formatMessage } = this.props.intl;\n    const { serie } = this.state;\n    const formattedNumbers = this.getFormattedNumbers(serie);\n    const { className, resolution } = this.props;\n    const {\n      totalNumber,\n      formattedSerieChange,\n      typeOfChange,\n    } = formattedNumbers;\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              <FormattedMessage {...messages.votes} />\n              <GraphCardFigureContainer>\n                <GraphCardFigure>{totalNumber}</GraphCardFigure>\n                <GraphCardFigureChange className={typeOfChange}>\n                  {formattedSerieChange}\n                </GraphCardFigureChange>\n              </GraphCardFigureContainer>\n            </GraphCardTitle>\n\n            {serie && (\n              <ReportExportMenu\n                svgNode={this.currentChart}\n                xlsxEndpoint={votesByTimeXlsxEndpoint}\n                name={formatMessage(messages.votes)}\n                {...this.props}\n              />\n            )}\n          </GraphCardHeader>\n          {!serie ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <ResponsiveContainer>\n              <ComposedChart\n                data={serie}\n                margin={{ right: 40 }}\n                ref={this.currentChart}\n              >\n                <CartesianGrid stroke={cartesianGridColor} strokeWidth={0.5} />\n                <XAxis\n                  dataKey=\"date\"\n                  interval=\"preserveStartEnd\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tick={{ transform: 'translate(0, 7)' }}\n                  tickFormatter={this.formatTick}\n                  tickLine={false}\n                />\n                <YAxis\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  yAxisId=\"cumulatedTotal\"\n                  tickLine={false}\n                >\n                  <Label\n                    value={formatMessage(messages.total)}\n                    angle={-90}\n                    position={'center'}\n                    dx={-15}\n                  />\n                </YAxis>\n                <YAxis yAxisId=\"barValue\" orientation=\"right\" tickLine={false}>\n                  <Label\n                    value={formatMessage(messages.perPeriod, {\n                      period: formatMessage(messages[resolution]),\n                    })}\n                    angle={90}\n                    position={'center'}\n                    dx={15}\n                  />\n                </YAxis>\n                <Tooltip\n                  isAnimationActive={false}\n                  labelFormatter={this.formatLabel}\n                />\n\n                <Bar\n                  dataKey=\"up\"\n                  name={formatMessage(messages.numberOfVotesUp)}\n                  fill={rgba(newBarFill, 1)}\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                  stackId=\"1\"\n                  yAxisId=\"barValue\"\n                  barSize={20}\n                />\n                <Bar\n                  dataKey=\"down\"\n                  name={formatMessage(messages.numberOfVotesDown)}\n                  fill={rgba(newBarFill, 0.7)}\n                  stackId=\"1\"\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                  stroke=\"none\"\n                  yAxisId=\"barValue\"\n                  barSize={20}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"cumulatedTotal\"\n                  name={formatMessage(messages.total)}\n                  dot={serie && serie?.length < 31}\n                  stroke={newLineColor}\n                  fill={newLineColor}\n                  strokeWidth={1}\n                  yAxisId=\"cumulatedTotal\"\n                />\n\n                <Legend\n                  wrapperStyle={{\n                    paddingTop: '20px',\n                  }}\n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nexport default injectIntl<Props>(\n  withTheme(LineBarChartVotesByTime as any) as any\n);\n","// libraries\nimport React from 'react';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map, isEmpty } from 'lodash-es';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// typings\nimport { IStreamParams, IStream } from 'utils/streams';\nimport {\n  IResourceByTime,\n  IVotesByTime,\n  IUsersByTime,\n  IIdeasByTime,\n  ICommentsByTime,\n} from 'services/stats';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  ComposedChart,\n  CartesianGrid,\n  Tooltip,\n  Line,\n  Legend,\n  Bar,\n  XAxis,\n  YAxis,\n  Label,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  IGraphUnit,\n  GraphCard,\n  NoDataContainer,\n  GraphCardInner,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCardFigureContainer,\n  GraphCardFigure,\n  GraphCardFigureChange,\n} from 'components/admin/Chart';\nimport { IResolution } from 'components/admin/ResolutionControl';\nimport { Popup } from 'semantic-ui-react';\nimport { Icon } from 'cl2-component-library';\n\n// styling\nimport styled, { withTheme } from 'styled-components';\n\nconst InfoIcon = styled(Icon)`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  width: 20px;\n  height: 22px;\n  margin-left: 10px;\n`;\n\nconst StyledResponsiveContainer = styled(ResponsiveContainer)`\n  .recharts-wrapper {\n    @media print {\n      margin: 0 auto;\n    }\n  }\n`;\n\ntype IComposedGraphFormat = {\n  total: number | string;\n  name: string;\n  code: string;\n  barValue: number | string;\n}[];\n\ninterface State {\n  serie: IComposedGraphFormat | null;\n}\n\ntype IStreams =\n  | IStream<IUsersByTime>\n  | IStream<IIdeasByTime>\n  | IStream<ICommentsByTime>\n  | IStream<IVotesByTime>;\n\ninterface Props {\n  className?: string;\n  graphUnit: IGraphUnit;\n  graphUnitMessageKey: string;\n  graphTitle: string;\n  startAt: string | null | undefined;\n  endAt: string | null;\n  resolution: IResolution;\n  currentProjectFilter?: string;\n  currentGroupFilter?: string;\n  currentTopicFilter?: string;\n  barStream: (streamParams: IStreamParams | null) => IStreams;\n  lineStream: (streamParams: IStreamParams | null) => IStreams;\n  infoMessage?: string;\n  currentProjectFilterLabel?: string;\n  currentGroupFilterLabel?: string;\n  currentTopicFilterLabel?: string;\n  xlsxEndpoint: string;\n}\n\nclass LineBarChart extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  combined$: Subscription;\n  currentChart: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      serie: null,\n    };\n\n    this.currentChart = React.createRef();\n  }\n\n  componentDidMount() {\n    this.resubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    if (\n      startAt !== prevProps.startAt ||\n      endAt !== prevProps.endAt ||\n      resolution !== prevProps.resolution ||\n      currentGroupFilter !== prevProps.currentGroupFilter ||\n      currentTopicFilter !== prevProps.currentTopicFilter ||\n      currentProjectFilter !== prevProps.currentProjectFilter\n    ) {\n      this.resubscribe();\n    }\n  }\n\n  componentWillUnmount() {\n    this.combined$.unsubscribe();\n  }\n\n  convertAndMergeSeries = (\n    barSerie: IResourceByTime,\n    lineSerie: IResourceByTime\n  ) => {\n    const { graphUnit } = this.props;\n    let convertedSerie;\n\n    if (\n      !isEmpty(lineSerie.series[graphUnit]) &&\n      !isEmpty(barSerie.series[graphUnit])\n    ) {\n      convertedSerie = map(lineSerie.series[graphUnit], (value, key) => ({\n        total: value,\n        barValue: barSerie.series[graphUnit][key],\n        name: key,\n        code: key,\n      }));\n    } else {\n      return null;\n    }\n\n    return convertedSerie;\n  };\n\n  resubscribe() {\n    const {\n      barStream,\n      lineStream,\n      startAt,\n      endAt,\n      resolution,\n      currentProjectFilter,\n      currentGroupFilter,\n      currentTopicFilter,\n    } = this.props;\n\n    if (this.combined$) {\n      this.combined$.unsubscribe();\n    }\n\n    const queryParameters = {\n      queryParameters: {\n        start_at: startAt,\n        end_at: endAt,\n        interval: resolution,\n        project: currentProjectFilter,\n        group: currentGroupFilter,\n        topic: currentTopicFilter,\n      },\n    };\n\n    const barStreamObservable = barStream(queryParameters).observable;\n    const lineStreamObservable = lineStream(queryParameters).observable;\n    this.combined$ = combineLatest(\n      barStreamObservable,\n      lineStreamObservable\n    ).subscribe(([barSerie, lineSerie]) => {\n      const convertedAndMergedSeries = this.convertAndMergeSeries(\n        barSerie,\n        lineSerie\n      );\n      this.setState({ serie: convertedAndMergedSeries });\n    });\n  }\n\n  formatTick = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'short',\n    });\n  };\n\n  formatLabel = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'long',\n      year: 'numeric',\n    });\n  };\n\n  formatSerieChange = (serieChange: number) => {\n    if (serieChange > 0) {\n      return `(+${serieChange.toString()})`;\n    } else if (serieChange < 0) {\n      return `(${serieChange.toString()})`;\n    }\n    return null;\n  };\n\n  getFormattedNumbers(serie) {\n    if (serie) {\n      const firstSerieValue = serie && serie[0].total;\n      const lastSerieValue = serie && serie[serie.length - 1].total;\n      const serieChange = lastSerieValue - firstSerieValue;\n      let typeOfChange: 'increase' | 'decrease' | '' = '';\n\n      if (serieChange > 0) {\n        typeOfChange = 'increase';\n      } else if (serieChange < 0) {\n        typeOfChange = 'decrease';\n      }\n\n      return {\n        typeOfChange,\n        totalNumber: lastSerieValue,\n        formattedSerieChange: this.formatSerieChange(serieChange),\n      };\n    }\n\n    return {\n      totalNumber: null,\n      formattedSerieChange: null,\n      typeOfChange: '',\n    };\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { className, graphTitle, infoMessage, resolution } = this.props;\n    const { serie } = this.state;\n\n    const {\n      chartLabelSize,\n      chartLabelColor,\n      cartesianGridColor,\n      newBarFill,\n      newLineColor,\n    } = this.props['theme'];\n\n    const formattedNumbers = this.getFormattedNumbers(serie);\n    const {\n      totalNumber,\n      formattedSerieChange,\n      typeOfChange,\n    } = formattedNumbers;\n\n    const noData =\n      !serie || serie.every((item) => isEmpty(item)) || serie.length <= 0;\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              {graphTitle}\n              {infoMessage && (\n                <Popup\n                  basic\n                  trigger={\n                    <div>\n                      <InfoIcon name=\"info\" />\n                    </div>\n                  }\n                  content={infoMessage}\n                  position=\"top left\"\n                />\n              )}\n\n              <GraphCardFigureContainer>\n                <GraphCardFigure>{totalNumber}</GraphCardFigure>\n                <GraphCardFigureChange className={typeOfChange}>\n                  {formattedSerieChange}\n                </GraphCardFigureChange>\n              </GraphCardFigureContainer>\n            </GraphCardTitle>\n\n            {!noData && (\n              <ReportExportMenu\n                svgNode={this.currentChart}\n                name={graphTitle}\n                {...this.props}\n              />\n            )}\n          </GraphCardHeader>\n          {noData ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <StyledResponsiveContainer>\n              <ComposedChart\n                data={serie ?? undefined}\n                reverseStackOrder={true}\n                ref={this.currentChart}\n              >\n                <CartesianGrid stroke={cartesianGridColor} strokeWidth={0.5} />\n                <XAxis\n                  dataKey=\"name\"\n                  interval=\"preserveStartEnd\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tick={{ transform: 'translate(0, 7)' }}\n                  tickFormatter={this.formatTick}\n                  tickLine={false}\n                />\n                <YAxis\n                  yAxisId=\"total\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tickLine={false}\n                >\n                  <Label\n                    value={formatMessage(messages.total)}\n                    angle={-90}\n                    position={'center'}\n                    dx={-15}\n                  />\n                </YAxis>\n                <YAxis\n                  yAxisId=\"barValue\"\n                  orientation=\"right\"\n                  allowDecimals={false}\n                  tickLine={false}\n                >\n                  <Label\n                    value={formatMessage(messages.perPeriod, {\n                      period: formatMessage(messages[resolution]),\n                    })}\n                    angle={90}\n                    position={'center'}\n                    dx={15}\n                  />\n                </YAxis>\n                <Tooltip\n                  isAnimationActive={false}\n                  labelFormatter={this.formatLabel}\n                  cursor={{ strokeWidth: 1 }}\n                />\n\n                <Bar\n                  dataKey=\"barValue\"\n                  yAxisId=\"barValue\"\n                  barSize={20}\n                  fill={newBarFill}\n                  fillOpacity={1}\n                  name={formatMessage(messages.totalForPeriod, {\n                    period: formatMessage(messages[resolution]),\n                  })}\n                />\n                <Line\n                  type=\"monotone\"\n                  yAxisId=\"total\"\n                  dataKey=\"total\"\n                  activeDot={Boolean(serie && serie?.length < 31)}\n                  stroke={newLineColor}\n                  fill={newLineColor}\n                  strokeWidth={1}\n                  name={formatMessage(messages.total)}\n                />\n                <Legend\n                  wrapperStyle={{\n                    paddingTop: '20px',\n                  }}\n                />\n              </ComposedChart>\n            </StyledResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nexport default injectIntl<Props>(withTheme(LineBarChart as any) as any);\n","// libraries\nimport React, { memo } from 'react';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// styling\nimport styled, { useTheme } from 'styled-components';\n\n// resources\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  LabelList,\n} from 'recharts';\nimport {\n  IGraphUnit,\n  NoDataContainer,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCardInner,\n} from 'components/admin/Chart';\n\n// types\nimport { IGraphPoint } from 'typings';\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\n\ninterface Props {\n  serie: IGraphPoint[] | undefined;\n  graphTitleString: string;\n  graphUnit: IGraphUnit;\n  className?: string;\n  customId?: string;\n}\n\nconst StyledResponsiveContainer = styled(ResponsiveContainer)`\n  .recharts-wrapper {\n    @media print {\n      margin: 0 auto;\n    }\n    padding: 20px;\n    padding-top: 0px;\n  }\n`;\n\nconst StyledGraphCardInner = styled(GraphCardInner)`\n  border: none;\n`;\n\nexport const ResponseGraph = memo(\n  ({ graphTitleString, serie }: Props & InjectedIntlProps) => {\n    const theme: any = useTheme();\n\n    const currentChart: React.RefObject<any> = React.createRef();\n\n    const {\n      chartLabelSize,\n      chartCategorySize,\n      chartLabelColor,\n      animationBegin,\n      animationDuration,\n      newBarFill,\n    } = theme;\n\n    const NameLabel = (props) => {\n      const { x, y, value } = props;\n      return (\n        <g style={{ pointerEvents: 'none' }}>\n          <text\n            x={x}\n            y={y}\n            dx={30}\n            dy={-6}\n            fill={chartLabelColor}\n            fontSize={chartCategorySize}\n            textAnchor=\"left\"\n          >\n            {value}\n          </text>\n        </g>\n      );\n    };\n\n    const ValueLabel = (props) => {\n      const { x, y, value } = props;\n      return (\n        <g style={{ pointerEvents: 'none' }}>\n          <text\n            x={x}\n            y={y}\n            dx={5}\n            dy={-6}\n            fill={chartLabelColor}\n            fontSize={chartCategorySize}\n            textAnchor=\"right\"\n            fontWeight={'800'}\n          >\n            {value || '0'}\n          </text>\n        </g>\n      );\n    };\n\n    return (\n      <StyledGraphCardInner>\n        <GraphCardHeader>\n          <GraphCardTitle>{graphTitleString}</GraphCardTitle>\n          {!isNilOrError(serie) && (\n            <ReportExportMenu svgNode={currentChart} name={graphTitleString} />\n          )}\n        </GraphCardHeader>\n        {isNilOrError(serie) ? (\n          <NoDataContainer>\n            <FormattedMessage {...messages.noData} />\n          </NoDataContainer>\n        ) : (\n          <StyledResponsiveContainer\n            height={serie?.length > 1 ? serie.length * 50 : 100}\n          >\n            <BarChart\n              data={serie}\n              layout=\"vertical\"\n              ref={currentChart}\n              margin={{ right: 20, top: 10 }}\n            >\n              <Bar\n                name=\"Count\"\n                dataKey=\"value\"\n                fill={newBarFill}\n                barSize={5}\n                animationDuration={animationDuration}\n                animationBegin={animationBegin}\n              >\n                <LabelList\n                  dataKey=\"name\"\n                  position=\"top\"\n                  content={<NameLabel />}\n                />\n                <LabelList\n                  dataKey=\"value\"\n                  position=\"insideTopRight\"\n                  offset={-20}\n                  content={<ValueLabel />}\n                />\n              </Bar>\n\n              <YAxis\n                dataKey=\"name\"\n                type=\"category\"\n                width={150}\n                stroke={chartLabelColor}\n                fontSize={chartLabelSize}\n                tickLine={false}\n                hide={true}\n              />\n              <XAxis\n                stroke={chartLabelColor}\n                fontSize={chartLabelSize}\n                type=\"number\"\n                tick={{ transform: 'translate(0, 7)' }}\n                hide={true}\n              />\n            </BarChart>\n          </StyledResponsiveContainer>\n        )}\n      </StyledGraphCardInner>\n    );\n  }\n);\n\nconst ResponseGraphWithHoCs = injectIntl(ResponseGraph);\n\nexport default ResponseGraphWithHoCs;\n","// libraries\nimport React from 'react';\nimport { Subscription } from 'rxjs';\nimport { map, isEmpty } from 'lodash-es';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// typings\nimport { IStreamParams, IStream } from 'utils/streams';\nimport { IResourceByTime, IUsersByTime } from 'services/stats';\nimport { IGraphFormat } from 'typings';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  BarChart,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  IGraphUnit,\n  GraphCard,\n  GraphCardInner,\n  GraphCardHeader,\n  GraphCardTitle,\n  NoDataContainer,\n} from 'components/admin/Chart';\nimport { IResolution } from 'components/admin/ResolutionControl';\nimport { Popup } from 'semantic-ui-react';\nimport { Icon } from 'cl2-component-library';\n\n// styling\nimport styled, { withTheme } from 'styled-components';\n\nconst InfoIcon = styled(Icon)`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  width: 20px;\n  height: 22px;\n  margin-left: 10px;\n`;\n\nconst StyledResponsiveContainer = styled(ResponsiveContainer)`\n  .recharts-wrapper {\n    @media print {\n      margin: 0 auto;\n    }\n  }\n`;\n\ntype State = {\n  serie: IGraphFormat | null;\n};\n\ntype Props = {\n  className?: string;\n  graphUnit: IGraphUnit;\n  graphUnitMessageKey: string;\n  graphTitle: string;\n  startAt: string | null | undefined;\n  endAt: string | null;\n  resolution: IResolution;\n  currentProjectFilter?: string | undefined;\n  currentGroupFilter?: string | undefined;\n  currentTopicFilter?: string | undefined;\n  stream: (streamParams?: IStreamParams | null) => IStream<IUsersByTime>;\n  infoMessage?: string;\n  currentProjectFilterLabel?: string | undefined;\n  currentGroupFilterLabel?: string | undefined;\n  currentTopicFilterLabel?: string | undefined;\n  xlsxEndpoint: string;\n};\n\nclass BarChartActiveUsersByTime extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  subscription: Subscription;\n  currentChart: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      serie: null,\n    };\n\n    this.currentChart = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n    this.resubscribe(\n      startAt,\n      endAt,\n      resolution,\n      currentProjectFilter,\n      currentGroupFilter,\n      currentTopicFilter\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    if (\n      startAt !== prevProps.startAt ||\n      endAt !== prevProps.endAt ||\n      resolution !== prevProps.resolution ||\n      currentGroupFilter !== prevProps.currentGroupFilter ||\n      currentTopicFilter !== prevProps.currentTopicFilter ||\n      currentProjectFilter !== prevProps.currentProjectFilter\n    ) {\n      this.resubscribe(\n        startAt,\n        endAt,\n        resolution,\n        currentProjectFilter,\n        currentGroupFilter,\n        currentTopicFilter\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  convertToGraphFormat = (data: IResourceByTime) => {\n    const { graphUnit } = this.props;\n\n    if (!isEmpty(data.series[graphUnit])) {\n      return map(data.series[graphUnit], (value, key) => ({\n        value,\n        name: key,\n        code: key,\n      }));\n    }\n\n    return null;\n  };\n\n  resubscribe(\n    startAt: string | null | undefined,\n    endAt: string | null,\n    resolution: IResolution,\n    currentProjectFilter: string | undefined,\n    currentGroupFilter: string | undefined,\n    currentTopicFilter: string | undefined\n  ) {\n    const { stream } = this.props;\n\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n\n    this.subscription = stream({\n      queryParameters: {\n        start_at: startAt,\n        end_at: endAt,\n        interval: resolution,\n        project: currentProjectFilter,\n        group: currentGroupFilter,\n        topic: currentTopicFilter,\n      },\n    }).observable.subscribe((serie) => {\n      const convertedSerie = this.convertToGraphFormat(serie);\n      this.setState({ serie: convertedSerie });\n    });\n  }\n\n  formatTick = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'short',\n    });\n  };\n\n  formatLabel = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'long',\n      year: 'numeric',\n    });\n  };\n\n  render() {\n    const { className, graphTitle, infoMessage } = this.props;\n    const { serie } = this.state;\n    const {\n      chartLabelSize,\n      chartLabelColor,\n      barHoverColor,\n      animationBegin,\n      animationDuration,\n      newBarFill,\n    } = this.props['theme'];\n\n    const noData =\n      !serie || serie.every((item) => isEmpty(item)) || serie.length <= 0;\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              {graphTitle}\n              {infoMessage && (\n                <Popup\n                  basic\n                  trigger={\n                    <div>\n                      <InfoIcon name=\"info\" />\n                    </div>\n                  }\n                  content={infoMessage}\n                  position=\"top left\"\n                />\n              )}\n            </GraphCardTitle>\n            {!noData && (\n              <ReportExportMenu\n                svgNode={this.currentChart}\n                name={graphTitle}\n                {...this.props}\n              />\n            )}\n          </GraphCardHeader>\n          {noData ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <StyledResponsiveContainer>\n              <BarChart data={serie ?? undefined} ref={this.currentChart}>\n                <Bar\n                  dataKey=\"value\"\n                  name={graphTitle}\n                  fill={newBarFill}\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                  isAnimationActive={true}\n                />\n                <XAxis\n                  dataKey=\"name\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tick={{ transform: 'translate(0, 7)' }}\n                  tickFormatter={this.formatTick}\n                />\n                <YAxis stroke={chartLabelColor} fontSize={chartLabelSize} />\n                <Tooltip\n                  isAnimationActive={false}\n                  labelFormatter={this.formatLabel}\n                  cursor={{ fill: barHoverColor }}\n                />\n              </BarChart>\n            </StyledResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nexport default injectIntl<Props>(\n  withTheme(BarChartActiveUsersByTime as any) as any\n);\n","// libraries\nimport React, { memo } from 'react';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// styling\nimport styled, { useTheme } from 'styled-components';\n\n// resources\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Cell,\n  LabelList,\n} from 'recharts';\nimport {\n  IGraphUnit,\n  NoDataContainer,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCard,\n  GraphCardInner,\n} from 'components/admin/Chart';\n\n// types\nimport { IGraphPoint } from 'typings';\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\n\ninterface VoteGraphPoint extends IGraphPoint {\n  up: number;\n  down: number;\n  slug: string;\n  ordering?: number;\n  color?: string;\n}\n\ninterface Props {\n  serie: VoteGraphPoint[] | undefined;\n  graphTitleString: string;\n  graphUnit: IGraphUnit;\n  className?: string;\n  customId?: string;\n}\n\nconst StyledResponsiveContainer = styled(ResponsiveContainer)`\n  .recharts-wrapper {\n    @media print {\n      margin: 0 auto;\n    }\n    padding: 20px;\n    padding-top: 0px;\n  }\n`;\n\nexport const HorizontalBarChartWithoutStream: React.SFC<\n  Props & InjectedIntlProps\n> = memo(({ className, graphTitleString, serie, graphUnit }) => {\n  const theme: any = useTheme();\n\n  const currentChart: React.RefObject<any> = React.createRef();\n\n  const {\n    chartLabelSize,\n    chartCategorySize,\n    chartLabelColor,\n    animationBegin,\n    animationDuration,\n    newBarFill,\n  } = theme;\n\n  const openIdeaInANewTab = ({ slug }: { slug: string }) => {\n    if (!isNilOrError(slug)) {\n      window.open(`${window.location.origin}/ideas/${slug}`);\n    }\n  };\n\n  const NameLabel = (props) => {\n    const { x, y, value } = props;\n    return (\n      <g style={{ pointerEvents: 'none' }}>\n        <text\n          x={x}\n          y={y}\n          dx={30}\n          dy={-6}\n          fill={chartLabelColor}\n          fontSize={chartCategorySize}\n          textAnchor=\"left\"\n        >\n          {value}\n        </text>\n      </g>\n    );\n  };\n\n  const ValueLabel = (props) => {\n    const { x, y, value } = props;\n    return (\n      <g style={{ pointerEvents: 'none' }}>\n        <text\n          x={x}\n          y={y}\n          dx={5}\n          dy={-6}\n          fill={chartLabelColor}\n          fontSize={chartCategorySize}\n          textAnchor=\"right\"\n          fontWeight={'800'}\n        >\n          {value}\n        </text>\n      </g>\n    );\n  };\n\n  return (\n    <GraphCard className={className}>\n      <GraphCardInner>\n        <GraphCardHeader>\n          <GraphCardTitle>{graphTitleString}</GraphCardTitle>\n          {!isNilOrError(serie) && (\n            <ReportExportMenu svgNode={currentChart} name={graphTitleString} />\n          )}\n        </GraphCardHeader>\n        {isNilOrError(serie) ? (\n          <NoDataContainer>\n            <FormattedMessage {...messages.noData} />\n          </NoDataContainer>\n        ) : (\n          <StyledResponsiveContainer\n            height={serie?.length > 1 ? serie.length * 50 : 100}\n          >\n            <BarChart\n              data={serie}\n              layout=\"vertical\"\n              ref={currentChart}\n              margin={{ right: 20, top: 10 }}\n            >\n              <Bar\n                dataKey=\"value\"\n                name=\"Total\"\n                opacity={0}\n                barSize={['ideas', 'votes'].includes(graphUnit) ? 30 : 20}\n                animationDuration={animationDuration}\n                animationBegin={animationBegin}\n                onClick={openIdeaInANewTab}\n                cursor=\"pointer\"\n              />\n              <Bar\n                name=\"Downvotes\"\n                stackId={'votes'}\n                dataKey=\"down\"\n                fill={newBarFill}\n                barSize={['ideas', 'votes'].includes(graphUnit) ? 5 : 20}\n                animationDuration={animationDuration}\n                animationBegin={animationBegin}\n              >\n                {graphUnit === 'ideas' &&\n                  serie\n                    .sort((a, b) =>\n                      a.ordering && b.ordering ? a.ordering - b.ordering : -1\n                    )\n                    .map((entry, index) => {\n                      return (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={(entry.color && entry.color) || newBarFill}\n                          opacity={0.8}\n                        />\n                      );\n                    })}\n                <LabelList\n                  dataKey=\"name\"\n                  position=\"top\"\n                  content={<NameLabel />}\n                />\n                <LabelList\n                  dataKey=\"value\"\n                  position=\"insideTopRight\"\n                  offset={-20}\n                  content={<ValueLabel />}\n                />\n              </Bar>\n\n              <Bar\n                name=\"Upvotes\"\n                stackId={'votes'}\n                dataKey=\"up\"\n                fill={newBarFill}\n                opacity={0.7}\n                barSize={['ideas', 'votes'].includes(graphUnit) ? 5 : 20}\n                animationDuration={animationDuration}\n                animationBegin={animationBegin}\n              >\n                {graphUnit === 'ideas' &&\n                  serie.map((entry, index) => {\n                    return (\n                      <Cell\n                        key={`cell-${index}`}\n                        fill={(entry.color && entry.color) || newBarFill}\n                        opacity={0.4}\n                      />\n                    );\n                  })}\n              </Bar>\n\n              <YAxis\n                dataKey=\"name\"\n                type=\"category\"\n                width={150}\n                stroke={chartLabelColor}\n                fontSize={chartLabelSize}\n                tickLine={false}\n                hide={true}\n              />\n              <XAxis\n                stroke={chartLabelColor}\n                fontSize={chartLabelSize}\n                type=\"number\"\n                tick={{ transform: 'translate(0, 7)' }}\n                hide={true}\n              />\n            </BarChart>\n          </StyledResponsiveContainer>\n        )}\n      </GraphCardInner>\n    </GraphCard>\n  );\n});\n\nconst HorizontalBarChartWithoutStreamWithHoCs = injectIntl<Props>(\n  HorizontalBarChartWithoutStream as any\n);\n\nexport default HorizontalBarChartWithoutStreamWithHoCs;\n","import React from 'react';\nimport { adopt } from 'react-adopt';\nimport { map, sortBy } from 'lodash-es';\nimport styled from 'styled-components';\n\n// resources\nimport GetSerieFromStream from 'resources/GetSerieFromStream';\nimport {\n  IIdeasByTopic,\n  ideasByTopicStream,\n  ICommentsByTopic,\n  commentsByTopicStream,\n  IVotesByTopic,\n  votesByTopicStream,\n} from 'services/stats';\nimport { IParticipationByTopic } from 'typings';\nimport { fontSizes, colors } from 'utils/styleUtils';\n\n// i18n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport injectLocalize, { InjectedLocalized } from 'utils/localize';\nimport messages from '../messages';\nimport useLocalize from 'hooks/useLocalize';\nimport {\n  GraphCard,\n  GraphCardInner,\n  GraphCardTitle,\n  GraphCardHeader,\n  NoDataContainer,\n} from 'components/admin/Chart';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  projectId: string | null;\n  startAt: string | null;\n  endAt: string | null;\n  className?: string;\n}\n\ninterface DataProps {\n  ideasByTopic: {\n    serie: IParticipationByTopic;\n  };\n  commentsByTopic: {\n    serie: IParticipationByTopic;\n  };\n  votesByTopic: {\n    serie: IParticipationByTopic;\n  };\n}\n\nconst cellWidth = '100px';\nconst rowGap = '10px';\n\nconst Column = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n`;\nconst Row = styled.div`\n  display: inline-flex;\n  flex-direction: row;\n  margin: auto;\n`;\n\nconst TopicName = styled.div`\n  padding: 1px;\n  font-size: ${fontSizes.small};\n  word-break: break-all;\n  width: auto;\n  height: 20px;\n  margin-right: 10px;\n  margin-bottom: ${rowGap};\n`;\n\nconst ParticipationType = styled.div`\n  padding: 1px;\n  font-size: ${fontSizes.base};\n  width: ${cellWidth};\n  height: 20px;\n  text-align: center;\n  margin-bottom: ${rowGap};\n`;\n\nconst Cell = styled.div<{ cellColor: string }>`\n  background-color: ${(props) => {\n    return props.cellColor;\n  }};\n  height: 20px;\n  width: cellWidth;\n  border: 1px solid #f1f1f1;\n  border-radius: 2px;\n  margin-bottom: ${rowGap};\n  transition: 0.3s;\n  :hover {\n    background-color: ${colors.background};\n  }\n`;\n\nconst Value = styled.p`\n  margin: auto;\n  font-size: ${fontSizes.xs};\n  text-align: center;\n  opacity: 0;\n  :hover {\n    opacity: 1;\n  }\n`;\n\nconst getCellColor = (value, participationType) => {\n  const saturation =\n    (value / maxParticipationValue[participationType]) * 50 + 49;\n  const luminosity =\n    100 - ((value / maxParticipationValue[participationType]) * 60 + 5);\n  return `hsl(185, ${saturation}%, ${luminosity}%)`;\n};\n\ninterface Props extends InputProps, DataProps, InjectedLocalized {}\n\nconst ParticipationPerTopic = (props: Props) => {\n  const { votesByTopic, commentsByTopic, ideasByTopic, className } = props;\n  const localize = useLocalize();\n  return (\n    <>\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              <FormattedMessage {...messages.participationPerTopic} />\n            </GraphCardTitle>\n          </GraphCardHeader>\n          {isNilOrError(votesByTopic) ||\n          isNilOrError(commentsByTopic) ||\n          isNilOrError(ideasByTopic) ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <Row>\n              <Column>\n                <ParticipationType />\n                {ideasByTopic.serie &&\n                  ideasByTopic.serie.map((topic, index) => (\n                    <TopicName key={index}>\n                      {localize(topic.nameMultiloc)}\n                    </TopicName>\n                  ))}\n              </Column>\n              <Column>\n                <ParticipationType>\n                  <FormattedMessage {...messages.inputs} />\n                </ParticipationType>\n                {ideasByTopic.serie &&\n                  ideasByTopic.serie.map((topic, index) => (\n                    <Cell\n                      key={index}\n                      cellColor={getCellColor(topic.value, 'ideas')}\n                    >\n                      <Value>{topic.value}</Value>\n                    </Cell>\n                  ))}\n              </Column>\n              <Column>\n                <ParticipationType>\n                  <FormattedMessage {...messages.comments} />\n                </ParticipationType>\n                {commentsByTopic.serie &&\n                  commentsByTopic.serie.map((topic, index) => (\n                    <Cell\n                      key={index}\n                      cellColor={getCellColor(topic.value, 'comments')}\n                    >\n                      <Value>{topic.value}</Value>\n                    </Cell>\n                  ))}\n              </Column>\n              <Column>\n                <ParticipationType>\n                  <FormattedMessage {...messages.votes} />\n                </ParticipationType>\n                {votesByTopic.serie &&\n                  votesByTopic.serie.map((topic, index) => (\n                    <Cell\n                      key={index}\n                      cellColor={getCellColor(topic.value, 'total')}\n                    >\n                      <Value>{topic.value}</Value>\n                    </Cell>\n                  ))}\n              </Column>\n            </Row>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    </>\n  );\n};\n\nconst maxParticipationValue = {};\n\nconst convertToGraphFormat = (dataKey: string) => (\n  data: IIdeasByTopic | IVotesByTopic | ICommentsByTopic\n) => {\n  const { series, topics } = data;\n  maxParticipationValue[dataKey] = 0;\n  const mapped = map(topics, ({ title_multiloc }, topicId: string) => {\n    if (series[dataKey][topicId] > maxParticipationValue[dataKey]) {\n      maxParticipationValue[dataKey] = series[dataKey][topicId];\n    }\n    return {\n      nameMultiloc: title_multiloc,\n      value: series[dataKey][topicId] || (0 as number),\n      code: topicId,\n    };\n  });\n\n  const res = sortBy(mapped, 'code');\n\n  return res.length > 0 ? res : null;\n};\n\nconst Data = adopt<DataProps, InputProps>({\n  ideasByTopic: ({ projectId, endAt, render }) => (\n    <GetSerieFromStream\n      currentProjectFilter={projectId}\n      stream={ideasByTopicStream}\n      endAt={endAt}\n      convertToGraphFormat={convertToGraphFormat('ideas')}\n    >\n      {render}\n    </GetSerieFromStream>\n  ),\n  commentsByTopic: ({ projectId, endAt, render }) => (\n    <GetSerieFromStream\n      currentProjectFilter={projectId}\n      stream={commentsByTopicStream}\n      endAt={endAt}\n      convertToGraphFormat={convertToGraphFormat('comments')}\n    >\n      {render}\n    </GetSerieFromStream>\n  ),\n  votesByTopic: ({ projectId, endAt, render }) => (\n    <GetSerieFromStream\n      currentProjectFilter={projectId}\n      stream={votesByTopicStream}\n      endAt={endAt}\n      convertToGraphFormat={convertToGraphFormat('total')}\n    >\n      {render}\n    </GetSerieFromStream>\n  ),\n});\n\nconst ParticipationPerTopicWithHOCs = injectIntl(\n  injectLocalize(ParticipationPerTopic)\n);\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(serie) => {\n      return <ParticipationPerTopicWithHOCs {...serie} {...inputProps} />;\n    }}\n  </Data>\n);\n","import React, { memo } from 'react';\nimport { adopt } from 'react-adopt';\nimport { InjectedIntlProps } from 'react-intl';\nimport GetPollQuestions, {\n  GetPollQuestionsChildProps,\n} from 'resources/GetPollQuestions';\nimport { isNilOrError } from 'utils/helperUtils';\nimport {\n  GraphCard,\n  GraphCardInner,\n  GraphsContainer,\n  NoDataContainer,\n} from 'components/admin/Chart';\nimport QuestionReport from './QuestionReport';\nimport { SubSectionTitle } from 'components/admin/Section';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport messages from './messages';\n\ninterface InputProps {\n  participationContextId: string;\n  participationContextType: 'phase' | 'project';\n  participationContextTitle: string;\n}\ninterface DataProps {\n  pollQuestions: GetPollQuestionsChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nconst PollReport = memo(\n  ({\n    participationContextId,\n    participationContextType,\n    pollQuestions,\n    participationContextTitle,\n  }: Props & InjectedIntlProps) => {\n    return (\n      <div>\n        {!isNilOrError(participationContextTitle) &&\n          participationContextType === 'phase' && (\n            <SubSectionTitle>{participationContextTitle}</SubSectionTitle>\n          )}\n        <GraphsContainer>\n          {!isNilOrError(pollQuestions) && pollQuestions.length > 0 ? (\n            pollQuestions.map((question) => (\n              <GraphCard\n                className={`dynamicHeight ${\n                  pollQuestions.length === 1 ? 'fullWidth' : ''\n                }`}\n                key={question.id}\n              >\n                <GraphCardInner>\n                  <QuestionReport\n                    question={question}\n                    participationContextId={participationContextId}\n                    participationContextType={participationContextType}\n                  />\n                </GraphCardInner>\n              </GraphCard>\n            ))\n          ) : (\n            <GraphCard className=\"dynamicHeight fullWidth\">\n              <GraphCardInner>\n                <NoDataContainer>\n                  <FormattedMessage {...messages.noData} />\n                </NoDataContainer>\n              </GraphCardInner>\n            </GraphCard>\n          )}\n        </GraphsContainer>\n      </div>\n    );\n  }\n);\n\nconst Data = adopt<DataProps, InputProps>({\n  pollQuestions: ({\n    participationContextId,\n    participationContextType,\n    render,\n  }) => (\n    <GetPollQuestions\n      participationContextId={participationContextId}\n      participationContextType={participationContextType}\n    >\n      {render}\n    </GetPollQuestions>\n  ),\n});\n\nconst PollReportWithHoc = injectIntl(PollReport);\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <PollReportWithHoc {...inputProps} {...dataProps} />}\n  </Data>\n);\n","import React, { memo, useState, useEffect } from 'react';\nimport { adopt } from 'react-adopt';\nimport useLocalize from 'hooks/useLocalize';\n\n// resources\nimport { isNilOrError } from 'utils/helperUtils';\nimport moment from 'moment';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport styled from 'styled-components';\nimport messages from './messages';\nimport ResolutionControl, {\n  IResolution,\n} from 'components/admin/ResolutionControl';\nimport { GraphsContainer } from 'components/admin/Chart';\n\nimport GetIdeas, { GetIdeasChildProps } from 'resources/GetIdeas';\nimport GetPhases, { GetPhasesChildProps } from 'resources/GetPhases';\nimport {\n  activeUsersByTimeCumulativeXlsxEndpoint,\n  activeUsersByTimeStream,\n  ideasByTimeCumulativeXlsxEndpoint,\n  ideasByTimeCumulativeStream,\n  ideasByTimeStream,\n  commentsByTimeCumulativeXlsxEndpoint,\n  commentsByTimeCumulativeStream,\n  commentsByTimeStream,\n} from 'services/stats';\nimport { InjectedIntlProps } from 'react-intl';\nimport { colors } from 'utils/styleUtils';\n\n// services\nimport { ParticipationMethod } from 'services/participationContexts';\n\n// components\nimport { SectionTitle, PageTitle } from 'components/admin/Section';\nimport T from 'components/T';\n\nimport HorizontalBarChartWithoutStream from './charts/HorizontalBarChartWithoutStream';\nimport IdeasByStatusChart from './charts/IdeasByStatusChart';\nimport ParticipationPerTopic from './charts/ParticipationPerTopic';\nimport LineBarChart from './charts/LineBarChart';\nimport LineBarChartVotesByTime from './charts/LineBarChartVotesByTime';\nimport BarChartActiveUsersByTime from './charts/BarChartActiveUsersByTime';\nimport PollReport from './PollReport';\n\nimport Outlet from 'components/Outlet';\nimport GetProject, { GetProjectChildProps } from 'resources/GetProject';\nimport { withRouter, WithRouterProps } from 'react-router';\n\nconst Section = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst Phase = styled.div<{ isCurrentPhase: boolean }>`\n  display: flex;\n  margin-bottom: 20px;\n  flex-direction: column;\n  padding: 10px;\n  border: ${(props) =>\n    props.isCurrentPhase\n      ? `solid 3px ${colors.border}`\n      : `solid 1px ${colors.adminBorder}`};\n  border-radius: ${(props: any) => props.theme.borderRadius};\n`;\n\nconst RowSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  margin-bottom: 20px;\n`;\n\nconst TimelineSection = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  margin: -24px 0 20px -24px;\n  width: calc(100% + 24px);\n  > * {\n    margin: 24px 0 0 24px;\n  }\n`;\n\ninterface DataProps {\n  phases: GetPhasesChildProps;\n  mostVotedIdeas: GetIdeasChildProps;\n  project: GetProjectChildProps;\n}\n\ninterface Props extends DataProps {}\n\nconst ProjectReport = memo(\n  ({\n    project,\n    phases,\n    mostVotedIdeas,\n    intl: { formatMessage, formatDate },\n  }: Props & InjectedIntlProps & WithRouterProps) => {\n    if (isNilOrError(project)) return null;\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const localize = useLocalize();\n\n    const isTimelineProject = project.attributes.process_type === 'timeline';\n\n    // set time boundaries\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [resolution, setResolution] = useState<IResolution>('month');\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [startAt, setStartAt] = useState<string | null | undefined>(null);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [endAt, setEndAt] = useState<string | null>(null);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (isTimelineProject) {\n        if (!isNilOrError(phases) && phases.length > 0) {\n          const startAt = phases[0].attributes.start_at;\n          const endAt = phases[phases.length - 1].attributes.end_at;\n          setStartAt(startAt);\n          setEndAt(endAt);\n\n          const resolution = getResolution(moment(startAt), moment(endAt));\n          setResolution(resolution);\n        }\n      } else {\n        const startAt = project.attributes.created_at;\n        setStartAt(startAt);\n        setEndAt(moment().toISOString());\n\n        const resolution = getResolution(moment(startAt), moment());\n        setResolution(resolution);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [project, phases]);\n\n    const getResolution = (start, end) => {\n      const timeDiff = moment.duration(end.diff(start));\n      return timeDiff\n        ? timeDiff.asMonths() > 6\n          ? 'month'\n          : timeDiff.asWeeks() > 4\n          ? 'week'\n          : 'day'\n        : 'month';\n    };\n\n    const formatDateLabel = (date) =>\n      formatDate(date, {\n        day: resolution === 'month' ? undefined : '2-digit',\n        month: 'short',\n      });\n\n    const mostVotedIdeasSerie = mostVotedIdeas?.list?.map((idea) => ({\n      code: idea.id,\n      value: idea.attributes.upvotes_count + idea.attributes.downvotes_count,\n      up: idea.attributes.upvotes_count,\n      down: idea.attributes.downvotes_count,\n      name: localize(idea.attributes.title_multiloc),\n      slug: idea.attributes.slug,\n    }));\n\n    // deduplicated non-null participations methods in this project\n    const participationMethods = (isTimelineProject\n      ? isNilOrError(phases)\n        ? []\n        : phases.map((phase) => phase.attributes.participation_method)\n      : [project.attributes.participation_method]\n    ).filter(\n      (el, i, arr) => el && arr.indexOf(el) === i\n    ) as ParticipationMethod[];\n\n    const projectTitle = localize(project.attributes.title_multiloc);\n    const participationMethodMessages: {\n      [key in ParticipationMethod]: ReactIntl.FormattedMessage.MessageDescriptor;\n    } = {\n      ideation: messages.ideationAndFeedback,\n      information: messages.information,\n      survey: messages.survey,\n      budgeting: messages.budgeting,\n      poll: messages.poll,\n      volunteering: messages.volunteering,\n    };\n\n    return (\n      <>\n        <RowSection>\n          <PageTitle>\n            <T value={project.attributes.title_multiloc} />\n          </PageTitle>\n          <ResolutionControl value={resolution} onChange={setResolution} />\n        </RowSection>\n        {isTimelineProject && (\n          <Section>\n            <TimelineSection>\n              {!isNilOrError(phases) && phases.length > 0 ? (\n                phases.map((phase, index) => {\n                  return (\n                    <Phase\n                      key={index}\n                      isCurrentPhase={\n                        phase.id ===\n                        project?.relationships?.current_phase?.data?.id\n                      }\n                    >\n                      <p>\n                        <FormattedMessage\n                          {...messages.fromTo}\n                          values={{\n                            from: formatDateLabel(phase.attributes.start_at),\n                            to: formatDateLabel(phase.attributes.end_at),\n                          }}\n                        />\n                      </p>\n                      <FormattedMessage\n                        {...participationMethodMessages[\n                          phase.attributes.participation_method\n                        ]}\n                      />\n                      <div>{localize(phase.attributes.title_multiloc)}</div>\n                    </Phase>\n                  );\n                })\n              ) : (\n                <FormattedMessage {...messages.noPhase} />\n              )}\n            </TimelineSection>\n          </Section>\n        )}\n\n        {participationMethods !== ['information'] && startAt && endAt && (\n          <Section>\n            <SectionTitle>\n              <FormattedMessage {...messages.sectionWho} />\n            </SectionTitle>\n            <GraphsContainer>\n              <BarChartActiveUsersByTime\n                startAt={startAt}\n                endAt={endAt}\n                stream={activeUsersByTimeStream}\n                resolution={resolution}\n                graphUnit=\"users\"\n                graphUnitMessageKey=\"users\"\n                graphTitle={formatMessage(messages.participantsOverTimeTitle)}\n                xlsxEndpoint={activeUsersByTimeCumulativeXlsxEndpoint}\n                currentProjectFilter={project.id}\n                currentProjectFilterLabel={projectTitle}\n              />\n              <Outlet\n                id=\"app.containers.Admin.dashboard.reports.ProjectReport.graphs\"\n                startAt={startAt}\n                endAt={endAt}\n                participationMethods={participationMethods}\n                project={project}\n              />\n            </GraphsContainer>\n          </Section>\n        )}\n\n        <Section>\n          {((participationMethods.includes('ideation') && startAt && endAt) ||\n            participationMethods.includes('poll')) && (\n            <SectionTitle>\n              <FormattedMessage {...messages.sectionWhatInput} />\n            </SectionTitle>\n          )}\n          {participationMethods.includes('ideation') && startAt && endAt && (\n            <GraphsContainer>\n              <LineBarChart\n                graphTitle={formatMessage(messages.inputs)}\n                graphUnit=\"ideas\"\n                graphUnitMessageKey=\"ideas\"\n                startAt={startAt}\n                endAt={endAt}\n                resolution={resolution}\n                currentProjectFilter={project.id}\n                currentProjectFilterLabel={projectTitle}\n                xlsxEndpoint={ideasByTimeCumulativeXlsxEndpoint}\n                className=\"e2e-ideas-chart\"\n                lineStream={ideasByTimeCumulativeStream}\n                barStream={ideasByTimeStream}\n              />\n              <LineBarChart\n                graphTitle={formatMessage(messages.commentsByTimeTitle)}\n                graphUnit=\"comments\"\n                graphUnitMessageKey=\"comments\"\n                startAt={startAt}\n                endAt={endAt}\n                resolution={resolution}\n                currentProjectFilter={project.id}\n                currentProjectFilterLabel={projectTitle}\n                xlsxEndpoint={commentsByTimeCumulativeXlsxEndpoint}\n                className=\"e2e-comments-chart\"\n                lineStream={commentsByTimeCumulativeStream}\n                barStream={commentsByTimeStream}\n              />\n\n              <LineBarChartVotesByTime\n                className=\"e2e-votes-chart\"\n                startAt={startAt}\n                endAt={endAt}\n                resolution={resolution}\n                currentProjectFilter={project.id}\n                currentProjectFilterLabel={projectTitle}\n              />\n\n              <IdeasByStatusChart\n                className=\"dynamicHeight\"\n                startAt={startAt}\n                endAt={endAt}\n                currentProjectFilter={project.id}\n              />\n\n              <HorizontalBarChartWithoutStream\n                serie={mostVotedIdeasSerie}\n                graphTitleString={formatMessage(\n                  messages.fiveInputsWithMostVotes\n                )}\n                graphUnit=\"votes\"\n                className=\"dynamicHeight\"\n              />\n              <ParticipationPerTopic\n                startAt={startAt}\n                endAt={endAt}\n                projectId={project.id}\n                className=\"dynamicHeight\"\n              />\n            </GraphsContainer>\n          )}\n          {participationMethods.includes('poll') ? (\n            isTimelineProject ? (\n              !isNilOrError(phases) &&\n              phases.map(\n                (phase) =>\n                  phase.attributes.participation_method === 'poll' && (\n                    <PollReport\n                      participationContextType=\"phase\"\n                      participationContextId={phase.id}\n                      participationContextTitle={localize(\n                        phase.attributes.title_multiloc\n                      )}\n                    />\n                  )\n              )\n            ) : (\n              <PollReport\n                participationContextType=\"project\"\n                participationContextId={project.id}\n                participationContextTitle={localize(\n                  project.attributes.title_multiloc\n                )}\n              />\n            )\n          ) : null}\n        </Section>\n      </>\n    );\n  }\n);\n\nconst ProjectReportWithHoc = injectIntl(ProjectReport);\n\nconst Data = adopt<DataProps, WithRouterProps>({\n  phases: ({ params, render }) => (\n    <GetPhases projectId={params.projectId}>{render}</GetPhases>\n  ),\n  mostVotedIdeas: ({ params, render }) => (\n    <GetIdeas\n      pageNumber={1}\n      pageSize={5}\n      sort=\"popular\"\n      type=\"paginated\"\n      projectIds={[params.projectId]}\n    >\n      {render}\n    </GetIdeas>\n  ),\n  project: ({ params, render }) => (\n    <GetProject projectId={params.projectId}>{render}</GetProject>\n  ),\n});\n\nexport default withRouter((inputProps: WithRouterProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <ProjectReportWithHoc {...inputProps} {...dataProps} />}\n  </Data>\n));\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  selectAProject: {\n    id: 'app.containers.Admin.Reports.selectAProject',\n    defaultMessage: 'What project are you interested in ?',\n  },\n  sectionWho: {\n    id: 'app.containers.Admin.Reports.sectionWho',\n    defaultMessage: 'Who participated ?',\n  },\n  sectionWhatInput: {\n    id: 'app.containers.Admin.Reports.sectionWhatInput',\n    defaultMessage: 'What input did you collect?',\n  },\n  participantsOverTimeTitle: {\n    id: 'app.containers.Admin.Reports.participantsOverTimeTitle',\n    defaultMessage: 'Participants',\n  },\n  timelineType: {\n    id: 'app.containers.Admin.Reports.timelineType',\n    defaultMessage: 'Timeline',\n  },\n  continuousType: {\n    id: 'app.containers.Admin.Reports.continuousType',\n    defaultMessage: 'Continuous',\n  },\n  projectType: {\n    id: 'app.containers.Admin.Reports.projectType',\n    defaultMessage: 'Project type : {projectType}',\n  },\n  fromTo: {\n    id: 'app.containers.Admin.Reports.fromTo',\n    defaultMessage: 'from {from} to {to}',\n  },\n  noPhase: {\n    id: 'app.containers.Admin.Reports.noPhase',\n    defaultMessage: 'No phase created for this project',\n  },\n  ideationAndFeedback: {\n    id: 'app.containers.Admin.Reports.ideationAndFeedback',\n    defaultMessage: 'ideation and feedback',\n  },\n  information: {\n    id: 'app.containers.Admin.Reports.information',\n    defaultMessage: 'information',\n  },\n  survey: {\n    id: 'app.containers.Admin.Reports.survey',\n    defaultMessage: 'survey',\n  },\n  budgeting: {\n    id: 'app.containers.Admin.Reports.budgeting',\n    defaultMessage: 'budgeting',\n  },\n  poll: {\n    id: 'app.containers.Admin.Reports.poll',\n    defaultMessage: 'poll',\n  },\n  volunteering: {\n    id: 'app.containers.Admin.Reports.volunteering',\n    defaultMessage: 'volunteering',\n  },\n  customFieldTitleExport: {\n    id: 'app.containers.Admin.Reports.customFieldTitleExport',\n    defaultMessage: '{fieldName}_repartition',\n  },\n  participationPerTopic: {\n    id: 'app.containers.Admin.Reports.participationPerTopic',\n    defaultMessage: 'Participation per topic',\n  },\n  noData: {\n    id: 'app.containers.Admin.Reports.noData',\n    defaultMessage: 'No data available with the current filters.',\n  },\n  inputs: {\n    id: 'app.containers.Admin.Reports.inputs',\n    defaultMessage: 'Inputs',\n  },\n  votes: {\n    id: 'app.containers.Admin.Reports.votes',\n    defaultMessage: 'Votes',\n  },\n  comments: {\n    id: 'app.containers.Admin.Reports.comments',\n    defaultMessage: 'Comments',\n  },\n  commentsByTimeTitle: {\n    id: 'app.containers.Admin.Reports.commentsByTimeTitle',\n    defaultMessage: 'Comments',\n  },\n  fiveInputsWithMostVotes: {\n    id: 'app.containers.Admin.Reports.fiveInputsWithMostVotes',\n    defaultMessage: 'Top 5 inputs by votes',\n  },\n  total: {\n    id: 'app.containers.Admin.Reports.total',\n    defaultMessage: 'Total',\n  },\n  totalForPeriod: {\n    id: 'app.containers.Admin.Reports.totalForPeriod',\n    defaultMessage: 'This {period}',\n  },\n  perPeriod: {\n    id: 'app.containers.Admin.Reports.perPeriod',\n    defaultMessage: 'Per {period}',\n  },\n  numberOfVotesUp: {\n    id: 'app.containers.Admin.Reports.numberOfVotesUp',\n    defaultMessage: 'Upvotes',\n  },\n  numberOfVotesDown: {\n    id: 'app.containers.Admin.Reports.numberOfVotesDown',\n    defaultMessage: 'Downvotes',\n  },\n  day: {\n    id: 'app.containers.Admin.Reports.day',\n    defaultMessage: 'day',\n  },\n  week: {\n    id: 'app.containers.Admin.Reports.week',\n    defaultMessage: 'week',\n  },\n  month: {\n    id: 'app.containers.Admin.Reports.month',\n    defaultMessage: 'month',\n  },\n  inputsByStatusTitle: {\n    id: 'app.containers.Admin.Reports.inputsByStatusTitle',\n    defaultMessage: 'Inputs by status',\n  },\n  seeReportButton: {\n    id: 'app.containers.AdminPage.DashboardPage.seeReportButton',\n    defaultMessage: 'Summary',\n  },\n});\n"],"sourceRoot":""}