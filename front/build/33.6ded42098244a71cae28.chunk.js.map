{"version":3,"sources":["webpack:///./app/resources/GetInitiative.tsx","webpack:///./app/resources/GetResourceFileObjects.tsx","webpack:///./app/containers/InitiativesEditPage/InitiativesEditFormWrapper.tsx","webpack:///./app/resources/GetInitiativeImages.tsx","webpack:///./app/containers/InitiativesEditPage/tracks.ts"],"names":["GetInitiative","props","state","initiative","undefined","this","id","slug","resetOnChange","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","tap","setState","switchMap","isString","initiativeByIdStream","observable","initiativeBySlugStream","of","subscribe","isNilOrError","data","forEach","subscription","unsubscribe","children","React","Component","GetResourceFileObjects","files","resourceId","resourceType","filter","streamFn","projectFilesStream","phaseFilesStream","eventFilesStream","pageFilesStream","ideaFilesStream","initiativeFilesStream","length","combineLatest","map","file","convertUrlToUploadFileObservable","attributes","url","name","doNothing","InitiativesEditFormWrapper","changedKeys","Object","keys","initialValues","key","isEqual","pick","changedValues","initiativeId","hasBannerChanged","image","oldImageId","banner","publishing","filesToRemove","onPublished","locale","appConfiguration","authUser","getValuesToSend","formAPIValues","updateInitiative","publication_status","getFormValues","base64","addInitiativeImage","deleteInitiativeImage","then","deleteInitiativeFile","catch","errorResponse","apiErrors","json","errors","setTimeout","addInitiativeFile","res","get","publishError","profanityApiError","base","find","apiError","error","titleProfanityError","blocked_words","some","blockedWord","attribute","descriptionProfanityError","trackEventByName","tracks","profaneMessage","title_multiloc","proposalId","location","userId","host","body_multiloc","topic_ids","position","newValue","currentImageId","fileToRemove","initiativeFiles","initiativeImage","versions","large","convertUrlToUploadFile","header_bg","location_point_geojson","location_description","geocode","parsePosition","positionInfo","omitBy","entry","topic","otherProps","topics","onPublish","handlePublish","onSave","onChangeTitle","onChangeBody","onChangeTopics","onChangePosition","onChangeBanner","onChangeImage","onAddFile","onRemoveFile","PureComponent","Data","adopt","inputProps","dataProps","GetInitiativeImages","initiativeImages","initiativeImagesStream"],"mappings":"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","file":"33.6ded42098244a71cae28.chunk.js","sourcesContent":["import React from 'react';\nimport { isString } from 'lodash-es';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { Subscription, BehaviorSubject, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport {\n  IInitiativeData,\n  initiativeByIdStream,\n  initiativeBySlugStream,\n} from 'services/initiatives';\n\ninterface InputProps {\n  id?: string | null;\n  slug?: string | null;\n  resetOnChange?: boolean;\n}\n\ntype children = (renderProps: GetInitiativeChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  initiative: IInitiativeData | undefined | null | Error;\n}\n\nexport type GetInitiativeChildProps =\n  | IInitiativeData\n  | undefined\n  | null\n  | Error;\n\nexport default class GetInitiative extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  static defaultProps = {\n    resetOnChange: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      initiative: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { id, slug, resetOnChange } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ id, slug });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          tap(() => resetOnChange && this.setState({ initiative: undefined })),\n          switchMap(({ id, slug }) => {\n            if (isString(id)) {\n              return initiativeByIdStream(id).observable;\n            } else if (isString(slug)) {\n              return initiativeBySlugStream(slug).observable;\n            }\n\n            return of(null);\n          })\n        )\n        .subscribe((initiative) => {\n          this.setState({\n            initiative: !isNilOrError(initiative)\n              ? initiative.data\n              : initiative,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { id, slug } = this.props;\n    this.inputProps$.next({ id, slug });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { initiative } = this.state;\n    return (children as children)(initiative);\n  }\n}\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { isNilOrError } from 'utils/helperUtils';\nimport {\n  Subscription,\n  BehaviorSubject,\n  combineLatest,\n  of,\n  Observable,\n} from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap, filter } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport { projectFilesStream, IProjectFiles } from 'services/projectFiles';\nimport { phaseFilesStream, IPhaseFiles } from 'services/phaseFiles';\nimport { pageFilesStream, IPageFiles } from 'services/pageFiles';\nimport { eventFilesStream, IEventFiles } from 'services/eventFiles';\nimport { ideaFilesStream, IIdeaFiles } from 'services/ideaFiles';\nimport {\n  initiativeFilesStream,\n  IInitiativeFiles,\n} from 'services/initiativeFiles';\nimport { convertUrlToUploadFileObservable } from 'utils/fileTools';\nimport { UploadFile } from 'typings';\n\n// Converted file objects (to JS objects of type File).\n// Useful when you combining local files and remote files,\n// so you don't have to convert (file uploader)\n\ninterface InputProps {\n  resetOnChange?: boolean;\n  resourceType: 'project' | 'phase' | 'event' | 'page' | 'idea' | 'initiative';\n  resourceId: string | null;\n}\n\ntype Children = (\n  renderProps: GetResourceFileObjectsChildProps\n) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: Children;\n}\n\ninterface State {\n  files: UploadFile[] | undefined | null | Error;\n}\n\nexport type GetResourceFileObjectsChildProps = State['files'];\n\nexport default class GetResourceFileObjects extends React.Component<\n  Props,\n  State\n> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  public static defaultProps = {\n    resetOnChange: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      files: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { resourceId, resourceType, resetOnChange } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ resourceId, resourceType });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          tap(() => resetOnChange && this.setState({ files: undefined })),\n          filter(({ resourceId }) => isString(resourceId)),\n          switchMap(\n            ({\n              resourceId,\n              resourceType,\n            }: {\n              resourceId: string;\n              resourceType: InputProps['resourceType'];\n            }) => {\n              let streamFn;\n              if (resourceType === 'project') {\n                streamFn = projectFilesStream;\n              }\n              if (resourceType === 'phase') {\n                streamFn = phaseFilesStream;\n              }\n              if (resourceType === 'event') {\n                streamFn = eventFilesStream;\n              }\n              if (resourceType === 'page') {\n                streamFn = pageFilesStream;\n              }\n              if (resourceType === 'idea') {\n                streamFn = ideaFilesStream;\n              }\n              if (resourceType === 'initiative') {\n                streamFn = initiativeFilesStream;\n              }\n\n              return streamFn(resourceId).observable as Observable<\n                | IProjectFiles\n                | IPhaseFiles\n                | IEventFiles\n                | IPageFiles\n                | IIdeaFiles\n                | IInitiativeFiles\n                | null\n              >;\n            }\n          ),\n          switchMap((files) => {\n            if (files && files.data && files.data.length > 0) {\n              return combineLatest(\n                files.data.map((file) =>\n                  convertUrlToUploadFileObservable(\n                    file.attributes.file.url,\n                    file.id,\n                    file.attributes.name\n                  )\n                )\n              );\n            }\n\n            return of(null);\n          })\n        )\n        .subscribe((files) => {\n          this.setState({\n            files: files\n              ? (files.filter((file) => !isNilOrError(file)) as UploadFile[])\n              : null,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { resourceId, resourceType, resetOnChange } = this.props;\n    this.inputProps$.next({ resourceId, resourceType, resetOnChange });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { files } = this.state;\n    return (children as Children)(files);\n  }\n}\n","import React from 'react';\nimport { adopt } from 'react-adopt';\n// components\nimport InitiativeForm, {\n  FormValues,\n  SimpleFormValues,\n} from 'components/InitiativeForm';\n\n// services\nimport { Locale, Multiloc, UploadFile } from 'typings';\nimport {\n  updateInitiative,\n  IInitiativeData,\n  IInitiativeAdd,\n} from 'services/initiatives';\nimport {\n  addInitiativeImage,\n  deleteInitiativeImage,\n  IInitiativeImageData,\n} from 'services/initiativeImages';\nimport {\n  deleteInitiativeFile,\n  addInitiativeFile,\n} from 'services/initiativeFiles';\nimport { ITopicData } from 'services/topics';\n\n// utils\nimport { isNilOrError } from 'utils/helperUtils';\nimport { isEqual, pick, get, omitBy } from 'lodash-es';\nimport { convertUrlToUploadFile } from 'utils/fileTools';\n\n// geoJson\nimport { geocode } from 'utils/locationTools';\nimport { Point } from 'geojson';\n\n// tracks\nimport tracks from './tracks';\nimport { trackEventByName } from 'utils/analytics';\n\n// resources\nimport GetAuthUser, { GetAuthUserChildProps } from 'resources/GetAuthUser';\nimport GetAppConfiguration, {\n  GetAppConfigurationChildProps,\n} from 'resources/GetAppConfiguration';\n\ninterface DataProps {\n  authUser: GetAuthUserChildProps;\n  appConfiguration: GetAppConfigurationChildProps;\n}\n\ninterface InputProps {\n  locale: Locale;\n  initiative: IInitiativeData;\n  initiativeImage: IInitiativeImageData | null;\n  initiativeFiles: UploadFile[] | null;\n  onPublished: () => void;\n  topics: ITopicData[];\n}\n\ninterface Props extends DataProps, InputProps {}\n\ninterface State extends FormValues {\n  initiativeId: string;\n  publishing: boolean;\n  hasBannerChanged: boolean;\n  oldImageId: string | null;\n  publishError: boolean;\n  apiErrors: any;\n  filesToRemove: UploadFile[];\n  titleProfanityError: boolean;\n  descriptionProfanityError: boolean;\n}\n\nfunction doNothing() {\n  return;\n}\n\nclass InitiativesEditFormWrapper extends React.PureComponent<Props, State> {\n  initialValues: SimpleFormValues;\n  constructor(props) {\n    super(props);\n\n    const { initiative, initiativeFiles } = props;\n\n    this.initialValues = this.getFormValues(initiative);\n\n    this.state = {\n      ...this.initialValues,\n      oldImageId: null,\n      image: undefined,\n      initiativeId: initiative.id,\n      publishing: false,\n      hasBannerChanged: false,\n      banner: undefined,\n      files: initiativeFiles || [],\n      publishError: false,\n      apiErrors: null,\n      filesToRemove: [],\n      titleProfanityError: false,\n      descriptionProfanityError: false,\n    };\n  }\n\n  componentDidMount() {\n    const { initiativeImage, initiative } = this.props;\n    if (initiativeImage && initiativeImage.attributes.versions.large) {\n      const url = initiativeImage.attributes.versions.large;\n      const id = initiativeImage.id;\n      convertUrlToUploadFile(url, id, null).then((image) => {\n        this.setState({ image });\n      });\n    }\n    if (initiative && initiative.attributes.header_bg.large) {\n      const url = initiative.attributes.header_bg.large;\n      convertUrlToUploadFile(url, null, null).then((banner) => {\n        this.setState({ banner });\n      });\n    }\n  }\n\n  changedValues = () => {\n    const changedKeys = Object.keys(this.initialValues).filter((key) => {\n      return !isEqual(this.initialValues[key], this.state[key]);\n    });\n    return pick(this.state, changedKeys);\n  };\n\n  async parsePosition(position: string | undefined | null) {\n    let location_point_geojson: Point | null | undefined;\n    let location_description: string | null | undefined;\n    switch (position) {\n      case null:\n      case '':\n        location_point_geojson = null;\n        location_description = null;\n        break;\n\n      case undefined:\n        location_point_geojson = undefined;\n        location_description = undefined;\n        break;\n\n      default:\n        location_point_geojson = await geocode(position);\n        location_description = position;\n        break;\n    }\n    return { location_point_geojson, location_description };\n  }\n\n  async getValuesToSend(\n    changedValues: Partial<FormValues>,\n    hasBannerChanged: boolean,\n    banner: UploadFile | undefined | null\n  ) {\n    // build API readable object\n    const {\n      title_multiloc,\n      body_multiloc,\n      topic_ids,\n      position,\n    } = changedValues;\n    const positionInfo = await this.parsePosition(position);\n\n    // removes undefined values, not null values that are used to remove previously used values\n    const formAPIValues = omitBy(\n      {\n        title_multiloc,\n        body_multiloc,\n        topic_ids,\n        ...positionInfo,\n      },\n      (entry) => entry === undefined\n    );\n\n    if (hasBannerChanged) {\n      formAPIValues.header_bg = banner ? banner.base64 : null;\n    }\n    return formAPIValues as Partial<IInitiativeAdd>;\n  }\n\n  handlePublish = async () => {\n    const changedValues = this.changedValues();\n    const {\n      initiativeId,\n      hasBannerChanged,\n      image,\n      oldImageId,\n      banner,\n      publishing,\n      filesToRemove,\n      files,\n    } = this.state;\n    const { onPublished, locale, appConfiguration, authUser } = this.props;\n\n    // if we're already saving, do nothing.\n    if (publishing) return;\n\n    // setting flags for user feedback and avoiding double sends.\n    this.setState({ publishing: true });\n\n    try {\n      const formAPIValues = await this.getValuesToSend(\n        changedValues,\n        hasBannerChanged,\n        banner\n      );\n      const initiative = await updateInitiative(initiativeId, {\n        ...formAPIValues,\n        publication_status: 'published',\n      });\n\n      // feed back what was saved to the api into the initialValues object\n      // so that we can determine with certainty what has changed since last\n      // successful save.\n      this.initialValues = this.getFormValues(initiative.data);\n      this.setState({ hasBannerChanged: false });\n\n      // save any changes to initiative image.\n      if (image && image.base64 && !image.id) {\n        await addInitiativeImage(initiativeId, image.base64);\n      }\n      if (oldImageId) {\n        deleteInitiativeImage(initiativeId, oldImageId).then(() => {\n          // save image id in case we need to remove it later.\n          this.setState({ oldImageId: null });\n          // remove image from remote if it was saved\n        });\n      }\n\n      // saves changes to files\n      filesToRemove.map((file) => {\n        deleteInitiativeFile(initiativeId, file.id as string)\n          // we checked for id before adding them in this array\n          .catch((errorResponse) => {\n            const apiErrors = errorResponse.json.errors;\n            this.setState((state) => ({\n              apiErrors: { ...state.apiErrors, ...apiErrors },\n            }));\n\n            setTimeout(() => {\n              this.setState((state) => ({\n                apiErrors: { ...state.apiErrors, file: undefined },\n              }));\n            }, 5000);\n          });\n      });\n      files.map((file) => {\n        if (!file.id) {\n          addInitiativeFile(initiativeId, file.base64, file.name)\n            .then((res) => {\n              file.id = res.data.id;\n            })\n            .catch((errorResponse) => {\n              const apiErrors = get(errorResponse, 'json.errors');\n              this.setState((state) => ({\n                apiErrors: { ...state.apiErrors, ...apiErrors },\n              }));\n              setTimeout(() => {\n                this.setState((state) => ({\n                  apiErrors: { ...state.apiErrors, file: undefined },\n                }));\n              }, 5000);\n            });\n        }\n      });\n\n      onPublished();\n    } catch (errorResponse) {\n      const apiErrors = get(errorResponse, 'json.errors');\n      this.setState((state) => ({\n        apiErrors: { ...state.apiErrors, ...apiErrors },\n        publishError: true,\n      }));\n\n      const profanityApiError = apiErrors.base.find(\n        (apiError) => apiError.error === 'includes_banned_words'\n      );\n\n      if (profanityApiError) {\n        const titleProfanityError = profanityApiError.blocked_words.some(\n          (blockedWord) => blockedWord.attribute === 'title_multiloc'\n        );\n        const descriptionProfanityError = profanityApiError.blocked_words.some(\n          (blockedWord) => blockedWord.attribute === 'body_multiloc'\n        );\n\n        if (titleProfanityError) {\n          trackEventByName(tracks.titleProfanityError.name, {\n            locale,\n            profaneMessage: changedValues.title_multiloc?.[locale],\n            proposalId: initiativeId,\n            location: 'InitiativesEditFormWrapper (citizen side)',\n            userId: !isNilOrError(authUser) ? authUser.id : null,\n            host: !isNilOrError(appConfiguration)\n              ? appConfiguration.attributes.host\n              : null,\n          });\n\n          this.setState({\n            titleProfanityError,\n          });\n        }\n\n        if (descriptionProfanityError) {\n          trackEventByName(tracks.descriptionProfanityError.name, {\n            locale,\n            profaneMessage: changedValues.body_multiloc?.[locale],\n            proposalId: initiativeId,\n            location: 'InitiativesEditFormWrapper (citizen side)',\n            userId: !isNilOrError(authUser) ? authUser.id : null,\n            host: !isNilOrError(appConfiguration)\n              ? appConfiguration.attributes.host\n              : null,\n          });\n\n          this.setState({\n            descriptionProfanityError,\n          });\n        }\n      }\n    }\n    this.setState({ publishing: false });\n  };\n\n  onChangeTitle = (title_multiloc: Multiloc) => {\n    this.setState({ title_multiloc, titleProfanityError: false });\n  };\n\n  onChangeBody = (body_multiloc: Multiloc) => {\n    this.setState({ body_multiloc, descriptionProfanityError: false });\n  };\n\n  onChangeTopics = (topic_ids: string[]) => {\n    this.setState({ topic_ids });\n  };\n\n  onChangePosition = (position: string) => {\n    this.setState({ position });\n  };\n\n  onChangeBanner = (newValue: UploadFile | null) => {\n    this.setState({ banner: newValue, hasBannerChanged: true });\n  };\n\n  onChangeImage = (newValue: UploadFile | null) => {\n    if (newValue) {\n      this.setState({ image: newValue });\n    } else {\n      this.setState((state) => {\n        const currentImageId = state.image && state.image.id;\n        if (currentImageId) {\n          return { image: newValue, oldImageId: currentImageId };\n        } else return { image: newValue, oldImageId: state.oldImageId };\n      });\n    }\n  };\n\n  onAddFile = (file: UploadFile) => {\n    this.setState(({ files }) => ({ files: [...files, file] }));\n  };\n\n  onRemoveFile = (fileToRemove: UploadFile) => {\n    this.setState(({ files }) => ({\n      files: [...files].filter((file) => file.base64 !== fileToRemove.base64),\n    }));\n    if (fileToRemove.id) {\n      this.setState(({ filesToRemove }) => ({\n        filesToRemove: [...filesToRemove, fileToRemove],\n      }));\n    }\n  };\n\n  getFormValues(initiative: IInitiativeData) {\n    if (isNilOrError(initiative)) {\n      return this.initialValues;\n    } else {\n      return {\n        title_multiloc:\n          get(initiative, 'attributes.title_multiloc', undefined) || undefined,\n        body_multiloc:\n          get(initiative, 'attributes.body_multiloc', undefined) || undefined,\n        topic_ids: get(initiative, 'relationships.topics.data', []).map(\n          (topic) => topic.id\n        ),\n        position:\n          get(initiative, 'attributes.location_description', undefined) ||\n          undefined,\n      };\n    }\n  }\n\n  render() {\n    const {\n      titleProfanityError,\n      descriptionProfanityError,\n      ...otherProps\n    } = this.state;\n    const { locale, initiativeImage, topics } = this.props;\n\n    if (this.state.image === undefined && initiativeImage) return null;\n\n    return (\n      <InitiativeForm\n        onPublish={this.handlePublish}\n        onSave={doNothing}\n        locale={locale}\n        {...otherProps}\n        onChangeTitle={this.onChangeTitle}\n        onChangeBody={this.onChangeBody}\n        onChangeTopics={this.onChangeTopics}\n        onChangePosition={this.onChangePosition}\n        onChangeBanner={this.onChangeBanner}\n        onChangeImage={this.onChangeImage}\n        onAddFile={this.onAddFile}\n        onRemoveFile={this.onRemoveFile}\n        topics={topics}\n        titleProfanityError={titleProfanityError}\n        descriptionProfanityError={descriptionProfanityError}\n      />\n    );\n  }\n}\n\nconst Data = adopt<DataProps, InputProps>({\n  appConfiguration: <GetAppConfiguration />,\n  authUser: <GetAuthUser />,\n});\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => (\n      <InitiativesEditFormWrapper {...inputProps} {...dataProps} />\n    )}\n  </Data>\n);\n","import React from 'react';\nimport { BehaviorSubject, Subscription, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport {\n  IInitiativeImageData,\n  initiativeImagesStream,\n} from 'services/initiativeImages';\nimport { isString } from 'lodash-es';\n\ninterface InputProps {\n  initiativeId: string | null;\n}\n\ntype children = (\n  renderProps: GetInitiativeImagesChildProps\n) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  initiativeImages: IInitiativeImageData[] | undefined | null;\n}\n\nexport type GetInitiativeImagesChildProps =\n  | IInitiativeImageData[]\n  | undefined\n  | null;\n\nexport default class GetInitiativeImages extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      initiativeImages: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { initiativeId } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ initiativeId });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          switchMap(({ initiativeId }) => {\n            if (isString(initiativeId)) {\n              return initiativeImagesStream(initiativeId).observable;\n            }\n\n            return of(null);\n          })\n        )\n        .subscribe((initiativeImages) => {\n          this.setState({\n            initiativeImages: initiativeImages ? initiativeImages.data : null,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { initiativeId } = this.props;\n    this.inputProps$.next({ initiativeId });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { initiativeImages } = this.state;\n    return (children as children)(initiativeImages);\n  }\n}\n","export default {\n  titleProfanityError: {\n    name: 'Profane proposal title blocked',\n  },\n  descriptionProfanityError: {\n    name: 'Profane proposal description blocked',\n  },\n};\n"],"sourceRoot":""}