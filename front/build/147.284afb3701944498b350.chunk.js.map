{"version":3,"sources":["webpack:///./app/modules/commercial/clusterings/services/clusterings.ts","webpack:///./app/modules/commercial/clusterings/resources/GetClusterings.tsx","webpack:///./app/modules/commercial/clusterings/admin/containers/All/index.tsx"],"names":["clusteringId","streams","get","apiEndpoint","streamParams","object","add","clustering","update","delete","API_PATH","ideasUnder","node","type","id","flatten","children","map","c","GetAreas","props","state","clusterings","undefined","this","subscriptions","clusteringsStream","observable","subscribe","setState","isNilOrError","data","forEach","subscription","unsubscribe","Component","AreaList","areaId","event","deleteMessage","intl","formatMessage","messages","clusteringDeletionConfirmation","preventDefault","window","confirm","deleteClustering","Section","SectionTitle","FormattedMessage","titleClusterings","List","area","index","Row","key","isLastItem","length","TextCell","className","value","attributes","title_multiloc","onClick","handleDeleteClick","buttonStyle","icon","deleteButtonLabel","linkTo","viewButtonLabel","ButtonWrapper","addClusteringButton","PureComponent","AreaListWithHoCs","injectIntl"],"mappings":"mPA0EO,SAA8BA,GACnC,OAAOC,UAAQC,IAAiB,CAC9BC,YAAa,GAAF,OAAKA,EAAL,YAAoBH,M,oBAI5B,WAAsE,IAA3CI,EAA2C,uDAAN,KACrE,OAAOH,UAAQC,IAAR,GAA4BC,eAAgBC,K,gBAG9C,SAAuBC,GAC5B,OAAOJ,UAAQK,IAAiBH,EAAa,CAAEI,WAAYF,K,mBAGtD,SAA0BL,EAAsBK,GACrD,OAAOJ,UAAQO,OAAR,UACFL,EADE,YACaH,GAClBA,EACA,CAAEO,WAAYF,K,mBAIX,SAA0BL,GAC/B,OAAOC,UAAQQ,OAAR,UAAkBN,EAAlB,YAAiCH,GAAgBA,I,2DAjG1D,gBACA,YACA,e,2kBAGA,IAAMG,EAAc,GAAH,OAAMO,WAAN,gB,aAiCS,SAAbC,EAAcC,GACzB,MAAkB,SAAdA,EAAKC,KACA,CAACD,EAAKE,KAEN,IAAAC,SAAQH,EAAKI,SAASC,KAAI,SAACC,GAAD,OAAOP,EAAWO,S,qPC1CvD,YAEA,YACA,Y,8cAoBqBC,E,0CAGnB,WAAYC,GAAc,kCACxB,cAAMA,IADkB,sDAExB,EAAKC,MAAQ,CACXC,iBAAaC,GAHS,E,sDAO1B,WAAoB,WAClBC,KAAKC,cAAgB,EACnB,IAAAC,qBAAoBC,WAAWC,WAAU,SAACN,GAAD,OACvC,EAAKO,SAAS,CACZP,aAAc,IAAAQ,cAAaR,GAEvBA,EADAA,EAAYS,a,kCAOxB,WACEP,KAAKC,cAAcO,SAAQ,SAACC,GAAD,OAAkBA,EAAaC,mB,oBAG5D,WAGE,OAAQlB,EAFaQ,KAAKJ,MAAlBJ,UACgBQ,KAAKH,MAArBC,iB,GA5B0Ba,a,oVCvBtC,eAEA,YAEA,eAGA,YAEA,eACA,eACA,YAEA,YACA,YACA,eACA,e,wgCAUMC,E,yPACgB,SAACC,GAAD,OAAoB,SAACC,GACvC,IAAMC,EAAgB,EAAKnB,MAAMoB,KAAKC,cACpCC,UAASC,gCAEXL,EAAMM,iBAEFC,OAAOC,QAAQP,KACjB,IAAAQ,kBAAiBV,O,6CAIrB,WAAS,WACCf,EAAgBE,KAAKJ,MAArBE,YAER,OAAI,IAAAQ,cAAaR,GAAqB,KAGpC,wBAAC,EAAA0B,QAAD,KACE,wBAAC,EAAAC,aAAD,KACE,wBAAC,EAAAC,iBAAqBR,UAASS,mBAEjC,wBAAC,UAAD,KACE,wBAAC,EAAAC,KAAD,KACG9B,EAAYL,KAAI,SAACoC,EAAMC,GAAP,OACf,wBAAC,EAAAC,IAAD,CAAKC,IAAKH,EAAKvC,GAAI2C,WAAYH,IAAUhC,EAAYoC,OAAS,GAC5D,wBAAC,EAAAC,SAAD,CAAUC,UAAU,UAClB,wBAAC,UAAD,CAAGC,MAAOR,EAAKS,WAAWC,kBAE5B,wBAAC,UAAD,CACEC,QAAS,EAAKC,kBAAkBZ,EAAKvC,IACrCoD,YAAY,OACZC,KAAK,UAEL,wBAAC,EAAAjB,iBAAqBR,UAAS0B,oBAEjC,wBAAC,UAAD,CACEC,OAAM,oCAA+BhB,EAAKvC,IAC1CoD,YAAY,YACZC,KAAK,OAEL,wBAAC,EAAAjB,iBAAqBR,UAAS4B,uBAKvC,wBAAC,EAAAC,cAAD,KACE,wBAAC,UAAD,CACEL,YAAY,UACZC,KAAK,cACLE,OAAO,iCAEP,wBAAC,EAAAnB,iBAAqBR,UAAS8B,6B,GApDtBC,iBA6DjBC,GAAmB,IAAAC,YAAkBvC,G,UAE5B,kBACb,wBAAC,UAAD,MACG,SAACd,GAAD,OAAiB,wBAACoD,EAAD,CAAkBpD,YAAaA","file":"147.284afb3701944498b350.chunk.js","sourcesContent":["import { flatten } from 'lodash-es';\nimport { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\nimport { Multiloc } from 'typings';\n\nconst apiEndpoint = `${API_PATH}/clusterings`;\n\ninterface BaseNode {\n  id: string;\n}\n\nexport interface ProjectNode extends BaseNode {\n  type: 'project';\n  children: Node[];\n}\n\nexport interface TopicNode extends BaseNode {\n  type: 'topic';\n  children: Node[];\n}\n\nexport interface CustomNode extends BaseNode {\n  type: 'custom';\n  title?: string;\n  children: Node[];\n  keywords?: {\n    name: string;\n  }[];\n}\n\nexport interface IdeaNode extends BaseNode {\n  type: 'idea';\n}\n\nexport type ParentNode = ProjectNode | TopicNode | CustomNode;\n\nexport type Node = ParentNode | IdeaNode;\n\nexport const ideasUnder = (node: Node): string[] => {\n  if (node.type === 'idea') {\n    return [node.id];\n  } else {\n    return flatten(node.children.map((c) => ideasUnder(c)));\n  }\n};\n\nexport interface IClusteringData {\n  id: string;\n  type: string;\n  attributes: {\n    title_multiloc: Multiloc;\n    structure: ParentNode;\n    created_at: string;\n    updated_at: string;\n  };\n}\n\nexport interface IClusteringLinks {\n  self: string;\n  first: string;\n  prev: string;\n  next: string;\n  last: string;\n}\n\nexport interface IClusterings {\n  data: IClusteringData[];\n  links: IClusteringLinks;\n}\n\nexport interface IClustering {\n  data: IClusteringData;\n}\n\nexport function clusteringByIdStream(clusteringId: string) {\n  return streams.get<IClustering>({\n    apiEndpoint: `${apiEndpoint}/${clusteringId}`,\n  });\n}\n\nexport function clusteringsStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IClusterings>({ apiEndpoint, ...streamParams });\n}\n\nexport function addClustering(object) {\n  return streams.add<IClustering>(apiEndpoint, { clustering: object });\n}\n\nexport function updateClustering(clusteringId: string, object) {\n  return streams.update<IClustering>(\n    `${apiEndpoint}/${clusteringId}`,\n    clusteringId,\n    { clustering: object }\n  );\n}\n\nexport function deleteClustering(clusteringId: string) {\n  return streams.delete(`${apiEndpoint}/${clusteringId}`, clusteringId);\n}\n","import { Component } from 'react';\nimport { Subscription } from 'rxjs';\nimport { IClusteringData, clusteringsStream } from '../services/clusterings';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {}\n\ntype children = (renderProps: GetClusteringsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  clusterings: IClusteringData[] | undefined | null | Error;\n}\n\nexport type GetClusteringsChildProps =\n  | IClusteringData[]\n  | undefined\n  | null\n  | Error;\n\nexport default class GetAreas extends Component<Props, State> {\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      clusterings: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.subscriptions = [\n      clusteringsStream().observable.subscribe((clusterings) =>\n        this.setState({\n          clusterings: !isNilOrError(clusterings)\n            ? clusterings.data\n            : clusterings,\n        })\n      ),\n    ];\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { clusterings } = this.state;\n    return (children as children)(clusterings);\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { InjectedIntlProps } from 'react-intl';\nimport { isNilOrError } from 'utils/helperUtils';\n\nimport GetClusterings, {\n  GetClusteringsChildProps,\n} from '../../../resources/GetClusterings';\nimport { deleteClustering } from '../../../services/clusterings';\n\nimport messages from '../../messages';\nimport T from 'components/T';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\n\nimport { Section, SectionTitle } from 'components/admin/Section';\nimport { List, Row, TextCell } from 'components/admin/ResourceList';\nimport Button from 'components/UI/Button';\nimport PageWrapper, { ButtonWrapper } from 'components/admin/PageWrapper';\n\ninterface InputProps {}\n\ninterface DataProps {\n  clusterings: GetClusteringsChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nclass AreaList extends PureComponent<Props & InjectedIntlProps> {\n  handleDeleteClick = (areaId: string) => (event: React.FormEvent<any>) => {\n    const deleteMessage = this.props.intl.formatMessage(\n      messages.clusteringDeletionConfirmation\n    );\n    event.preventDefault();\n\n    if (window.confirm(deleteMessage)) {\n      deleteClustering(areaId);\n    }\n  };\n\n  render() {\n    const { clusterings } = this.props;\n\n    if (isNilOrError(clusterings)) return null;\n\n    return (\n      <Section>\n        <SectionTitle>\n          <FormattedMessage {...messages.titleClusterings} />\n        </SectionTitle>\n        <PageWrapper>\n          <List>\n            {clusterings.map((area, index) => (\n              <Row key={area.id} isLastItem={index === clusterings.length - 1}>\n                <TextCell className=\"expand\">\n                  <T value={area.attributes.title_multiloc} />\n                </TextCell>\n                <Button\n                  onClick={this.handleDeleteClick(area.id)}\n                  buttonStyle=\"text\"\n                  icon=\"delete\"\n                >\n                  <FormattedMessage {...messages.deleteButtonLabel} />\n                </Button>\n                <Button\n                  linkTo={`/admin/dashboard/insights/${area.id}`}\n                  buttonStyle=\"secondary\"\n                  icon=\"eye\"\n                >\n                  <FormattedMessage {...messages.viewButtonLabel} />\n                </Button>\n              </Row>\n            ))}\n          </List>\n          <ButtonWrapper>\n            <Button\n              buttonStyle=\"cl-blue\"\n              icon=\"plus-circle\"\n              linkTo=\"/admin/dashboard/insights/new\"\n            >\n              <FormattedMessage {...messages.addClusteringButton} />\n            </Button>\n          </ButtonWrapper>\n        </PageWrapper>\n      </Section>\n    );\n  }\n}\n\nconst AreaListWithHoCs = injectIntl<Props>(AreaList);\n\nexport default () => (\n  <GetClusterings>\n    {(clusterings) => <AreaListWithHoCs clusterings={clusterings} />}\n  </GetClusterings>\n);\n"],"sourceRoot":""}