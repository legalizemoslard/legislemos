{"version":3,"sources":["webpack:///./app/components/admin/PostManager/components/FilterSidebar/index.tsx","webpack:///./app/components/admin/PostManager/index.tsx","webpack:///./app/components/admin/PostManager/components/TopLevelFilters/FeedbackToggle.tsx","webpack:///./app/components/admin/PostManager/components/InfoSidebar/InfoSidebarSingle.tsx","webpack:///./app/components/admin/PostManager/components/ExportMenu/ExportButtons.tsx","webpack:///./app/components/admin/PostManager/components/FilterSidebar/FilterSidebarTopics.tsx","webpack:///./app/components/admin/PostManager/components/ExportMenu/ExportIdeasCommentsButton.tsx","webpack:///./app/components/admin/PostManager/components/InitiativesCount.tsx","webpack:///./app/components/admin/PostManager/components/FilterSidebar/FilterSidebarProjects.tsx","webpack:///./app/components/admin/PostManager/components/ActionBar/ActionBarSingle.tsx","webpack:///./app/components/admin/PostManager/components/FilterSidebar/FilterSidebarStatuses.tsx","webpack:///./app/components/admin/PostManager/components/LazyPostPreview/index.tsx","webpack:///./app/components/admin/PostManager/components/ExportMenu/ExportInitiativesButton.tsx","webpack:///./app/components/admin/PostManager/components/FilterSidebar/FilterSidebarPhasesItem.tsx","webpack:///./app/components/admin/PostManager/components/InfoSidebar/index.tsx","webpack:///./app/resources/GetIdeas.tsx","webpack:///./app/components/admin/PostManager/components/ActionBar/ActionBarMulti.tsx","webpack:///./app/components/admin/PostManager/components/InfoSidebar/InfoSidebarMultiItem.tsx","webpack:///./app/components/admin/PostManager/components/ActionBar/index.tsx","webpack:///./app/components/admin/PostManager/components/InfoSidebar/InfoSidebarMulti.tsx","webpack:///./app/resources/GetIdeaStatuses.tsx","webpack:///./app/components/admin/PostManager/components/ExportMenu/ExportInitiativesCommentsButton.tsx","webpack:///./app/components/admin/PostManager/components/StatusChangeModal/LazyStatusChangeModal.tsx","webpack:///./app/components/admin/PostManager/components/FilterSidebar/FilterSidebarTopicsItem.tsx","webpack:///./app/components/admin/PostManager/components/IdeasCount.tsx","webpack:///./app/components/admin/PostManager/components/ExportMenu/index.tsx","webpack:///./app/components/admin/PostManager/components/FilterSidebar/FilterSidebarStatusesItem.tsx","webpack:///./app/components/admin/PostManager/components/FilterSidebar/FilterSidebarPhases.tsx","webpack:///./app/components/admin/PostManager/components/FilterSidebar/FilterSidebarProjectsItem.tsx","webpack:///./app/components/admin/PostManager/components/ExportMenu/ExportIdeasButton.tsx"],"names":["InfoIcon","Icon","colors","clBlueDarker","FilterSidebar","_event","data","props","onChangeActiveFilterMenu","id","messageKey","selection","key","titleMessage","statusesTab","messages","timelineTab","topicsTab","projectsTab","tooltipMessage","statusesTabTooltipContent","timelineTabTooltipText","topicsTabTooltipText","projectsTabTooltipContent","title","intl","formatMessage","active","activeFilterMenu","selectionSign","isEmpty","Popup","content","trigger","name","phases","tabName","selectedPhase","onChangePhaseFilter","topics","selectedTopics","selectableTopics","onChangeTopicsFilter","projects","selectedProject","onChangeProjectFilter","statuses","selectedStatus","onChangeStatusFilter","visibleFilterMenus","map","menuName","menuItems","this","items","filteredMenuItems","selectedItem","find","i","Menu","tabular","attached","size","item","Item","onClick","handleItemClick","Segment","React","PureComponent","injectIntl","StyledExportMenu","ExportMenu","TopActionBar","styled","div","MiddleColumnTop","ThreeColumns","LeftColumn","MiddleColumn","Sticky","theme","menuHeight","StyledInput","Input","PostManager","posts","type","queryParameters","Array","isArray","length","undefined","event","searchTerm","target","value","setState","isFunction","onChangeSearchTerm","projectIds","onChangeProjects","accessibleProjectsIds","project","Set","postId","previewPostId","previewMode","state","onChangePhase","initiative_status","phase","idea_status","globalState","init","set","enabled","prevProps","projectId","postStatuses","list","onChangeTopics","onChangeStatus","onChangeAssignee","onChangeFeedbackFilter","onResetParams","selectedAssignee","assignee","feedbackNeeded","feedback_needed","getSelectedProject","getNonSharedParams","isNilOrError","filteredTopics","filter","topic","handleAssigneeFilterChange","onChange","status","resetSelection","handleClickEdit","openPreviewEdit","initiativeStatus","ideaStatus","icon","handleSearchChange","handleChangeActiveFilterMenu","sortAttribute","sortDirection","onChangeSort","onChangeSorting","onChangeSelection","handleChangeSelection","currentPageNumber","currentPage","lastPageNumber","lastPage","onChangePage","handleSeeAll","openPreview","postIds","Suspense","fallback","mode","onClose","closePreview","onSwitchPreviewMode","switchPreviewMode","Data","adopt","render","pageSize","sort","exclude_code","PostManagerWithDragDropContext","DragDropContext","HTML5Backend","inputProps","dataProps","Container","ToggleContainer","disabled","css","checked","clGreen","StyledLabel","label","fontSizes","small","FeedbackToggle","feedbackNeededCount","className","handleOnClick","role","FormattedMessage","inputsNeedFeedbackToggle","count","initiativeStatusId","phaseId","ideaStatusId","ideaId","post","StyledLink","handlePreviewCLick","Header","as","attributes","title_multiloc","body_multiloc","supportHtml","exportType","exportQueryParameter","FilterSidebarTopics","ctrlKey","xor","indexOf","secondary","vertical","fluid","clearFilter","allTopics","Divider","isActive","ExportCommentsButton","queryParameter","formatDate","queryParametersObject","isString","exporting","requestBlob","API_PATH","blob","saveAs","inputCommentsExportFileName","Date","now","trackEventByName","tracks","clickExportComments","buttonStyle","handleExportComments","processing","padding","fontSize","exportIdeasComments","exportIdeasCommentsProjects","exportSelectedInputsComments","InitiativesCount","initiativesCount","initiativesMatchingFiltersCount","oneInitiative","multipleInitiatives","values","allProjects","ActionBarSingle","message","deleteInputConfirmation","window","confirm","deleteIdea","deleteInitiativeConfirmation","deleteInitiative","Button","edit","negative","basic","handleClickDeleteIdea","delete","handleClickDeleteInitiative","allStatuses","lazy","ExportInitiativesButton","initiativesExportFileName","reportError","clickExportInitiatives","handleExportInitiatives","exportInitiatives","exportInitiativesProjects","exportSelectedInitiatives","FilterSidebarPhasesItem","connectDropTarget","isOver","canDrop","phaseNumber","canContainIdeas","Label","circular","color","phaseTarget","drop","DropTarget","connect","monitor","dropTarget","RightColumn","media","smallerThan1280px","a","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","GetIdeas","pageNumber","author","authorId","areas","publication_status","publicationStatus","project_publication_status","projectPublicationStatus","bounding_box","boundingBox","search","queryParamsShaped","propsToQueryParamsShape","Object","keys","forEach","isNil","inputPropsQueryParameters","omitBy","loadingMore","queryParameters$","next","ideaFilters","paramsToOmit","defaultQueryParameters","getQueryParametersFromProps","omit","getQueryParameters","hasMore","querying","getSortAttribute","getSortDirection","BehaviorSubject","subscriptions","startAccumulatorValue","ideas","pipe","distinctUntilChanged","prev","isEqual","switchMap","oldPageNumber","newPageNumber","mini","ideasMiniStream","ideasStream","observable","subscribe","getPageNumberFromUrl","links","self","last","mergeScan","acc","newQueryParameters","oldQueryParamsWithoutPageNumber","cloneDeep","newQueryParamsWithoutPageNumber","isLoadingMore","selfLink","get","lastLink","unionBy","_prevState","children","prevPropsWithoutChildren","nextPropsWithoutChildren","subscription","unsubscribe","onLoadMore","loadMore","handleChangePage","handleProjectsOnChange","handlePhaseOnChange","handleSearchOnChange","handleSortOnChange","handleTopicsOnChange","onChangeAreas","handleAreasOnchange","handleStatusOnChange","onChangePublicationStatus","handlePublicationStatusOnChange","onChangeProjectPublicationStatus","handleProjectPublicationStatusOnChange","handleAssigneeOnChange","handleFeedbackFilterOnChange","onIdeaFiltering","handleIdeaFiltering","handleResetParamsToProps","Component","ActionBarMulti","deleteInputsConfirmation","deleteInitiativesConfirmation","handleClickDeleteIdeas","deleteAllSelectedInputs","handleClickDeleteInitiatives","deleteAllSelectedInitiatives","List","InfoSidebarMulti","bulleted","GetIdeaStatuses","ideaStatuses","ideaStatusesStream","initiativesCommentsExportFileName","exportInitiativesComments","exportSelectedInitiativesComments","FilterSidebarTopicsItem","flow","IdeasCount","ideasCount","ideasMatchingFiltersCount","oneInput","multipleInputs","ideaCount","DropdownButton","preventDefault","dropdownOpened","getExportQueryParameters","toggleDropdown","iconPos","exports","Dropdown","width","top","right","mobileRight","opened","onClickOutside","ItemWrapper","ColorIndicator","borderRadius","StatusText","StyledText","span","FilterSidebarStatusesItem","automatic","FilterSidebarPhases","allPhases","index","FilterSidebarProjectsItem","ExportIdeasButton","inputsExportFileName","clickExportIdeas","handleExportIdeas","exportAllInputs","exportInputsProjects","exportSelectedInputs"],"mappings":"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","file":"13.53e6646109d84282db89.chunk.js","sourcesContent":["import React from 'react';\nimport { isEmpty } from 'lodash-es';\nimport { IPhaseData } from 'services/phases';\nimport { IProjectData } from 'services/projects';\nimport { IIdeaStatusData } from 'services/ideaStatuses';\nimport { IInitiativeStatusData } from 'services/initiativeStatuses';\nimport { Segment, Menu, Popup } from 'semantic-ui-react';\nimport PhasesMenu from './FilterSidebarPhases';\nimport TopicsMenu from './FilterSidebarTopics';\nimport ProjectsMenu from './FilterSidebarProjects';\nimport StatusesMenu from './FilterSidebarStatuses';\nimport { InjectedIntlProps } from 'react-intl';\nimport { injectIntl } from 'utils/cl-intl';\nimport messages from '../../messages';\nimport { Icon } from 'cl2-component-library';\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\nimport { ITopicData } from 'services/topics';\n\nconst InfoIcon = styled(Icon)`\n  fill: ${colors.clBlueDarker};\n  width: 16px;\n  height: 16px;\n  cursor: pointer;\n\n  &:hover {\n    fill: #000;\n  }\n`;\n\ninterface Props {\n  phases?: IPhaseData[];\n  projects?: IProjectData[];\n  statuses: IIdeaStatusData[] | IInitiativeStatusData[];\n  topics: ITopicData[];\n  selectedTopics?: string[] | null;\n  selectedPhase?: string | null;\n  selectedProject?: string | null;\n  selectedStatus?: string | null;\n  onChangePhaseFilter?: (arg: string) => void;\n  onChangeTopicsFilter?: (topics: string[]) => void;\n  onChangeProjectFilter?: (projects: string[] | undefined) => void;\n  onChangeStatusFilter?: (arg: string) => void;\n  activeFilterMenu: string | null;\n  onChangeActiveFilterMenu: (arg: string) => void;\n  visibleFilterMenus: string[];\n}\n\nclass FilterSidebar extends React.PureComponent<Props & InjectedIntlProps> {\n  handleItemClick = (_event, data) => {\n    this.props.onChangeActiveFilterMenu(data.id);\n  };\n\n  tabName = (\n    messageKey: 'statusesTab' | 'timelineTab' | 'topicsTab' | 'projectsTab',\n    selection,\n    key: 'phases' | 'projects' | 'topics' | 'statuses'\n  ) => {\n    const titleMessage = {\n      statusesTab: messages.statusesTab,\n      timelineTab: messages.timelineTab,\n      topicsTab: messages.topicsTab,\n      projectsTab: messages.projectsTab,\n    }[messageKey];\n    const tooltipMessage = {\n      statusesTab: messages.statusesTabTooltipContent,\n      timelineTab: messages.timelineTabTooltipText,\n      topicsTab: messages.topicsTabTooltipText,\n      projectsTab: messages.projectsTabTooltipContent,\n    }[messageKey];\n    const title = this.props.intl.formatMessage(titleMessage);\n    const active = this.props.activeFilterMenu === key;\n    const selectionSign = isEmpty(selection) ? '' : '*';\n    return (\n      <>\n        {title}\n        {selectionSign}&nbsp;\n        {active ? (\n          <Popup\n            content={this.props.intl.formatMessage(tooltipMessage)}\n            trigger={\n              <button>\n                <InfoIcon name=\"info3\" />\n              </button>\n            }\n          />\n        ) : null}\n      </>\n    );\n  };\n\n  menuItems = {\n    phases: () => ({\n      name: this.tabName('timelineTab', this.props.selectedPhase, 'phases'),\n      key: 'phases',\n      content: (\n        <PhasesMenu\n          phases={this.props.phases}\n          selectedPhase={this.props.selectedPhase}\n          onChangePhaseFilter={this.props.onChangePhaseFilter}\n        />\n      ),\n    }),\n    topics: () => ({\n      name: this.tabName('topicsTab', this.props.selectedTopics, 'topics'),\n      key: 'topics',\n      content: (\n        <TopicsMenu\n          selectableTopics={this.props.topics}\n          selectedTopics={this.props.selectedTopics}\n          onChangeTopicsFilter={this.props.onChangeTopicsFilter}\n        />\n      ),\n    }),\n    projects: () => ({\n      name: this.tabName('projectsTab', this.props.selectedProject, 'projects'),\n      key: 'projects',\n      content: (\n        <ProjectsMenu\n          projects={this.props.projects}\n          selectedProject={this.props.selectedProject}\n          onChangeProjectFilter={this.props.onChangeProjectFilter}\n        />\n      ),\n    }),\n    statuses: () => ({\n      name: this.tabName('statusesTab', this.props.selectedStatus, 'statuses'),\n      key: 'statuses',\n      content: (\n        <StatusesMenu\n          statuses={this.props.statuses}\n          selectedStatus={this.props.selectedStatus}\n          onChangeStatusFilter={this.props.onChangeStatusFilter}\n        />\n      ),\n    }),\n  };\n\n  filteredMenuItems = () => {\n    return this.props.visibleFilterMenus.map((menuName) => {\n      return this.menuItems[menuName]();\n    });\n  };\n\n  render() {\n    const { activeFilterMenu } = this.props;\n    const items = this.filteredMenuItems();\n    const selectedItem = items.find((i) => i.key === activeFilterMenu);\n    return (\n      <>\n        <Menu tabular attached=\"top\" size=\"tiny\">\n          {items.map((item) => (\n            <Menu.Item\n              key={item.key}\n              id={item.key}\n              active={activeFilterMenu === item.key}\n              onClick={this.handleItemClick}\n            >\n              {item.name}\n            </Menu.Item>\n          ))}\n        </Menu>\n        <Segment attached=\"bottom\">{selectedItem.content}</Segment>\n      </>\n    );\n  }\n}\n\nexport default injectIntl(FilterSidebar);\n","import React, { Suspense } from 'react';\nimport { isFunction } from 'lodash-es';\nimport { adopt } from 'react-adopt';\nimport styled from 'styled-components';\nimport HTML5Backend from 'react-dnd-html5-backend-cjs';\nimport { DragDropContext } from 'react-dnd-cjs';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// services\nimport {\n  globalState,\n  IAdminFullWidth,\n  IGlobalStateService,\n} from 'services/globalState';\nimport { IProjectData } from 'services/projects';\nimport { ITopicData } from 'services/topics';\n\n// resources\nimport GetIdeaStatuses, {\n  GetIdeaStatusesChildProps,\n} from 'resources/GetIdeaStatuses';\nimport GetInitiativeStatuses, {\n  GetInitiativeStatusesChildProps,\n} from 'resources/GetInitiativeStatuses';\nimport GetIdeas, { GetIdeasChildProps } from 'resources/GetIdeas';\nimport GetInitiatives, {\n  GetInitiativesChildProps,\n} from 'resources/GetInitiatives';\nimport { GetPhasesChildProps } from 'resources/GetPhases';\nimport GetTopics, { GetTopicsChildProps } from 'resources/GetTopics';\n\n// components\nimport ActionBar from './components/ActionBar';\nimport FilterSidebar from './components/FilterSidebar';\nimport PostTable from './components/PostTable';\nimport InfoSidebar from './components/InfoSidebar';\nimport ExportMenu from './components/ExportMenu';\nimport IdeasCount from './components/IdeasCount';\nimport InitiativesCount from './components/InitiativesCount';\nimport { Input } from 'semantic-ui-react';\nimport FeedbackToggle from './components/TopLevelFilters/FeedbackToggle';\nimport LazyPostPreview from './components/LazyPostPreview';\nimport LazyStatusChangeModal from './components/StatusChangeModal/LazyStatusChangeModal';\nimport Outlet from 'components/Outlet';\n\nconst StyledExportMenu = styled(ExportMenu)`\n  margin-left: auto;\n`;\n\nconst TopActionBar = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n`;\n\nconst MiddleColumnTop = styled.div`\n  transition: 200ms;\n  display: flex;\n  justify-content: space-between;\n  flex: 1;\n`;\n\nconst ThreeColumns = styled.div`\n  display: flex;\n  margin: -10px;\n  & > * {\n    margin: 10px;\n  }\n`;\n\nconst LeftColumn = styled.div`\n  width: 260px;\n  min-width: 260px;\n`;\n\nconst MiddleColumn = styled.div`\n  flex: 1;\n  transition: 200ms;\n`;\n\nexport const Sticky = styled.div`\n  position: -webkit-sticky;\n  position: sticky;\n  top: ${(props) => props.theme.menuHeight + 20}px;\n`;\n\nconst StyledInput = styled(Input)`\n  max-width: 260px;\n  display: flex;\n  width: 100%;\n`;\n\nexport type ManagerType =\n  | 'AllIdeas' // should come with projectIds a list of projects that the current user can manage.\n  | 'ProjectIdeas' // should come with projectId\n  | 'Initiatives';\n\ninterface InputProps {\n  // For all display and behaviour that's conditionned by the place this component is rendered\n  // this prop is used for the test.\n  type: ManagerType;\n\n  // When the PostManager is used in admin/projects, we pass down the current project id as a prop\n  projectId?: string | null;\n\n  // filters settings\n  // the filters needed for this view, in the order they'll be shown, first one active by default\n  visibleFilterMenus: TFilterMenu[]; // cannot be empty.\n  phases?: GetPhasesChildProps;\n  // When the PostManager is used in admin/posts, the parent component passes\n  // down the array of projects the current user can moderate.\n  projects?: IProjectData[] | null;\n}\n\ninterface DataProps {\n  posts: GetIdeasChildProps | GetInitiativesChildProps;\n  postStatuses: GetIdeaStatusesChildProps | GetInitiativeStatusesChildProps;\n  topics: GetTopicsChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nexport type TFilterMenu = 'topics' | 'phases' | 'projects' | 'statuses';\n\ninterface State {\n  /** A set of ids of ideas/initiatives that are currently selected */\n  selection: Set<string>;\n  activeFilterMenu: TFilterMenu;\n  searchTerm: string | undefined;\n  previewPostId: string | null;\n  previewMode: 'view' | 'edit';\n}\n\nexport class PostManager extends React.PureComponent<Props, State> {\n  globalState: IGlobalStateService<IAdminFullWidth>;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      selection: new Set(),\n      activeFilterMenu: props.visibleFilterMenus[0],\n      searchTerm: undefined,\n      previewPostId: null,\n      previewMode: 'view',\n    };\n    this.globalState = globalState.init('AdminFullWidth');\n  }\n\n  componentDidMount() {\n    this.globalState.set({ enabled: true });\n  }\n\n  componentWillUnmount() {\n    this.globalState.set({ enabled: false });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { visibleFilterMenus } = this.props;\n\n    if (\n      prevProps.visibleFilterMenus !== visibleFilterMenus &&\n      !visibleFilterMenus.find((item) => item === this.state.activeFilterMenu)\n    ) {\n      this.setState({ activeFilterMenu: visibleFilterMenus[0] });\n    }\n  }\n\n  // Filtering handlers\n  getSelectedProject = () => {\n    const { posts, type } = this.props;\n    if (type === 'Initiatives') return undefined;\n\n    const { queryParameters } = posts as GetIdeasChildProps;\n    return Array.isArray(queryParameters.projects) &&\n      queryParameters.projects.length === 1\n      ? queryParameters.projects[0]\n      : undefined;\n  };\n\n  handleSearchChange = (event) => {\n    const searchTerm = event.target.value;\n\n    this.setState({ searchTerm });\n\n    if (isFunction(this.props.posts.onChangeSearchTerm)) {\n      this.props.posts.onChangeSearchTerm(searchTerm);\n    }\n  };\n\n  onChangeProjects = (projectIds: string[] | undefined) => {\n    const { projects, posts, type } = this.props;\n    if (type !== 'AllIdeas') return;\n\n    const { onChangeProjects } = posts as GetIdeasChildProps;\n\n    const accessibleProjectsIds = projects\n      ? projects.map((project) => project.id)\n      : null;\n\n    if (!projectIds || projectIds.length === 0) {\n      accessibleProjectsIds && onChangeProjects(accessibleProjectsIds);\n    } else {\n      onChangeProjects(projectIds);\n    }\n  };\n  // End filtering hanlders\n\n  resetSelection = () => {\n    this.setState({ selection: new Set() });\n  };\n\n  handleChangeSelection = (selection: Set<string>) => {\n    this.setState({ selection });\n  };\n  // End selection management\n\n  // Filter menu\n  handleChangeActiveFilterMenu = (activeFilterMenu: TFilterMenu) => {\n    this.setState({ activeFilterMenu });\n  };\n  // End Filter menu\n\n  // Modal Preview\n  openPreview = (postId: string) => {\n    this.setState({ previewPostId: postId, previewMode: 'view' });\n  };\n\n  openPreviewEdit = () => {\n    const { selection } = this.state;\n    if (selection.size === 1) {\n      this.setState({ previewPostId: [...selection][0], previewMode: 'edit' });\n    }\n  };\n\n  switchPreviewMode = () => {\n    if (this.state.previewMode === 'edit') {\n      this.setState({ previewMode: 'view' });\n    } else {\n      this.setState({ previewMode: 'edit' });\n    }\n  };\n\n  closePreview = () => {\n    this.setState({ previewPostId: null });\n  };\n  // End Modal Preview\n\n  getNonSharedParams = () => {\n    const { type } = this.props;\n    if (type === 'Initiatives') {\n      const posts = this.props.posts as GetInitiativesChildProps;\n      return {\n        onChangePhase: undefined,\n        selectedPhase: undefined,\n        selectedStatus: posts.queryParameters.initiative_status,\n      };\n    } else if (type === 'AllIdeas' || type === 'ProjectIdeas') {\n      const posts = this.props.posts as GetIdeasChildProps;\n      return {\n        onChangePhase: posts.onChangePhase,\n        selectedPhase: posts.queryParameters.phase,\n        selectedStatus: posts.queryParameters.idea_status,\n      };\n    }\n    return {\n      onChangePhase: () => {},\n      selectedPhase: null,\n      selectedStatus: null,\n    };\n  };\n\n  render() {\n    const {\n      previewPostId,\n      previewMode,\n      searchTerm,\n      selection,\n      activeFilterMenu,\n    } = this.state;\n    const {\n      type,\n      projectId,\n      projects,\n      posts,\n      phases,\n      postStatuses,\n      visibleFilterMenus,\n      topics,\n    } = this.props;\n    const {\n      list,\n      onChangeTopics,\n      onChangeStatus,\n      queryParameters,\n      onChangeAssignee,\n      onChangeFeedbackFilter,\n      onResetParams,\n    } = posts;\n\n    const selectedTopics = queryParameters.topics;\n    const selectedAssignee = queryParameters.assignee;\n    const feedbackNeeded = queryParameters.feedback_needed || false;\n\n    const selectedProject = this.getSelectedProject();\n\n    const {\n      onChangePhase,\n      selectedPhase,\n      selectedStatus,\n    } = this.getNonSharedParams();\n\n    if (!isNilOrError(topics)) {\n      const filteredTopics = topics.filter(\n        (topic) => !isNilOrError(topic)\n      ) as ITopicData[];\n\n      return (\n        <>\n          <TopActionBar>\n            <Outlet\n              id=\"app.components.admin.PostManager.topActionBar\"\n              assignee={selectedAssignee}\n              projectId={type === 'ProjectIdeas' ? projectId : null}\n              handleAssigneeFilterChange={onChangeAssignee}\n              type={type}\n            />\n            <FeedbackToggle\n              type={type}\n              value={feedbackNeeded}\n              onChange={onChangeFeedbackFilter}\n              project={selectedProject}\n              phase={selectedPhase}\n              topics={selectedTopics}\n              status={selectedStatus}\n              assignee={selectedAssignee}\n              searchTerm={searchTerm}\n            />\n            <StyledExportMenu\n              type={type}\n              selection={selection}\n              selectedProject={selectedProject}\n            />\n          </TopActionBar>\n\n          <ThreeColumns>\n            <LeftColumn>\n              <ActionBar\n                type={type}\n                selection={selection}\n                resetSelection={this.resetSelection}\n                handleClickEdit={this.openPreviewEdit}\n              />\n            </LeftColumn>\n            <MiddleColumnTop>\n              {type === 'Initiatives' ? (\n                <InitiativesCount\n                  feedbackNeeded={feedbackNeeded}\n                  topics={selectedTopics}\n                  initiativeStatus={selectedStatus}\n                  searchTerm={searchTerm}\n                  assignee={selectedAssignee}\n                />\n              ) : type === 'AllIdeas' || type === 'ProjectIdeas' ? (\n                <IdeasCount\n                  feedbackNeeded={feedbackNeeded}\n                  project={selectedProject}\n                  phase={selectedPhase}\n                  topics={selectedTopics}\n                  ideaStatus={selectedStatus}\n                  searchTerm={searchTerm}\n                  assignee={selectedAssignee}\n                />\n              ) : null}\n              <StyledInput icon=\"search\" onChange={this.handleSearchChange} />\n            </MiddleColumnTop>\n          </ThreeColumns>\n          <ThreeColumns>\n            <LeftColumn>\n              <Sticky>\n                <FilterSidebar\n                  activeFilterMenu={activeFilterMenu}\n                  visibleFilterMenus={visibleFilterMenus}\n                  onChangeActiveFilterMenu={this.handleChangeActiveFilterMenu}\n                  phases={!isNilOrError(phases) ? phases : undefined}\n                  projects={!isNilOrError(projects) ? projects : undefined}\n                  statuses={!isNilOrError(postStatuses) ? postStatuses : []}\n                  topics={filteredTopics}\n                  selectedPhase={selectedPhase}\n                  selectedTopics={selectedTopics}\n                  selectedStatus={selectedStatus}\n                  selectedProject={selectedProject}\n                  onChangePhaseFilter={onChangePhase}\n                  onChangeTopicsFilter={onChangeTopics}\n                  onChangeStatusFilter={onChangeStatus}\n                  onChangeProjectFilter={this.onChangeProjects}\n                />\n              </Sticky>\n            </LeftColumn>\n            <MiddleColumn>\n              <PostTable\n                type={type}\n                activeFilterMenu={activeFilterMenu}\n                sortAttribute={posts.sortAttribute}\n                sortDirection={posts.sortDirection}\n                onChangeSort={posts.onChangeSorting}\n                posts={list || undefined}\n                phases={!isNilOrError(phases) ? phases : undefined}\n                statuses={!isNilOrError(postStatuses) ? postStatuses : []}\n                selection={selection}\n                onChangeSelection={this.handleChangeSelection}\n                currentPageNumber={posts.currentPage}\n                lastPageNumber={posts.lastPage}\n                onChangePage={posts.onChangePage}\n                handleSeeAll={onResetParams}\n                openPreview={this.openPreview}\n              />\n            </MiddleColumn>\n            <InfoSidebar\n              postIds={[...selection]}\n              openPreview={this.openPreview}\n            />\n          </ThreeColumns>\n          <Suspense fallback={null}>\n            <LazyPostPreview\n              type={type}\n              postId={previewPostId}\n              mode={previewMode}\n              onClose={this.closePreview}\n              onSwitchPreviewMode={this.switchPreviewMode}\n            />\n          </Suspense>\n          {type === 'Initiatives' && (\n            <Suspense fallback={null}>\n              <LazyStatusChangeModal />\n            </Suspense>\n          )}\n        </>\n      );\n    }\n\n    return null;\n  }\n}\n\nconst Data = adopt<DataProps, InputProps>({\n  posts: ({ type, projectId, projects, render }) => {\n    if (type === 'Initiatives') {\n      return (\n        <GetInitiatives type=\"paginated\" pageSize={10} sort=\"new\">\n          {render}\n        </GetInitiatives>\n      );\n    }\n\n    if (type === 'ProjectIdeas') {\n      return (\n        <GetIdeas\n          type=\"paginated\"\n          pageSize={10}\n          sort=\"new\"\n          projectIds={projectId ? [projectId] : undefined}\n        >\n          {render}\n        </GetIdeas>\n      );\n    }\n\n    if (type === 'AllIdeas') {\n      const projectIds =\n        projects && projects.length > 0\n          ? projects.map((project) => project.id)\n          : undefined;\n      return (\n        <GetIdeas\n          type=\"paginated\"\n          pageSize={10}\n          sort=\"new\"\n          projectIds={projectIds}\n        >\n          {render}\n        </GetIdeas>\n      );\n    }\n\n    return null;\n  },\n  postStatuses: ({ type, render }) =>\n    type === 'Initiatives' ? (\n      <GetInitiativeStatuses>{render}</GetInitiativeStatuses>\n    ) : (\n      <GetIdeaStatuses>{render}</GetIdeaStatuses>\n    ),\n  topics: ({ type, projectId, render }) => {\n    if (type === 'Initiatives') {\n      return <GetTopics exclude_code=\"custom\">{render}</GetTopics>;\n    }\n\n    if (type === 'ProjectIdeas' && projectId) {\n      return <GetTopics projectId={projectId}>{render}</GetTopics>;\n    }\n\n    if (type === 'AllIdeas') {\n      return <GetTopics>{render}</GetTopics>;\n    }\n\n    return null;\n  },\n});\n\nconst PostManagerWithDragDropContext = DragDropContext(HTML5Backend)(\n  PostManager\n);\n\nexport default (inputProps: InputProps) => {\n  return (\n    <Data {...inputProps}>\n      {(dataProps) => (\n        <PostManagerWithDragDropContext {...inputProps} {...dataProps} />\n      )}\n    </Data>\n  );\n};\n","import React from 'react';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { isFunction } from 'lodash-es';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../../messages';\n\n// styles\nimport styled, { css } from 'styled-components';\nimport { colors, fontSizes } from 'utils/styleUtils';\n\n// resources\nimport GetIdeasCount, {\n  GetIdeasCountChildProps,\n} from 'resources/GetIdeasCount';\nimport GetInitiativesCount, {\n  GetInitiativesCountChildProps,\n} from 'resources/GetInitiativesCount';\n\n// typings\nimport { ManagerType } from '../..';\n\n// components\nimport CountBadge from 'components/UI/CountBadge';\n\nconst size = 21;\nconst padding = 4;\n\nconst Container = styled.div`\n  display: inline-block;\n  display: flex;\n  align-items: center;\n`;\n\nconst ToggleContainer: any = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: center;\n\n  ${(props: any) =>\n    props.disabled &&\n    css`\n      opacity: 0.25;\n\n      i,\n      i:before {\n        cursor: not-allowed;\n      }\n    `};\n\n  ${(props: any) =>\n    props.checked &&\n    css`\n      i {\n        padding-right: ${padding}px !important;\n        padding-left: ${size}px !important;\n        background: ${colors.clGreen} !important;\n      }\n    `};\n\n  input {\n    display: none;\n  }\n\n  i {\n    display: inline-block;\n    cursor: pointer;\n    padding: ${padding}px;\n    padding-right: ${size}px;\n    transition: all ease 0.15s;\n    border-radius: ${size + padding}px;\n    background: #ccc;\n    transform: translate3d(0, 0, 0);\n\n    &:before {\n      display: block;\n      content: '';\n      width: ${size}px;\n      height: ${size}px;\n      border-radius: ${size}px;\n      background: #fff;\n    }\n  }\n`;\n\nconst StyledLabel = styled.label`\n  font-size: ${fontSizes.small}px;\n  font-weight: 400;\n  line-height: 20px;\n  padding-left: 10px;\n  padding-right: 10px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n`;\n\ninterface InputProps {\n  type: ManagerType;\n  value: boolean;\n  onChange: (feedbackNeeded: boolean | undefined) => void;\n  assignee?: string | null;\n  project?: string | null;\n  phase?: string | null;\n  topics?: string[] | null;\n  status?: string | null;\n  searchTerm?: string | null;\n}\n\ninterface DataProps {\n  feedbackNeededCount: GetIdeasCountChildProps | GetInitiativesCountChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface State {}\n\nexport class FeedbackToggle extends React.PureComponent<Props, State> {\n  componentDidUpdate(prevProps) {\n    if (prevProps.searchTerm !== this.props.searchTerm) {\n      if (isFunction(this.props.feedbackNeededCount.onChangeSearchTerm)) {\n        this.props.feedbackNeededCount.onChangeSearchTerm(\n          this.props.searchTerm || ''\n        );\n      }\n    }\n  }\n\n  handleOnClick = () => {\n    this.props.onChange(!this.props.value || undefined);\n  };\n\n  render() {\n    const { value, feedbackNeededCount } = this.props;\n\n    return (\n      <Container\n        id=\"e2e-feedback_needed_filter_toggle\"\n        className=\"feedback_needed_filter_toggle\"\n      >\n        <ToggleContainer onClick={this.handleOnClick} checked={value}>\n          <input type=\"checkbox\" role=\"checkbox\" aria-checked={value} />\n          <i />\n        </ToggleContainer>\n        <StyledLabel onClick={this.handleOnClick}>\n          <FormattedMessage {...messages.inputsNeedFeedbackToggle} />\n          {!isNilOrError(feedbackNeededCount.count) && (\n            <CountBadge count={feedbackNeededCount.count} />\n          )}\n        </StyledLabel>\n      </Container>\n    );\n  }\n}\n\nconst Data = adopt({\n  feedbackNeededCount: ({\n    project,\n    phase,\n    topics,\n    status,\n    assignee,\n    render,\n    type,\n  }) => {\n    const projectIds = [project];\n\n    return type === 'Initiatives' ? (\n      <GetInitiativesCount\n        feedbackNeeded={true}\n        assignee={assignee}\n        topics={topics}\n        initiativeStatusId={status}\n      >\n        {render}\n      </GetInitiativesCount>\n    ) : (\n      <GetIdeasCount\n        feedbackNeeded={true}\n        assignee={assignee}\n        projectIds={projectIds}\n        phaseId={phase}\n        topics={topics}\n        ideaStatusId={status}\n      >\n        {render}\n      </GetIdeasCount>\n    );\n  },\n});\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => <FeedbackToggle {...inputProps} {...dataProps} />}\n  </Data>\n);\n","import React from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport GetIdea from 'resources/GetIdea';\nimport T from 'components/T';\nimport { Segment, Header } from 'semantic-ui-react';\nimport { handlePreviewCLick, StyledLink } from './';\n\nexport default (props: {\n  postId: string;\n  openPreview: (id: string) => void;\n}) => (\n  <GetIdea ideaId={props.postId}>\n    {(post) => {\n      if (isNilOrError(post)) return null;\n\n      return (\n        <Segment attached=\"bottom\">\n          <StyledLink onClick={handlePreviewCLick(post.id, props.openPreview)}>\n            <Header as=\"h5\">\n              <T value={post.attributes.title_multiloc} />\n            </Header>\n          </StyledLink>\n          <p>\n            <T value={post.attributes.body_multiloc} supportHtml={true} />\n          </p>\n        </Segment>\n      );\n    }}\n  </GetIdea>\n);\n","import React from 'react';\nimport styled from 'styled-components';\n\n// components\nimport ExportIdeasButton from './ExportIdeasButton';\nimport ExportIdeasCommentsButton from './ExportIdeasCommentsButton';\nimport ExportInitiativesButton from './ExportInitiativesButton';\nimport ExportInitiativesCommentsButton from './ExportInitiativesCommentsButton';\nimport { exportType } from './';\nimport { ManagerType } from '../../';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 10px;\n\n  & > *:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\ninterface Props {\n  type: ManagerType;\n  exportType: exportType;\n  exportQueryParameter: 'all' | string | string[];\n  className?: string;\n}\n\nclass ExportButtons extends React.PureComponent<Props> {\n  render() {\n    const { exportType, className, exportQueryParameter, type } = this.props;\n    return (\n      <Container className={className}>\n        {type === 'Initiatives' ? (\n          <>\n            <ExportInitiativesButton\n              exportType={exportType}\n              exportQueryParameter={exportQueryParameter}\n            />\n            <ExportInitiativesCommentsButton\n              exportType={exportType}\n              exportQueryParameter={exportQueryParameter}\n            />\n          </>\n        ) : type === 'AllIdeas' || type === 'ProjectIdeas' ? (\n          <>\n            <ExportIdeasButton\n              exportType={exportType}\n              exportQueryParameter={exportQueryParameter}\n            />\n            <ExportIdeasCommentsButton\n              exportType={exportType}\n              exportQueryParameter={exportQueryParameter}\n            />\n          </>\n        ) : null}\n      </Container>\n    );\n  }\n}\n\nexport default ExportButtons;\n","import React from 'react';\nimport { xor } from 'lodash-es';\nimport { Menu, Divider } from 'semantic-ui-react';\nimport FilterSidebarTopicsItem from './FilterSidebarTopicsItem';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../../messages';\nimport { ITopicData } from 'services/topics';\n\ninterface Props {\n  selectableTopics: ITopicData[];\n  selectedTopics?: string[] | null;\n  onChangeTopicsFilter?: (topics: string[]) => void;\n}\n\nexport default class FilterSidebarTopics extends React.PureComponent<Props> {\n  handleItemClick = (id) => (event) => {\n    if (event.ctrlKey) {\n      const selectedTopics = xor(this.props.selectedTopics || [], [id]);\n      this.props.onChangeTopicsFilter &&\n        this.props.onChangeTopicsFilter(selectedTopics);\n    } else {\n      this.props.onChangeTopicsFilter && this.props.onChangeTopicsFilter([id]);\n    }\n  };\n\n  clearFilter = () => {\n    this.props.onChangeTopicsFilter && this.props.onChangeTopicsFilter([]);\n  };\n\n  isActive = (id) => {\n    return (\n      this.props.selectedTopics && this.props.selectedTopics.indexOf(id) >= 0\n    );\n  };\n\n  render() {\n    const { selectableTopics, selectedTopics } = this.props;\n    return (\n      <Menu\n        id=\"e2e-idea-manager-topic-filters\"\n        secondary={true}\n        vertical={true}\n        fluid={true}\n      >\n        <Menu.Item\n          onClick={this.clearFilter}\n          active={!selectedTopics || selectedTopics.length === 0}\n        >\n          <FormattedMessage {...messages.allTopics} />\n        </Menu.Item>\n        <Divider />\n        {selectableTopics.map((topic) => (\n          <FilterSidebarTopicsItem\n            key={topic.id}\n            topic={topic}\n            active={!!this.isActive(topic.id)}\n            onClick={this.handleItemClick(topic.id)}\n          />\n        ))}\n      </Menu>\n    );\n  }\n}\n","import React from 'react';\nimport Button from 'components/UI/Button';\nimport { fontSizes } from 'utils/styleUtils';\n\n// i18n\nimport messages from '../../messages';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { isString } from 'lodash-es';\nimport { trackEventByName } from 'utils/analytics';\nimport { requestBlob } from 'utils/request';\nimport { API_PATH } from 'containers/App/constants';\nimport tracks from '../../tracks';\nimport { exportType } from '../ExportMenu';\nimport { saveAs } from 'file-saver';\nimport { InjectedIntlProps } from 'react-intl';\n\ninterface Props {\n  exportQueryParameter: 'all' | string | string[];\n  exportType: exportType;\n}\n\ninterface State {\n  exporting: boolean;\n}\n\nclass ExportCommentsButton extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exporting: false,\n    };\n  }\n\n  handleExportComments = async () => {\n    const {\n      exportQueryParameter: queryParameter,\n      intl: { formatDate, formatMessage },\n    } = this.props;\n\n    const queryParametersObject = {};\n    if (isString(queryParameter) && queryParameter !== 'all') {\n      queryParametersObject['project'] = queryParameter;\n    } else if (!isString(queryParameter)) {\n      queryParametersObject['ideas'] = queryParameter;\n    }\n\n    try {\n      this.setState({ exporting: true });\n      const blob = await requestBlob(\n        `${API_PATH}/ideas/comments/as_xlsx`,\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        queryParametersObject\n      );\n      saveAs(\n        blob,\n        `${formatMessage(messages.inputCommentsExportFileName)}_${formatDate(\n          Date.now()\n        )}.xlsx`\n      );\n      this.setState({ exporting: false });\n    } catch (error) {\n      this.setState({ exporting: false });\n    }\n\n    // track this click for user analytics\n    trackEventByName(tracks.clickExportComments.name);\n  };\n\n  render() {\n    const { exportType } = this.props;\n    const { exporting } = this.state;\n    return (\n      <Button\n        buttonStyle=\"text\"\n        onClick={this.handleExportComments}\n        processing={exporting}\n        padding=\"0\"\n        fontSize={`${fontSizes.small}px`}\n      >\n        {exportType === 'all' && (\n          <FormattedMessage {...messages.exportIdeasComments} />\n        )}\n        {exportType === 'project' && (\n          <FormattedMessage {...messages.exportIdeasCommentsProjects} />\n        )}\n        {exportType === 'selected_posts' && (\n          <FormattedMessage {...messages.exportSelectedInputsComments} />\n        )}\n      </Button>\n    );\n  }\n}\n\nexport default injectIntl(ExportCommentsButton);\n","import React from 'react';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { isFunction } from 'lodash-es';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\n\n// styles\nimport styled from 'styled-components';\n\n// resources\nimport GetInitiativesCount, {\n  GetInitiativesCountChildProps,\n} from 'resources/GetInitiativesCount';\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n`;\n\ninterface InputProps {\n  assignee?: string | null;\n  topics?: string[] | null;\n  initiativeStatus?: string | null;\n  feedbackNeeded: boolean;\n  searchTerm?: string | null;\n}\n\ninterface DataProps {\n  initiativesCount: GetInitiativesCountChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface State {}\n\nexport class InitiativesCount extends React.PureComponent<Props, State> {\n  componentDidUpdate(prevProps) {\n    if (prevProps.searchTerm !== this.props.searchTerm) {\n      if (isFunction(this.props.initiativesCount.onChangeSearchTerm)) {\n        this.props.initiativesCount.onChangeSearchTerm(this.props.searchTerm);\n      }\n    }\n  }\n\n  render() {\n    const { initiativesCount } = this.props;\n    const initiativesMatchingFiltersCount = initiativesCount.count;\n\n    return (\n      <Container>\n        {/*\n          If there are no initiatives, we have an 'empty container' to indicate there are no initiatives matching the filters.\n          Hence we only show this count when there's at least 1 initiative.\n        */}\n        {!isNilOrError(initiativesMatchingFiltersCount) &&\n          initiativesMatchingFiltersCount > 0 &&\n          (initiativesMatchingFiltersCount === 1 ? (\n            <FormattedMessage {...messages.oneInitiative} />\n          ) : (\n            <FormattedMessage\n              {...messages.multipleInitiatives}\n              values={{ initiativesCount: initiativesMatchingFiltersCount }}\n            />\n          ))}\n      </Container>\n    );\n  }\n}\n\nconst Data = adopt({\n  initiativesCount: ({\n    topics,\n    initiativeStatus,\n    assignee,\n    feedbackNeeded,\n    render,\n  }) => {\n    return (\n      <GetInitiativesCount\n        feedbackNeeded={feedbackNeeded === true ? true : undefined}\n        assignee={assignee !== 'all' ? assignee : undefined} // TOCHECK\n        topics={topics}\n        initiativeStatusId={initiativeStatus}\n      >\n        {render}\n      </GetInitiativesCount>\n    );\n  },\n});\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => (\n      <InitiativesCount\n        {...inputProps}\n        initiativesCount={dataProps.initiativesCount}\n      />\n    )}\n  </Data>\n);\n","import React from 'react';\nimport { IProjectData } from 'services/projects';\nimport { Menu, Divider } from 'semantic-ui-react';\nimport FilterSidebarProjectsItem from './FilterSidebarProjectsItem';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../../messages';\n\ninterface Props {\n  projects?: IProjectData[] | null;\n  selectedProject?: string | null;\n  onChangeProjectFilter?: (project: string[] | undefined) => void;\n}\n\nclass FilterSidebarProjects extends React.PureComponent<Props> {\n  handleItemClick = (id: string) => () => {\n    const projectIds = [id];\n    this.props.onChangeProjectFilter &&\n      this.props.onChangeProjectFilter(projectIds);\n  };\n\n  clearFilter = () => {\n    this.props.onChangeProjectFilter &&\n      this.props.onChangeProjectFilter(undefined);\n  };\n\n  isActive = (id) => {\n    return this.props.selectedProject && this.props.selectedProject === id;\n  };\n\n  render() {\n    return (\n      <Menu secondary={true} vertical={true} fluid={true}>\n        {!(this.props.projects && this.props.projects.length === 1) && (\n          <>\n            <Menu.Item\n              onClick={this.clearFilter}\n              active={!this.props.selectedProject}\n            >\n              <FormattedMessage {...messages.allProjects} />\n            </Menu.Item>\n            <Divider />\n          </>\n        )}\n        {this.props.projects &&\n          this.props.projects.map((project) => (\n            <FilterSidebarProjectsItem\n              key={project.id}\n              project={project}\n              active={!!this.isActive(project.id)}\n              onClick={this.handleItemClick(project.id)}\n            />\n          ))}\n      </Menu>\n    );\n  }\n}\n\nexport default FilterSidebarProjects;\n","import React from 'react';\nimport { deleteIdea } from 'services/ideas';\nimport { deleteInitiative } from 'services/initiatives';\n\nimport { Icon, Button } from 'semantic-ui-react';\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../../messages';\nimport { ManagerType } from '../..';\n\ninterface Props {\n  type: ManagerType;\n  postId: string;\n  resetSelection: () => void;\n  handleClickEdit: () => void;\n}\n\nclass ActionBarSingle extends React.PureComponent<Props & InjectedIntlProps> {\n  handleClickDeleteIdea = () => {\n    const {\n      postId,\n      resetSelection,\n      intl: { formatMessage },\n    } = this.props;\n    const message = formatMessage(messages.deleteInputConfirmation);\n\n    if (window.confirm(message)) {\n      deleteIdea(postId);\n    }\n\n    resetSelection();\n  };\n  handleClickDeleteInitiative = () => {\n    const {\n      postId,\n      resetSelection,\n      intl: { formatMessage },\n    } = this.props;\n    const message = formatMessage(messages.deleteInitiativeConfirmation);\n\n    if (window.confirm(message)) {\n      deleteInitiative(postId);\n    }\n\n    resetSelection();\n  };\n\n  render() {\n    const { type, handleClickEdit } = this.props;\n    if (type === 'AllIdeas' || type === 'ProjectIdeas') {\n      return (\n        <>\n          <Button onClick={handleClickEdit}>\n            <Icon name=\"edit\" />\n            <FormattedMessage {...messages.edit} />\n          </Button>\n          <Button\n            negative={true}\n            basic={true}\n            onClick={this.handleClickDeleteIdea}\n          >\n            <Icon name=\"trash\" />\n            <FormattedMessage {...messages.delete} />\n          </Button>\n        </>\n      );\n    } else if (type === 'Initiatives') {\n      return (\n        <>\n          <Button onClick={handleClickEdit}>\n            <Icon name=\"edit\" />\n            <FormattedMessage {...messages.edit} />\n          </Button>\n          <Button\n            negative={true}\n            basic={true}\n            onClick={this.handleClickDeleteInitiative}\n          >\n            <Icon name=\"trash\" />\n            <FormattedMessage {...messages.delete} />\n          </Button>\n        </>\n      );\n    }\n    return null;\n  }\n}\n\nexport default injectIntl<Props>(ActionBarSingle);\n","import React from 'react';\nimport { IIdeaStatusData } from 'services/ideaStatuses';\nimport { IInitiativeStatusData } from 'services/initiativeStatuses';\nimport { Menu, Divider } from 'semantic-ui-react';\nimport FilterSidebarStatusesItem from './FilterSidebarStatusesItem';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport { isNilOrError } from 'utils/helperUtils';\n\nimport messages from '../../messages';\n\ninterface Props {\n  statuses?: IIdeaStatusData[] | IInitiativeStatusData[] | null;\n  selectedStatus?: string | null;\n  onChangeStatusFilter?: (status: string | null) => void;\n}\n\nclass FilterSidebarStatuses extends React.PureComponent<Props> {\n  handleItemClick = (id) => () => {\n    this.props.onChangeStatusFilter && this.props.onChangeStatusFilter(id);\n  };\n\n  clearFilter = () => {\n    this.props.onChangeStatusFilter && this.props.onChangeStatusFilter(null);\n  };\n\n  isActive = (id) => {\n    return this.props.selectedStatus === id;\n  };\n\n  render() {\n    const { statuses } = this.props;\n\n    if (!isNilOrError(statuses)) {\n      return (\n        <Menu secondary={true} vertical={true} fluid={true}>\n          <Menu.Item\n            onClick={this.clearFilter}\n            active={!this.props.selectedStatus}\n          >\n            <FormattedMessage {...messages.allStatuses} />\n          </Menu.Item>\n          <Divider />\n          {(statuses as (IIdeaStatusData | IInitiativeStatusData)[]).map(\n            (status) => (\n              <FilterSidebarStatusesItem\n                key={status.id}\n                status={status}\n                active={!!this.isActive(status.id)}\n                onClick={this.handleItemClick(status.id)}\n              />\n            )\n          )}\n        </Menu>\n      );\n    }\n\n    return null;\n  }\n}\n\nexport default FilterSidebarStatuses;\n","import { lazy } from 'react';\n\nexport default lazy(() => import('./PostPreview'));\n","import React from 'react';\nimport Button from 'components/UI/Button';\nimport { fontSizes } from 'utils/styleUtils';\n\n// i18n\nimport messages from '../../messages';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { exportType } from '../ExportMenu';\nimport { isString } from 'util';\nimport { requestBlob } from 'utils/request';\nimport { API_PATH } from 'containers/App/constants';\nimport { trackEventByName } from 'utils/analytics';\nimport tracks from '../../tracks';\nimport { saveAs } from 'file-saver';\nimport { reportError } from 'utils/loggingUtils';\nimport { InjectedIntlProps } from 'react-intl';\n\ninterface Props {\n  exportQueryParameter: 'all' | string | string[];\n  exportType: exportType;\n}\n\ninterface State {\n  exporting: boolean;\n}\n\nclass ExportInitiativesButton extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exporting: false,\n    };\n  }\n\n  handleExportInitiatives = async () => {\n    const {\n      exportQueryParameter,\n      intl: { formatDate, formatMessage },\n    } = this.props;\n\n    const queryParametersObject = {};\n    if (isString(exportQueryParameter) && exportQueryParameter !== 'all') {\n      queryParametersObject['project'] = exportQueryParameter;\n    } else if (!isString(exportQueryParameter)) {\n      queryParametersObject['initiatives'] = exportQueryParameter;\n    }\n\n    try {\n      this.setState({ exporting: true });\n      const blob = await requestBlob(\n        `${API_PATH}/initiatives/as_xlsx`,\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        queryParametersObject\n      );\n      saveAs(\n        blob,\n        `${formatMessage(messages.initiativesExportFileName)}_${formatDate(\n          Date.now()\n        )}.xlsx`\n      );\n      this.setState({ exporting: false });\n    } catch (error) {\n      reportError(error);\n      this.setState({ exporting: false });\n    }\n\n    // track this click for user analytics\n    trackEventByName(tracks.clickExportInitiatives.name);\n  };\n\n  render() {\n    const { exportType } = this.props;\n    const { exporting } = this.state;\n    return (\n      <Button\n        buttonStyle=\"text\"\n        onClick={this.handleExportInitiatives}\n        processing={exporting}\n        padding=\"0\"\n        fontSize={`${fontSizes.small}px`}\n      >\n        {exportType === 'all' && (\n          <FormattedMessage {...messages.exportInitiatives} />\n        )}\n        {exportType === 'project' && (\n          <FormattedMessage {...messages.exportInitiativesProjects} />\n        )}\n        {exportType === 'selected_posts' && (\n          <FormattedMessage {...messages.exportSelectedInitiatives} />\n        )}\n      </Button>\n    );\n  }\n}\n\nexport default injectIntl(ExportInitiativesButton);\n","import React from 'react';\nimport { IPhaseData, canContainIdeas } from 'services/phases';\nimport { Menu, Label } from 'semantic-ui-react';\nimport { DropTarget } from 'react-dnd-cjs';\nimport T from 'components/T';\n\ninterface Props {\n  phase: IPhaseData;\n  active: boolean;\n  onClick: any;\n  isOver: boolean;\n  canDrop: boolean;\n  phaseNumber: number;\n  connectDropTarget: any;\n}\n\nclass FilterSidebarPhasesItem extends React.PureComponent<Props> {\n  render() {\n    const {\n      phase,\n      active,\n      onClick,\n      connectDropTarget,\n      isOver,\n      canDrop,\n      phaseNumber,\n    } = this.props;\n    const disabled = !canContainIdeas(phase);\n    return connectDropTarget(\n      <div>\n        <Menu.Item\n          active={active || (isOver && canDrop)}\n          onClick={onClick}\n          disabled={disabled}\n        >\n          <Label\n            circular={true}\n            basic={true}\n            color={disabled ? 'grey' : 'teal'}\n          >\n            {phaseNumber}\n          </Label>\n          <T value={phase.attributes.title_multiloc} />\n        </Menu.Item>\n      </div>\n    );\n  }\n}\n\nconst phaseTarget = {\n  drop(props) {\n    return {\n      type: 'phase',\n      id: props.phase.id,\n    };\n  },\n  canDrop(props) {\n    return canContainIdeas(props.phase);\n  },\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop(),\n});\n\nexport default DropTarget(\n  'IDEA',\n  phaseTarget,\n  collect\n)(FilterSidebarPhasesItem);\n","import React from 'react';\nimport InfoSidebarSingle from './InfoSidebarSingle';\nimport InfoSidebarMulti from './InfoSidebarMulti';\nimport { CSSTransition } from 'react-transition-group';\nimport styled from 'styled-components';\nimport { media } from 'utils/styleUtils';\nimport { Sticky } from '../..';\n\nconst RightColumn = styled.div`\n  max-width: 200px;\n  display: flex;\n\n  ${media.smallerThan1280px`\n    display: none;\n  `}\n\n  &.slide-enter {\n    transform: translateX(100%);\n    opacity: 0;\n\n    &.slide-enter-active {\n      transition: 200ms;\n      transform: translateX(0%);\n      opacity: 1;\n    }\n  }\n\n  &.slide-exit {\n    transition: 200ms;\n    transform: translateX(0%);\n    opacity: 1;\n\n    &.slide-exit-active {\n      transform: translateX(100%);\n      opacity: 0;\n    }\n  }\n`;\n\nexport const StyledLink = styled.a`\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    text-decoration: underline;\n  }\n`;\n\nexport function handlePreviewCLick(id, openPreview) {\n  return function () {\n    openPreview(id);\n  };\n}\n\ninterface Props {\n  postIds: string[];\n  openPreview: (id: string) => void;\n}\n\nexport default ({ postIds, openPreview }: Props) => (\n  <CSSTransition\n    in={postIds.length !== 0}\n    mountOnEnter={true}\n    unmountOnExit={true}\n    timeout={200}\n    classNames=\"slide\"\n  >\n    <RightColumn>\n      <Sticky>\n        {postIds.length > 1 ? (\n          <InfoSidebarMulti postIds={postIds} openPreview={openPreview} />\n        ) : (\n          <InfoSidebarSingle postId={postIds[0]} openPreview={openPreview} />\n        )}\n      </Sticky>\n    </RightColumn>\n  </CSSTransition>\n);\n","import React from 'react';\nimport {\n  get,\n  isString,\n  isEqual,\n  omit,\n  cloneDeep,\n  omitBy,\n  isNil,\n  isArray,\n  unionBy,\n} from 'lodash-es';\nimport { Subscription, BehaviorSubject } from 'rxjs';\nimport {\n  map,\n  distinctUntilChanged,\n  mergeScan,\n  switchMap,\n} from 'rxjs/operators';\nimport {\n  ideasStream,\n  IIdeaData,\n  IdeaPublicationStatus,\n  ideasMiniStream,\n} from 'services/ideas';\nimport { PublicationStatus as ProjectPublicationStatus } from 'services/projects';\nimport {\n  getPageNumberFromUrl,\n  getSortAttribute,\n  getSortDirection,\n  SortDirection,\n} from 'utils/paginationUtils';\n\nexport type SortAttribute =\n  | 'new'\n  | 'trending'\n  | 'popular'\n  | 'author_name'\n  | 'upvotes_count'\n  | 'downvotes_count'\n  | 'baskets_count'\n  | 'status';\nexport type Sort =\n  | 'random'\n  | 'new'\n  | '-new'\n  | 'trending'\n  | '-trending'\n  | 'popular'\n  | '-popular'\n  | 'author_name'\n  | '-author_name'\n  | 'upvotes_count'\n  | '-upvotes_count'\n  | 'downvotes_count'\n  | '-downvotes_count'\n  | 'baskets_count'\n  | '-baskets_count'\n  | 'status'\n  | '-status';\ntype PublicationStatus = IdeaPublicationStatus;\n\nexport interface InputProps {\n  type: 'load-more' | 'paginated';\n  pageNumber?: number;\n  pageSize?: number;\n  projectIds?: string[] | 'all';\n  phaseId?: string;\n  authorId?: string;\n  sort?: Sort;\n  search?: string;\n  topics?: string[];\n  areas?: string[];\n  ideaStatusId?: string;\n  publicationStatus?: PublicationStatus;\n  projectPublicationStatus?: ProjectPublicationStatus;\n  boundingBox?: number[];\n  assignee?: string;\n  feedbackNeeded?: boolean;\n  // prop mini Gets stripped down ideas containing only title, should never be cached,\n  // and is not tested in all scenarios, but improves performance drastically.\n  mini?: boolean;\n}\n\nexport interface IQueryParameters {\n  'page[number]': number;\n  'page[size]': number;\n  projects: string[] | undefined | null;\n  phase: string | undefined | null;\n  author: string | undefined | null;\n  sort: Sort;\n  search: string | undefined | null;\n  topics: string[] | undefined | null;\n  areas: string[] | undefined | null;\n  idea_status: string | undefined | null;\n  publication_status: PublicationStatus | undefined | null;\n  project_publication_status: ProjectPublicationStatus | undefined | null;\n  bounding_box: number[] | undefined | null;\n  assignee: string | undefined | null;\n  feedback_needed: boolean | undefined | null;\n}\n\ninterface IAccumulator {\n  ideas: IIdeaData[] | null;\n  queryParameters: IQueryParameters;\n  hasMore: boolean;\n}\n\ntype children = (renderProps: GetIdeasChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: (obj: GetIdeasChildProps) => JSX.Element | null;\n}\n\nexport type GetIdeasChildProps = State & {\n  onLoadMore: () => void;\n  onChangePage: (pageNumber: number) => void;\n  onChangeProjects: (projectIds: string[]) => void;\n  onChangePhase: (phaseId: string) => void;\n  onChangeSearchTerm: (search: string) => void;\n  onChangeSorting: (sort: Sort) => void;\n  onChangeTopics: (topics: string[]) => void;\n  onChangeAreas: (areas: string[]) => void;\n  onChangeStatus: (ideaStatus: string | null) => void;\n  onChangePublicationStatus: (publicationStatus: PublicationStatus) => void;\n  onChangeProjectPublicationStatus: (\n    ProjectPublicationStatus: ProjectPublicationStatus\n  ) => void;\n  onChangeAssignee: (assignee: string | undefined) => void;\n  onChangeFeedbackFilter: (feedbackNeeded: boolean) => void;\n  onIdeaFiltering: (partialQueryParameters: Partial<IQueryParameters>) => void;\n  onResetParams: (paramsToOmit?: (keyof IQueryParameters)[]) => void;\n  type: 'ideas';\n};\n\ninterface State {\n  queryParameters: IQueryParameters;\n  list: IIdeaData[] | undefined | null;\n  hasMore: boolean;\n  querying: boolean;\n  loadingMore: boolean;\n  sortAttribute: SortAttribute;\n  sortDirection: SortDirection;\n  currentPage: number;\n  lastPage: number;\n}\n\nexport default class GetIdeas extends React.Component<Props, State> {\n  defaultQueryParameters: IQueryParameters;\n  queryParameters$: BehaviorSubject<IQueryParameters>;\n  subscriptions: Subscription[];\n\n  static defaultProps = {\n    pageNumber: 1,\n    pageSize: 12,\n    sort: 'random',\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.defaultQueryParameters = {\n      'page[number]': props.pageNumber as number,\n      'page[size]': props.pageSize as number,\n      sort: props.sort as Sort,\n      projects: undefined,\n      phase: undefined,\n      author: undefined,\n      search: undefined,\n      topics: undefined,\n      areas: undefined,\n      idea_status: undefined,\n      publication_status: undefined,\n      project_publication_status: undefined,\n      bounding_box: undefined,\n      assignee: undefined,\n      feedback_needed: undefined,\n    };\n    const queryParameters = this.getQueryParameters(\n      this.defaultQueryParameters,\n      props\n    );\n    this.state = {\n      // defaults\n      queryParameters,\n      list: undefined,\n      hasMore: false,\n      querying: true,\n      loadingMore: false,\n      sortAttribute: getSortAttribute<Sort, SortAttribute>(props.sort as Sort),\n      sortDirection: getSortDirection<Sort>(props.sort as Sort),\n      currentPage: 1,\n      lastPage: 1,\n    };\n    this.queryParameters$ = new BehaviorSubject(queryParameters);\n    this.subscriptions = [];\n  }\n\n  componentDidMount() {\n    const queryParameters = this.getQueryParameters(\n      this.state.queryParameters,\n      this.props\n    );\n    const startAccumulatorValue: IAccumulator = {\n      queryParameters,\n      ideas: null,\n      hasMore: false,\n    };\n    const queryParameters$ = this.queryParameters$.pipe(\n      distinctUntilChanged((prev, next) => isEqual(prev, next))\n    );\n\n    if (!this.props.type || this.props.type === 'load-more') {\n      this.subscriptions = [\n        queryParameters$\n          .pipe(\n            mergeScan<IQueryParameters, IAccumulator>(\n              (acc, newQueryParameters) => {\n                const oldQueryParamsWithoutPageNumber = omit(\n                  cloneDeep(acc.queryParameters),\n                  'page[number]'\n                );\n                const newQueryParamsWithoutPageNumber = omit(\n                  cloneDeep(newQueryParameters),\n                  'page[number]'\n                );\n                const oldPageNumber = acc.queryParameters['page[number]'];\n                const newPageNumber = newQueryParameters['page[number]'];\n                const isLoadingMore =\n                  isEqual(\n                    oldQueryParamsWithoutPageNumber,\n                    newQueryParamsWithoutPageNumber\n                  ) && oldPageNumber !== newPageNumber;\n                const pageNumber = isLoadingMore\n                  ? newQueryParameters['page[number]']\n                  : 1;\n                const queryParameters: IQueryParameters = {\n                  ...newQueryParameters,\n                  'page[number]': pageNumber,\n                };\n\n                this.setState({\n                  querying: !isLoadingMore,\n                  loadingMore: isLoadingMore,\n                });\n\n                const stream = this.props.mini ? ideasMiniStream : ideasStream;\n\n                return stream({ queryParameters }).observable.pipe(\n                  map((ideas) => {\n                    const selfLink = get(ideas, 'links.self');\n                    const lastLink = get(ideas, 'links.last');\n                    const hasMore =\n                      isString(selfLink) &&\n                      isString(lastLink) &&\n                      selfLink !== lastLink;\n\n                    return {\n                      queryParameters,\n                      hasMore,\n                      ideas: !isLoadingMore\n                        ? ideas.data\n                        : unionBy(acc.ideas || [], ideas.data, 'id'),\n                    };\n                  })\n                );\n              },\n              startAccumulatorValue\n            )\n          )\n          .subscribe(({ ideas, queryParameters, hasMore }) => {\n            this.setState({\n              queryParameters,\n              hasMore,\n              list: ideas,\n              querying: false,\n              loadingMore: false,\n            });\n          }),\n      ];\n    } else {\n      this.subscriptions = [\n        queryParameters$\n          .pipe(\n            switchMap((queryParameters) => {\n              const oldPageNumber = this.state.queryParameters['page[number]'];\n              const newPageNumber = queryParameters['page[number]'];\n              queryParameters['page[number]'] =\n                newPageNumber !== oldPageNumber ? newPageNumber : 1;\n\n              const stream = this.props.mini ? ideasMiniStream : ideasStream;\n\n              return stream({\n                queryParameters,\n              }).observable.pipe(map((ideas) => ({ queryParameters, ideas })));\n            })\n          )\n          .subscribe(({ ideas, queryParameters }) => {\n            this.setState({\n              queryParameters,\n              list: ideas ? ideas.data : null,\n              querying: false,\n              loadingMore: false,\n              sortAttribute: getSortAttribute<Sort, SortAttribute>(\n                queryParameters.sort\n              ),\n              sortDirection: getSortDirection<Sort>(queryParameters.sort),\n              currentPage: getPageNumberFromUrl(ideas.links.self) || 1,\n              lastPage: getPageNumberFromUrl(ideas.links.last) || 1,\n            });\n          }),\n      ];\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, _prevState: State) {\n    const { children: _prevChildren, ...prevPropsWithoutChildren } = prevProps;\n    const { children: _nextChildren, ...nextPropsWithoutChildren } = this.props;\n\n    if (!isEqual(prevPropsWithoutChildren, nextPropsWithoutChildren)) {\n      const queryParameters = this.getQueryParameters(\n        this.state.queryParameters,\n        this.props\n      );\n      this.queryParameters$.next(queryParameters);\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  propsToQueryParamsShape = () => ({\n    projects: this.props.projectIds,\n    'page[number]': this.props.pageNumber as number,\n    'page[size]': this.props.pageSize as number,\n    phase: this.props.phaseId,\n    author: this.props.authorId,\n    sort: this.props.sort as Sort,\n    topics: this.props.topics,\n    areas: this.props.areas,\n    idea_status: this.props.ideaStatusId,\n    publication_status: this.props.publicationStatus,\n    project_publication_status: this.props.projectPublicationStatus,\n    bounding_box: this.props.boundingBox,\n    assignee: this.props.assignee,\n    feedback_needed: this.props.feedbackNeeded,\n    search: undefined,\n  });\n\n  getQueryParametersFromProps = () => {\n    const queryParamsShaped = this.propsToQueryParamsShape();\n    Object.keys(queryParamsShaped)\n      .filter((key) => queryParamsShaped[key] === null)\n      .forEach((key) => (queryParamsShaped[key] = undefined));\n    return queryParamsShaped as IQueryParameters; // legal because last line changes null values to undefined\n  };\n\n  getQueryParameters = (queryParameters: IQueryParameters, props: Props) => {\n    let projects: string[] | undefined | null = undefined;\n\n    if (isNil(props.projectIds)) {\n      projects = queryParameters.projects;\n    } else if (isArray(props.projectIds)) {\n      projects = props.projectIds;\n    }\n\n    const inputPropsQueryParameters: IQueryParameters = {\n      projects,\n      'page[number]': props.pageNumber as number,\n      'page[size]': props.pageSize as number,\n      phase: props.phaseId,\n      author: props.authorId,\n      sort: props.sort as Sort,\n      search: props.search,\n      topics: props.topics,\n      areas: props.areas,\n      idea_status: props.ideaStatusId,\n      publication_status: props.publicationStatus,\n      project_publication_status: props.projectPublicationStatus,\n      bounding_box: props.boundingBox,\n      assignee: props.assignee,\n      feedback_needed: props.feedbackNeeded,\n    };\n\n    // Omit all queryParameters that are nil.\n    // Why do this? Because we assume that an input prop that's nil is an input prop that should be ignored,\n    // and not overwrite a none-nil value that's part of this.state.queryParameters.\n    return {\n      ...queryParameters,\n      ...omitBy(inputPropsQueryParameters, isNil),\n      // Make an exception for 'projects', because when it's undefined we don't want to ignore it but instead pass it along\n      // to let the request know we don't want to apply a projects filter but load the ideas for all projects\n      projects,\n    };\n  };\n\n  loadMore = () => {\n    if (!this.state.loadingMore) {\n      this.queryParameters$.next({\n        ...this.state.queryParameters,\n        'page[number]': this.state.queryParameters['page[number]'] + 1,\n      });\n    }\n  };\n\n  handleChangePage = (pageNumber: number) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      'page[number]': pageNumber,\n    });\n  };\n\n  handlePhaseOnChange = (phaseId: string) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      phase: phaseId,\n      'page[number]': 1,\n    });\n  };\n\n  handleSearchOnChange = (search: string) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      search: search ? search : undefined,\n      'page[number]': 1,\n    });\n  };\n\n  handleSortOnChange = (sort: Sort) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      sort,\n      'page[number]': 1,\n    });\n  };\n\n  handleProjectsOnChange = (projects: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      projects,\n      'page[number]': 1,\n    });\n  };\n\n  handleTopicsOnChange = (topics: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      topics,\n      'page[number]': 1,\n    });\n  };\n\n  handleAreasOnchange = (areas: string[]) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      areas,\n      'page[number]': 1,\n    });\n  };\n\n  handleStatusOnChange = (ideaStatus: string | null) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      idea_status: ideaStatus || undefined,\n      'page[number]': 1,\n    });\n  };\n\n  handlePublicationStatusOnChange = (publicationStatus: PublicationStatus) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      publication_status: publicationStatus,\n      'page[number]': 1,\n    });\n  };\n\n  handleProjectPublicationStatusOnChange = (\n    projectPublicationStatus: ProjectPublicationStatus\n  ) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      project_publication_status: projectPublicationStatus,\n      'page[number]': 1,\n    });\n  };\n\n  handleAssigneeOnChange = (assignee: string | undefined) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      assignee,\n      'page[number]': 1,\n    });\n  };\n\n  handleFeedbackFilterOnChange = (feedbackNeeded: boolean) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      feedback_needed: feedbackNeeded || undefined,\n      'page[number]': 1,\n    });\n  };\n\n  handleIdeaFiltering = (ideaFilters: Partial<IQueryParameters>) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      ...ideaFilters,\n      'page[number]': 1,\n    });\n  };\n\n  handleResetParamsToProps = (paramsToOmit?: (keyof IQueryParameters)[]) => {\n    const defaultQueryParameters = this.getQueryParametersFromProps();\n\n    if (paramsToOmit && paramsToOmit.length > 0) {\n      this.queryParameters$.next({\n        ...this.state.queryParameters,\n        ...omit(defaultQueryParameters, paramsToOmit),\n      });\n    } else {\n      this.queryParameters$.next(defaultQueryParameters);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    return (children as children)({\n      ...this.state,\n      onLoadMore: this.loadMore,\n      onChangePage: this.handleChangePage,\n      onChangeProjects: this.handleProjectsOnChange,\n      onChangePhase: this.handlePhaseOnChange,\n      onChangeSearchTerm: this.handleSearchOnChange,\n      onChangeSorting: this.handleSortOnChange,\n      onChangeTopics: this.handleTopicsOnChange,\n      onChangeAreas: this.handleAreasOnchange,\n      onChangeStatus: this.handleStatusOnChange,\n      onChangePublicationStatus: this.handlePublicationStatusOnChange,\n      onChangeProjectPublicationStatus: this\n        .handleProjectPublicationStatusOnChange,\n      onChangeAssignee: this.handleAssigneeOnChange,\n      onChangeFeedbackFilter: this.handleFeedbackFilterOnChange,\n      onIdeaFiltering: this.handleIdeaFiltering,\n      onResetParams: this.handleResetParamsToProps,\n      type: 'ideas',\n    });\n  }\n}\n","import React from 'react';\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport { deleteIdea } from 'services/ideas';\nimport { deleteInitiative } from 'services/initiatives';\nimport { Button, Icon } from 'semantic-ui-react';\nimport messages from '../../messages';\nimport { ManagerType } from '../..';\n\ninterface Props {\n  type: ManagerType;\n  /** A set of ids of ideas/initiatives that are currently selected */\n  selection: Set<string>;\n  resetSelection: () => void;\n}\n\nclass ActionBarMulti extends React.PureComponent<Props & InjectedIntlProps> {\n  handleClickDeleteIdeas = () => {\n    const {\n      selection,\n      resetSelection,\n      intl: { formatMessage },\n    } = this.props;\n\n    const message = formatMessage(messages.deleteInputsConfirmation, {\n      count: selection.size,\n    });\n\n    if (window.confirm(message)) {\n      selection.forEach((id) => {\n        deleteIdea(id);\n      });\n    }\n\n    resetSelection();\n  };\n\n  handleClickDeleteInitiatives = () => {\n    const {\n      selection,\n      resetSelection,\n      intl: { formatMessage },\n    } = this.props;\n\n    const message = formatMessage(messages.deleteInitiativesConfirmation, {\n      count: selection.size,\n    });\n\n    if (window.confirm(message)) {\n      selection.forEach((id) => {\n        deleteInitiative(id);\n      });\n    }\n\n    resetSelection();\n  };\n\n  render() {\n    const { type, selection } = this.props;\n    if (type === 'AllIdeas' || type === 'ProjectIdeas') {\n      return (\n        <Button\n          negative={true}\n          basic={true}\n          onClick={this.handleClickDeleteIdeas}\n        >\n          <Icon name=\"trash\" />\n          <FormattedMessage\n            {...messages.deleteAllSelectedInputs}\n            values={{ count: selection.size }}\n          />\n        </Button>\n      );\n    } else if (type === 'Initiatives') {\n      return (\n        <Button\n          negative={true}\n          basic={true}\n          onClick={this.handleClickDeleteInitiatives}\n        >\n          <Icon name=\"trash\" />\n          <FormattedMessage\n            {...messages.deleteAllSelectedInitiatives}\n            values={{ count: selection.size }}\n          />\n        </Button>\n      );\n    }\n    return null;\n  }\n}\n\nexport default injectIntl<Props>(ActionBarMulti);\n","import React from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport T from 'components/T';\nimport { List } from 'semantic-ui-react';\nimport GetIdea from 'resources/GetIdea';\nimport { handlePreviewCLick, StyledLink } from './';\n\nexport default (props: {\n  postId: string;\n  openPreview: (id: string) => void;\n}) => (\n  <GetIdea ideaId={props.postId}>\n    {(post) => {\n      if (isNilOrError(post)) return null;\n\n      return (\n        <List.Item>\n          <StyledLink\n            onClick={handlePreviewCLick(props.postId, props.openPreview)}\n          >\n            <T value={post.attributes.title_multiloc} />\n          </StyledLink>\n        </List.Item>\n      );\n    }}\n  </GetIdea>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport ActionBarSingle from './ActionBarSingle';\nimport ActionBarMulti from './ActionBarMulti';\nimport { ManagerType } from '../..';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\ninterface Props {\n  type: ManagerType;\n  /** A set of ids of ideas/initiatives that are currently selected */\n  selection: Set<string>;\n  resetSelection: () => void;\n  handleClickEdit: () => void;\n}\n\nexport default (props: Props) => {\n  const { type, selection, resetSelection, handleClickEdit } = props;\n  return (\n    <Container>\n      {selection.size > 1 && (\n        <ActionBarMulti\n          type={type}\n          selection={selection}\n          resetSelection={resetSelection}\n        />\n      )}\n      {selection.size === 1 && (\n        <ActionBarSingle\n          type={type}\n          postId={[...selection][0]}\n          resetSelection={resetSelection}\n          handleClickEdit={handleClickEdit}\n        />\n      )}\n    </Container>\n  );\n};\n","import React from 'react';\nimport InfoSidebarMultiItem from './InfoSidebarMultiItem';\nimport { Segment, List } from 'semantic-ui-react';\n\ninterface Props {\n  postIds: string[];\n  openPreview: (id: string) => void;\n}\n\nexport default class InfoSidebarMulti extends React.PureComponent<Props> {\n  render() {\n    const { postIds, openPreview } = this.props;\n\n    return (\n      <Segment attached=\"bottom\">\n        <List bulleted={true}>\n          {postIds.map((postId) => (\n            <InfoSidebarMultiItem\n              key={postId}\n              postId={postId}\n              openPreview={openPreview}\n            />\n          ))}\n        </List>\n      </Segment>\n    );\n  }\n}\n","import React from 'react';\nimport { Subscription } from 'rxjs';\nimport { IIdeaStatusData, ideaStatusesStream } from 'services/ideaStatuses';\n\ninterface InputProps {}\n\ntype children = (renderProps: GetIdeaStatusesChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  ideaStatuses: IIdeaStatusData[] | undefined | null;\n}\n\nexport type GetIdeaStatusesChildProps = IIdeaStatusData[] | undefined | null;\n\nexport default class GetIdeaStatuses extends React.Component<Props, State> {\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      ideaStatuses: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.subscriptions = [\n      ideaStatusesStream().observable.subscribe((ideaStatuses) => {\n        this.setState({\n          ideaStatuses: ideaStatuses ? ideaStatuses.data : null,\n        });\n      }),\n    ];\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { ideaStatuses } = this.state;\n    return (children as children)(ideaStatuses);\n  }\n}\n","import React from 'react';\nimport Button from 'components/UI/Button';\nimport { fontSizes } from 'utils/styleUtils';\n\n// i18n\nimport messages from '../../messages';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { isString } from 'lodash-es';\nimport { trackEventByName } from 'utils/analytics';\nimport { requestBlob } from 'utils/request';\nimport { API_PATH } from 'containers/App/constants';\nimport tracks from '../../tracks';\nimport { exportType } from '../ExportMenu';\nimport { saveAs } from 'file-saver';\nimport { InjectedIntlProps } from 'react-intl';\n\ninterface Props {\n  exportQueryParameter: 'all' | string | string[];\n  exportType: exportType;\n}\n\ninterface State {\n  exporting: boolean;\n}\n\nclass ExportCommentsButton extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exporting: false,\n    };\n  }\n\n  handleExportComments = async () => {\n    const {\n      exportQueryParameter: queryParameter,\n      intl: { formatDate, formatMessage },\n    } = this.props;\n\n    const queryParametersObject = {};\n    if (isString(queryParameter) && queryParameter !== 'all') {\n      queryParametersObject['project'] = queryParameter;\n    } else if (!isString(queryParameter)) {\n      queryParametersObject['initiatives'] = queryParameter;\n    }\n\n    try {\n      this.setState({ exporting: true });\n      const blob = await requestBlob(\n        `${API_PATH}/initiatives/comments/as_xlsx`,\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        queryParametersObject\n      );\n      saveAs(\n        blob,\n        `${formatMessage(\n          messages.initiativesCommentsExportFileName\n        )}_${formatDate(Date.now())}.xlsx`\n      );\n      this.setState({ exporting: false });\n    } catch (error) {\n      this.setState({ exporting: false });\n    }\n\n    // track this click for user analytics\n    trackEventByName(tracks.clickExportComments.name);\n  };\n\n  render() {\n    const { exportType } = this.props;\n    const { exporting } = this.state;\n    return (\n      <Button\n        buttonStyle=\"text\"\n        onClick={this.handleExportComments}\n        processing={exporting}\n        padding=\"0\"\n        fontSize={`${fontSizes.small}px`}\n      >\n        {exportType === 'all' && (\n          <FormattedMessage {...messages.exportInitiativesComments} />\n        )}\n        {exportType === 'selected_posts' && (\n          <FormattedMessage {...messages.exportSelectedInitiativesComments} />\n        )}\n      </Button>\n    );\n  }\n}\n\nexport default injectIntl(ExportCommentsButton);\n","import { lazy } from 'react';\n\nexport default lazy(() => import('./'));\n","import React from 'react';\nimport { ITopicData } from 'services/topics';\nimport { flow } from 'lodash-es';\nimport T from 'components/T';\nimport { Menu } from 'semantic-ui-react';\nimport { DropTarget } from 'react-dnd-cjs';\n\ninterface Props {\n  topic: ITopicData;\n  active: boolean;\n  onClick: any;\n  isOver: boolean;\n  canDrop: boolean;\n  connectDropTarget: any;\n}\n\nclass FilterSidebarTopicsItem extends React.PureComponent<Props> {\n  render() {\n    const {\n      topic,\n      active,\n      onClick,\n      connectDropTarget,\n      isOver,\n      canDrop,\n    } = this.props;\n    return connectDropTarget(\n      <div>\n        <Menu.Item active={active || (isOver && canDrop)} onClick={onClick}>\n          <T value={topic.attributes.title_multiloc} />\n        </Menu.Item>\n      </div>\n    );\n  }\n}\n\nconst topicTarget = {\n  drop(props) {\n    return {\n      type: 'topic',\n      id: props.topic.id,\n    };\n  },\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop(),\n});\n\nexport default flow([DropTarget('IDEA', topicTarget, collect)])(\n  FilterSidebarTopicsItem\n);\n","import React from 'react';\nimport { adopt } from 'react-adopt';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { isFunction } from 'lodash-es';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\n\n// styles\nimport styled from 'styled-components';\n\n// resources\nimport GetIdeasCount, {\n  GetIdeasCountChildProps,\n} from 'resources/GetIdeasCount';\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n`;\n\ninterface InputProps {\n  assignee?: string | null;\n  project?: string | null;\n  phase?: string | null;\n  topics?: string[] | null;\n  ideaStatus?: string | null;\n  feedbackNeeded: boolean;\n  searchTerm?: string | null;\n}\n\ninterface DataProps {\n  ideasCount: GetIdeasCountChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface State {}\n\nexport class IdeasCount extends React.PureComponent<Props, State> {\n  componentDidUpdate(prevProps) {\n    if (prevProps.searchTerm !== this.props.searchTerm) {\n      if (isFunction(this.props.ideasCount.onChangeSearchTerm)) {\n        this.props.ideasCount.onChangeSearchTerm(this.props.searchTerm);\n      }\n    }\n  }\n\n  render() {\n    const { ideasCount } = this.props;\n    const ideasMatchingFiltersCount = ideasCount.count;\n\n    return (\n      <Container>\n        {/*\n          If there are no ideas, we have an 'empty container' to indicate there are no ideas matching the filters.\n          Hence we only show this count when there's at least 1 idea.\n        */}\n        {!isNilOrError(ideasMatchingFiltersCount) &&\n          ideasMatchingFiltersCount > 0 &&\n          (ideasMatchingFiltersCount === 1 ? (\n            <FormattedMessage {...messages.oneInput} />\n          ) : (\n            <FormattedMessage\n              {...messages.multipleInputs}\n              values={{ ideaCount: ideasMatchingFiltersCount }}\n            />\n          ))}\n      </Container>\n    );\n  }\n}\n\nconst Data = adopt({\n  ideasCount: ({\n    project,\n    phase,\n    topics,\n    ideaStatus,\n    assignee,\n    feedbackNeeded,\n    render,\n  }) => {\n    const projectIds = [project];\n\n    return (\n      <GetIdeasCount\n        feedbackNeeded={feedbackNeeded === true ? true : undefined}\n        assignee={assignee !== 'all' ? assignee : undefined}\n        projectIds={projectIds}\n        phaseId={phase}\n        topics={topics}\n        ideaStatusId={ideaStatus}\n      >\n        {render}\n      </GetIdeasCount>\n    );\n  },\n});\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => (\n      <IdeasCount {...inputProps} ideasCount={dataProps.ideasCount} />\n    )}\n  </Data>\n);\n","import React, { PureComponent } from 'react';\n\n// components\nimport { Dropdown } from 'cl2-component-library';\nimport Button from 'components/UI/Button';\nimport ExportButtons from './ExportButtons';\n\n// style\nimport styled from 'styled-components';\n\n// typings\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../../messages';\nimport { ManagerType } from '../../';\n\nconst DropdownButton = styled(Button)``;\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  position: relative;\n  cursor: pointer;\n`;\n\nexport type exportType = 'selected_posts' | 'project' | 'all';\n\nexport interface Props {\n  type: ManagerType;\n  /** A set of ids of ideas/initiatives that are currently selected */\n  selection: Set<string>;\n  selectedProject: string | undefined;\n  className?: string;\n}\n\ntype State = {\n  dropdownOpened: boolean;\n};\n\nexport default class ExportMenu extends PureComponent<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownOpened: false,\n    };\n  }\n\n  getExportQueryParameters = () => {\n    const { selection, selectedProject } = this.props;\n\n    let exportQueryParameter;\n    let exportType: null | exportType = null;\n    if (selection.size > 0) {\n      exportQueryParameter = [...selection];\n      exportType = 'selected_posts';\n    } else if (selectedProject) {\n      exportQueryParameter = selectedProject;\n      exportType = 'project';\n    } else {\n      exportQueryParameter = 'all';\n      exportType = 'all';\n    }\n\n    return { exportQueryParameter, exportType };\n  };\n\n  removeFocus = (event: React.MouseEvent) => {\n    event.preventDefault();\n  };\n\n  toggleDropdown = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    this.setState(({ dropdownOpened }) => ({\n      dropdownOpened: !dropdownOpened,\n    }));\n  };\n\n  render() {\n    const { className, type } = this.props;\n    const { dropdownOpened } = this.state;\n    const {\n      exportQueryParameter,\n      exportType,\n    } = this.getExportQueryParameters();\n\n    return (\n      <Container className={className}>\n        <DropdownButton\n          buttonStyle=\"admin-dark-text\"\n          onClick={this.toggleDropdown}\n          icon=\"download\"\n          iconPos=\"right\"\n          padding=\"0px\"\n        >\n          <FormattedMessage {...messages.exports} />\n        </DropdownButton>\n\n        <Dropdown\n          width=\"100%\"\n          top=\"35px\"\n          right=\"-5px\"\n          mobileRight=\"-5px\"\n          opened={dropdownOpened}\n          onClickOutside={this.toggleDropdown}\n          content={\n            <ExportButtons\n              type={type}\n              exportQueryParameter={exportQueryParameter}\n              exportType={exportType}\n            />\n          }\n        />\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport { IIdeaStatusData } from 'services/ideaStatuses';\nimport { IInitiativeStatusData } from 'services/initiativeStatuses';\nimport { flow, get } from 'lodash-es';\nimport styled from 'styled-components';\nimport { Menu } from 'semantic-ui-react';\nimport { DropTarget } from 'react-dnd-cjs';\nimport T from 'components/T';\n\n// i18n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../../messages';\n\nconst ItemWrapper = styled.div`\n  display: flex;\n`;\n\nconst ColorIndicator = styled.div`\n  width: 1rem;\n  height: 1rem;\n  background-color: ${(props) => props.color};\n  border-radius: ${(props) => props.theme.borderRadius};\n  margin-right: 0.5rem;\n`;\n\nconst StatusText = styled.div`\n  &:first-letter {\n    text-transform: uppercase;\n  }\n`;\n\nconst StyledText = styled.span`\n  font-weight: 300;\n`;\n\ninterface Props {\n  status: IIdeaStatusData | IInitiativeStatusData;\n  active: boolean;\n  onClick: any;\n  isOver: boolean;\n  canDrop: boolean;\n  connectDropTarget: any;\n}\n\nclass FilterSidebarStatusesItem extends React.PureComponent<Props> {\n  render() {\n    const {\n      status,\n      active,\n      onClick,\n      connectDropTarget,\n      isOver,\n      canDrop,\n    } = this.props;\n\n    return connectDropTarget(\n      <div>\n        <Menu.Item active={active || (isOver && canDrop)} onClick={onClick}>\n          <ItemWrapper>\n            <ColorIndicator color={status.attributes.color} />\n            <div>\n              <StatusText>\n                <T value={status.attributes.title_multiloc} />\n              </StatusText>\n              {get(status, 'attributes.transition_type') === 'automatic' && (\n                <StyledText>\n                  &nbsp;\n                  <FormattedMessage {...messages.automatic} />\n                </StyledText>\n              )}\n            </div>\n          </ItemWrapper>\n        </Menu.Item>\n      </div>\n    );\n  }\n}\n\nconst statusTarget = {\n  drop(props) {\n    return {\n      type: 'status',\n      id: props.status.id,\n    };\n  },\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop(),\n});\n\nexport default flow([DropTarget('IDEA', statusTarget, collect)])(\n  FilterSidebarStatusesItem\n);\n","import React from 'react';\nimport { IPhaseData } from 'services/phases';\nimport { Menu, Divider } from 'semantic-ui-react';\nimport FilterSidebarPhasesItem from './FilterSidebarPhasesItem';\nimport { FormattedMessage } from 'utils/cl-intl';\n\nimport messages from '../../messages';\n\ntype Props = {\n  phases?: IPhaseData[];\n  selectedPhase?: string | null;\n  onChangePhaseFilter?: (string) => void;\n};\n\nexport default class FilterSidebarPhases extends React.PureComponent<Props> {\n  handleItemClick = (id) => () => {\n    this.props.onChangePhaseFilter && this.props.onChangePhaseFilter(id);\n  };\n\n  clearFilter = () => {\n    this.props.onChangePhaseFilter && this.props.onChangePhaseFilter(null);\n  };\n\n  isActive = (id) => {\n    return this.props.selectedPhase === id;\n  };\n\n  render() {\n    const { phases, selectedPhase } = this.props;\n    return (\n      <Menu secondary={true} vertical={true} fluid={true}>\n        <Menu.Item onClick={this.clearFilter} active={!selectedPhase}>\n          <FormattedMessage {...messages.allPhases} />\n        </Menu.Item>\n        <Divider />\n        {phases &&\n          phases.map((phase, index) => (\n            <FilterSidebarPhasesItem\n              key={phase.id}\n              phase={phase}\n              phaseNumber={index + 1}\n              active={!!this.isActive(phase.id)}\n              onClick={this.handleItemClick(phase.id)}\n            />\n          ))}\n      </Menu>\n    );\n  }\n}\n","import React from 'react';\nimport { IProjectData } from 'services/projects';\nimport { flow } from 'lodash-es';\nimport T from 'components/T';\nimport { Menu } from 'semantic-ui-react';\nimport { DropTarget } from 'react-dnd-cjs';\n\ninterface Props {\n  project: IProjectData;\n  active: boolean;\n  onClick: any;\n  isOver: boolean;\n  canDrop: boolean;\n  connectDropTarget: any;\n}\n\nclass FilterSidebarProjectsItem extends React.PureComponent<Props> {\n  render() {\n    const {\n      project,\n      active,\n      onClick,\n      connectDropTarget,\n      isOver,\n      canDrop,\n    } = this.props;\n    return connectDropTarget(\n      <div>\n        <Menu.Item\n          className=\"e2e-idea-manager-project-filter-item\"\n          active={active || (isOver && canDrop)}\n          onClick={onClick}\n        >\n          <T value={project.attributes.title_multiloc} />\n        </Menu.Item>\n      </div>\n    );\n  }\n}\n\nconst projectTarget = {\n  drop(props) {\n    return {\n      type: 'project',\n      id: props.project.id,\n    };\n  },\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop(),\n});\n\nexport default flow([DropTarget('IDEA', projectTarget, collect)])(\n  FilterSidebarProjectsItem\n);\n","import React from 'react';\nimport Button from 'components/UI/Button';\nimport { fontSizes } from 'utils/styleUtils';\n\n// i18n\nimport messages from '../../messages';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { exportType } from '../ExportMenu';\nimport { isString } from 'util';\nimport { requestBlob } from 'utils/request';\nimport { API_PATH } from 'containers/App/constants';\nimport { trackEventByName } from 'utils/analytics';\nimport tracks from '../../tracks';\nimport { saveAs } from 'file-saver';\nimport { reportError } from 'utils/loggingUtils';\nimport { InjectedIntlProps } from 'react-intl';\n\ninterface Props {\n  exportQueryParameter: 'all' | string | string[];\n  exportType: exportType;\n}\n\ninterface State {\n  exporting: boolean;\n}\n\nclass ExportIdeasButton extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exporting: false,\n    };\n  }\n\n  handleExportIdeas = async () => {\n    const {\n      exportQueryParameter,\n      intl: { formatDate, formatMessage },\n    } = this.props;\n\n    const queryParametersObject = {};\n    if (isString(exportQueryParameter) && exportQueryParameter !== 'all') {\n      queryParametersObject['project'] = exportQueryParameter;\n    } else if (!isString(exportQueryParameter)) {\n      queryParametersObject['ideas'] = exportQueryParameter;\n    }\n\n    try {\n      this.setState({ exporting: true });\n      const blob = await requestBlob(\n        `${API_PATH}/ideas/as_xlsx`,\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        queryParametersObject\n      );\n      saveAs(\n        blob,\n        `${formatMessage(messages.inputsExportFileName)}_${formatDate(\n          Date.now()\n        )}.xlsx`\n      );\n      this.setState({ exporting: false });\n    } catch (error) {\n      reportError(error);\n      this.setState({ exporting: false });\n    }\n\n    // track this click for user analytics\n    trackEventByName(tracks.clickExportIdeas.name);\n  };\n\n  render() {\n    const { exportType } = this.props;\n    const { exporting } = this.state;\n    return (\n      <Button\n        buttonStyle=\"text\"\n        onClick={this.handleExportIdeas}\n        processing={exporting}\n        padding=\"0\"\n        fontSize={`${fontSizes.small}px`}\n      >\n        {exportType === 'all' && (\n          <FormattedMessage {...messages.exportAllInputs} />\n        )}\n        {exportType === 'project' && (\n          <FormattedMessage {...messages.exportInputsProjects} />\n        )}\n        {exportType === 'selected_posts' && (\n          <FormattedMessage {...messages.exportSelectedInputs} />\n        )}\n      </Button>\n    );\n  }\n}\n\nexport default injectIntl(ExportIdeasButton);\n"],"sourceRoot":""}