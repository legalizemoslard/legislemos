{"version":3,"sources":["webpack:///./app/components/admin/ResolutionControl/messages.ts","webpack:///./app/containers/Admin/dashboard/summary/charts/SelectableResourceByProjectChart.tsx","webpack:///./app/containers/Admin/dashboard/summary/charts/BarChartActiveUsersByTime.tsx","webpack:///./app/containers/Admin/dashboard/summary/charts/SelectableResourceByTopicChart.tsx","webpack:///./app/containers/Admin/dashboard/summary/index.tsx","webpack:///./app/components/admin/ResolutionControl/index.tsx","webpack:///./app/containers/Admin/dashboard/components/IdeasByStatusChart.tsx","webpack:///./app/containers/Admin/dashboard/summary/charts/LineBarChartVotesByTime.tsx","webpack:///./app/containers/Admin/dashboard/summary/charts/SelectableResourceChart.tsx","webpack:///./app/resources/GetTopics.tsx","webpack:///./app/containers/Admin/dashboard/summary/charts/LineBarChart.tsx"],"names":["defineMessages","resolutionday","id","defaultMessage","resolutionweek","resolutionmonth","SelectableResourceByProjectChart","data","series","projects","props","localize","currentResourceByProject","dataKey","mapped","map","count","projectId","name","title_multiloc","value","code","res","sortBy","length","serie","currentProjectFilter","projectOptions","formatMessage","intl","selectedName","selectedProject","find","item","selectedCount","foundOption","option","label","messages","convertedSerie","filter","rest","shortenedName","substring","ideasByProjectStream","commentsByProjectStream","votesByProjectStream","this","onResourceByProjectChange","onResourceByXChange","currentSelectedResource","stream","getCurrentStream","convertToGraphFormat","convertSerie","currentFilter","byWhat","PureComponent","injectIntl","InfoIcon","Icon","StyledResponsiveContainer","ResponsiveContainer","BarChartActiveUsersByTime","graphUnit","isEmpty","key","date","resolution","formatDate","day","undefined","month","year","state","currentChart","React","createRef","startAt","endAt","currentGroupFilter","currentTopicFilter","resubscribe","prevProps","subscription","unsubscribe","queryParameters","start_at","end_at","interval","project","group","topic","observable","subscribe","setState","className","graphTitle","infoMessage","chartLabelSize","chartLabelColor","barHoverColor","animationBegin","animationDuration","newBarFill","noData","every","GraphCard","GraphCardInner","GraphCardHeader","GraphCardTitle","Popup","basic","trigger","content","position","svgNode","NoDataContainer","FormattedMessage","BarChart","ref","Bar","fill","isAnimationActive","XAxis","stroke","fontSize","tick","transform","tickFormatter","formatTick","YAxis","Tooltip","labelFormatter","formatLabel","cursor","withTheme","SelectableResourceByTopicChart","topics","currentResourceByTopic","topicId","topicOptions","selectedTopic","ideasByTopicStream","commentsByTopicStream","votesByTopicStream","onResourceByTopicChange","DashboardPageSummary","startAtMoment","endAtMoment","timeDiff","moment","duration","diff","asMonths","asWeeks","trackFilterOnProject","extra","currentProjectFilterLabel","trackFilterOnGroup","currentGroupFilterLabel","trackFilterOnTopic","currentTopicFilterLabel","trackResourceChange","newResource","graph","projectsList","onlyModerator","filterOptions","isNilOrError","attributes","allProjects","groups","groupsList","allGroups","allTopics","projectFilterOptions","generateProjectOptions","groupFilterOptions","generateGroupsOptions","topicFilterOptions","generateTopicOptions","resourceOptions","inputs","comments","votes","toISOString","numberOfActiveParticipantsDescription","ControlBar","onChange","handleChangeTimeRange","handleChangeResolution","onProjectFilter","handleOnProjectFilter","onGroupFilter","handleOnGroupFilter","onTopicFilter","handleOnTopicFilter","GraphsContainer","graphUnitMessageKey","usersByTimeTitle","xlsxEndpoint","usersByTimeXlsxEndpoint","lineStream","usersByTimeCumulativeStream","barStream","usersByTimeStream","activeUsersByTimeTitle","activeUsersByTimeXlsxEndpoint","activeUsersByTimeStream","ideasByTimeCumulativeXlsxEndpoint","ideasByTimeCumulativeStream","ideasByTimeStream","commentsByTimeTitle","commentsByTimeCumulativeXlsxEndpoint","commentsByTimeCumulativeStream","commentsByTimeStream","Column","Data","adopt","publicationStatuses","filterCanModerate","DashboardPageSummaryWithHOCs","injectTracks","tracks","filteredOnGroup","filteredOnProject","filteredOnTopic","choseResource","inputProps","dataProps","Container","styled","div","ResolutionControl","resOptions","items","selectedValue","onClick","handleOnResolutionChange","IdeasByStatusChart","chartFill","unitName","CustomizedLabel","x","y","dx","dy","fontFamily","textAnchor","inputsByStatusTitle","ideasByStatusXlsxEndpoint","height","layout","barSize","entry","index","Cell","color","opacity","type","width","tickLine","IdeasByStatusChartWithHoCs","ideasByStatusStream","ideas","idea_status","Object","keys","status","ordering","LineBarChartVotesByTime","serieChange","toString","combined$","barSerie","lineSerie","up","down","total","cumulatedTotal","barStreamObservable","votesByTimeStream","lineStreamObservable","votesByTimeCumulativeStream","combineLatest","convertedAndMergedSeries","convertAndMergeSeries","firstSerieValue","lastSerieValue","typeOfChange","totalNumber","formattedSerieChange","formatSerieChange","newLineColor","cartesianGridColor","formattedNumbers","getFormattedNumbers","GraphCardFigureContainer","GraphCardFigure","GraphCardFigureChange","votesByTimeXlsxEndpoint","ComposedChart","margin","right","CartesianGrid","strokeWidth","yAxisId","Label","angle","orientation","perPeriod","period","numberOfVotesUp","rgba","stackId","numberOfVotesDown","Line","dot","Legend","wrapperStyle","paddingTop","SHiddenLabel","HiddenLabel","h3","media","smallerThan1280px","SelectableResourceChart","barFill","selectedResourceName","resourceByDifference","xlsxEndpointTable","ideasTopic","ideasByTopicXlsxEndpoint","commentsTopic","commentsByTopicXlsxEndpoint","votesTopic","votesByTopicXlsxEndpoint","ideasProject","ideasByProjectXlsxEndpoint","commentsProject","commentsByProjectXlsxEndpoint","votesProject","votesByProjectXlsxEndpoint","GraphCardHeaderWithFilter","Select","options","tagName","totalCount","values","LabelList","SelectableResourceChartWithHoCs","GetTopics","topicIds","exclude_code","sort","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","isEqual","switchMap","projectTopicsStream","relationships","topicByIdStream","of","topicsStream","forEach","children","Component","LineBarChart","barValue","reverseStackOrder","allowDecimals","fillOpacity","totalForPeriod","activeDot","Boolean"],"mappings":"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","file":"90.44d5e07ef2c9db5a2a14.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  resolutionday: {\n    id: 'app.containers.AdminPage.DashboardPage.resolutionday',\n    defaultMessage: 'in Days',\n  },\n  resolutionweek: {\n    id: 'app.containers.AdminPage.DashboardPage.resolutionweek',\n    defaultMessage: 'in Weeks',\n  },\n  resolutionmonth: {\n    id: 'app.containers.AdminPage.DashboardPage.resolutionmonth',\n    defaultMessage: 'in Months',\n  },\n});\n","// libraries\nimport React, { PureComponent } from 'react';\nimport { map, sortBy } from 'lodash-es';\n\n// components\nimport SelectableResourceChart from './SelectableResourceChart';\n\n// intl\nimport localize, { InjectedLocalized } from 'utils/localize';\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../../messages';\n\n// typings\nimport {\n  IIdeasByProject,\n  ideasByProjectStream,\n  ICommentsByProject,\n  commentsByProjectStream,\n  IVotesByProject,\n  votesByProjectStream,\n} from 'services/stats';\nimport { IOption, IGraphFormat } from 'typings';\nimport { IResource } from '..';\nimport { IResolution } from 'components/admin/ResolutionControl';\n\ninterface QueryProps {\n  startAt: string | null | undefined;\n  endAt: string | null;\n  currentTopicFilter: string | undefined;\n  currentGroupFilter: string | undefined;\n}\n\ninterface InputProps {\n  currentProjectFilter: string | undefined;\n  className: string;\n  onResourceByProjectChange: (option: IOption) => void;\n  currentResourceByProject: IResource;\n  resourceOptions: IOption[];\n  projectOptions: IOption[];\n  startAt: string | null | undefined;\n  endAt: string | null;\n  resolution: IResolution;\n  currentGroupFilter: string | undefined;\n  currentTopicFilter: string | undefined;\n  currentProjectFilterLabel: string | undefined;\n  currentGroupFilterLabel: string | undefined;\n  currentTopicFilterLabel: string | undefined;\n}\n\ninterface Props extends InputProps, QueryProps {}\n\ninterface PropsWithHoCs extends Props, InjectedIntlProps, InjectedLocalized {}\n\nclass SelectableResourceByProjectChart extends PureComponent<PropsWithHoCs> {\n  convertToGraphFormat = (\n    data: IIdeasByProject | IVotesByProject | ICommentsByProject\n  ) => {\n    const { series, projects } = data;\n    const { localize, currentResourceByProject } = this.props;\n    const dataKey =\n      currentResourceByProject === 'votes' ? 'total' : currentResourceByProject;\n\n    const mapped = map(series[dataKey], (count: number, projectId: string) => ({\n      name: localize(projects[projectId].title_multiloc) as string,\n      value: count as number,\n      code: projectId as string,\n    }));\n    const res = sortBy(mapped, 'name');\n\n    return res.length > 0 ? res : null;\n  };\n\n  convertSerie = (serie: IGraphFormat | null) => {\n    const {\n      currentProjectFilter,\n      currentResourceByProject,\n      projectOptions,\n      intl: { formatMessage },\n    } = this.props;\n\n    if (serie && currentResourceByProject) {\n      const selectedProject = serie.find(\n        (item) => item.code === currentProjectFilter\n      );\n      const selectedCount = selectedProject ? selectedProject.value : 0;\n\n      let selectedName;\n      if (selectedProject) {\n        selectedName = selectedProject.name;\n      } else {\n        const foundOption = projectOptions.find(\n          (option) => option.value === currentProjectFilter\n        );\n        selectedName = foundOption\n          ? foundOption.label\n          : formatMessage(messages.selectedProject);\n      }\n\n      const convertedSerie = serie\n        .filter((item) => item.code !== currentProjectFilter)\n        .map((item) => {\n          const { value, name, ...rest } = item;\n          const shortenedName =\n            name.length > 60 ? `${name.substring(0, 61)}...` : name;\n          return { value: value - selectedCount, name: shortenedName, ...rest };\n        });\n\n      return { convertedSerie, selectedCount, selectedName };\n    }\n\n    return { convertedSerie: serie, selectedCount: null, selectedName: null };\n  };\n\n  getCurrentStream(currentResourceByProject) {\n    if (currentResourceByProject === 'ideas') {\n      return ideasByProjectStream;\n    } else if (currentResourceByProject === 'comments') {\n      return commentsByProjectStream;\n    } else {\n      return votesByProjectStream;\n    }\n  }\n\n  render() {\n    const {\n      currentResourceByProject,\n      currentProjectFilter,\n      onResourceByProjectChange,\n    } = this.props;\n\n    return (\n      <SelectableResourceChart\n        {...this.props}\n        onResourceByXChange={onResourceByProjectChange}\n        currentSelectedResource={currentResourceByProject}\n        stream={this.getCurrentStream(currentResourceByProject)}\n        convertToGraphFormat={this.convertToGraphFormat}\n        convertSerie={this.convertSerie}\n        currentFilter={currentProjectFilter}\n        byWhat=\"Project\"\n      />\n    );\n  }\n}\n\nexport default localize<Props>(\n  injectIntl<Props & InjectedLocalized>(\n    SelectableResourceByProjectChart as any\n  ) as any\n);\n","// libraries\nimport React from 'react';\nimport { Subscription } from 'rxjs';\nimport { map, isEmpty } from 'lodash-es';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../../messages';\n\n// typings\nimport { IStreamParams, IStream } from 'utils/streams';\nimport { IResourceByTime, IUsersByTime } from 'services/stats';\nimport { IGraphFormat } from 'typings';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  BarChart,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  IGraphUnit,\n  GraphCard,\n  GraphCardInner,\n  GraphCardHeader,\n  GraphCardTitle,\n  NoDataContainer,\n} from 'components/admin/Chart';\nimport { IResolution } from 'components/admin/ResolutionControl';\nimport { Popup } from 'semantic-ui-react';\nimport { Icon } from 'cl2-component-library';\n\n// styling\nimport styled, { withTheme } from 'styled-components';\n\nconst InfoIcon = styled(Icon)`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  width: 20px;\n  height: 22px;\n  margin-left: 10px;\n`;\n\nconst StyledResponsiveContainer = styled(ResponsiveContainer)`\n  .recharts-wrapper {\n    @media print {\n      margin: 0 auto;\n    }\n  }\n`;\n\ntype State = {\n  serie: IGraphFormat | null;\n};\n\ntype Props = {\n  className?: string;\n  graphUnit: IGraphUnit;\n  graphUnitMessageKey: string;\n  graphTitle: string;\n  startAt: string | null | undefined;\n  endAt: string | null;\n  resolution: IResolution;\n  currentProjectFilter?: string | undefined;\n  currentGroupFilter?: string | undefined;\n  currentTopicFilter?: string | undefined;\n  stream: (streamParams?: IStreamParams | null) => IStream<IUsersByTime>;\n  infoMessage?: string;\n  currentProjectFilterLabel?: string | undefined;\n  currentGroupFilterLabel?: string | undefined;\n  currentTopicFilterLabel?: string | undefined;\n  xlsxEndpoint: string;\n};\n\nclass BarChartActiveUsersByTime extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  subscription: Subscription;\n  currentChart: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      serie: null,\n    };\n\n    this.currentChart = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n    this.resubscribe(\n      startAt,\n      endAt,\n      resolution,\n      currentProjectFilter,\n      currentGroupFilter,\n      currentTopicFilter\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    if (\n      startAt !== prevProps.startAt ||\n      endAt !== prevProps.endAt ||\n      resolution !== prevProps.resolution ||\n      currentGroupFilter !== prevProps.currentGroupFilter ||\n      currentTopicFilter !== prevProps.currentTopicFilter ||\n      currentProjectFilter !== prevProps.currentProjectFilter\n    ) {\n      this.resubscribe(\n        startAt,\n        endAt,\n        resolution,\n        currentProjectFilter,\n        currentGroupFilter,\n        currentTopicFilter\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  convertToGraphFormat = (data: IResourceByTime) => {\n    const { graphUnit } = this.props;\n\n    if (!isEmpty(data.series[graphUnit])) {\n      return map(data.series[graphUnit], (value, key) => ({\n        value,\n        name: key,\n        code: key,\n      }));\n    }\n\n    return null;\n  };\n\n  resubscribe(\n    startAt: string | null | undefined,\n    endAt: string | null,\n    resolution: IResolution,\n    currentProjectFilter: string | undefined,\n    currentGroupFilter: string | undefined,\n    currentTopicFilter: string | undefined\n  ) {\n    const { stream } = this.props;\n\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n\n    this.subscription = stream({\n      queryParameters: {\n        start_at: startAt,\n        end_at: endAt,\n        interval: resolution,\n        project: currentProjectFilter,\n        group: currentGroupFilter,\n        topic: currentTopicFilter,\n      },\n    }).observable.subscribe((serie) => {\n      const convertedSerie = this.convertToGraphFormat(serie);\n      this.setState({ serie: convertedSerie });\n    });\n  }\n\n  formatTick = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'short',\n    });\n  };\n\n  formatLabel = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'long',\n      year: 'numeric',\n    });\n  };\n\n  render() {\n    const { className, graphTitle, infoMessage } = this.props;\n    const { serie } = this.state;\n    const {\n      chartLabelSize,\n      chartLabelColor,\n      barHoverColor,\n      animationBegin,\n      animationDuration,\n      newBarFill,\n    } = this.props['theme'];\n\n    const noData =\n      !serie || serie.every((item) => isEmpty(item)) || serie.length <= 0;\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              {graphTitle}\n              {infoMessage && (\n                <Popup\n                  basic\n                  trigger={\n                    <div>\n                      <InfoIcon name=\"info\" />\n                    </div>\n                  }\n                  content={infoMessage}\n                  position=\"top left\"\n                />\n              )}\n            </GraphCardTitle>\n            {!noData && (\n              <ReportExportMenu\n                svgNode={this.currentChart}\n                name={graphTitle}\n                {...this.props}\n              />\n            )}\n          </GraphCardHeader>\n          {noData ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <StyledResponsiveContainer>\n              <BarChart data={serie ?? undefined} ref={this.currentChart}>\n                <Bar\n                  dataKey=\"value\"\n                  name={graphTitle}\n                  fill={newBarFill}\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                  isAnimationActive={true}\n                />\n                <XAxis\n                  dataKey=\"name\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tick={{ transform: 'translate(0, 7)' }}\n                  tickFormatter={this.formatTick}\n                />\n                <YAxis stroke={chartLabelColor} fontSize={chartLabelSize} />\n                <Tooltip\n                  isAnimationActive={false}\n                  labelFormatter={this.formatLabel}\n                  cursor={{ fill: barHoverColor }}\n                />\n              </BarChart>\n            </StyledResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nexport default injectIntl<Props>(\n  withTheme(BarChartActiveUsersByTime as any) as any\n);\n","// libraries\nimport React, { PureComponent } from 'react';\nimport { map, sortBy } from 'lodash-es';\n\n// components\nimport SelectableResourceChart from './SelectableResourceChart';\n\n// i18n\nimport messages from '../../messages';\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport localize, { InjectedLocalized } from 'utils/localize';\n\n// typings\nimport {\n  IIdeasByTopic,\n  ideasByTopicStream,\n  ICommentsByTopic,\n  commentsByTopicStream,\n  IVotesByTopic,\n  votesByTopicStream,\n} from 'services/stats';\nimport { IResource } from '..';\nimport { IResolution } from 'components/admin/ResolutionControl';\nimport { IGraphFormat, IOption } from 'typings';\n\ninterface QueryProps {\n  startAt: string | null | undefined;\n  endAt: string | null;\n  currentProjectFilter: string | undefined;\n  currentGroupFilter: string | undefined;\n}\n\ninterface InputProps {\n  currentTopicFilter: string | undefined;\n  className: string;\n  onResourceByTopicChange: (option: IOption) => void;\n  currentResourceByTopic: IResource;\n  resourceOptions: IOption[];\n  topicOptions: IOption[];\n  startAt: string | null | undefined;\n  endAt: string | null;\n  resolution: IResolution;\n  currentGroupFilter: string | undefined;\n  currentProjectFilterLabel: string | undefined;\n  currentGroupFilterLabel: string | undefined;\n  currentTopicFilterLabel: string | undefined;\n}\n\ninterface Props extends InputProps, QueryProps {}\n\ninterface PropsWithHoCs extends Props, InjectedIntlProps, InjectedLocalized {}\n\nclass SelectableResourceByTopicChart extends PureComponent<PropsWithHoCs> {\n  convertToGraphFormat = (\n    data: IIdeasByTopic | IVotesByTopic | ICommentsByTopic\n  ) => {\n    const { series, topics } = data;\n    const { localize, currentResourceByTopic } = this.props;\n    const dataKey =\n      currentResourceByTopic === 'votes' ? 'total' : currentResourceByTopic;\n\n    const mapped = map(series[dataKey], (count: number, topicId: string) => ({\n      name: localize(topics[topicId].title_multiloc) as string,\n      value: count as number,\n      code: topicId as string,\n    }));\n    const res = sortBy(mapped, 'name');\n\n    return res.length > 0 ? res : null;\n  };\n\n  convertSerie = (serie: IGraphFormat | null) => {\n    const {\n      currentTopicFilter,\n      currentResourceByTopic,\n      topicOptions,\n      intl: { formatMessage },\n    } = this.props;\n\n    if (serie && currentResourceByTopic) {\n      const selectedTopic = serie.find(\n        (item) => item.code === currentTopicFilter\n      );\n      const selectedCount = selectedTopic ? selectedTopic.value : 0;\n\n      let selectedName;\n      if (selectedTopic) {\n        selectedName = selectedTopic.name;\n      } else {\n        const foundOption = topicOptions.find(\n          (option) => option.value === currentTopicFilter\n        );\n        selectedName = foundOption\n          ? foundOption.label\n          : formatMessage(messages.selectedTopic);\n      }\n\n      const convertedSerie = serie\n        .filter((item) => item.code !== currentTopicFilter)\n        .map((item) => {\n          const { value, name, ...rest } = item;\n          const shortenedName =\n            name.length > 60 ? `${name.substring(0, 61)}...` : name;\n          return { value: value - selectedCount, name: shortenedName, ...rest };\n        });\n\n      return { convertedSerie, selectedCount, selectedName };\n    }\n\n    return { convertedSerie: serie, selectedCount: null, selectedName: null };\n  };\n\n  getCurrentStream(currentResourceByTopic) {\n    if (currentResourceByTopic === 'ideas') {\n      return ideasByTopicStream;\n    } else if (currentResourceByTopic === 'comments') {\n      return commentsByTopicStream;\n    } else {\n      return votesByTopicStream;\n    }\n  }\n\n  render() {\n    const {\n      currentResourceByTopic,\n      currentTopicFilter,\n      onResourceByTopicChange,\n    } = this.props;\n\n    return (\n      <SelectableResourceChart\n        {...this.props}\n        onResourceByXChange={onResourceByTopicChange}\n        currentSelectedResource={currentResourceByTopic}\n        stream={this.getCurrentStream(currentResourceByTopic)}\n        convertToGraphFormat={this.convertToGraphFormat}\n        convertSerie={this.convertSerie}\n        currentFilter={currentTopicFilter}\n        byWhat=\"Topic\"\n      />\n    );\n  }\n}\n\nexport default localize<Props>(\n  injectIntl<Props & InjectedLocalized>(\n    SelectableResourceByTopicChart as any\n  ) as any\n);\n","// libraries\nimport React, { PureComponent } from 'react';\nimport { adopt } from 'react-adopt';\nimport moment, { Moment } from 'moment';\n\n// components\nimport { GraphsContainer, ControlBar, Column } from 'components/admin/Chart';\nimport ResolutionControl, {\n  IResolution,\n} from 'components/admin/ResolutionControl';\nimport BarChartActiveUsersByTime from './charts/BarChartActiveUsersByTime';\nimport LineBarChart from './charts/LineBarChart';\nimport ChartFilters from '../components/ChartFilters';\nimport SelectableResourceByProjectChart from './charts/SelectableResourceByProjectChart';\nimport SelectableResourceByTopicChart from './charts/SelectableResourceByTopicChart';\n\nimport LineBarChartVotesByTime from './charts/LineBarChartVotesByTime';\nimport TimeControl from '../components/TimeControl';\n\n// typings\nimport { IOption } from 'typings';\n\n// tracking\nimport { injectTracks } from 'utils/analytics';\nimport tracks from '../tracks';\n\n// i18n\nimport messages from '../messages';\nimport { injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport localize, { InjectedLocalized } from 'utils/localize';\n\n// resources\nimport GetProjects, {\n  GetProjectsChildProps,\n  PublicationStatus,\n} from 'resources/GetProjects';\nimport GetGroups, { GetGroupsChildProps } from 'resources/GetGroups';\nimport GetTopics, { GetTopicsChildProps } from 'resources/GetTopics';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { ITopicData } from 'services/topics';\nimport {\n  usersByTimeCumulativeStream,\n  activeUsersByTimeStream,\n  usersByTimeStream,\n  commentsByTimeStream,\n  ideasByTimeCumulativeStream,\n  commentsByTimeCumulativeStream,\n  activeUsersByTimeXlsxEndpoint,\n  ideasByTimeCumulativeXlsxEndpoint,\n  commentsByTimeCumulativeXlsxEndpoint,\n  ideasByTimeStream,\n  usersByTimeXlsxEndpoint,\n} from 'services/stats';\nimport IdeasByStatusChart from '../components/IdeasByStatusChart';\n\nexport type IResource = 'ideas' | 'comments' | 'votes';\n\nexport interface InputProps {\n  onlyModerator?: boolean;\n}\n\ninterface DataProps {\n  projects: GetProjectsChildProps;\n  groups: GetGroupsChildProps;\n  topics: GetTopicsChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface State {\n  resolution: IResolution;\n  startAtMoment?: Moment | null | undefined;\n  endAtMoment: Moment | null;\n  currentProjectFilter: string | undefined;\n  currentProjectFilterLabel: string | undefined;\n  currentGroupFilter: string | undefined;\n  currentGroupFilterLabel: string | undefined;\n  currentTopicFilter: string | undefined;\n  currentTopicFilterLabel: string | undefined;\n  currentResourceByTopic: IResource;\n  currentResourceByProject: IResource;\n  projectFilterOptions: IOption[];\n  groupFilterOptions: IOption[];\n  topicFilterOptions: IOption[];\n}\n\ninterface Tracks {\n  trackFilterOnGroup: (args: { extra: Record<string, string> }) => void;\n  trackFilterOnProject: (args: { extra: Record<string, string> }) => void;\n  trackFilterOnTopic: (args: { extra: Record<string, string> }) => void;\n  trackResourceChange: (args: { extra: Record<string, string> }) => void;\n}\n\ninterface PropsHithHoCs\n  extends Props,\n    InjectedIntlProps,\n    InjectedLocalized,\n    Tracks {}\n\nclass DashboardPageSummary extends PureComponent<PropsHithHoCs, State> {\n  resourceOptions: IOption[];\n\n  constructor(props: PropsHithHoCs) {\n    super(props);\n    const { onlyModerator } = props;\n    const { projectsList } = props.projects;\n    const { formatMessage } = props.intl;\n\n    this.state = {\n      resolution: 'month',\n      startAtMoment: undefined,\n      endAtMoment: moment(),\n      currentProjectFilter: onlyModerator\n        ? projectsList && projectsList.length > 0\n          ? projectsList[0].id\n          : undefined\n        : undefined,\n      currentProjectFilterLabel: undefined,\n      currentGroupFilter: undefined,\n      currentGroupFilterLabel: undefined,\n      currentTopicFilter: undefined,\n      currentTopicFilterLabel: undefined,\n      currentResourceByTopic: 'ideas',\n      currentResourceByProject: 'ideas',\n      projectFilterOptions: this.generateProjectOptions(),\n      groupFilterOptions: this.generateGroupsOptions(),\n      topicFilterOptions: this.generateTopicOptions(),\n    };\n\n    this.resourceOptions = [\n      { value: 'ideas', label: formatMessage(messages.inputs) },\n      { value: 'comments', label: formatMessage(messages.comments) },\n      { value: 'votes', label: formatMessage(messages.votes) },\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      projects: { projectsList },\n      topics,\n      groups,\n      onlyModerator,\n    } = this.props;\n\n    if (projectsList !== prevProps.projects.projectsList) {\n      this.setState({ projectFilterOptions: this.generateProjectOptions() });\n      if (onlyModerator && this.state.currentProjectFilter === null) {\n        this.setState({\n          currentProjectFilter:\n            projectsList && projectsList.length > 0\n              ? projectsList[0].id\n              : undefined,\n        });\n      }\n    }\n\n    if (topics !== prevProps.topics) {\n      this.setState({ topicFilterOptions: this.generateTopicOptions() });\n    }\n\n    if (groups !== prevProps.groups) {\n      this.setState({ groupFilterOptions: this.generateGroupsOptions() });\n    }\n  }\n\n  handleChangeResolution = (resolution: IResolution) => {\n    this.setState({ resolution });\n  };\n\n  handleChangeTimeRange = (\n    startAtMoment: Moment | null | undefined,\n    endAtMoment: Moment | null\n  ) => {\n    const timeDiff =\n      endAtMoment &&\n      startAtMoment &&\n      moment.duration(endAtMoment.diff(startAtMoment));\n    const resolution = timeDiff\n      ? timeDiff.asMonths() > 6\n        ? 'month'\n        : timeDiff.asWeeks() > 4\n        ? 'week'\n        : 'day'\n      : 'month';\n    this.setState({ startAtMoment, endAtMoment, resolution });\n  };\n\n  handleOnProjectFilter = (filter) => {\n    this.props.trackFilterOnProject({ extra: { project: filter } });\n    this.setState({\n      currentProjectFilter: filter.value,\n      currentProjectFilterLabel: filter.label,\n    });\n  };\n\n  handleOnGroupFilter = (filter) => {\n    this.props.trackFilterOnGroup({ extra: { group: filter } });\n    this.setState({\n      currentGroupFilter: filter.value,\n      currentGroupFilterLabel: filter.label,\n    });\n  };\n\n  handleOnTopicFilter = (filter) => {\n    this.props.trackFilterOnTopic({ extra: { topic: filter } });\n    this.setState({\n      currentTopicFilter: filter.value,\n      currentTopicFilterLabel: filter.label,\n    });\n  };\n\n  onResourceByTopicChange = (option) => {\n    this.props.trackResourceChange({\n      extra: { newResource: option, graph: 'resourceByTopic' },\n    });\n    this.setState({ currentResourceByTopic: option.value });\n  };\n\n  onResourceByProjectChange = (option) => {\n    this.props.trackResourceChange({\n      extra: { newResource: option, graph: 'resourceByProject' },\n    });\n    this.setState({ currentResourceByProject: option.value });\n  };\n\n  generateProjectOptions = () => {\n    const {\n      projects,\n      projects: { projectsList },\n      localize,\n      onlyModerator,\n      intl: { formatMessage },\n    } = this.props;\n    let filterOptions: IOption[] = [];\n\n    if (!isNilOrError(projects) && !isNilOrError(projectsList)) {\n      filterOptions = projectsList.map((project) => ({\n        value: project.id,\n        label: localize(project.attributes.title_multiloc),\n      }));\n    }\n\n    if (!onlyModerator) {\n      filterOptions = [\n        { value: '', label: formatMessage(messages.allProjects) },\n        ...filterOptions,\n      ];\n    }\n\n    return filterOptions;\n  };\n\n  generateGroupsOptions = () => {\n    const {\n      groups,\n      groups: { groupsList },\n      intl: { formatMessage },\n      localize,\n    } = this.props;\n    let filterOptions: IOption[] = [];\n\n    if (!isNilOrError(groups) && !isNilOrError(groupsList)) {\n      filterOptions = groupsList.map((group) => ({\n        value: group.id,\n        label: localize(group.attributes.title_multiloc),\n      }));\n    }\n\n    return [\n      { value: '', label: formatMessage(messages.allGroups) },\n      ...filterOptions,\n    ];\n  };\n\n  generateTopicOptions = () => {\n    const {\n      topics,\n      localize,\n      intl: { formatMessage },\n    } = this.props;\n    let filterOptions: IOption[] = [];\n\n    if (!isNilOrError(topics)) {\n      filterOptions = topics\n        .filter((topic) => !isNilOrError(topic))\n        .map((topic: ITopicData) => {\n          return {\n            value: topic.id,\n            label: localize(topic.attributes.title_multiloc),\n          };\n        });\n    }\n\n    return [\n      { value: '', label: formatMessage(messages.allTopics) },\n      ...filterOptions,\n    ];\n  };\n\n  render() {\n    const {\n      resolution,\n      startAtMoment,\n      endAtMoment,\n      currentProjectFilter,\n      currentGroupFilter,\n      currentTopicFilter,\n      projectFilterOptions,\n      groupFilterOptions,\n      topicFilterOptions,\n    } = this.state;\n\n    const startAt = startAtMoment && startAtMoment.toISOString();\n    const endAt = endAtMoment && endAtMoment.toISOString();\n\n    const {\n      projects,\n      projects: { projectsList },\n      intl: { formatMessage },\n    } = this.props;\n\n    const infoMessage = formatMessage(\n      messages.numberOfActiveParticipantsDescription\n    );\n\n    if (projects && !isNilOrError(projectsList)) {\n      return (\n        <>\n          <ControlBar>\n            <TimeControl\n              startAtMoment={startAtMoment}\n              endAtMoment={endAtMoment}\n              onChange={this.handleChangeTimeRange}\n            />\n            <ResolutionControl\n              value={resolution}\n              onChange={this.handleChangeResolution}\n            />\n          </ControlBar>\n          <ChartFilters\n            currentProjectFilter={currentProjectFilter}\n            currentGroupFilter={currentGroupFilter}\n            currentTopicFilter={currentTopicFilter}\n            projectFilterOptions={projectFilterOptions}\n            groupFilterOptions={groupFilterOptions}\n            topicFilterOptions={topicFilterOptions}\n            onProjectFilter={this.handleOnProjectFilter}\n            onGroupFilter={this.handleOnGroupFilter}\n            onTopicFilter={this.handleOnTopicFilter}\n          />\n          <GraphsContainer>\n            <LineBarChart\n              graphUnit=\"users\"\n              graphUnitMessageKey=\"users\"\n              graphTitle={formatMessage(messages.usersByTimeTitle)}\n              startAt={startAt}\n              endAt={endAt}\n              xlsxEndpoint={usersByTimeXlsxEndpoint}\n              lineStream={usersByTimeCumulativeStream}\n              barStream={usersByTimeStream}\n              className=\"e2e-active-users-chart\"\n              {...this.state}\n            />\n            <BarChartActiveUsersByTime\n              graphUnit=\"users\"\n              graphUnitMessageKey=\"activeUsers\"\n              graphTitle={formatMessage(messages.activeUsersByTimeTitle)}\n              startAt={startAt}\n              endAt={endAt}\n              xlsxEndpoint={activeUsersByTimeXlsxEndpoint}\n              stream={activeUsersByTimeStream}\n              infoMessage={infoMessage}\n              className=\"e2e-active-users-chart\"\n              {...this.state}\n            />\n            <LineBarChart\n              graphTitle={formatMessage(messages.inputs)}\n              graphUnit=\"ideas\"\n              graphUnitMessageKey=\"ideas\"\n              startAt={startAt}\n              endAt={endAt}\n              xlsxEndpoint={ideasByTimeCumulativeXlsxEndpoint}\n              className=\"e2e-ideas-chart\"\n              lineStream={ideasByTimeCumulativeStream}\n              barStream={ideasByTimeStream}\n              {...this.state}\n            />\n            <LineBarChart\n              graphTitle={formatMessage(messages.commentsByTimeTitle)}\n              graphUnit=\"comments\"\n              graphUnitMessageKey=\"comments\"\n              startAt={startAt}\n              endAt={endAt}\n              xlsxEndpoint={commentsByTimeCumulativeXlsxEndpoint}\n              className=\"e2e-comments-chart\"\n              lineStream={commentsByTimeCumulativeStream}\n              barStream={commentsByTimeStream}\n              {...this.state}\n            />\n            <Column>\n              <LineBarChartVotesByTime\n                className=\"fullWidth e2e-votes-chart\"\n                startAt={startAt}\n                endAt={endAt}\n                {...this.state}\n              />\n              <SelectableResourceByProjectChart\n                className=\"dynamicHeight fullWidth e2e-resource-by-project-chart\"\n                onResourceByProjectChange={this.onResourceByProjectChange}\n                resourceOptions={this.resourceOptions}\n                projectOptions={projectFilterOptions}\n                startAt={startAt}\n                endAt={endAt}\n                {...this.state}\n              />\n            </Column>\n            <Column>\n              <IdeasByStatusChart\n                className=\"fullWidth dynamicHeight\"\n                startAt={startAt}\n                endAt={endAt}\n                {...this.state}\n              />\n              <SelectableResourceByTopicChart\n                className=\"fullWidth dynamicHeight e2e-resource-by-topic-chart\"\n                topicOptions={topicFilterOptions}\n                onResourceByTopicChange={this.onResourceByTopicChange}\n                resourceOptions={this.resourceOptions}\n                startAt={startAt}\n                endAt={endAt}\n                {...this.state}\n              />\n            </Column>\n          </GraphsContainer>\n        </>\n      );\n    }\n    return null;\n  }\n}\n\nconst publicationStatuses: PublicationStatus[] = [\n  'draft',\n  'published',\n  'archived',\n];\n\nconst Data = adopt<DataProps, InputProps>({\n  groups: <GetGroups />,\n  topics: <GetTopics />,\n  projects: (\n    <GetProjects\n      publicationStatuses={publicationStatuses}\n      filterCanModerate={true}\n    />\n  ),\n});\n\nconst DashboardPageSummaryWithHOCs = injectTracks<Props>({\n  trackFilterOnGroup: tracks.filteredOnGroup,\n  trackFilterOnProject: tracks.filteredOnProject,\n  trackFilterOnTopic: tracks.filteredOnTopic,\n  trackResourceChange: tracks.choseResource,\n})(localize<Props & Tracks>(injectIntl(DashboardPageSummary)));\n\nexport default (inputProps: InputProps) => (\n  <Data {...inputProps}>\n    {(dataProps) => (\n      <DashboardPageSummaryWithHOCs {...inputProps} {...dataProps} />\n    )}\n  </Data>\n);\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\nimport Tabs from 'components/UI/Tabs';\n\nexport type IResolution = 'day' | 'week' | 'month';\n\nconst Container = styled.div``;\n\ninterface Props {\n  value: IResolution;\n  onChange: (arg: IResolution) => void;\n  className?: string;\n}\n\nexport default class ResolutionControl extends PureComponent<Props> {\n  handleOnResolutionChange = (resolution: IResolution) => {\n    this.props.onChange(resolution);\n  };\n\n  render() {\n    const { value, className } = this.props;\n    const resOptions = [\n      {\n        name: 'day',\n        label: <FormattedMessage {...messages.resolutionday} />,\n      },\n      {\n        name: 'week',\n        label: <FormattedMessage {...messages.resolutionweek} />,\n      },\n      {\n        name: 'month',\n        label: <FormattedMessage {...messages.resolutionmonth} />,\n      },\n    ];\n\n    return (\n      <Container className={className}>\n        <Tabs\n          items={resOptions}\n          selectedValue={\n            resOptions.find((item) => item.name === value)?.name as string\n          }\n          onClick={this.handleOnResolutionChange}\n        />\n      </Container>\n    );\n  }\n}\n","// libraries\nimport React from 'react';\nimport { isEmpty, map } from 'lodash-es';\n\n// intl\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../messages';\n\n// styling\nimport { withTheme } from 'styled-components';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  BarChart,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Cell,\n} from 'recharts';\nimport {\n  NoDataContainer,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCard,\n  GraphCardInner,\n} from 'components/admin/Chart';\n\n// resources\nimport GetSerieFromStream from 'resources/GetSerieFromStream';\n\n// types\nimport { ideasByStatusStream, ideasByStatusXlsxEndpoint } from 'services/stats';\nimport { IGraphFormat } from 'typings';\nimport injectLocalize, { InjectedLocalized } from 'utils/localize';\n\ninterface DataProps {\n  serie: IGraphFormat;\n}\n\ninterface InputProps {\n  startAt: string | null | undefined;\n  endAt: string | null;\n  currentProjectFilter?: string | undefined;\n  currentGroupFilter?: string | undefined;\n  currentGroupFilterLabel?: string | undefined;\n  className?: string;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nexport class IdeasByStatusChart extends React.PureComponent<\n  Props & InjectedIntlProps\n> {\n  currentChart: React.RefObject<any>;\n  constructor(props: Props & InjectedIntlProps) {\n    super(props as any);\n    this.currentChart = React.createRef();\n  }\n\n  render() {\n    const {\n      chartFill,\n      chartLabelSize,\n      chartLabelColor,\n      barHoverColor,\n      animationBegin,\n      animationDuration,\n    } = this.props['theme'];\n    const {\n      currentGroupFilterLabel,\n      currentGroupFilter,\n      className,\n      serie,\n      intl: { formatMessage },\n    } = this.props;\n\n    const noData =\n      !serie || serie.every((item) => isEmpty(item)) || serie.length <= 0;\n\n    const unitName = formatMessage(messages.inputs);\n\n    const CustomizedLabel = (props) => {\n      const { x, y, value } = props;\n      return (\n        <text\n          x={x}\n          y={y}\n          dx={20}\n          dy={-6}\n          fontFamily=\"sans-serif\"\n          fill={chartLabelColor}\n          fontSize={chartLabelSize}\n          textAnchor=\"middle\"\n        >\n          {' '}\n          {value}{' '}\n        </text>\n      );\n    };\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              <FormattedMessage {...messages.inputsByStatusTitle} />\n            </GraphCardTitle>\n            {!noData && (\n              <ReportExportMenu\n                name={formatMessage(messages.inputsByStatusTitle)}\n                svgNode={this.currentChart}\n                xlsxEndpoint={ideasByStatusXlsxEndpoint}\n                currentGroupFilterLabel={currentGroupFilterLabel}\n                currentGroupFilter={currentGroupFilter}\n              />\n            )}\n          </GraphCardHeader>\n          {noData ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <ResponsiveContainer\n              height={serie.length > 1 ? serie.length * 50 : 100}\n            >\n              <BarChart data={serie} layout=\"vertical\" ref={this.currentChart}>\n                <Bar\n                  dataKey=\"value\"\n                  name={unitName}\n                  fill={chartFill}\n                  label={<CustomizedLabel />}\n                  barSize={5}\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                >\n                  {serie.map((entry, index) => {\n                    return (\n                      <Cell\n                        key={`cell-${index}`}\n                        fill={(entry.color && entry.color) || chartFill}\n                        opacity={0.8}\n                      />\n                    );\n                  })}\n                </Bar>\n                <YAxis\n                  dataKey=\"name\"\n                  type=\"category\"\n                  width={150}\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tickLine={false}\n                />\n                <XAxis\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  type=\"number\"\n                  tick={{ transform: 'translate(0, 7)' }}\n                />\n                <Tooltip\n                  isAnimationActive={false}\n                  cursor={{ fill: barHoverColor }}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nconst IdeasByStatusChartWithHoCs = injectIntl<Props>(\n  withTheme(IdeasByStatusChart as any) as any\n);\n\nconst WrappedIdeasByStatusChart = (\n  inputProps: InputProps & InjectedLocalized\n) => {\n  const convertToGraphFormat = ({ series: { ideas }, idea_status }) => {\n    if (Object.keys(ideas).length <= 0) {\n      return null;\n    }\n\n    return map(idea_status, (status, id) => ({\n      value: ideas[id] || 0,\n      name: inputProps.localize(status.title_multiloc),\n      code: id,\n      color: status.color,\n      ordering: status.ordering,\n    }));\n  };\n  return (\n    <GetSerieFromStream\n      {...inputProps}\n      stream={ideasByStatusStream}\n      convertToGraphFormat={convertToGraphFormat}\n    >\n      {(serie) => <IdeasByStatusChartWithHoCs {...serie} {...inputProps} />}\n    </GetSerieFromStream>\n  );\n};\n\nexport default injectLocalize(WrappedIdeasByStatusChart);\n","// libraries\nimport React from 'react';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map, isEmpty } from 'lodash-es';\n\n// styling\nimport { withTheme } from 'styled-components';\nimport { rgba } from 'polished';\n\n// services\nimport {\n  votesByTimeStream,\n  votesByTimeCumulativeStream,\n  votesByTimeXlsxEndpoint,\n  IVotesByTime,\n} from 'services/stats';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  Line,\n  Label,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  CartesianGrid,\n  Legend,\n  ComposedChart,\n} from 'recharts';\nimport {\n  GraphCard,\n  NoDataContainer,\n  GraphCardInner,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCardFigureContainer,\n  GraphCardFigure,\n  GraphCardFigureChange,\n} from 'components/admin/Chart';\nimport { IResolution } from 'components/admin/ResolutionControl';\n\n// i18n\nimport messages from '../../messages';\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\n\ntype ISerie = {\n  cumulatedTotal: number;\n  date: string | number;\n  up: number;\n  down: number;\n  total: number;\n  code: string;\n}[];\n\ntype State = {\n  serie: ISerie | null;\n};\n\ntype Props = {\n  className?: string;\n  startAt: string | null | undefined;\n  endAt: string | null;\n  resolution: IResolution;\n  currentProjectFilter?: string;\n  currentGroupFilter?: string;\n  currentTopicFilter?: string;\n  currentProjectFilterLabel?: string;\n  currentGroupFilterLabel?: string;\n  currentTopicFilterLabel?: string;\n};\n\nclass LineBarChartVotesByTime extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  combined$: Subscription;\n  currentChart: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      serie: null,\n    };\n\n    this.currentChart = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    this.resubscribe(\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    if (\n      startAt !== prevProps.startAt ||\n      endAt !== prevProps.endAt ||\n      resolution !== prevProps.resolution ||\n      currentGroupFilter !== prevProps.currentGroupFilter ||\n      currentTopicFilter !== prevProps.currentTopicFilter ||\n      currentProjectFilter !== prevProps.currentProjectFilter\n    ) {\n      this.resubscribe(\n        startAt,\n        endAt,\n        resolution,\n        currentGroupFilter,\n        currentTopicFilter,\n        currentProjectFilter\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.combined$.unsubscribe();\n  }\n\n  convertAndMergeSeries(barSerie: IVotesByTime, lineSerie: IVotesByTime) {\n    const { up, down, total } = barSerie.series;\n    let convertedSerie;\n\n    if (!isEmpty(total) && !isEmpty(lineSerie.series.total)) {\n      convertedSerie = map(total, (value, key) => ({\n        total: value,\n        down: down[key],\n        up: up[key],\n        date: key,\n        code: key,\n        cumulatedTotal: lineSerie.series.total[key],\n      }));\n    } else {\n      return null;\n    }\n\n    return convertedSerie;\n  }\n\n  resubscribe(\n    startAt: string | null | undefined,\n    endAt: string | null,\n    resolution: IResolution,\n    currentGroupFilter: string | undefined,\n    currentTopicFilter: string | undefined,\n    currentProjectFilter: string | undefined\n  ) {\n    if (this.combined$) {\n      this.combined$.unsubscribe();\n    }\n\n    const queryParameters = {\n      queryParameters: {\n        start_at: startAt,\n        end_at: endAt,\n        interval: resolution,\n        project: currentProjectFilter,\n        group: currentGroupFilter,\n        topic: currentTopicFilter,\n      },\n    };\n\n    const barStreamObservable = votesByTimeStream(queryParameters).observable;\n    const lineStreamObservable = votesByTimeCumulativeStream(queryParameters)\n      .observable;\n    this.combined$ = combineLatest(\n      barStreamObservable,\n      lineStreamObservable\n    ).subscribe(([barSerie, lineSerie]) => {\n      const convertedAndMergedSeries = this.convertAndMergeSeries(\n        barSerie,\n        lineSerie\n      );\n      this.setState({ serie: convertedAndMergedSeries });\n    });\n  }\n\n  formatTick = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'short',\n    });\n  };\n\n  formatLabel = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'long',\n      year: 'numeric',\n    });\n  };\n\n  formatSerieChange = (serieChange: number) => {\n    if (serieChange > 0) {\n      return `(+${serieChange.toString()})`;\n    } else if (serieChange < 0) {\n      return `(${serieChange.toString()})`;\n    }\n    return null;\n  };\n\n  getFormattedNumbers(serie: ISerie | null) {\n    if (serie && serie.length > 0) {\n      const firstSerieValue = serie[0].cumulatedTotal;\n      const lastSerieValue = serie[serie.length - 1].cumulatedTotal;\n      const serieChange = lastSerieValue - firstSerieValue;\n      let typeOfChange: 'increase' | 'decrease' | '' = '';\n\n      if (serieChange > 0) {\n        typeOfChange = 'increase';\n      } else if (serieChange < 0) {\n        typeOfChange = 'decrease';\n      }\n\n      return {\n        typeOfChange,\n        totalNumber: lastSerieValue,\n        formattedSerieChange: this.formatSerieChange(serieChange),\n      };\n    }\n\n    return {\n      totalNumber: null,\n      formattedSerieChange: null,\n      typeOfChange: '',\n    };\n  }\n\n  render() {\n    const {\n      chartLabelSize,\n      chartLabelColor,\n      newLineColor,\n      animationBegin,\n      animationDuration,\n      cartesianGridColor,\n      newBarFill,\n    } = this.props['theme'];\n    const { formatMessage } = this.props.intl;\n    const { serie } = this.state;\n    const formattedNumbers = this.getFormattedNumbers(serie);\n    const { className, resolution } = this.props;\n    const {\n      totalNumber,\n      formattedSerieChange,\n      typeOfChange,\n    } = formattedNumbers;\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              <FormattedMessage {...messages.votes} />\n              <GraphCardFigureContainer>\n                <GraphCardFigure>{totalNumber}</GraphCardFigure>\n                <GraphCardFigureChange className={typeOfChange}>\n                  {formattedSerieChange}\n                </GraphCardFigureChange>\n              </GraphCardFigureContainer>\n            </GraphCardTitle>\n\n            {serie && (\n              <ReportExportMenu\n                svgNode={this.currentChart}\n                xlsxEndpoint={votesByTimeXlsxEndpoint}\n                name={formatMessage(messages.votes)}\n                {...this.props}\n              />\n            )}\n          </GraphCardHeader>\n          {!serie ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <ResponsiveContainer>\n              <ComposedChart\n                data={serie}\n                margin={{ right: 40 }}\n                ref={this.currentChart}\n              >\n                <CartesianGrid stroke={cartesianGridColor} strokeWidth={0.5} />\n                <XAxis\n                  dataKey=\"date\"\n                  interval=\"preserveStartEnd\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tick={{ transform: 'translate(0, 7)' }}\n                  tickFormatter={this.formatTick}\n                  tickLine={false}\n                />\n                <YAxis\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  yAxisId=\"cumulatedTotal\"\n                  tickLine={false}\n                >\n                  <Label\n                    value={formatMessage(messages.total)}\n                    angle={-90}\n                    position={'center'}\n                    dx={-15}\n                  />\n                </YAxis>\n                <YAxis yAxisId=\"barValue\" orientation=\"right\" tickLine={false}>\n                  <Label\n                    value={formatMessage(messages.perPeriod, {\n                      period: formatMessage(messages[resolution]),\n                    })}\n                    angle={90}\n                    position={'center'}\n                    dx={15}\n                  />\n                </YAxis>\n                <Tooltip\n                  isAnimationActive={false}\n                  labelFormatter={this.formatLabel}\n                />\n\n                <Bar\n                  dataKey=\"up\"\n                  name={formatMessage(messages.numberOfVotesUp)}\n                  fill={rgba(newBarFill, 1)}\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                  stackId=\"1\"\n                  yAxisId=\"barValue\"\n                  barSize={20}\n                />\n                <Bar\n                  dataKey=\"down\"\n                  name={formatMessage(messages.numberOfVotesDown)}\n                  fill={rgba(newBarFill, 0.7)}\n                  stackId=\"1\"\n                  animationDuration={animationDuration}\n                  animationBegin={animationBegin}\n                  stroke=\"none\"\n                  yAxisId=\"barValue\"\n                  barSize={20}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"cumulatedTotal\"\n                  name={formatMessage(messages.total)}\n                  dot={serie && serie?.length < 31}\n                  stroke={newLineColor}\n                  fill={newLineColor}\n                  strokeWidth={1}\n                  yAxisId=\"cumulatedTotal\"\n                />\n\n                <Legend\n                  wrapperStyle={{\n                    paddingTop: '20px',\n                  }}\n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nexport default injectIntl<Props>(\n  withTheme(LineBarChartVotesByTime as any) as any\n);\n","// libraries\nimport React, { PureComponent } from 'react';\n\n// intl\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../../messages';\n\n// styling\nimport styled, { withTheme } from 'styled-components';\nimport { media } from 'utils/styleUtils';\n\n// resource\nimport GetSerieFromStream from 'resources/GetSerieFromStream';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  BarChart,\n  Bar,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  LabelList,\n} from 'recharts';\nimport {\n  GraphCard,\n  NoDataContainer,\n  GraphCardInner,\n  GraphCardHeaderWithFilter,\n} from 'components/admin/Chart';\nimport { IResolution } from 'components/admin/ResolutionControl';\nimport { Select } from 'cl2-component-library';\nimport { HiddenLabel } from 'utils/a11y';\n\nconst SHiddenLabel = styled(HiddenLabel)`\n  flex: 1;\n  margin-right: 15px;\n  @media (max-width: 1300px) {\n    width: 100%;\n  }\n`;\n\nconst GraphCardTitle = styled.h3`\n  margin: 0;\n  margin-right: 15px;\n\n  ${media.smallerThan1280px`\n    margin-bottom: 15px;\n  `}\n`;\n\n// typings\nimport {\n  IIdeasByTopic,\n  ICommentsByTopic,\n  IVotesByTopic,\n  IIdeasByProject,\n  ICommentsByProject,\n  IVotesByProject,\n  ideasByTopicXlsxEndpoint,\n  ideasByProjectXlsxEndpoint,\n  commentsByTopicXlsxEndpoint,\n  commentsByProjectXlsxEndpoint,\n  votesByTopicXlsxEndpoint,\n  votesByProjectXlsxEndpoint,\n} from 'services/stats';\nimport { IStreamParams, IStream } from 'utils/streams';\nimport { IResource } from '..';\nimport { IGraphFormat, IOption } from 'typings';\n\ninterface DataProps {\n  serie: IGraphFormat;\n}\n\ntype ISupportedData =\n  | IIdeasByTopic\n  | IVotesByTopic\n  | ICommentsByTopic\n  | IIdeasByProject\n  | IVotesByProject\n  | ICommentsByProject;\n\ninterface QueryProps {\n  startAt: string | null | undefined;\n  endAt: string | null;\n  stream: (streamParams?: IStreamParams | null) => IStream<ISupportedData>;\n  convertToGraphFormat: (resource: ISupportedData) => IGraphFormat | null;\n  currentFilter: string | undefined;\n  byWhat: 'Topic' | 'Project';\n  currentProjectFilter: string | undefined;\n  currentGroupFilter: string | undefined;\n  currentTopicFilter: string | undefined;\n  currentProjectFilterLabel: string | undefined;\n  currentGroupFilterLabel: string | undefined;\n  currentTopicFilterLabel: string | undefined;\n  resolution: IResolution;\n}\n\ninterface InputProps extends QueryProps {\n  convertSerie: (\n    serie: IGraphFormat | null\n  ) => {\n    convertedSerie: IGraphFormat | null;\n    selectedCount: any;\n    selectedName: any;\n  };\n  className?: string;\n  onResourceByXChange: (option: IOption) => void;\n  currentSelectedResource: IResource;\n  resourceOptions: IOption[];\n}\n\ninterface Props extends InputProps, DataProps {}\n\nclass SelectableResourceChart extends PureComponent<Props & InjectedIntlProps> {\n  currentChart: React.RefObject<any>;\n  constructor(props: Props & InjectedIntlProps) {\n    super(props as any);\n    this.currentChart = React.createRef();\n  }\n  render() {\n    const {\n      barHoverColor,\n      chartLabelSize,\n      chartLabelColor,\n      barFill,\n      animationBegin,\n      animationDuration,\n      newBarFill,\n    } = this.props['theme'];\n    const {\n      className,\n      onResourceByXChange,\n      currentSelectedResource,\n      resourceOptions,\n      intl: { formatMessage },\n      currentFilter,\n      byWhat,\n      convertSerie,\n      serie,\n    } = this.props;\n    const selectedResourceName =\n      currentSelectedResource &&\n      formatMessage(\n        {\n          ideas: messages.inputs,\n          comments: messages.comments,\n          votes: messages.votes,\n        }[currentSelectedResource]\n      );\n    const { convertedSerie, selectedCount, selectedName } = convertSerie(serie);\n    const unitName =\n      currentFilter && serie\n        ? formatMessage(messages.resourceByDifference, {\n            selectedResourceName,\n            selectedName,\n          })\n        : selectedResourceName;\n\n    const xlsxEndpointTable = {\n      ideasTopic: ideasByTopicXlsxEndpoint,\n      commentsTopic: commentsByTopicXlsxEndpoint,\n      votesTopic: votesByTopicXlsxEndpoint,\n      ideasProject: ideasByProjectXlsxEndpoint,\n      commentsProject: commentsByProjectXlsxEndpoint,\n      votesProject: votesByProjectXlsxEndpoint,\n    };\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeaderWithFilter>\n            <GraphCardTitle>\n              <FormattedMessage {...messages[`participationPer${byWhat}`]} />\n            </GraphCardTitle>\n            <SHiddenLabel>\n              <FormattedMessage\n                {...messages[`hiddenLabelPickResourceBy${byWhat}`]}\n              />\n              <Select\n                id={`select${byWhat}`}\n                onChange={onResourceByXChange}\n                value={currentSelectedResource}\n                options={resourceOptions}\n              />\n            </SHiddenLabel>\n            {serie && (\n              <ReportExportMenu\n                className=\"\"\n                svgNode={this.currentChart}\n                name={formatMessage(messages[`participationPer${byWhat}`])}\n                {...this.props}\n                xlsxEndpoint={\n                  xlsxEndpointTable[currentSelectedResource + byWhat]\n                }\n              />\n            )}\n          </GraphCardHeaderWithFilter>\n          {!serie ? (\n            <NoDataContainer>\n              {currentFilter && selectedCount ? (\n                <FormattedMessage\n                  {...messages.totalCount}\n                  values={{ selectedCount, selectedName, selectedResourceName }}\n                />\n              ) : (\n                <FormattedMessage {...messages.noData} />\n              )}\n            </NoDataContainer>\n          ) : (\n            <>\n              {currentFilter && (\n                <FormattedMessage\n                  tagName=\"p\"\n                  {...messages.totalCount}\n                  values={{ selectedCount, selectedName, selectedResourceName }}\n                />\n              )}\n              <ResponsiveContainer\n                height={serie.length > 1 ? serie.length * 50 : 100}\n              >\n                <BarChart\n                  data={convertedSerie ?? undefined}\n                  layout=\"vertical\"\n                  ref={this.currentChart}\n                >\n                  <Bar\n                    dataKey=\"value\"\n                    name={unitName}\n                    fill={newBarFill}\n                    barSize={20}\n                    animationDuration={animationDuration}\n                    animationBegin={animationBegin}\n                    isAnimationActive={true}\n                  >\n                    <LabelList fill={barFill} fontSize={chartLabelSize} />\n                  </Bar>\n                  <YAxis\n                    dataKey=\"name\"\n                    type=\"category\"\n                    width={150}\n                    stroke={chartLabelColor}\n                    fontSize={chartLabelSize}\n                    tickLine={false}\n                  />\n                  <XAxis\n                    stroke={chartLabelColor}\n                    fontSize={chartLabelSize}\n                    type=\"number\"\n                    tick={{ transform: 'translate(0, 7)' }}\n                  />\n                  <Tooltip\n                    isAnimationActive={false}\n                    cursor={{ fill: barHoverColor }}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nconst SelectableResourceChartWithHoCs = injectIntl<Props>(\n  withTheme(SelectableResourceChart as any) as any\n);\n\nexport default (inputProps: InputProps) => (\n  <GetSerieFromStream {...inputProps}>\n    {(serie) => <SelectableResourceChartWithHoCs {...serie} {...inputProps} />}\n  </GetSerieFromStream>\n);\n","import React from 'react';\nimport { isEqual } from 'lodash-es';\nimport { Subscription, BehaviorSubject, of, combineLatest } from 'rxjs';\nimport { distinctUntilChanged, switchMap, map } from 'rxjs/operators';\nimport {\n  ITopicData,\n  topicByIdStream,\n  topicsStream,\n  Code,\n} from 'services/topics';\nimport { projectTopicsStream } from 'services/projectTopics';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  // Don't use projectId, ids or the query parameters (code, exclude_code, sort) together\n  // Only one of the three at a time.\n  projectId?: string;\n  topicIds?: string[];\n  code?: Code;\n  exclude_code?: Code;\n  sort?: 'new' | 'custom';\n}\n\ntype children = (renderProps: GetTopicsChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  topics: (ITopicData | Error)[] | undefined | null | Error;\n}\n\nexport type GetTopicsChildProps =\n  | (ITopicData | Error)[]\n  | undefined\n  | null\n  | Error;\n\nexport default class GetTopics extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      topics: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { topicIds, code, exclude_code, sort, projectId } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({\n      topicIds,\n      code,\n      exclude_code,\n      sort,\n      projectId,\n    });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => isEqual(prev, next)),\n          switchMap(({ topicIds, code, exclude_code, sort, projectId }) => {\n            const queryParameters = { code, exclude_code, sort };\n\n            if (projectId) {\n              return projectTopicsStream(projectId).observable.pipe(\n                map((topics) =>\n                  topics.data\n                    .filter((topic) => topic)\n                    .map((topic) => topic.relationships.topic.data.id)\n                ),\n                switchMap((topicIds) => {\n                  return combineLatest(\n                    topicIds.map((topicId) =>\n                      topicByIdStream(topicId).observable.pipe(\n                        map((topic) =>\n                          !isNilOrError(topic) ? topic.data : topic\n                        )\n                      )\n                    )\n                  );\n                })\n              );\n            } else if (topicIds) {\n              if (topicIds.length > 0) {\n                return combineLatest(\n                  topicIds.map((id) => {\n                    return topicByIdStream(id).observable.pipe(\n                      map((topic) =>\n                        !isNilOrError(topic) ? topic.data : topic\n                      )\n                    );\n                  })\n                );\n              }\n\n              return of(null);\n            } else {\n              return topicsStream({ queryParameters }).observable.pipe(\n                map((topics) => topics.data)\n              );\n            }\n          })\n        )\n        .subscribe((topics) => {\n          this.setState({ topics });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { topicIds, code, exclude_code, sort, projectId } = this.props;\n    this.inputProps$.next({\n      topicIds,\n      code,\n      exclude_code,\n      sort,\n      projectId,\n    });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { topics } = this.state;\n    return (children as children)(topics);\n  }\n}\n","// libraries\nimport React from 'react';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map, isEmpty } from 'lodash-es';\n\n// intl\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport messages from '../../messages';\n\n// typings\nimport { IStreamParams, IStream } from 'utils/streams';\nimport {\n  IResourceByTime,\n  IVotesByTime,\n  IUsersByTime,\n  IIdeasByTime,\n  ICommentsByTime,\n} from 'services/stats';\n\n// components\nimport ReportExportMenu from 'components/admin/ReportExportMenu';\nimport {\n  ComposedChart,\n  CartesianGrid,\n  Tooltip,\n  Line,\n  Legend,\n  Bar,\n  XAxis,\n  YAxis,\n  Label,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  IGraphUnit,\n  GraphCard,\n  NoDataContainer,\n  GraphCardInner,\n  GraphCardHeader,\n  GraphCardTitle,\n  GraphCardFigureContainer,\n  GraphCardFigure,\n  GraphCardFigureChange,\n} from 'components/admin/Chart';\nimport { Popup } from 'semantic-ui-react';\nimport { Icon } from 'cl2-component-library';\nimport { IResolution } from 'components/admin/ResolutionControl';\n\n// styling\nimport styled, { withTheme } from 'styled-components';\n\nconst InfoIcon = styled(Icon)`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  width: 20px;\n  height: 22px;\n  margin-left: 10px;\n`;\n\nconst StyledResponsiveContainer = styled(ResponsiveContainer)`\n  .recharts-wrapper {\n    @media print {\n      margin: 0 auto;\n    }\n  }\n`;\n\ntype IComposedGraphFormat = {\n  total: number | string;\n  name: string;\n  code: string;\n  barValue: number | string;\n}[];\n\ninterface State {\n  serie: IComposedGraphFormat | undefined;\n}\n\ntype IStreams =\n  | IStream<IUsersByTime>\n  | IStream<IIdeasByTime>\n  | IStream<ICommentsByTime>\n  | IStream<IVotesByTime>;\n\ninterface Props {\n  className?: string;\n  graphUnit: IGraphUnit;\n  graphUnitMessageKey: string;\n  graphTitle: string;\n  startAt: string | null | undefined;\n  endAt: string | null;\n  resolution: IResolution;\n  currentProjectFilter?: string;\n  currentGroupFilter?: string;\n  currentTopicFilter?: string;\n  barStream: (streamParams: IStreamParams | null) => IStreams;\n  lineStream: (streamParams: IStreamParams | null) => IStreams;\n  infoMessage?: string;\n  currentProjectFilterLabel?: string;\n  currentGroupFilterLabel?: string;\n  currentTopicFilterLabel?: string;\n  xlsxEndpoint: string;\n}\n\nclass LineBarChart extends React.PureComponent<\n  Props & InjectedIntlProps,\n  State\n> {\n  combined$: Subscription;\n  currentChart: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      serie: undefined,\n    };\n\n    this.currentChart = React.createRef();\n  }\n\n  componentDidMount() {\n    this.resubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      startAt,\n      endAt,\n      resolution,\n      currentGroupFilter,\n      currentTopicFilter,\n      currentProjectFilter,\n    } = this.props;\n\n    if (\n      startAt !== prevProps.startAt ||\n      endAt !== prevProps.endAt ||\n      resolution !== prevProps.resolution ||\n      currentGroupFilter !== prevProps.currentGroupFilter ||\n      currentTopicFilter !== prevProps.currentTopicFilter ||\n      currentProjectFilter !== prevProps.currentProjectFilter\n    ) {\n      this.resubscribe();\n    }\n  }\n\n  componentWillUnmount() {\n    this.combined$.unsubscribe();\n  }\n\n  convertAndMergeSeries = (\n    barSerie: IResourceByTime,\n    lineSerie: IResourceByTime\n  ) => {\n    const { graphUnit } = this.props;\n    let convertedSerie;\n\n    if (\n      !isEmpty(lineSerie.series[graphUnit]) &&\n      !isEmpty(barSerie.series[graphUnit])\n    ) {\n      convertedSerie = map(lineSerie.series[graphUnit], (value, key) => ({\n        total: value,\n        barValue: barSerie.series[graphUnit][key],\n        name: key,\n        code: key,\n      }));\n    } else {\n      return undefined;\n    }\n\n    return convertedSerie;\n  };\n\n  resubscribe() {\n    const {\n      barStream,\n      lineStream,\n      startAt,\n      endAt,\n      resolution,\n      currentProjectFilter,\n      currentGroupFilter,\n      currentTopicFilter,\n    } = this.props;\n\n    if (this.combined$) {\n      this.combined$.unsubscribe();\n    }\n\n    const queryParameters = {\n      queryParameters: {\n        start_at: startAt,\n        end_at: endAt,\n        interval: resolution,\n        project: currentProjectFilter,\n        group: currentGroupFilter,\n        topic: currentTopicFilter,\n      },\n    };\n\n    const barStreamObservable = barStream(queryParameters).observable;\n    const lineStreamObservable = lineStream(queryParameters).observable;\n    this.combined$ = combineLatest(\n      barStreamObservable,\n      lineStreamObservable\n    ).subscribe(([barSerie, lineSerie]) => {\n      const convertedAndMergedSeries = this.convertAndMergeSeries(\n        barSerie,\n        lineSerie\n      );\n      this.setState({ serie: convertedAndMergedSeries });\n    });\n  }\n\n  formatTick = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'short',\n    });\n  };\n\n  formatLabel = (date: string) => {\n    const { resolution } = this.props;\n    const { formatDate } = this.props.intl;\n\n    return formatDate(date, {\n      day: resolution === 'month' ? undefined : '2-digit',\n      month: 'long',\n      year: 'numeric',\n    });\n  };\n\n  formatSerieChange = (serieChange: number) => {\n    if (serieChange > 0) {\n      return `(+${serieChange.toString()})`;\n    } else if (serieChange < 0) {\n      return `(${serieChange.toString()})`;\n    }\n    return null;\n  };\n\n  getFormattedNumbers(serie) {\n    if (serie) {\n      const firstSerieValue = serie && serie[0].total;\n      const lastSerieValue = serie && serie[serie.length - 1].total;\n      const serieChange = lastSerieValue - firstSerieValue;\n      let typeOfChange: 'increase' | 'decrease' | '' = '';\n\n      if (serieChange > 0) {\n        typeOfChange = 'increase';\n      } else if (serieChange < 0) {\n        typeOfChange = 'decrease';\n      }\n\n      return {\n        typeOfChange,\n        totalNumber: lastSerieValue,\n        formattedSerieChange: this.formatSerieChange(serieChange),\n      };\n    }\n\n    return {\n      totalNumber: null,\n      formattedSerieChange: null,\n      typeOfChange: '',\n    };\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { className, graphTitle, infoMessage, resolution } = this.props;\n    const { serie } = this.state;\n\n    const {\n      chartLabelSize,\n      chartLabelColor,\n      cartesianGridColor,\n      newBarFill,\n      newLineColor,\n    } = this.props['theme'];\n\n    const formattedNumbers = this.getFormattedNumbers(serie);\n    const {\n      totalNumber,\n      formattedSerieChange,\n      typeOfChange,\n    } = formattedNumbers;\n\n    const noData =\n      !serie || serie.every((item) => isEmpty(item)) || serie.length <= 0;\n\n    return (\n      <GraphCard className={className}>\n        <GraphCardInner>\n          <GraphCardHeader>\n            <GraphCardTitle>\n              {graphTitle}\n              {infoMessage && (\n                <Popup\n                  basic\n                  trigger={\n                    <div>\n                      <InfoIcon name=\"info\" />\n                    </div>\n                  }\n                  content={infoMessage}\n                  position=\"top left\"\n                />\n              )}\n\n              <GraphCardFigureContainer>\n                <GraphCardFigure>{totalNumber}</GraphCardFigure>\n                <GraphCardFigureChange className={typeOfChange}>\n                  {formattedSerieChange}\n                </GraphCardFigureChange>\n              </GraphCardFigureContainer>\n            </GraphCardTitle>\n\n            {!noData && (\n              <ReportExportMenu\n                svgNode={this.currentChart}\n                name={graphTitle}\n                {...this.props}\n              />\n            )}\n          </GraphCardHeader>\n          {noData ? (\n            <NoDataContainer>\n              <FormattedMessage {...messages.noData} />\n            </NoDataContainer>\n          ) : (\n            <StyledResponsiveContainer>\n              <ComposedChart\n                data={serie}\n                reverseStackOrder={true}\n                ref={this.currentChart}\n              >\n                <CartesianGrid stroke={cartesianGridColor} strokeWidth={0.5} />\n                <XAxis\n                  dataKey=\"name\"\n                  interval=\"preserveStartEnd\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tick={{ transform: 'translate(0, 7)' }}\n                  tickFormatter={this.formatTick}\n                  tickLine={false}\n                />\n                <YAxis\n                  yAxisId=\"total\"\n                  stroke={chartLabelColor}\n                  fontSize={chartLabelSize}\n                  tickLine={false}\n                >\n                  <Label\n                    value={formatMessage(messages.total)}\n                    angle={-90}\n                    position={'center'}\n                    dx={-15}\n                  />\n                </YAxis>\n                <YAxis\n                  yAxisId=\"barValue\"\n                  orientation=\"right\"\n                  allowDecimals={false}\n                  tickLine={false}\n                >\n                  <Label\n                    value={formatMessage(messages.perPeriod, {\n                      period: formatMessage(messages[resolution]),\n                    })}\n                    angle={90}\n                    position={'center'}\n                    dx={15}\n                  />\n                </YAxis>\n                <Tooltip\n                  isAnimationActive={false}\n                  labelFormatter={this.formatLabel}\n                  cursor={{ strokeWidth: 1 }}\n                />\n\n                <Bar\n                  dataKey=\"barValue\"\n                  yAxisId=\"barValue\"\n                  barSize={20}\n                  fill={newBarFill}\n                  fillOpacity={1}\n                  name={formatMessage(messages.totalForPeriod, {\n                    period: formatMessage(messages[resolution]),\n                  })}\n                />\n                <Line\n                  type=\"monotone\"\n                  yAxisId=\"total\"\n                  dataKey=\"total\"\n                  activeDot={Boolean(serie && serie?.length < 31)}\n                  stroke={newLineColor}\n                  fill={newLineColor}\n                  strokeWidth={1}\n                  name={formatMessage(messages.total)}\n                />\n                <Legend\n                  wrapperStyle={{\n                    paddingTop: '20px',\n                  }}\n                />\n              </ComposedChart>\n            </StyledResponsiveContainer>\n          )}\n        </GraphCardInner>\n      </GraphCard>\n    );\n  }\n}\n\nexport default injectIntl<Props>(withTheme(LineBarChart as any) as any);\n"],"sourceRoot":""}