{"version":3,"sources":["webpack:///./app/resources/GetInvites.tsx","webpack:///./app/containers/Admin/invitations/all/Row.tsx","webpack:///./app/resources/GetUser.tsx","webpack:///./app/services/invites.ts","webpack:///./app/containers/Admin/invitations/all/index.tsx","webpack:///./app/containers/Admin/invitations/messages.ts"],"names":["GetInvites","props","state","queryParameters","omitBy","pageNumber","pageSize","sort","search","isNil","newSortAttribute","oldSort","oldSortAttribute","getSortAttribute","oldSortDirection","getSortDirection","queryParameters$","next","searchTerm","search$","inviteStatus","invite_status","initialSort","undefined","invitesList","sortAttribute","sortDirection","currentPage","lastPage","this","getQueryParameters","BehaviorSubject","Subject","pipe","distinctUntilChanged","x","y","queryParametersSearch$","map","merge","debounceTime","startWith","searchValue","isString","isEmpty","subscriptions","combineLatest","switchMap","oldPageNumber","newPageNumber","invitesStream","observable","invites","subscribe","setState","data","getPageNumberFromUrl","links","self","last","prevProps","_prevState","children","prevPropsWithoutChildren","nextPropsWithoutChildren","isEqual","forEach","subscription","unsubscribe","onChangeSorting","handleChangeSorting","onChangeSearchTerm","handleChangeSearchTerm","onChangePage","handleChangePage","onChangeFilterInviteStatus","handleChangeFilterInviteStatus","React","Component","inputProps","id","invite","relationships","invitee","user","inviteId","isNilOrError","Table","Row","key","className","attributes","token","Cell","email","first_name","last_name","FormattedDate","value","created_at","textAlign","Badge","FormattedMessage","messages","inviteStatusPending","color","colors","clGreen","inviteStatusAccepted","Popup","trigger","icon","content","confirmDelete","onClick","deleteInvite","on","position","GetUser","slug","resetOnChange","inputProps$","prev","tap","userByIdStream","userBySlugStream","of","streamParams","streams","get","apiEndpoint","API_PATH","cacheStream","delete","object","add","response","fetchAllWith","Container","styled","div","HeaderContainer","EmptyStateContainer","InfoIcon","Icon","clBlueDarker","InvitesTable","exporting","requestBlob","blob","saveAs","event","target","Input","onChange","size","buttonStyle","handleInvitesExport","processing","exportInvites","length","sortable","Header","HeaderCell","sorted","handleSortHeaderClick","width","name","invitedSince","deleteInviteTooltip","Body","Footer","fullWidth","colSpan","totalPages","loadPage","currentlyNoInvitesThatMatchSearch","PureComponent","defineMessages","helmetTitle","defaultMessage","helmetDescription","invitePeople","invitationSubtitle","importTab","textTab","emailListLabel","fileRequirements","visitSupportPage","supportPageLinkText","supportPage","importOptionsInfo","adminLabel","adminLabelTooltip","moderatorLabel","moderatorLabelTooltip","moderatorLabelTooltipLink","moderatorLabelTooltipLinkText","projectSelectorPlaceholder","localeLabel","invitationOptions","addToGroupLabel","inviteTextLabel","groupsPlaceholder","save","saveSuccess","saveErrorMessage","saveSuccessMessage","filetypeError","unknownError","invitesSupportPageURL","tabInviteUsers","tabAllInvitations","downloadFillOutTemplate","downloadTemplate","uploadCompletedFile","configureInvitations","required"],"mappings":"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","file":"127.4c98a83f52b1d9e17336.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Subscription,\n  Subject,\n  BehaviorSubject,\n  combineLatest,\n  merge,\n} from 'rxjs';\nimport {\n  map,\n  startWith,\n  distinctUntilChanged,\n  switchMap,\n  debounceTime,\n} from 'rxjs/operators';\nimport { IInviteData, invitesStream } from 'services/invites';\nimport shallowCompare from 'utils/shallowCompare';\nimport { isEqual, omitBy, isString, isEmpty, isNil } from 'lodash-es';\nimport {\n  getPageNumberFromUrl,\n  getSortAttribute,\n  getSortDirection,\n  SortDirection,\n} from 'utils/paginationUtils';\n\nexport type SortAttribute =\n  | 'email'\n  | 'last_name'\n  | 'created_at'\n  | 'invite_status';\nexport type Sort =\n  | 'email'\n  | '-email'\n  | 'last_name'\n  | '-last_name'\n  | 'created_at'\n  | '-created_at'\n  | 'invite_status'\n  | '-invite_status';\nexport type InviteStatus = 'pending' | 'accepted';\n\nexport interface InputProps {\n  pageNumber?: number;\n  pageSize?: number;\n  sort?: Sort;\n  search?: string;\n  inviteStatus?: string[];\n}\n\ninterface IQueryParameters {\n  'page[number]': number;\n  'page[size]': number;\n  sort: Sort;\n  search: string | undefined;\n  invite_status: InviteStatus | undefined;\n}\n\ntype children = (renderProps: GetInvitesChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  queryParameters: IQueryParameters;\n  invitesList: IInviteData[] | undefined | null;\n  sortAttribute: SortAttribute;\n  sortDirection: SortDirection;\n  currentPage: number;\n  lastPage: number;\n}\n\nexport type GetInvitesChildProps = State & {\n  onChangeSorting: (sortAttribute: SortAttribute) => void;\n  onChangeSearchTerm: (search: string) => void;\n  onChangePage: (pageNumber: number) => void;\n  onChangeFilterInviteStatus: (inviteStatus: InviteStatus) => void;\n};\n\nexport default class GetInvites extends React.Component<Props, State> {\n  queryParameters$: BehaviorSubject<IQueryParameters>;\n  search$: Subject<string | undefined>;\n  subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    const initialSort: Partial<Sort> = '-created_at';\n    this.state = {\n      // defaults\n      queryParameters: {\n        'page[number]': 1,\n        'page[size]': 20,\n        sort: initialSort,\n        search: undefined,\n        invite_status: undefined,\n      },\n      invitesList: undefined,\n      sortAttribute: getSortAttribute<Sort, SortAttribute>(initialSort),\n      sortDirection: getSortDirection<Sort>(initialSort),\n      currentPage: 1,\n      lastPage: 1,\n    };\n  }\n\n  componentDidMount() {\n    const queryParameters = this.getQueryParameters(this.state, this.props);\n\n    this.queryParameters$ = new BehaviorSubject(queryParameters);\n    this.search$ = new Subject();\n\n    const queryParameters$ = this.queryParameters$.pipe(\n      distinctUntilChanged((x, y) => shallowCompare(x, y))\n    );\n\n    const queryParametersSearch$ = queryParameters$.pipe(\n      map((queryParameters) => queryParameters.search),\n      distinctUntilChanged()\n    );\n\n    const search$ = merge(\n      this.search$.pipe(debounceTime(500)),\n      queryParametersSearch$\n    ).pipe(\n      startWith(queryParameters.search),\n      map((searchValue) =>\n        isString(searchValue) && !isEmpty(searchValue) ? searchValue : undefined\n      ),\n      distinctUntilChanged()\n    );\n\n    this.subscriptions = [\n      combineLatest(queryParameters$, search$)\n        .pipe(\n          map(([queryParameters, search]) => ({ ...queryParameters, search })),\n          switchMap((queryParameters) => {\n            const oldPageNumber = this.state.queryParameters['page[number]'];\n            const newPageNumber = queryParameters['page[number]'];\n            queryParameters['page[number]'] =\n              newPageNumber !== oldPageNumber ? newPageNumber : 1;\n\n            return invitesStream({\n              queryParameters,\n            }).observable.pipe(\n              map((invites) => ({ invites, queryParameters }))\n            );\n          })\n        )\n        .subscribe(({ invites, queryParameters }) => {\n          this.setState({\n            queryParameters,\n            invitesList: invites ? invites.data : null,\n            sortAttribute: getSortAttribute<Sort, SortAttribute>(\n              queryParameters.sort\n            ),\n            sortDirection: getSortDirection<Sort>(queryParameters.sort),\n            currentPage: getPageNumberFromUrl(invites.links.self) || 1,\n            lastPage: getPageNumberFromUrl(invites.links.last) || 1,\n          });\n        }),\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props, _prevState: State) {\n    const { children: _prevChildren, ...prevPropsWithoutChildren } = prevProps;\n    const { children: _nextChildren, ...nextPropsWithoutChildren } = this.props;\n\n    if (!isEqual(prevPropsWithoutChildren, nextPropsWithoutChildren)) {\n      const queryParameters = this.getQueryParameters(this.state, this.props);\n      this.queryParameters$.next(queryParameters);\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  getQueryParameters = (state: State, props: Props) => {\n    return {\n      ...state.queryParameters,\n      ...omitBy(\n        {\n          'page[number]': props.pageNumber,\n          'page[size]': props.pageSize,\n          sort: props.sort,\n          search: props.search,\n        },\n        isNil\n      ),\n    };\n  };\n\n  handleChangeSorting = (newSortAttribute: SortAttribute) => {\n    const { sort: oldSort } = this.state.queryParameters;\n    const oldSortAttribute = getSortAttribute<Sort, SortAttribute>(oldSort);\n    const oldSortDirection = getSortDirection<Sort>(oldSort);\n    const newSortDirection =\n      newSortAttribute === oldSortAttribute && oldSortDirection === 'descending'\n        ? 'ascending'\n        : 'descending';\n    const newSortDirectionSymbol = newSortDirection === 'descending' ? '-' : '';\n    const sort = `${newSortDirectionSymbol}${newSortAttribute}` as Sort;\n\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      sort,\n    });\n  };\n\n  handleChangeSearchTerm = (searchTerm) => {\n    this.search$.next(searchTerm);\n  };\n\n  handleChangePage = (pageNumber: number) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      'page[number]': pageNumber,\n    });\n  };\n\n  handleChangeFilterInviteStatus = (inviteStatus: InviteStatus) => {\n    this.queryParameters$.next({\n      ...this.state.queryParameters,\n      invite_status: inviteStatus,\n    });\n  };\n\n  render() {\n    const { children } = this.props;\n    return (children as children)({\n      ...this.state,\n      onChangeSorting: this.handleChangeSorting,\n      onChangeSearchTerm: this.handleChangeSearchTerm,\n      onChangePage: this.handleChangePage,\n      onChangeFilterInviteStatus: this.handleChangeFilterInviteStatus,\n    });\n  }\n}\n","import React from 'react';\nimport { colors } from 'utils/styleUtils';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport { FormattedDate } from 'react-intl';\nimport messages from '../messages';\nimport { IInviteData, deleteInvite } from 'services/invites';\nimport GetUser from 'resources/GetUser';\nimport { Table, Button as SemanticButton, Popup } from 'semantic-ui-react';\nimport { Badge } from 'cl2-component-library';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  invite: IInviteData;\n}\n\nexport default (inputProps: InputProps) => (\n  <GetUser id={inputProps.invite.relationships.invitee.data.id}>\n    {(user) => {\n      const handleOnDeleteInvite = (inviteId: string) => () =>\n        deleteInvite(inviteId);\n\n      if (isNilOrError(user)) return null;\n\n      return (\n        // To test invitation flow, we need the token, hence this className\n        <Table.Row\n          key={inputProps.invite.id}\n          className={inputProps.invite.attributes.token}\n        >\n          <Table.Cell>{user.attributes.email}</Table.Cell>\n          <Table.Cell>\n            <span>\n              {user.attributes.first_name} {user.attributes.last_name}\n            </span>\n          </Table.Cell>\n          <Table.Cell>\n            <FormattedDate value={inputProps.invite.attributes.created_at} />\n          </Table.Cell>\n          <Table.Cell textAlign=\"center\">\n            {user.attributes.invite_status === 'pending' ? (\n              <Badge>\n                <FormattedMessage {...messages.inviteStatusPending} />\n              </Badge>\n            ) : (\n              <Badge color={colors.clGreen}>\n                <FormattedMessage {...messages.inviteStatusAccepted} />\n              </Badge>\n            )}\n          </Table.Cell>\n          <Table.Cell textAlign=\"center\">\n            <Popup\n              trigger={<SemanticButton icon=\"trash\" />}\n              content={\n                <SemanticButton\n                  color=\"red\"\n                  content={<FormattedMessage {...messages.confirmDelete} />}\n                  onClick={handleOnDeleteInvite(inputProps.invite.id)}\n                />\n              }\n              on=\"click\"\n              position=\"bottom right\"\n            />\n          </Table.Cell>\n        </Table.Row>\n      );\n    }}\n  </GetUser>\n);\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { Subscription, BehaviorSubject, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport { IUserData, userBySlugStream, userByIdStream } from 'services/users';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  id?: string | null;\n  slug?: string | null;\n  resetOnChange?: boolean;\n}\n\ntype children = (renderProps: GetUserChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  user: IUserData | undefined | null | Error;\n}\n\nexport type GetUserChildProps = IUserData | undefined | null | Error;\n\nexport default class GetUser extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  static defaultProps = {\n    resetOnChange: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      user: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { id, slug, resetOnChange } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ id, slug });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          tap(() => resetOnChange && this.setState({ user: undefined })),\n          switchMap(({ id, slug }) => {\n            if (isString(id)) {\n              return userByIdStream(id).observable;\n            } else if (isString(slug)) {\n              return userBySlugStream(slug).observable;\n            }\n\n            return of(null);\n          })\n        )\n        .subscribe((user) => {\n          this.setState({ user: !isNilOrError(user) ? user.data : user });\n        }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { id, slug } = this.props;\n    this.inputProps$.next({ id, slug });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { user } = this.state;\n    return (children as children)(user);\n  }\n}\n","import { API_PATH } from 'containers/App/constants';\nimport streams, { IStreamParams } from 'utils/streams';\n\nexport interface IInviteData {\n  id: string;\n  type: 'invite';\n  attributes: {\n    token: 'string';\n    accepted_at: string;\n    updated_at: string;\n    created_at: string;\n    activate_invite_url: string;\n  };\n  relationships: {\n    invitee: {\n      data: {\n        id: string;\n        type: 'votable';\n      };\n    };\n    inviter: {\n      data: {\n        id: string;\n        type: 'user';\n      };\n    };\n  };\n}\n\nexport interface IInvites {\n  data: IInviteData[];\n  links: {\n    self: string;\n    first: string;\n    prev: string;\n    next: string;\n    last: string;\n  };\n}\n\nexport interface IInvite {\n  data: IInviteData;\n}\n\nexport interface IInviteError {\n  error: string;\n  raw_error: string;\n  row?: number | undefined;\n  rows?: number[] | undefined;\n  value?: number | string | undefined;\n  payload?: Record<string, any>;\n}\n\ntype AdminRole = {\n  type: 'admin';\n};\n\ntype ProjectModeratorRole = {\n  type: 'project_moderator';\n  project_id: string;\n};\n\ntype Roles = (AdminRole | ProjectModeratorRole)[] | null | undefined;\n\nexport interface INewBulkInvite {\n  locale?: string | null | undefined;\n  roles?: Roles;\n  group_ids?: string[] | null | undefined;\n  invite_text?: string | null | undefined;\n}\n\nexport interface INewBulkInviteEmails extends INewBulkInvite {\n  emails: string[];\n}\n\nexport interface INewBulkXLSXInviteXLSX extends INewBulkInvite {\n  xlsx: string;\n}\n\nexport function invitesStream(streamParams: IStreamParams | null = null) {\n  return streams.get<IInvites>({\n    apiEndpoint: `${API_PATH}/invites`,\n    ...streamParams,\n    cacheStream: false,\n  });\n}\n\nexport async function bulkInviteEmails(object: INewBulkInviteEmails) {\n  const response = await streams.add<IInvites>(\n    `${API_PATH}/invites/bulk_create`,\n    { invites: object }\n  );\n  await streams.fetchAllWith({ apiEndpoint: [`${API_PATH}/invites`] });\n  return response;\n}\n\nexport async function bulkInviteXLSX(object: INewBulkXLSXInviteXLSX) {\n  const response = await streams.add<IInvites>(\n    `${API_PATH}/invites/bulk_create_xlsx`,\n    { invites: object }\n  );\n  await streams.fetchAllWith({ apiEndpoint: [`${API_PATH}/invites`] });\n  return response;\n}\n\nexport function deleteInvite(inviteId: string) {\n  return streams.delete(`${API_PATH}/invites/${inviteId}`, inviteId);\n}\n","// libraries\nimport React from 'react';\nimport { isNilOrError } from 'utils/helperUtils';\nimport { isEmpty } from 'lodash-es';\nimport { saveAs } from 'file-saver';\n\n// components\nimport { Table, Input, Popup } from 'semantic-ui-react';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport Pagination from 'components/admin/Pagination';\nimport Button from 'components/UI/Button';\nimport { Icon } from 'cl2-component-library';\nimport Row from './Row';\n\n// resources\nimport GetInvites, {\n  GetInvitesChildProps,\n  SortAttribute,\n} from 'resources/GetInvites';\n\n// utils\nimport { API_PATH } from 'containers/App/constants';\nimport { requestBlob } from 'utils/request';\n\n// i18n\nimport messages from '../messages';\n\n// styling\nimport styled from 'styled-components';\nimport { colors } from 'utils/styleUtils';\n\nconst Container = styled.div`\n  th::after {\n    margin-top: -7px !important;\n  }\n`;\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0;\n  margin: 0;\n  margin-bottom: 30px;\n\n  .no-padding-right button {\n    padding-right: 0;\n  }\n`;\n\nconst EmptyStateContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst InfoIcon = styled(Icon)`\n  fill: ${colors.clBlueDarker};\n  width: 16px;\n  height: 16px;\n  cursor: pointer;\n\n  &:hover {\n    fill: #000;\n  }\n`;\n\nexport interface InputProps {}\n\ninterface Props extends InputProps, GetInvitesChildProps {}\n\ninterface State {\n  searchValue: string;\n  exporting: boolean;\n}\n\nclass InvitesTable extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      searchValue: '',\n      exporting: false,\n    };\n  }\n\n  handleInvitesExport = async () => {\n    try {\n      this.setState({ exporting: true });\n      const blob = await requestBlob(\n        `${API_PATH}/invites/as_xlsx`,\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      );\n      saveAs(blob, 'invites-export.xlsx');\n      this.setState({ exporting: false });\n    } catch (error) {\n      this.setState({ exporting: false });\n    }\n  };\n\n  handleSortHeaderClick = (sortAttribute: SortAttribute) => () => {\n    this.props.onChangeSorting(sortAttribute);\n  };\n\n  handleChangeSearchTerm = (event) => {\n    const searchValue = event.target.value;\n    this.setState({ searchValue });\n    this.props.onChangeSearchTerm(searchValue);\n  };\n\n  render() {\n    const { searchValue, exporting } = this.state;\n    const {\n      invitesList,\n      sortAttribute,\n      sortDirection,\n      currentPage,\n      lastPage,\n      onChangePage,\n    } = this.props;\n\n    if (!isNilOrError(invitesList)) {\n      return (\n        <Container className={this.props['className']}>\n          <HeaderContainer>\n            <Input\n              icon=\"search\"\n              onChange={this.handleChangeSearchTerm}\n              size=\"large\"\n            />\n\n            <Button\n              buttonStyle=\"cl-blue\"\n              icon=\"download\"\n              onClick={this.handleInvitesExport}\n              processing={exporting}\n            >\n              <FormattedMessage {...messages.exportInvites} />\n            </Button>\n          </HeaderContainer>\n\n          {invitesList.length > 0 && (\n            <Table sortable>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell\n                    sorted={\n                      sortAttribute === 'email' ? sortDirection : undefined\n                    }\n                    onClick={this.handleSortHeaderClick('email')}\n                    width={3}\n                  >\n                    <FormattedMessage {...messages.email} />\n                  </Table.HeaderCell>\n                  <Table.HeaderCell\n                    sorted={\n                      sortAttribute === 'last_name' ? sortDirection : undefined\n                    }\n                    onClick={this.handleSortHeaderClick('last_name')}\n                    width={2}\n                  >\n                    <FormattedMessage {...messages.name} />\n                  </Table.HeaderCell>\n                  <Table.HeaderCell\n                    sorted={\n                      sortAttribute === 'created_at' ? sortDirection : undefined\n                    }\n                    onClick={this.handleSortHeaderClick('created_at')}\n                    width={1}\n                  >\n                    <FormattedMessage {...messages.invitedSince} />\n                  </Table.HeaderCell>\n                  <Table.HeaderCell\n                    sorted={\n                      sortAttribute === 'invite_status'\n                        ? sortDirection\n                        : undefined\n                    }\n                    onClick={this.handleSortHeaderClick('invite_status')}\n                    width={1}\n                    textAlign=\"center\"\n                  >\n                    <FormattedMessage {...messages.inviteStatus} />\n                  </Table.HeaderCell>\n                  <Table.HeaderCell width={1} textAlign=\"center\">\n                    <FormattedMessage {...messages.deleteInvite} />\n                    <Popup\n                      content={\n                        <FormattedMessage {...messages.deleteInviteTooltip} />\n                      }\n                      trigger={\n                        <button>\n                          <InfoIcon name=\"info3\" />\n                        </button>\n                      }\n                    />\n                  </Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n\n              <Table.Body>\n                {invitesList.map((invite) => (\n                  <Row key={invite.id} invite={invite} />\n                ))}\n              </Table.Body>\n\n              {currentPage && lastPage && lastPage > 1 && (\n                <Table.Footer fullWidth={true}>\n                  <Table.Row>\n                    <Table.HeaderCell colSpan=\"6\">\n                      <Pagination\n                        currentPage={currentPage}\n                        totalPages={lastPage}\n                        loadPage={onChangePage}\n                      />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Footer>\n              )}\n            </Table>\n          )}\n\n          {isEmpty(invitesList) && !isEmpty(searchValue) && (\n            <EmptyStateContainer>\n              <FormattedMessage\n                {...messages.currentlyNoInvitesThatMatchSearch}\n              />\n            </EmptyStateContainer>\n          )}\n        </Container>\n      );\n    }\n\n    return null;\n  }\n}\n\nexport default (inputProps: InputProps) => (\n  <GetInvites>\n    {(invites) => <InvitesTable {...inputProps} {...invites} />}\n  </GetInvites>\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  helmetTitle: {\n    id: 'app.containers.Admin.Invitations.helmetTitle',\n    defaultMessage: 'Admin invitation dashboard',\n  },\n  helmetDescription: {\n    id: 'app.containers.Admin.Invitations.helmetDescription',\n    defaultMessage: 'Invite users to the platform',\n  },\n  name: {\n    id: 'app.containers.Admin.Invitations.name',\n    defaultMessage: 'Name',\n  },\n  email: {\n    id: 'app.containers.Admin.Invitations.email',\n    defaultMessage: 'Email',\n  },\n  invitePeople: {\n    id: 'app.containers.Admin.Invitations.invitePeople',\n    defaultMessage: 'Invite people via email',\n  },\n  invitationSubtitle: {\n    id: 'app.containers.Admin.Invitations.invitationSubtitle',\n    defaultMessage:\n      'Invite people to the platform at any point in time. They get a neutral invitation email with your logo, in which they are asked to register on the platform.',\n  },\n  importTab: {\n    id: 'app.containers.Admin.Invitations.importTab',\n    defaultMessage: 'Import email addresses',\n  },\n  textTab: {\n    id: 'app.containers.Admin.Invitations.textTab',\n    defaultMessage: 'Manually enter email addresses',\n  },\n  emailListLabel: {\n    id: 'app.containers.Admin.Invitations.emailListLabel',\n    defaultMessage:\n      'Manually enter the email addresses of the people you want to invite. Seperate each address by a comma.',\n  },\n  fileRequirements: {\n    id: 'app.containers.Admin.Invitations.fileRequirements',\n    defaultMessage:\n      'Important: In order to send the invitations correctly, no column can be removed from the import template. Leave unused columns empty.',\n  },\n  visitSupportPage: {\n    id: 'app.containers.Admin.Invitations.visitSupportPage',\n    defaultMessage:\n      '{supportPageLink} if you want more info about all supported columns in the import template.',\n  },\n  supportPageLinkText: {\n    id: 'app.containers.Admin.Invitations.supportPageLinkText',\n    defaultMessage: 'Visit the support page',\n  },\n  supportPage: {\n    id: 'app.containers.Admin.Invitations.supportPage',\n    defaultMessage: 'support page',\n  },\n  importOptionsInfo: {\n    id: 'app.containers.Admin.Invitations.importOptionsInfo',\n    defaultMessage: `\n      These options will only be taken into account when they are not defined in the Excel file.\n      Please visit the {supportPageLink} for more information.\n    `,\n  },\n  adminLabel: {\n    id: 'app.containers.Admin.Invitations.adminLabel',\n    defaultMessage: 'Grant administrator rights to the invited people?',\n  },\n  adminLabelTooltip: {\n    id: 'app.containers.Admin.Invitations.adminLabelTooltip',\n    defaultMessage:\n      'When toggled on, people receiving and accepting your invitation will also have access to all admin settings of the platform.',\n  },\n  moderatorLabel: {\n    id: 'app.containers.Admin.Invitations.moderatorLabel',\n    defaultMessage: 'Grant project moderator rights to the invited people?',\n  },\n  moderatorLabelTooltip: {\n    id: 'app.containers.Admin.Invitations.moderatorLabelTooltip',\n    defaultMessage:\n      'When toggled on, people receiving and accepting your invitation will also have moderator rights to one or multiple projects. More info on the project moderator role {moderatorLabelTooltipLink}.',\n  },\n  moderatorLabelTooltipLink: {\n    id: 'app.containers.Admin.Invitations.moderatorLabelTooltipLink',\n    defaultMessage:\n      'http://support.citizenlab.co/en-your-citizenlab-platform-step-by-step/set-up/pointing-out-the-right-project-moderators',\n  },\n  moderatorLabelTooltipLinkText: {\n    id: 'app.containers.Admin.Invitations.moderatorLabelTooltipLinkText',\n    defaultMessage: 'here',\n  },\n  projectSelectorPlaceholder: {\n    id: 'app.containers.Admin.Invitations.projectSelectorPlaceholder',\n    defaultMessage: 'No project(s) selected',\n  },\n  localeLabel: {\n    id: 'app.containers.Admin.Invitations.localeLabel',\n    defaultMessage: 'Select the default language for the invited people',\n  },\n  invitationOptions: {\n    id: 'app.containers.Admin.Invitations.invitationOptions',\n    defaultMessage: 'Invitation options',\n  },\n  addToGroupLabel: {\n    id: 'app.containers.Admin.Invitations.addToGroupLabel',\n    defaultMessage: 'Add these people to specific manual user groups',\n  },\n  inviteTextLabel: {\n    id: 'app.containers.Admin.Invitations.inviteTextLabel',\n    defaultMessage:\n      'Optionally type a message that will be added to the invitation mail.',\n  },\n  groupsPlaceholder: {\n    id: 'app.containers.Admin.Invitations.groupsPlaceholder',\n    defaultMessage: 'No group selected',\n  },\n  processing: {\n    id: 'app.containers.Admin.Invitations.processing',\n    defaultMessage: 'Sending out invitations. Please wait...',\n  },\n  save: {\n    id: 'app.containers.Admin.Invitations.save',\n    defaultMessage: 'Send out invitations',\n  },\n  saveSuccess: {\n    id: 'app.containers.Admin.Invitations.saveSuccess',\n    defaultMessage: 'Success!',\n  },\n  saveErrorMessage: {\n    id: 'app.containers.Admin.Invitations.saveErrorMessage',\n    defaultMessage: `\n      One or more errors occured.\n      Therefore no invitations were sent out.\n      Please correct the error(s) listed below and try again.\n    `,\n  },\n  saveSuccessMessage: {\n    id: 'app.containers.Admin.Invitations.saveSuccessMessage',\n    defaultMessage: 'Invitation successfully sent out.',\n  },\n  inviteStatus: {\n    id: 'app.containers.Admin.Invitations.inviteStatus',\n    defaultMessage: 'Status',\n  },\n  invitedSince: {\n    id: 'app.containers.Admin.Invitations.invitedSince',\n    defaultMessage: 'Invited',\n  },\n  deleteInvite: {\n    id: 'app.containers.Admin.Invitations.deleteInvite',\n    defaultMessage: 'Delete',\n  },\n  deleteInviteTooltip: {\n    id: 'app.containers.Admin.Invitations.deleteInviteTooltip',\n    defaultMessage:\n      'Cancelling an invitation will allow you to resend an invitation to these persons.',\n  },\n  exportInvites: {\n    id: 'app.containers.Admin.Invitations.exportInvites',\n    defaultMessage: 'Export all invitations',\n  },\n  inviteStatusPending: {\n    id: 'app.containers.Admin.Invitations.inviteStatusPending',\n    defaultMessage: 'Pending',\n  },\n  inviteStatusAccepted: {\n    id: 'app.containers.Admin.Invitations.inviteStatusAccepted',\n    defaultMessage: 'Accepted',\n  },\n  confirmDelete: {\n    id: 'app.containers.Admin.Invitations.confirmDelete',\n    defaultMessage: \"Yes, I'm sure\",\n  },\n  currentlyNoInvitesThatMatchSearch: {\n    id: 'app.containers.Admin.Invitations.currentlyNoInvitesThatMatchSearch',\n    defaultMessage: 'There are no invites that match your search',\n  },\n  filetypeError: {\n    id: 'app.containers.Admin.Invitations.filetypeError',\n    defaultMessage: 'Incorrect file type. Only XLSX files are supported.',\n  },\n  unknownError: {\n    id: 'app.containers.Admin.Invitations.unknownError',\n    defaultMessage: 'Something went wrong. Please try again later.',\n  },\n  invitesSupportPageURL: {\n    id: 'app.containers.Admin.Invitations.invitesSupportPageURL',\n    defaultMessage:\n      'http://support.citizenlab.co/en/articles/1771605-invite-people-to-the-platform',\n  },\n  tabInviteUsers: {\n    id: 'app.containers.Admin.Invitations.tabInviteUsers',\n    defaultMessage: 'Invite users',\n  },\n  tabAllInvitations: {\n    id: 'app.containers.Admin.Invitations.tabAllInvitations',\n    defaultMessage: 'All invitations',\n  },\n  downloadFillOutTemplate: {\n    id: 'app.containers.Admin.Invitations.downloadFillOutTemplate',\n    defaultMessage: '1. Download and fill out the template',\n  },\n  downloadTemplate: {\n    id: 'app.containers.Admin.Invitations.downloadTemplate',\n    defaultMessage: 'Download template',\n  },\n  uploadCompletedFile: {\n    id: 'app.containers.Admin.Invitations.uploadCompletedFile',\n    defaultMessage: '2. Upload your completed template file',\n  },\n  configureInvitations: {\n    id: 'app.containers.Admin.Invitations.configureInvitations',\n    defaultMessage: '3. Configure the invitations',\n  },\n  required: {\n    id: 'UI.FormComponents.required',\n    defaultMessage: 'required',\n  },\n});\n"],"sourceRoot":""}