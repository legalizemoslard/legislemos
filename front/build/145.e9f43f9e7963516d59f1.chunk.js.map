{"version":3,"sources":["webpack:///./app/containers/Admin/settings/areas/messages.ts","webpack:///./app/containers/Admin/settings/areas/all/AreaTermConfig.tsx","webpack:///./app/containers/Admin/settings/areas/all/index.tsx"],"names":["defineMessages","subtitleAreas","id","defaultMessage","titleAreas","subtitleTerminology","deleteButtonLabel","editButtonLabel","addAreaButton","areaDeletionConfirmation","fieldTitle","fieldTitleTooltip","fieldDescription","fieldDescriptionTooltip","editFormTitle","terminologyTooltip","areaTerm","areaTermPlaceholder","areasTerm","areasTermPlaceholder","areasTermsSave","Container","styled","form","props","theme","borderRadius","AreaTermConfig","tenant","state","isNilOrError","setState","submitState","updateAppConfiguration","settings","core","areas_term","area_term","then","error","changedAreaTerm","mapValues","lowerCase","changedAreasTerm","undefined","this","className","formatMessage","intl","attributes","onSubmit","save","SectionField","type","label","FormattedMessage","messages","valueMultiloc","onChange","handleAreaChange","placeholder","handleAreasChange","ButtonWrapper","processing","onClick","buttonStyle","PureComponent","AreaTermConfigWithHocs","injectIntl","inputProps","AreaList","terminologyOpened","areaId","event","deleteMessage","preventDefault","window","confirm","deleteArea","newOrder","reorderArea","areas","Section","SectionTitle","SectionDescription","opened","onToggle","handleToggleTerminology","labelTooltipText","icon","linkTo","SortableList","items","onReorder","handleReorderArea","key","length","itemsList","handleDragRow","handleDropRow","map","item","index","SortableRow","moveRow","dropRow","lastItem","TextCell","value","title_multiloc","handleDeleteClick","React","AreaListWithHoCs"],"mappings":"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","file":"145.e9f43f9e7963516d59f1.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  subtitleAreas: {\n    id: 'app.containers.AdminPage.SettingsPage.subtitleAreas',\n    defaultMessage:\n      'Define the geographical areas (neighbourhoods, suburbs, â€¦) that you can ask users who register on the platform. Areas can be linked to projects and can be used to create Smart Groups and give particular groups access to certain projects.',\n  },\n  titleAreas: {\n    id: 'app.containers.AdminPage.SettingsPage.titleAreas',\n    defaultMessage: 'Areas configuration',\n  },\n  subtitleTerminology: {\n    id: 'app.containers.AdminPage.SettingsPage.subtitleTerminology',\n    defaultMessage: 'Terminology',\n  },\n  deleteButtonLabel: {\n    id: 'app.containers.AdminPage.SettingsPage.areas.deleteButtonLabel',\n    defaultMessage: 'Delete',\n  },\n  editButtonLabel: {\n    id: 'app.containers.AdminPage.SettingsPage.areas.editButtonLabel',\n    defaultMessage: 'Edit',\n  },\n  addAreaButton: {\n    id: 'app.containers.AdminPage.SettingsPage.addAreaButton',\n    defaultMessage: 'Add area',\n  },\n  areaDeletionConfirmation: {\n    id: 'app.containers.AdminPage.SettingsPage.areaDeletionConfirmation',\n    defaultMessage: 'Are you sure you want to delete this area?',\n  },\n  fieldTitle: {\n    id: 'app.containers.AdminPage.SettingsPage.fieldTitle',\n    defaultMessage: 'Area name',\n  },\n  fieldTitleTooltip: {\n    id: 'app.containers.AdminPage.SettingsPage.fieldTitleTooltip',\n    defaultMessage:\n      'The name you choose for each area will be visible for citizens during signup and when filtering projects.',\n  },\n  fieldDescription: {\n    id: 'app.containers.AdminPage.SettingsPage.fieldDescription',\n    defaultMessage: 'Area description',\n  },\n  fieldDescriptionTooltip: {\n    id: 'app.containers.AdminPage.SettingsPage.fieldDescriptionTooltip',\n    defaultMessage:\n      'This description is only for internal collaboration with other administrators, to have a clear understanding what is meant by each area.',\n  },\n  editFormTitle: {\n    id: 'app.containers.AdminPage.SettingsPage.editFormTitle',\n    defaultMessage: 'Edit area',\n  },\n  terminologyTooltip: {\n    id: 'app.containers.AdminPage.SettingsPage.terminologyTooltip',\n    defaultMessage:\n      'How should areas be called towards users? e.g. neighbourhoods, quarters, counties, ...',\n  },\n  areaTerm: {\n    id: 'app.containers.AdminPage.SettingsPage.areaTerm',\n    defaultMessage: 'Term for one area (singular)',\n  },\n  areaTermPlaceholder: {\n    id: 'app.containers.AdminPage.SettingsPage.areaTermPlaceholder',\n    defaultMessage: 'area',\n  },\n  areasTerm: {\n    id: 'app.containers.AdminPage.SettingsPage.areasTerm',\n    defaultMessage: 'Term for multiple areas (plural)',\n  },\n  areasTermPlaceholder: {\n    id: 'app.containers.AdminPage.SettingsPage.areasTermPlaceholder',\n    defaultMessage: 'areas',\n  },\n  areasTermsSave: {\n    id: 'app.containers.AdminPage.SettingsPage.areasTermsSave',\n    defaultMessage: 'Save',\n  },\n});\n","import React, { PureComponent } from 'react';\nimport { mapValues, lowerCase } from 'lodash-es';\nimport { isNilOrError } from 'utils/helperUtils';\n\n// components\nimport Button from 'components/UI/Button';\nimport { SectionField } from 'components/admin/Section';\nimport InputMultilocWithLocaleSwitcher from 'components/UI/InputMultilocWithLocaleSwitcher';\nimport { ButtonWrapper } from 'components/admin/PageWrapper';\n\n// resources\nimport GetAppConfiguration, {\n  GetAppConfigurationChildProps,\n} from 'resources/GetAppConfiguration';\nimport { updateAppConfiguration } from 'services/appConfiguration';\n\n// i18n\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\nimport { InjectedIntlProps } from 'react-intl';\nimport { Multiloc } from 'typings';\nimport messages from '../messages';\n\n// styling\nimport styled from 'styled-components';\n\nconst Container = styled.form`\n  width: 100%;\n  max-width: 500px;\n  padding: 25px;\n  border-radius: ${(props: any) => props.theme.borderRadius};\n  border: solid 1px #ddd;\n  background: #fff;\n`;\n\ninterface InputProps {\n  className?: string;\n}\n\ninterface DataProps {\n  tenant: GetAppConfigurationChildProps;\n}\n\ninterface Props extends DataProps, InputProps, InjectedIntlProps {}\n\ninterface State {\n  areasTerm?: Multiloc;\n  areaTerm?: Multiloc;\n  submitState: 'enabled' | 'saving' | 'error' | 'success';\n}\n\nclass AreaTermConfig extends PureComponent<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      areasTerm: undefined,\n      areaTerm: undefined,\n      submitState: 'enabled',\n    };\n  }\n\n  save = () => {\n    const { tenant } = this.props;\n    const { areasTerm, areaTerm } = this.state;\n    if (!isNilOrError(tenant)) {\n      this.setState({ submitState: 'saving' });\n      try {\n        updateAppConfiguration({\n          settings: {\n            core: {\n              areas_term: areasTerm,\n              area_term: areaTerm,\n            },\n          },\n        }).then(() => {\n          this.setState({ submitState: 'success' });\n        });\n      } catch (error) {\n        this.setState({ submitState: 'error' });\n      }\n    }\n  };\n\n  handleAreaChange = (changedAreaTerm: Multiloc) => {\n    this.setState({\n      areaTerm: mapValues(changedAreaTerm, lowerCase),\n    });\n  };\n\n  handleAreasChange = (changedAreasTerm: Multiloc) => {\n    this.setState({\n      areasTerm: mapValues(changedAreasTerm, lowerCase),\n    });\n  };\n\n  render() {\n    const {\n      tenant,\n      className,\n      intl: { formatMessage },\n    } = this.props;\n    const { submitState } = this.state;\n\n    if (isNilOrError(tenant)) return null;\n\n    const areasTerm =\n      this.state.areasTerm || tenant.attributes.settings.core.areas_term || {};\n    const areaTerm =\n      this.state.areaTerm || tenant.attributes.settings.core.area_term || {};\n\n    return (\n      <Container onSubmit={this.save} className={className}>\n        <SectionField>\n          <InputMultilocWithLocaleSwitcher\n            type=\"text\"\n            id=\"area_term\"\n            label={<FormattedMessage {...messages.areaTerm} />}\n            valueMultiloc={areaTerm}\n            onChange={this.handleAreaChange}\n            placeholder={formatMessage(messages.areaTermPlaceholder)}\n          />\n        </SectionField>\n\n        <SectionField>\n          <InputMultilocWithLocaleSwitcher\n            type=\"text\"\n            id=\"areas_term\"\n            label={<FormattedMessage {...messages.areasTerm} />}\n            valueMultiloc={areasTerm}\n            onChange={this.handleAreasChange}\n            placeholder={formatMessage(messages.areasTermPlaceholder)}\n          />\n        </SectionField>\n\n        <ButtonWrapper>\n          <Button\n            processing={submitState === 'saving'}\n            onClick={this.save}\n            buttonStyle=\"cl-blue\"\n            type=\"submit\"\n          >\n            <FormattedMessage {...messages.areasTermsSave} />\n          </Button>\n        </ButtonWrapper>\n      </Container>\n    );\n  }\n}\n\nconst AreaTermConfigWithHocs = injectIntl(AreaTermConfig);\n\nexport default (inputProps: InputProps) => (\n  <GetAppConfiguration>\n    {(tenant) => <AreaTermConfigWithHocs {...inputProps} tenant={tenant} />}\n  </GetAppConfiguration>\n);\n","import React from 'react';\nimport { InjectedIntlProps } from 'react-intl';\nimport { isNilOrError } from 'utils/helperUtils';\n\nimport GetAreas, { GetAreasChildProps } from 'resources/GetAreas';\nimport { reorderArea, IAreaData, deleteArea } from 'services/areas';\n\nimport messages from '../messages';\nimport T from 'components/T';\nimport { FormattedMessage, injectIntl } from 'utils/cl-intl';\n\nimport {\n  SortableList,\n  SortableRow,\n  TextCell,\n} from 'components/admin/ResourceList';\nimport {\n  Section,\n  SectionDescription,\n  SectionTitle,\n} from 'components/admin/Section';\nimport Button from 'components/UI/Button';\nimport { ButtonWrapper } from 'components/admin/PageWrapper';\nimport AreaTermConfig from './AreaTermConfig';\nimport Collapse from 'components/UI/Collapse';\n\ninterface InputProps {}\n\ninterface DataProps {\n  areas: GetAreasChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\ninterface State {\n  terminologyOpened: boolean;\n}\n\nclass AreaList extends React.PureComponent<Props & InjectedIntlProps, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      terminologyOpened: false,\n    };\n  }\n\n  handleToggleTerminology = () => {\n    this.setState(({ terminologyOpened }) => ({\n      terminologyOpened: !terminologyOpened,\n    }));\n  };\n\n  handleDeleteClick = (areaId: string) => (event: React.FormEvent<any>) => {\n    const deleteMessage = this.props.intl.formatMessage(\n      messages.areaDeletionConfirmation\n    );\n    event.preventDefault();\n\n    if (window.confirm(deleteMessage)) {\n      deleteArea(areaId);\n    }\n  };\n\n  handleReorderArea = (areaId: string, newOrder: number) => {\n    reorderArea(areaId, newOrder);\n  };\n\n  render() {\n    const { terminologyOpened } = this.state;\n    const {\n      areas,\n      intl: { formatMessage },\n    } = this.props;\n\n    if (isNilOrError(areas)) return null;\n\n    return (\n      <Section>\n        <SectionTitle>\n          <FormattedMessage {...messages.titleAreas} />\n        </SectionTitle>\n        <SectionDescription>\n          <FormattedMessage {...messages.subtitleAreas} />\n        </SectionDescription>\n\n        <Collapse\n          opened={terminologyOpened}\n          onToggle={this.handleToggleTerminology}\n          label={formatMessage(messages.subtitleTerminology)}\n          labelTooltipText={formatMessage(messages.terminologyTooltip)}\n        >\n          <AreaTermConfig />\n        </Collapse>\n\n        <ButtonWrapper>\n          <Button\n            buttonStyle=\"cl-blue\"\n            icon=\"plus-circle\"\n            linkTo=\"/admin/settings/areas/new\"\n          >\n            <FormattedMessage {...messages.addAreaButton} />\n          </Button>\n        </ButtonWrapper>\n        <SortableList\n          items={areas}\n          onReorder={this.handleReorderArea}\n          className=\"areas-list e2e-admin-areas-list\"\n          id=\"e2e-admin-areas-list\"\n          key={areas.length}\n        >\n          {({ itemsList, handleDragRow, handleDropRow }) => (\n            <>\n              {itemsList.map((item: IAreaData, index: number) => {\n                return (\n                  <SortableRow\n                    key={item.id}\n                    id={item.id}\n                    index={index}\n                    moveRow={handleDragRow}\n                    dropRow={handleDropRow}\n                    lastItem={index === areas.length - 1}\n                  >\n                    <TextCell className=\"expand\">\n                      <T value={item.attributes.title_multiloc} />\n                    </TextCell>\n                    <Button\n                      onClick={this.handleDeleteClick(item.id)}\n                      buttonStyle=\"text\"\n                      icon=\"delete\"\n                    >\n                      <FormattedMessage {...messages.deleteButtonLabel} />\n                    </Button>\n                    <Button\n                      linkTo={`/admin/settings/areas/${item.id}`}\n                      buttonStyle=\"secondary\"\n                      icon=\"edit\"\n                    >\n                      <FormattedMessage {...messages.editButtonLabel} />\n                    </Button>\n                  </SortableRow>\n                );\n              })}\n            </>\n          )}\n        </SortableList>\n      </Section>\n    );\n  }\n}\n\nconst AreaListWithHoCs = injectIntl<Props>(AreaList);\n\nexport default () => (\n  <GetAreas>{(areas) => <AreaListWithHoCs areas={areas} />}</GetAreas>\n);\n"],"sourceRoot":""}