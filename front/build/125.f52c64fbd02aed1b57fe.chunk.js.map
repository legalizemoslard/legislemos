{"version":3,"sources":["webpack:///./app/modules/commercial/custom_topics/admin/containers/TopicsSettings/TopicForm/index.tsx","webpack:///./app/modules/commercial/custom_topics/admin/containers/TopicsSettings/Edit/index.tsx","webpack:///./app/resources/GetTopic.tsx","webpack:///./app/modules/commercial/custom_topics/admin/containers/TopicsSettings/messages.ts","webpack:///./app/components/UI/GoBackButton/messages.ts","webpack:///./app/components/UI/GoBackButton/index.tsx"],"names":["TopicForm","this","props","isSubmitting","errors","isValid","touched","status","formatMessage","intl","Form","Section","SectionField","Field","name","component","FormikInputMultilocWithLocaleSwitcher","label","FormattedMessage","messages","fieldTopicTitle","labelTooltipText","fieldTopicTitleTooltip","id","title_multiloc","fieldName","apiErrors","React","Component","injectIntl","Edit","values","setErrors","setSubmitting","setStatus","topic","isNilOrError","updateTopic","then","clHistory","push","catch","errorResponse","isCLErrorJSON","json","onClick","goBack","SectionTitle","editTopicFormTitle","Formik","initialValues","attributes","description_multiloc","render","renderFn","onSubmit","handleSubmit","PureComponent","withRouter","inputProps","params","topicId","GetTopic","state","undefined","inputProps$","BehaviorSubject","subscriptions","pipe","distinctUntilChanged","prev","next","filter","isString","switchMap","topicByIdStream","observable","subscribe","setState","data","forEach","subscription","unsubscribe","children","defineMessages","descriptionTopicManagerText","defaultMessage","titleTopicManager","deleteButtonLabel","editButtonLabel","addTopicButton","defaultTopic","confirmHeader","deleteTopicConfirmation","cancel","delete","projectsSettings","Container","styled","div","GoBackButton","className","buttonStyle","icon","size","padding","text"],"mappings":"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","file":"125.f52c64fbd02aed1b57fe.chunk.js","sourcesContent":["import React from 'react';\n\n// i18n\nimport { injectIntl, FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\nimport { InjectedIntlProps } from 'react-intl';\n\nimport { Form, Field, InjectedFormikProps } from 'formik';\nimport FormikInputMultilocWithLocaleSwitcher from 'components/UI/FormikInputMultilocWithLocaleSwitcher';\nimport FormikSubmitWrapper from 'components/admin/FormikSubmitWrapper';\n\nimport { Section, SectionField } from 'components/admin/Section';\nimport Error from 'components/UI/Error';\n\n// typings\nimport { Multiloc } from 'typings';\n\nexport interface Props {}\n\nexport interface FormValues {\n  title_multiloc: Multiloc;\n  description_multiloc: Multiloc;\n}\n\nclass TopicForm extends React.Component<\n  InjectedFormikProps<Props & InjectedIntlProps, FormValues>\n> {\n  render() {\n    const {\n      isSubmitting,\n      errors,\n      isValid,\n      touched,\n      status,\n      intl: { formatMessage },\n    } = this.props;\n\n    return (\n      <Form>\n        <Section>\n          <SectionField>\n            <Field\n              name=\"title_multiloc\"\n              component={FormikInputMultilocWithLocaleSwitcher}\n              label={<FormattedMessage {...messages.fieldTopicTitle} />}\n              labelTooltipText={formatMessage(messages.fieldTopicTitleTooltip)}\n              id=\"e2e-topic-name\"\n            />\n            {touched.title_multiloc && (\n              <Error\n                fieldName=\"title_multiloc\"\n                apiErrors={errors.title_multiloc as any}\n              />\n            )}\n          </SectionField>\n        </Section>\n\n        <FormikSubmitWrapper {...{ isValid, isSubmitting, status, touched }} />\n      </Form>\n    );\n  }\n}\n\nexport default injectIntl<Props>(TopicForm);\n","import React from 'react';\nimport { withRouter, WithRouterProps } from 'react-router';\nimport { isNilOrError } from 'utils/helperUtils';\nimport clHistory from 'utils/cl-router/history';\n\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from '../messages';\n\nimport GetTopic, { GetTopicChildProps } from 'resources/GetTopic';\nimport { updateTopic } from 'services/topics';\n\nimport GoBackButton from 'components/UI/GoBackButton';\nimport { Section, SectionTitle } from 'components/admin/Section';\n\nimport { Formik } from 'formik';\nimport TopicForm, { FormValues } from '../TopicForm';\n\nimport { CLErrorsJSON } from 'typings';\nimport { isCLErrorJSON } from 'utils/errorUtils';\ninterface InputProps {}\ninterface DataProps {\n  topic: GetTopicChildProps;\n}\n\ninterface Props extends InputProps, DataProps {}\n\nclass Edit extends React.PureComponent<Props> {\n  handleSubmit = (\n    values: FormValues,\n    { setErrors, setSubmitting, setStatus }\n  ) => {\n    const { topic } = this.props;\n\n    if (isNilOrError(topic)) return;\n\n    updateTopic(topic.id, {\n      ...values,\n    })\n      .then(() => {\n        clHistory.push('/admin/settings/topics');\n      })\n      .catch((errorResponse) => {\n        if (isCLErrorJSON(errorResponse)) {\n          const apiErrors = (errorResponse as CLErrorsJSON).json.errors;\n          setErrors(apiErrors);\n        } else {\n          setStatus('error');\n        }\n        setSubmitting(false);\n      });\n  };\n\n  renderFn = (props) => {\n    return <TopicForm {...props} />;\n  };\n\n  goBack = () => {\n    clHistory.push('/admin/settings/topics');\n  };\n\n  render() {\n    const { topic } = this.props;\n    return (\n      <Section>\n        <GoBackButton onClick={this.goBack} />\n        <SectionTitle>\n          <FormattedMessage {...messages.editTopicFormTitle} />\n        </SectionTitle>\n        {!isNilOrError(topic) && (\n          <Formik\n            initialValues={{\n              title_multiloc: topic.attributes.title_multiloc,\n              description_multiloc: topic.attributes.description_multiloc,\n            }}\n            render={this.renderFn}\n            onSubmit={this.handleSubmit}\n          />\n        )}\n      </Section>\n    );\n  }\n}\n\nexport default withRouter((inputProps: InputProps & WithRouterProps) => (\n  <GetTopic id={inputProps.params.topicId}>\n    {(topic) => <Edit topic={topic} />}\n  </GetTopic>\n));\n","import React from 'react';\nimport { isString } from 'lodash-es';\nimport { Subscription, BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, switchMap, filter } from 'rxjs/operators';\nimport shallowCompare from 'utils/shallowCompare';\nimport { ITopicData, topicByIdStream } from 'services/topics';\nimport { isNilOrError } from 'utils/helperUtils';\n\ninterface InputProps {\n  id: string;\n}\n\ntype children = (renderProps: GetTopicChildProps) => JSX.Element | null;\n\ninterface Props extends InputProps {\n  children?: children;\n}\n\ninterface State {\n  topic: ITopicData | undefined | null | Error;\n}\n\nexport type GetTopicChildProps = ITopicData | undefined | null | Error;\n\nexport default class GetTopic extends React.Component<Props, State> {\n  private inputProps$: BehaviorSubject<InputProps>;\n  private subscriptions: Subscription[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      topic: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { id } = this.props;\n\n    this.inputProps$ = new BehaviorSubject({ id });\n\n    this.subscriptions = [\n      this.inputProps$\n        .pipe(\n          distinctUntilChanged((prev, next) => shallowCompare(prev, next)),\n          filter(({ id }) => isString(id)),\n          switchMap(({ id }) => topicByIdStream(id).observable)\n        )\n        .subscribe((topic) =>\n          this.setState({ topic: !isNilOrError(topic) ? topic.data : topic })\n        ),\n    ];\n  }\n\n  componentDidUpdate() {\n    const { id } = this.props;\n    this.inputProps$.next({ id });\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { topic } = this.state;\n    return (children as children)(topic);\n  }\n}\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  descriptionTopicManagerText: {\n    id: 'app.containers.AdminPage.SettingsPage.descriptionTopicManagerText',\n    defaultMessage:\n      'Topics can be added to help categorise inputs. Here you can add and delete topics that you would like to use on your platform. You can add the topics to specific projects in the {adminProjectsLink}.',\n  },\n  titleTopicManager: {\n    id: 'app.containers.AdminPage.SettingsPage.titleTopicManager',\n    defaultMessage: 'Topic manager',\n  },\n  deleteButtonLabel: {\n    id: 'app.containers.AdminPage.SettingsPage.deleteTopicButtonLabel',\n    defaultMessage: 'Delete',\n  },\n  editButtonLabel: {\n    id: 'app.containers.AdminPage.SettingsPage.editTopicButtonLabel',\n    defaultMessage: 'Edit',\n  },\n  addTopicButton: {\n    id: 'app.containers.AdminPage.SettingsPage.addTopicButton',\n    defaultMessage: 'Add topic',\n  },\n  fieldTopicTitle: {\n    id: 'app.containers.AdminPage.SettingsPage.fieldTopicTitle',\n    defaultMessage: 'Topic name',\n  },\n  fieldTopicTitleTooltip: {\n    id: 'app.containers.AdminPage.SettingsPage.fieldTopicTitleTooltip',\n    defaultMessage:\n      'The name you choose for each topic will be visible for citizens during signup and when filtering projects.',\n  },\n  editTopicFormTitle: {\n    id: 'app.containers.AdminPage.SettingsPage.editTopicFormTitle',\n    defaultMessage: 'Edit topic',\n  },\n  defaultTopic: {\n    id: 'app.containers.AdminPage.SettingsPage.defaultTopic',\n    defaultMessage: 'Default topic',\n  },\n  confirmHeader: {\n    id: 'app.containers.AdminPage.SettingsPage.confirmHeader',\n    defaultMessage: 'Are you sure you want to delete this topic?',\n  },\n  deleteTopicConfirmation: {\n    id: 'app.containers.AdminPage.SettingsPage.deleteTopicConfirmation',\n    defaultMessage:\n      'This will delete the topic, including from all existing inputs. This change will apply to all projects.',\n  },\n  cancel: {\n    id: 'app.containers.AdminPage.SettingsPage.cancel',\n    defaultMessage: 'Cancel',\n  },\n  delete: {\n    id: 'app.containers.AdminPage.SettingsPage.delete',\n    defaultMessage: 'Delete',\n  },\n  projectsSettings: {\n    id: 'app.containers.AdminPage.SettingsPage.projectsSettings',\n    defaultMessage: 'project settings',\n  },\n});\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  goBack: {\n    id: 'app.components.GoBackButton.group.edit.goBack',\n    defaultMessage: 'Go back',\n  },\n});\n","import React, { PureComponent, FormEvent } from 'react';\nimport styled from 'styled-components';\nimport Button from 'components/UI/Button';\nimport { FormattedMessage } from 'utils/cl-intl';\nimport messages from './messages';\n\nconst Container = styled.div`\n  display: inline-block;\n`;\n\ntype Props = {\n  onClick: (arg: FormEvent) => void;\n  className?: string;\n};\n\ninterface State {}\n\nexport default class GoBackButton extends PureComponent<Props, State> {\n  render() {\n    const { onClick, className } = this.props;\n\n    return (\n      <Container className={className || ''}>\n        <Button\n          onClick={onClick}\n          buttonStyle=\"text\"\n          icon=\"arrow-back\"\n          size=\"2\"\n          padding=\"0px\"\n          text={<FormattedMessage {...messages.goBack} />}\n        />\n      </Container>\n    );\n  }\n}\n"],"sourceRoot":""}